import { TLObject, BytesIO, Primitive } from './core/index.js';
var Raw;
((Raw2) => {
  Raw2.Layer = 179;
  Raw2.HighestSCLayer = 144;
  class ResPQ extends TLObject {
    nonce;
    serverNonce;
    pq;
    serverPublicKeyFingerprints;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ResPQ';
      this.constructorId = 85337187;
      this.subclassOfId = 2020181688;
      this._slots = ['nonce', 'serverNonce', 'pq', 'serverPublicKeyFingerprints'];
      this.nonce = params.nonce;
      this.serverNonce = params.serverNonce;
      this.pq = params.pq;
      this.serverPublicKeyFingerprints = params.serverPublicKeyFingerprints;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let nonce = await Primitive.Int128.read(b);
      let serverNonce = await Primitive.Int128.read(b);
      let pq = await Primitive.Bytes.read(b);
      let serverPublicKeyFingerprints = await TLObject.read(b, Primitive.Long);
      return new Raw2.ResPQ({
        nonce,
        serverNonce,
        pq,
        serverPublicKeyFingerprints,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.nonce !== void 0) {
        b.write(Primitive.Int128.write(this.nonce));
      }
      if (this.serverNonce !== void 0) {
        b.write(Primitive.Int128.write(this.serverNonce));
      }
      if (this.pq !== void 0) {
        b.write(Primitive.Bytes.write(this.pq));
      }
      if (this.serverPublicKeyFingerprints) {
        b.write(Primitive.Vector.write(this.serverPublicKeyFingerprints, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.ResPQ = ResPQ;
  class PQInnerData extends TLObject {
    pq;
    p;
    q;
    nonce;
    serverNonce;
    newNonce;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PQInnerData';
      this.constructorId = 2211011308;
      this.subclassOfId = 1097864055;
      this._slots = ['pq', 'p', 'q', 'nonce', 'serverNonce', 'newNonce'];
      this.pq = params.pq;
      this.p = params.p;
      this.q = params.q;
      this.nonce = params.nonce;
      this.serverNonce = params.serverNonce;
      this.newNonce = params.newNonce;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let pq = await Primitive.Bytes.read(b);
      let p = await Primitive.Bytes.read(b);
      let q = await Primitive.Bytes.read(b);
      let nonce = await Primitive.Int128.read(b);
      let serverNonce = await Primitive.Int128.read(b);
      let newNonce = await Primitive.Int256.read(b);
      return new Raw2.PQInnerData({
        pq,
        p,
        q,
        nonce,
        serverNonce,
        newNonce,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.pq !== void 0) {
        b.write(Primitive.Bytes.write(this.pq));
      }
      if (this.p !== void 0) {
        b.write(Primitive.Bytes.write(this.p));
      }
      if (this.q !== void 0) {
        b.write(Primitive.Bytes.write(this.q));
      }
      if (this.nonce !== void 0) {
        b.write(Primitive.Int128.write(this.nonce));
      }
      if (this.serverNonce !== void 0) {
        b.write(Primitive.Int128.write(this.serverNonce));
      }
      if (this.newNonce !== void 0) {
        b.write(Primitive.Int256.write(this.newNonce));
      }
      return b.buffer;
    }
  }
  Raw2.PQInnerData = PQInnerData;
  class PQInnerDataDc extends TLObject {
    pq;
    p;
    q;
    nonce;
    serverNonce;
    newNonce;
    dc;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PQInnerDataDc';
      this.constructorId = 2851430293;
      this.subclassOfId = 1097864055;
      this._slots = ['pq', 'p', 'q', 'nonce', 'serverNonce', 'newNonce', 'dc'];
      this.pq = params.pq;
      this.p = params.p;
      this.q = params.q;
      this.nonce = params.nonce;
      this.serverNonce = params.serverNonce;
      this.newNonce = params.newNonce;
      this.dc = params.dc;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let pq = await Primitive.Bytes.read(b);
      let p = await Primitive.Bytes.read(b);
      let q = await Primitive.Bytes.read(b);
      let nonce = await Primitive.Int128.read(b);
      let serverNonce = await Primitive.Int128.read(b);
      let newNonce = await Primitive.Int256.read(b);
      let dc = await Primitive.Int.read(b);
      return new Raw2.PQInnerDataDc({
        pq,
        p,
        q,
        nonce,
        serverNonce,
        newNonce,
        dc,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.pq !== void 0) {
        b.write(Primitive.Bytes.write(this.pq));
      }
      if (this.p !== void 0) {
        b.write(Primitive.Bytes.write(this.p));
      }
      if (this.q !== void 0) {
        b.write(Primitive.Bytes.write(this.q));
      }
      if (this.nonce !== void 0) {
        b.write(Primitive.Int128.write(this.nonce));
      }
      if (this.serverNonce !== void 0) {
        b.write(Primitive.Int128.write(this.serverNonce));
      }
      if (this.newNonce !== void 0) {
        b.write(Primitive.Int256.write(this.newNonce));
      }
      if (this.dc !== void 0) {
        b.write(Primitive.Int.write(this.dc));
      }
      return b.buffer;
    }
  }
  Raw2.PQInnerDataDc = PQInnerDataDc;
  class PQInnerDataTemp extends TLObject {
    pq;
    p;
    q;
    nonce;
    serverNonce;
    newNonce;
    expiresIn;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PQInnerDataTemp';
      this.constructorId = 1013613780;
      this.subclassOfId = 1097864055;
      this._slots = ['pq', 'p', 'q', 'nonce', 'serverNonce', 'newNonce', 'expiresIn'];
      this.pq = params.pq;
      this.p = params.p;
      this.q = params.q;
      this.nonce = params.nonce;
      this.serverNonce = params.serverNonce;
      this.newNonce = params.newNonce;
      this.expiresIn = params.expiresIn;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let pq = await Primitive.Bytes.read(b);
      let p = await Primitive.Bytes.read(b);
      let q = await Primitive.Bytes.read(b);
      let nonce = await Primitive.Int128.read(b);
      let serverNonce = await Primitive.Int128.read(b);
      let newNonce = await Primitive.Int256.read(b);
      let expiresIn = await Primitive.Int.read(b);
      return new Raw2.PQInnerDataTemp({
        pq,
        p,
        q,
        nonce,
        serverNonce,
        newNonce,
        expiresIn,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.pq !== void 0) {
        b.write(Primitive.Bytes.write(this.pq));
      }
      if (this.p !== void 0) {
        b.write(Primitive.Bytes.write(this.p));
      }
      if (this.q !== void 0) {
        b.write(Primitive.Bytes.write(this.q));
      }
      if (this.nonce !== void 0) {
        b.write(Primitive.Int128.write(this.nonce));
      }
      if (this.serverNonce !== void 0) {
        b.write(Primitive.Int128.write(this.serverNonce));
      }
      if (this.newNonce !== void 0) {
        b.write(Primitive.Int256.write(this.newNonce));
      }
      if (this.expiresIn !== void 0) {
        b.write(Primitive.Int.write(this.expiresIn));
      }
      return b.buffer;
    }
  }
  Raw2.PQInnerDataTemp = PQInnerDataTemp;
  class PQInnerDataTempDc extends TLObject {
    pq;
    p;
    q;
    nonce;
    serverNonce;
    newNonce;
    dc;
    expiresIn;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PQInnerDataTempDc';
      this.constructorId = 1459478408;
      this.subclassOfId = 1097864055;
      this._slots = ['pq', 'p', 'q', 'nonce', 'serverNonce', 'newNonce', 'dc', 'expiresIn'];
      this.pq = params.pq;
      this.p = params.p;
      this.q = params.q;
      this.nonce = params.nonce;
      this.serverNonce = params.serverNonce;
      this.newNonce = params.newNonce;
      this.dc = params.dc;
      this.expiresIn = params.expiresIn;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let pq = await Primitive.Bytes.read(b);
      let p = await Primitive.Bytes.read(b);
      let q = await Primitive.Bytes.read(b);
      let nonce = await Primitive.Int128.read(b);
      let serverNonce = await Primitive.Int128.read(b);
      let newNonce = await Primitive.Int256.read(b);
      let dc = await Primitive.Int.read(b);
      let expiresIn = await Primitive.Int.read(b);
      return new Raw2.PQInnerDataTempDc({
        pq,
        p,
        q,
        nonce,
        serverNonce,
        newNonce,
        dc,
        expiresIn,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.pq !== void 0) {
        b.write(Primitive.Bytes.write(this.pq));
      }
      if (this.p !== void 0) {
        b.write(Primitive.Bytes.write(this.p));
      }
      if (this.q !== void 0) {
        b.write(Primitive.Bytes.write(this.q));
      }
      if (this.nonce !== void 0) {
        b.write(Primitive.Int128.write(this.nonce));
      }
      if (this.serverNonce !== void 0) {
        b.write(Primitive.Int128.write(this.serverNonce));
      }
      if (this.newNonce !== void 0) {
        b.write(Primitive.Int256.write(this.newNonce));
      }
      if (this.dc !== void 0) {
        b.write(Primitive.Int.write(this.dc));
      }
      if (this.expiresIn !== void 0) {
        b.write(Primitive.Int.write(this.expiresIn));
      }
      return b.buffer;
    }
  }
  Raw2.PQInnerDataTempDc = PQInnerDataTempDc;
  class BindAuthKeyInner extends TLObject {
    nonce;
    tempAuthKeyId;
    permAuthKeyId;
    tempSessionId;
    expiresAt;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BindAuthKeyInner';
      this.constructorId = 1973679973;
      this.subclassOfId = 789156209;
      this._slots = ['nonce', 'tempAuthKeyId', 'permAuthKeyId', 'tempSessionId', 'expiresAt'];
      this.nonce = params.nonce;
      this.tempAuthKeyId = params.tempAuthKeyId;
      this.permAuthKeyId = params.permAuthKeyId;
      this.tempSessionId = params.tempSessionId;
      this.expiresAt = params.expiresAt;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let nonce = await Primitive.Long.read(b);
      let tempAuthKeyId = await Primitive.Long.read(b);
      let permAuthKeyId = await Primitive.Long.read(b);
      let tempSessionId = await Primitive.Long.read(b);
      let expiresAt = await Primitive.Int.read(b);
      return new Raw2.BindAuthKeyInner({
        nonce,
        tempAuthKeyId,
        permAuthKeyId,
        tempSessionId,
        expiresAt,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.nonce !== void 0) {
        b.write(Primitive.Long.write(this.nonce));
      }
      if (this.tempAuthKeyId !== void 0) {
        b.write(Primitive.Long.write(this.tempAuthKeyId));
      }
      if (this.permAuthKeyId !== void 0) {
        b.write(Primitive.Long.write(this.permAuthKeyId));
      }
      if (this.tempSessionId !== void 0) {
        b.write(Primitive.Long.write(this.tempSessionId));
      }
      if (this.expiresAt !== void 0) {
        b.write(Primitive.Int.write(this.expiresAt));
      }
      return b.buffer;
    }
  }
  Raw2.BindAuthKeyInner = BindAuthKeyInner;
  class ServerDhParamsFail extends TLObject {
    nonce;
    serverNonce;
    newNonceHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ServerDhParamsFail';
      this.constructorId = 2043348061;
      this.subclassOfId = 2786626974;
      this._slots = ['nonce', 'serverNonce', 'newNonceHash'];
      this.nonce = params.nonce;
      this.serverNonce = params.serverNonce;
      this.newNonceHash = params.newNonceHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let nonce = await Primitive.Int128.read(b);
      let serverNonce = await Primitive.Int128.read(b);
      let newNonceHash = await Primitive.Int128.read(b);
      return new Raw2.ServerDhParamsFail({
        nonce,
        serverNonce,
        newNonceHash,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.nonce !== void 0) {
        b.write(Primitive.Int128.write(this.nonce));
      }
      if (this.serverNonce !== void 0) {
        b.write(Primitive.Int128.write(this.serverNonce));
      }
      if (this.newNonceHash !== void 0) {
        b.write(Primitive.Int128.write(this.newNonceHash));
      }
      return b.buffer;
    }
  }
  Raw2.ServerDhParamsFail = ServerDhParamsFail;
  class ServerDhParamsOk extends TLObject {
    nonce;
    serverNonce;
    encryptedAnswer;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ServerDhParamsOk';
      this.constructorId = 3504867164;
      this.subclassOfId = 2786626974;
      this._slots = ['nonce', 'serverNonce', 'encryptedAnswer'];
      this.nonce = params.nonce;
      this.serverNonce = params.serverNonce;
      this.encryptedAnswer = params.encryptedAnswer;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let nonce = await Primitive.Int128.read(b);
      let serverNonce = await Primitive.Int128.read(b);
      let encryptedAnswer = await Primitive.Bytes.read(b);
      return new Raw2.ServerDhParamsOk({
        nonce,
        serverNonce,
        encryptedAnswer,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.nonce !== void 0) {
        b.write(Primitive.Int128.write(this.nonce));
      }
      if (this.serverNonce !== void 0) {
        b.write(Primitive.Int128.write(this.serverNonce));
      }
      if (this.encryptedAnswer !== void 0) {
        b.write(Primitive.Bytes.write(this.encryptedAnswer));
      }
      return b.buffer;
    }
  }
  Raw2.ServerDhParamsOk = ServerDhParamsOk;
  class ServerDhInnerData extends TLObject {
    nonce;
    serverNonce;
    g;
    dhPrime;
    gA;
    serverTime;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ServerDhInnerData';
      this.constructorId = 3045658042;
      this.subclassOfId = 3332007868;
      this._slots = ['nonce', 'serverNonce', 'g', 'dhPrime', 'gA', 'serverTime'];
      this.nonce = params.nonce;
      this.serverNonce = params.serverNonce;
      this.g = params.g;
      this.dhPrime = params.dhPrime;
      this.gA = params.gA;
      this.serverTime = params.serverTime;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let nonce = await Primitive.Int128.read(b);
      let serverNonce = await Primitive.Int128.read(b);
      let g = await Primitive.Int.read(b);
      let dhPrime = await Primitive.Bytes.read(b);
      let gA = await Primitive.Bytes.read(b);
      let serverTime = await Primitive.Int.read(b);
      return new Raw2.ServerDhInnerData({
        nonce,
        serverNonce,
        g,
        dhPrime,
        gA,
        serverTime,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.nonce !== void 0) {
        b.write(Primitive.Int128.write(this.nonce));
      }
      if (this.serverNonce !== void 0) {
        b.write(Primitive.Int128.write(this.serverNonce));
      }
      if (this.g !== void 0) {
        b.write(Primitive.Int.write(this.g));
      }
      if (this.dhPrime !== void 0) {
        b.write(Primitive.Bytes.write(this.dhPrime));
      }
      if (this.gA !== void 0) {
        b.write(Primitive.Bytes.write(this.gA));
      }
      if (this.serverTime !== void 0) {
        b.write(Primitive.Int.write(this.serverTime));
      }
      return b.buffer;
    }
  }
  Raw2.ServerDhInnerData = ServerDhInnerData;
  class ClientDhInnerData extends TLObject {
    nonce;
    serverNonce;
    retryId;
    gB;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ClientDhInnerData';
      this.constructorId = 1715713620;
      this.subclassOfId = 4176408426;
      this._slots = ['nonce', 'serverNonce', 'retryId', 'gB'];
      this.nonce = params.nonce;
      this.serverNonce = params.serverNonce;
      this.retryId = params.retryId;
      this.gB = params.gB;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let nonce = await Primitive.Int128.read(b);
      let serverNonce = await Primitive.Int128.read(b);
      let retryId = await Primitive.Long.read(b);
      let gB = await Primitive.Bytes.read(b);
      return new Raw2.ClientDhInnerData({
        nonce,
        serverNonce,
        retryId,
        gB,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.nonce !== void 0) {
        b.write(Primitive.Int128.write(this.nonce));
      }
      if (this.serverNonce !== void 0) {
        b.write(Primitive.Int128.write(this.serverNonce));
      }
      if (this.retryId !== void 0) {
        b.write(Primitive.Long.write(this.retryId));
      }
      if (this.gB !== void 0) {
        b.write(Primitive.Bytes.write(this.gB));
      }
      return b.buffer;
    }
  }
  Raw2.ClientDhInnerData = ClientDhInnerData;
  class DhGenOk extends TLObject {
    nonce;
    serverNonce;
    newNonceHash1;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DhGenOk';
      this.constructorId = 1003222836;
      this.subclassOfId = 1440574683;
      this._slots = ['nonce', 'serverNonce', 'newNonceHash1'];
      this.nonce = params.nonce;
      this.serverNonce = params.serverNonce;
      this.newNonceHash1 = params.newNonceHash1;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let nonce = await Primitive.Int128.read(b);
      let serverNonce = await Primitive.Int128.read(b);
      let newNonceHash1 = await Primitive.Int128.read(b);
      return new Raw2.DhGenOk({
        nonce,
        serverNonce,
        newNonceHash1,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.nonce !== void 0) {
        b.write(Primitive.Int128.write(this.nonce));
      }
      if (this.serverNonce !== void 0) {
        b.write(Primitive.Int128.write(this.serverNonce));
      }
      if (this.newNonceHash1 !== void 0) {
        b.write(Primitive.Int128.write(this.newNonceHash1));
      }
      return b.buffer;
    }
  }
  Raw2.DhGenOk = DhGenOk;
  class DhGenRetry extends TLObject {
    nonce;
    serverNonce;
    newNonceHash2;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DhGenRetry';
      this.constructorId = 1188831161;
      this.subclassOfId = 1440574683;
      this._slots = ['nonce', 'serverNonce', 'newNonceHash2'];
      this.nonce = params.nonce;
      this.serverNonce = params.serverNonce;
      this.newNonceHash2 = params.newNonceHash2;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let nonce = await Primitive.Int128.read(b);
      let serverNonce = await Primitive.Int128.read(b);
      let newNonceHash2 = await Primitive.Int128.read(b);
      return new Raw2.DhGenRetry({
        nonce,
        serverNonce,
        newNonceHash2,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.nonce !== void 0) {
        b.write(Primitive.Int128.write(this.nonce));
      }
      if (this.serverNonce !== void 0) {
        b.write(Primitive.Int128.write(this.serverNonce));
      }
      if (this.newNonceHash2 !== void 0) {
        b.write(Primitive.Int128.write(this.newNonceHash2));
      }
      return b.buffer;
    }
  }
  Raw2.DhGenRetry = DhGenRetry;
  class DhGenFail extends TLObject {
    nonce;
    serverNonce;
    newNonceHash3;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DhGenFail';
      this.constructorId = 2795351554;
      this.subclassOfId = 1440574683;
      this._slots = ['nonce', 'serverNonce', 'newNonceHash3'];
      this.nonce = params.nonce;
      this.serverNonce = params.serverNonce;
      this.newNonceHash3 = params.newNonceHash3;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let nonce = await Primitive.Int128.read(b);
      let serverNonce = await Primitive.Int128.read(b);
      let newNonceHash3 = await Primitive.Int128.read(b);
      return new Raw2.DhGenFail({
        nonce,
        serverNonce,
        newNonceHash3,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.nonce !== void 0) {
        b.write(Primitive.Int128.write(this.nonce));
      }
      if (this.serverNonce !== void 0) {
        b.write(Primitive.Int128.write(this.serverNonce));
      }
      if (this.newNonceHash3 !== void 0) {
        b.write(Primitive.Int128.write(this.newNonceHash3));
      }
      return b.buffer;
    }
  }
  Raw2.DhGenFail = DhGenFail;
  class DestroyAuthKeyOk extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'DestroyAuthKeyOk';
      this.constructorId = 4133544404;
      this.subclassOfId = 2190599822;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.DestroyAuthKeyOk();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.DestroyAuthKeyOk = DestroyAuthKeyOk;
  class DestroyAuthKeyNone extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'DestroyAuthKeyNone';
      this.constructorId = 178201177;
      this.subclassOfId = 2190599822;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.DestroyAuthKeyNone();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.DestroyAuthKeyNone = DestroyAuthKeyNone;
  class DestroyAuthKeyFail extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'DestroyAuthKeyFail';
      this.constructorId = 3926956819;
      this.subclassOfId = 2190599822;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.DestroyAuthKeyFail();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.DestroyAuthKeyFail = DestroyAuthKeyFail;
  class ReqPq extends TLObject {
    __response__;
    nonce;
    constructor(params) {
      super();
      this.classType = 'functions';
      this.className = 'ReqPq';
      this.constructorId = 1615239032;
      this.subclassOfId = 2020181688;
      this._slots = ['nonce'];
      this.nonce = params.nonce;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let nonce = await Primitive.Int128.read(b);
      return new Raw2.ReqPq({ nonce });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.nonce !== void 0) {
        b.write(Primitive.Int128.write(this.nonce));
      }
      return b.buffer;
    }
  }
  Raw2.ReqPq = ReqPq;
  class ReqPqMulti extends TLObject {
    __response__;
    nonce;
    constructor(params) {
      super();
      this.classType = 'functions';
      this.className = 'ReqPqMulti';
      this.constructorId = 3195965169;
      this.subclassOfId = 2020181688;
      this._slots = ['nonce'];
      this.nonce = params.nonce;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let nonce = await Primitive.Int128.read(b);
      return new Raw2.ReqPqMulti({ nonce });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.nonce !== void 0) {
        b.write(Primitive.Int128.write(this.nonce));
      }
      return b.buffer;
    }
  }
  Raw2.ReqPqMulti = ReqPqMulti;
  class ReqDhParams extends TLObject {
    __response__;
    nonce;
    serverNonce;
    p;
    q;
    publicKeyFingerprint;
    encryptedData;
    constructor(params) {
      super();
      this.classType = 'functions';
      this.className = 'ReqDhParams';
      this.constructorId = 3608339646;
      this.subclassOfId = 2786626974;
      this._slots = ['nonce', 'serverNonce', 'p', 'q', 'publicKeyFingerprint', 'encryptedData'];
      this.nonce = params.nonce;
      this.serverNonce = params.serverNonce;
      this.p = params.p;
      this.q = params.q;
      this.publicKeyFingerprint = params.publicKeyFingerprint;
      this.encryptedData = params.encryptedData;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let nonce = await Primitive.Int128.read(b);
      let serverNonce = await Primitive.Int128.read(b);
      let p = await Primitive.Bytes.read(b);
      let q = await Primitive.Bytes.read(b);
      let publicKeyFingerprint = await Primitive.Long.read(b);
      let encryptedData = await Primitive.Bytes.read(b);
      return new Raw2.ReqDhParams({
        nonce,
        serverNonce,
        p,
        q,
        publicKeyFingerprint,
        encryptedData,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.nonce !== void 0) {
        b.write(Primitive.Int128.write(this.nonce));
      }
      if (this.serverNonce !== void 0) {
        b.write(Primitive.Int128.write(this.serverNonce));
      }
      if (this.p !== void 0) {
        b.write(Primitive.Bytes.write(this.p));
      }
      if (this.q !== void 0) {
        b.write(Primitive.Bytes.write(this.q));
      }
      if (this.publicKeyFingerprint !== void 0) {
        b.write(Primitive.Long.write(this.publicKeyFingerprint));
      }
      if (this.encryptedData !== void 0) {
        b.write(Primitive.Bytes.write(this.encryptedData));
      }
      return b.buffer;
    }
  }
  Raw2.ReqDhParams = ReqDhParams;
  class SetClientDhParams extends TLObject {
    __response__;
    nonce;
    serverNonce;
    encryptedData;
    constructor(params) {
      super();
      this.classType = 'functions';
      this.className = 'SetClientDhParams';
      this.constructorId = 4110704415;
      this.subclassOfId = 1440574683;
      this._slots = ['nonce', 'serverNonce', 'encryptedData'];
      this.nonce = params.nonce;
      this.serverNonce = params.serverNonce;
      this.encryptedData = params.encryptedData;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let nonce = await Primitive.Int128.read(b);
      let serverNonce = await Primitive.Int128.read(b);
      let encryptedData = await Primitive.Bytes.read(b);
      return new Raw2.SetClientDhParams({
        nonce,
        serverNonce,
        encryptedData,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.nonce !== void 0) {
        b.write(Primitive.Int128.write(this.nonce));
      }
      if (this.serverNonce !== void 0) {
        b.write(Primitive.Int128.write(this.serverNonce));
      }
      if (this.encryptedData !== void 0) {
        b.write(Primitive.Bytes.write(this.encryptedData));
      }
      return b.buffer;
    }
  }
  Raw2.SetClientDhParams = SetClientDhParams;
  class DestroyAuthKey extends TLObject {
    __response__;
    constructor() {
      super();
      this.classType = 'functions';
      this.className = 'DestroyAuthKey';
      this.constructorId = 3510849888;
      this.subclassOfId = 2190599822;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.DestroyAuthKey();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.DestroyAuthKey = DestroyAuthKey;
  class MsgsAck extends TLObject {
    msgIds;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MsgsAck';
      this.constructorId = 1658238041;
      this.subclassOfId = 2188801988;
      this._slots = ['msgIds'];
      this.msgIds = params.msgIds;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let msgIds = await TLObject.read(b, Primitive.Long);
      return new Raw2.MsgsAck({ msgIds });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.msgIds) {
        b.write(Primitive.Vector.write(this.msgIds, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.MsgsAck = MsgsAck;
  class BadMsgNotification extends TLObject {
    badMsgId;
    badMsgSeqno;
    errorCode;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BadMsgNotification';
      this.constructorId = 2817521681;
      this.subclassOfId = 3468337495;
      this._slots = ['badMsgId', 'badMsgSeqno', 'errorCode'];
      this.badMsgId = params.badMsgId;
      this.badMsgSeqno = params.badMsgSeqno;
      this.errorCode = params.errorCode;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let badMsgId = await Primitive.Long.read(b);
      let badMsgSeqno = await Primitive.Int.read(b);
      let errorCode = await Primitive.Int.read(b);
      return new Raw2.BadMsgNotification({
        badMsgId,
        badMsgSeqno,
        errorCode,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.badMsgId !== void 0) {
        b.write(Primitive.Long.write(this.badMsgId));
      }
      if (this.badMsgSeqno !== void 0) {
        b.write(Primitive.Int.write(this.badMsgSeqno));
      }
      if (this.errorCode !== void 0) {
        b.write(Primitive.Int.write(this.errorCode));
      }
      return b.buffer;
    }
  }
  Raw2.BadMsgNotification = BadMsgNotification;
  class BadServerSalt extends TLObject {
    badMsgId;
    badMsgSeqno;
    errorCode;
    newServerSalt;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BadServerSalt';
      this.constructorId = 3987424379;
      this.subclassOfId = 3468337495;
      this._slots = ['badMsgId', 'badMsgSeqno', 'errorCode', 'newServerSalt'];
      this.badMsgId = params.badMsgId;
      this.badMsgSeqno = params.badMsgSeqno;
      this.errorCode = params.errorCode;
      this.newServerSalt = params.newServerSalt;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let badMsgId = await Primitive.Long.read(b);
      let badMsgSeqno = await Primitive.Int.read(b);
      let errorCode = await Primitive.Int.read(b);
      let newServerSalt = await Primitive.Long.read(b);
      return new Raw2.BadServerSalt({
        badMsgId,
        badMsgSeqno,
        errorCode,
        newServerSalt,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.badMsgId !== void 0) {
        b.write(Primitive.Long.write(this.badMsgId));
      }
      if (this.badMsgSeqno !== void 0) {
        b.write(Primitive.Int.write(this.badMsgSeqno));
      }
      if (this.errorCode !== void 0) {
        b.write(Primitive.Int.write(this.errorCode));
      }
      if (this.newServerSalt !== void 0) {
        b.write(Primitive.Long.write(this.newServerSalt));
      }
      return b.buffer;
    }
  }
  Raw2.BadServerSalt = BadServerSalt;
  class MsgsStateReq extends TLObject {
    msgIds;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MsgsStateReq';
      this.constructorId = 3664378706;
      this.subclassOfId = 418389456;
      this._slots = ['msgIds'];
      this.msgIds = params.msgIds;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let msgIds = await TLObject.read(b, Primitive.Long);
      return new Raw2.MsgsStateReq({ msgIds });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.msgIds) {
        b.write(Primitive.Vector.write(this.msgIds, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.MsgsStateReq = MsgsStateReq;
  class MsgsStateInfo extends TLObject {
    reqMsgId;
    info;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MsgsStateInfo';
      this.constructorId = 81704317;
      this.subclassOfId = 118098532;
      this._slots = ['reqMsgId', 'info'];
      this.reqMsgId = params.reqMsgId;
      this.info = params.info;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let reqMsgId = await Primitive.Long.read(b);
      let info = await Primitive.String.read(b);
      return new Raw2.MsgsStateInfo({ reqMsgId, info });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.reqMsgId !== void 0) {
        b.write(Primitive.Long.write(this.reqMsgId));
      }
      if (this.info !== void 0) {
        b.write(Primitive.String.write(this.info));
      }
      return b.buffer;
    }
  }
  Raw2.MsgsStateInfo = MsgsStateInfo;
  class MsgsAllInfo extends TLObject {
    msgIds;
    info;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MsgsAllInfo';
      this.constructorId = 2361446705;
      this.subclassOfId = 4203727700;
      this._slots = ['msgIds', 'info'];
      this.msgIds = params.msgIds;
      this.info = params.info;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let msgIds = await TLObject.read(b, Primitive.Long);
      let info = await Primitive.String.read(b);
      return new Raw2.MsgsAllInfo({ msgIds, info });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.msgIds) {
        b.write(Primitive.Vector.write(this.msgIds, Primitive.Long));
      }
      if (this.info !== void 0) {
        b.write(Primitive.String.write(this.info));
      }
      return b.buffer;
    }
  }
  Raw2.MsgsAllInfo = MsgsAllInfo;
  class MsgDetailedInfo extends TLObject {
    msgId;
    answerMsgId;
    bytes;
    status;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MsgDetailedInfo';
      this.constructorId = 661470918;
      this.subclassOfId = 1597167086;
      this._slots = ['msgId', 'answerMsgId', 'bytes', 'status'];
      this.msgId = params.msgId;
      this.answerMsgId = params.answerMsgId;
      this.bytes = params.bytes;
      this.status = params.status;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let msgId = await Primitive.Long.read(b);
      let answerMsgId = await Primitive.Long.read(b);
      let bytes = await Primitive.Int.read(b);
      let status = await Primitive.Int.read(b);
      return new Raw2.MsgDetailedInfo({
        msgId,
        answerMsgId,
        bytes,
        status,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.msgId !== void 0) {
        b.write(Primitive.Long.write(this.msgId));
      }
      if (this.answerMsgId !== void 0) {
        b.write(Primitive.Long.write(this.answerMsgId));
      }
      if (this.bytes !== void 0) {
        b.write(Primitive.Int.write(this.bytes));
      }
      if (this.status !== void 0) {
        b.write(Primitive.Int.write(this.status));
      }
      return b.buffer;
    }
  }
  Raw2.MsgDetailedInfo = MsgDetailedInfo;
  class MsgNewDetailedInfo extends TLObject {
    answerMsgId;
    bytes;
    status;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MsgNewDetailedInfo';
      this.constructorId = 2157819615;
      this.subclassOfId = 1597167086;
      this._slots = ['answerMsgId', 'bytes', 'status'];
      this.answerMsgId = params.answerMsgId;
      this.bytes = params.bytes;
      this.status = params.status;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let answerMsgId = await Primitive.Long.read(b);
      let bytes = await Primitive.Int.read(b);
      let status = await Primitive.Int.read(b);
      return new Raw2.MsgNewDetailedInfo({ answerMsgId, bytes, status });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.answerMsgId !== void 0) {
        b.write(Primitive.Long.write(this.answerMsgId));
      }
      if (this.bytes !== void 0) {
        b.write(Primitive.Int.write(this.bytes));
      }
      if (this.status !== void 0) {
        b.write(Primitive.Int.write(this.status));
      }
      return b.buffer;
    }
  }
  Raw2.MsgNewDetailedInfo = MsgNewDetailedInfo;
  class MsgResendReq extends TLObject {
    msgIds;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MsgResendReq';
      this.constructorId = 2105940488;
      this.subclassOfId = 33703188;
      this._slots = ['msgIds'];
      this.msgIds = params.msgIds;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let msgIds = await TLObject.read(b, Primitive.Long);
      return new Raw2.MsgResendReq({ msgIds });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.msgIds) {
        b.write(Primitive.Vector.write(this.msgIds, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.MsgResendReq = MsgResendReq;
  class RpcResult extends TLObject {
    reqMsgId;
    result;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'RpcResult';
      this.constructorId = 4082920705;
      this.subclassOfId = 161996592;
      this._slots = ['reqMsgId', 'result'];
      this.reqMsgId = params.reqMsgId;
      this.result = params.result;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let reqMsgId = await Primitive.Long.read(b);
      let result = await TLObject.read(b);
      return new Raw2.RpcResult({ reqMsgId, result });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.reqMsgId !== void 0) {
        b.write(Primitive.Long.write(this.reqMsgId));
      }
      if (this.result !== void 0) {
        b.write(this.result.write());
      }
      return b.buffer;
    }
  }
  Raw2.RpcResult = RpcResult;
  class RpcError extends TLObject {
    errorCode;
    errorMessage;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'RpcError';
      this.constructorId = 558156313;
      this.subclassOfId = 1243079269;
      this._slots = ['errorCode', 'errorMessage'];
      this.errorCode = params.errorCode;
      this.errorMessage = params.errorMessage;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let errorCode = await Primitive.Int.read(b);
      let errorMessage = await Primitive.String.read(b);
      return new Raw2.RpcError({ errorCode, errorMessage });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.errorCode !== void 0) {
        b.write(Primitive.Int.write(this.errorCode));
      }
      if (this.errorMessage !== void 0) {
        b.write(Primitive.String.write(this.errorMessage));
      }
      return b.buffer;
    }
  }
  Raw2.RpcError = RpcError;
  class RpcAnswerUnknown extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'RpcAnswerUnknown';
      this.constructorId = 1579864942;
      this.subclassOfId = 1271559536;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.RpcAnswerUnknown();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.RpcAnswerUnknown = RpcAnswerUnknown;
  class RpcAnswerDroppedRunning extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'RpcAnswerDroppedRunning';
      this.constructorId = 3447252358;
      this.subclassOfId = 1271559536;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.RpcAnswerDroppedRunning();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.RpcAnswerDroppedRunning = RpcAnswerDroppedRunning;
  class RpcAnswerDropped extends TLObject {
    msgId;
    seqNo;
    bytes;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'RpcAnswerDropped';
      this.constructorId = 2755319991;
      this.subclassOfId = 1271559536;
      this._slots = ['msgId', 'seqNo', 'bytes'];
      this.msgId = params.msgId;
      this.seqNo = params.seqNo;
      this.bytes = params.bytes;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let msgId = await Primitive.Long.read(b);
      let seqNo = await Primitive.Int.read(b);
      let bytes = await Primitive.Int.read(b);
      return new Raw2.RpcAnswerDropped({ msgId, seqNo, bytes });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.msgId !== void 0) {
        b.write(Primitive.Long.write(this.msgId));
      }
      if (this.seqNo !== void 0) {
        b.write(Primitive.Int.write(this.seqNo));
      }
      if (this.bytes !== void 0) {
        b.write(Primitive.Int.write(this.bytes));
      }
      return b.buffer;
    }
  }
  Raw2.RpcAnswerDropped = RpcAnswerDropped;
  class FutureSalt extends TLObject {
    validSince;
    validUntil;
    salt;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'FutureSalt';
      this.constructorId = 155834844;
      this.subclassOfId = 1172651471;
      this._slots = ['validSince', 'validUntil', 'salt'];
      this.validSince = params.validSince;
      this.validUntil = params.validUntil;
      this.salt = params.salt;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let validSince = await Primitive.Int.read(b);
      let validUntil = await Primitive.Int.read(b);
      let salt = await Primitive.Long.read(b);
      return new Raw2.FutureSalt({ validSince, validUntil, salt });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.validSince !== void 0) {
        b.write(Primitive.Int.write(this.validSince));
      }
      if (this.validUntil !== void 0) {
        b.write(Primitive.Int.write(this.validUntil));
      }
      if (this.salt !== void 0) {
        b.write(Primitive.Long.write(this.salt));
      }
      return b.buffer;
    }
  }
  Raw2.FutureSalt = FutureSalt;
  class FutureSalts extends TLObject {
    reqMsgId;
    now;
    salts;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'FutureSalts';
      this.constructorId = 2924480661;
      this.subclassOfId = 277935383;
      this._slots = ['reqMsgId', 'now', 'salts'];
      this.reqMsgId = params.reqMsgId;
      this.now = params.now;
      this.salts = params.salts;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let reqMsgId = await Primitive.Long.read(b);
      let now = await Primitive.Int.read(b);
      let salts = await TLObject.read(b);
      return new Raw2.FutureSalts({ reqMsgId, now, salts });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.reqMsgId !== void 0) {
        b.write(Primitive.Long.write(this.reqMsgId));
      }
      if (this.now !== void 0) {
        b.write(Primitive.Int.write(this.now));
      }
      if (this.salts) {
        b.write(Primitive.Vector.write(this.salts));
      }
      return b.buffer;
    }
  }
  Raw2.FutureSalts = FutureSalts;
  class Pong extends TLObject {
    msgId;
    pingId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Pong';
      this.constructorId = 880243653;
      this.subclassOfId = 2171268721;
      this._slots = ['msgId', 'pingId'];
      this.msgId = params.msgId;
      this.pingId = params.pingId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let msgId = await Primitive.Long.read(b);
      let pingId = await Primitive.Long.read(b);
      return new Raw2.Pong({ msgId, pingId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.msgId !== void 0) {
        b.write(Primitive.Long.write(this.msgId));
      }
      if (this.pingId !== void 0) {
        b.write(Primitive.Long.write(this.pingId));
      }
      return b.buffer;
    }
  }
  Raw2.Pong = Pong;
  class DestroySessionOk extends TLObject {
    sessionId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DestroySessionOk';
      this.constructorId = 3793765884;
      this.subclassOfId = 2936858557;
      this._slots = ['sessionId'];
      this.sessionId = params.sessionId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let sessionId = await Primitive.Long.read(b);
      return new Raw2.DestroySessionOk({ sessionId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.sessionId !== void 0) {
        b.write(Primitive.Long.write(this.sessionId));
      }
      return b.buffer;
    }
  }
  Raw2.DestroySessionOk = DestroySessionOk;
  class DestroySessionNone extends TLObject {
    sessionId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DestroySessionNone';
      this.constructorId = 1658015945;
      this.subclassOfId = 2936858557;
      this._slots = ['sessionId'];
      this.sessionId = params.sessionId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let sessionId = await Primitive.Long.read(b);
      return new Raw2.DestroySessionNone({ sessionId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.sessionId !== void 0) {
        b.write(Primitive.Long.write(this.sessionId));
      }
      return b.buffer;
    }
  }
  Raw2.DestroySessionNone = DestroySessionNone;
  class NewSessionCreated extends TLObject {
    firstMsgId;
    uniqueId;
    serverSalt;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'NewSessionCreated';
      this.constructorId = 2663516424;
      this.subclassOfId = 1359818801;
      this._slots = ['firstMsgId', 'uniqueId', 'serverSalt'];
      this.firstMsgId = params.firstMsgId;
      this.uniqueId = params.uniqueId;
      this.serverSalt = params.serverSalt;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let firstMsgId = await Primitive.Long.read(b);
      let uniqueId = await Primitive.Long.read(b);
      let serverSalt = await Primitive.Long.read(b);
      return new Raw2.NewSessionCreated({
        firstMsgId,
        uniqueId,
        serverSalt,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.firstMsgId !== void 0) {
        b.write(Primitive.Long.write(this.firstMsgId));
      }
      if (this.uniqueId !== void 0) {
        b.write(Primitive.Long.write(this.uniqueId));
      }
      if (this.serverSalt !== void 0) {
        b.write(Primitive.Long.write(this.serverSalt));
      }
      return b.buffer;
    }
  }
  Raw2.NewSessionCreated = NewSessionCreated;
  class HttpWait extends TLObject {
    maxDelay;
    waitAfter;
    maxWait;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'HttpWait';
      this.constructorId = 2459514271;
      this.subclassOfId = 310685398;
      this._slots = ['maxDelay', 'waitAfter', 'maxWait'];
      this.maxDelay = params.maxDelay;
      this.waitAfter = params.waitAfter;
      this.maxWait = params.maxWait;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let maxDelay = await Primitive.Int.read(b);
      let waitAfter = await Primitive.Int.read(b);
      let maxWait = await Primitive.Int.read(b);
      return new Raw2.HttpWait({ maxDelay, waitAfter, maxWait });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.maxDelay !== void 0) {
        b.write(Primitive.Int.write(this.maxDelay));
      }
      if (this.waitAfter !== void 0) {
        b.write(Primitive.Int.write(this.waitAfter));
      }
      if (this.maxWait !== void 0) {
        b.write(Primitive.Int.write(this.maxWait));
      }
      return b.buffer;
    }
  }
  Raw2.HttpWait = HttpWait;
  class IpPort extends TLObject {
    ipv4;
    port;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'IpPort';
      this.constructorId = 3560156531;
      this.subclassOfId = 2728408870;
      this._slots = ['ipv4', 'port'];
      this.ipv4 = params.ipv4;
      this.port = params.port;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let ipv4 = await Primitive.Int.read(b);
      let port = await Primitive.Int.read(b);
      return new Raw2.IpPort({ ipv4, port });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.ipv4 !== void 0) {
        b.write(Primitive.Int.write(this.ipv4));
      }
      if (this.port !== void 0) {
        b.write(Primitive.Int.write(this.port));
      }
      return b.buffer;
    }
  }
  Raw2.IpPort = IpPort;
  class IpPortSecret extends TLObject {
    ipv4;
    port;
    secret;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'IpPortSecret';
      this.constructorId = 932718150;
      this.subclassOfId = 2728408870;
      this._slots = ['ipv4', 'port', 'secret'];
      this.ipv4 = params.ipv4;
      this.port = params.port;
      this.secret = params.secret;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let ipv4 = await Primitive.Int.read(b);
      let port = await Primitive.Int.read(b);
      let secret = await Primitive.Bytes.read(b);
      return new Raw2.IpPortSecret({ ipv4, port, secret });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.ipv4 !== void 0) {
        b.write(Primitive.Int.write(this.ipv4));
      }
      if (this.port !== void 0) {
        b.write(Primitive.Int.write(this.port));
      }
      if (this.secret !== void 0) {
        b.write(Primitive.Bytes.write(this.secret));
      }
      return b.buffer;
    }
  }
  Raw2.IpPortSecret = IpPortSecret;
  class AccessPointRule extends TLObject {
    phonePrefixRules;
    dcId;
    ips;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'AccessPointRule';
      this.constructorId = 1182381663;
      this.subclassOfId = 2980880637;
      this._slots = ['phonePrefixRules', 'dcId', 'ips'];
      this.phonePrefixRules = params.phonePrefixRules;
      this.dcId = params.dcId;
      this.ips = params.ips;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let phonePrefixRules = await Primitive.String.read(b);
      let dcId = await Primitive.Int.read(b);
      let ips = await TLObject.read(b);
      return new Raw2.AccessPointRule({ phonePrefixRules, dcId, ips });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.phonePrefixRules !== void 0) {
        b.write(Primitive.String.write(this.phonePrefixRules));
      }
      if (this.dcId !== void 0) {
        b.write(Primitive.Int.write(this.dcId));
      }
      if (this.ips) {
        b.write(Primitive.Vector.write(this.ips));
      }
      return b.buffer;
    }
  }
  Raw2.AccessPointRule = AccessPointRule;
  class RpcDropAnswer extends TLObject {
    __response__;
    reqMsgId;
    constructor(params) {
      super();
      this.classType = 'functions';
      this.className = 'RpcDropAnswer';
      this.constructorId = 1491380032;
      this.subclassOfId = 1271559536;
      this._slots = ['reqMsgId'];
      this.reqMsgId = params.reqMsgId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let reqMsgId = await Primitive.Long.read(b);
      return new Raw2.RpcDropAnswer({ reqMsgId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.reqMsgId !== void 0) {
        b.write(Primitive.Long.write(this.reqMsgId));
      }
      return b.buffer;
    }
  }
  Raw2.RpcDropAnswer = RpcDropAnswer;
  class GetFutureSalts extends TLObject {
    __response__;
    num;
    constructor(params) {
      super();
      this.classType = 'functions';
      this.className = 'GetFutureSalts';
      this.constructorId = 3105996036;
      this.subclassOfId = 277935383;
      this._slots = ['num'];
      this.num = params.num;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let num = await Primitive.Int.read(b);
      return new Raw2.GetFutureSalts({ num });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.num !== void 0) {
        b.write(Primitive.Int.write(this.num));
      }
      return b.buffer;
    }
  }
  Raw2.GetFutureSalts = GetFutureSalts;
  class Ping extends TLObject {
    __response__;
    pingId;
    constructor(params) {
      super();
      this.classType = 'functions';
      this.className = 'Ping';
      this.constructorId = 2059302892;
      this.subclassOfId = 2171268721;
      this._slots = ['pingId'];
      this.pingId = params.pingId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let pingId = await Primitive.Long.read(b);
      return new Raw2.Ping({ pingId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.pingId !== void 0) {
        b.write(Primitive.Long.write(this.pingId));
      }
      return b.buffer;
    }
  }
  Raw2.Ping = Ping;
  class PingDelayDisconnect extends TLObject {
    __response__;
    pingId;
    disconnectDelay;
    constructor(params) {
      super();
      this.classType = 'functions';
      this.className = 'PingDelayDisconnect';
      this.constructorId = 4081220492;
      this.subclassOfId = 2171268721;
      this._slots = ['pingId', 'disconnectDelay'];
      this.pingId = params.pingId;
      this.disconnectDelay = params.disconnectDelay;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let pingId = await Primitive.Long.read(b);
      let disconnectDelay = await Primitive.Int.read(b);
      return new Raw2.PingDelayDisconnect({ pingId, disconnectDelay });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.pingId !== void 0) {
        b.write(Primitive.Long.write(this.pingId));
      }
      if (this.disconnectDelay !== void 0) {
        b.write(Primitive.Int.write(this.disconnectDelay));
      }
      return b.buffer;
    }
  }
  Raw2.PingDelayDisconnect = PingDelayDisconnect;
  class DestroySession extends TLObject {
    __response__;
    sessionId;
    constructor(params) {
      super();
      this.classType = 'functions';
      this.className = 'DestroySession';
      this.constructorId = 3880853798;
      this.subclassOfId = 2936858557;
      this._slots = ['sessionId'];
      this.sessionId = params.sessionId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let sessionId = await Primitive.Long.read(b);
      return new Raw2.DestroySession({ sessionId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.sessionId !== void 0) {
        b.write(Primitive.Long.write(this.sessionId));
      }
      return b.buffer;
    }
  }
  Raw2.DestroySession = DestroySession;
  class InputPeerEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPeerEmpty';
      this.constructorId = 2134579434;
      this.subclassOfId = 3374092470;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPeerEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPeerEmpty = InputPeerEmpty;
  class InputPeerSelf extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPeerSelf';
      this.constructorId = 2107670217;
      this.subclassOfId = 3374092470;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPeerSelf();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPeerSelf = InputPeerSelf;
  class InputPeerChat extends TLObject {
    chatId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPeerChat';
      this.constructorId = 900291769;
      this.subclassOfId = 3374092470;
      this._slots = ['chatId'];
      this.chatId = params.chatId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chatId = await Primitive.Long.read(b);
      return new Raw2.InputPeerChat({ chatId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chatId !== void 0) {
        b.write(Primitive.Long.write(this.chatId));
      }
      return b.buffer;
    }
  }
  Raw2.InputPeerChat = InputPeerChat;
  class InputPeerUser extends TLObject {
    userId;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPeerUser';
      this.constructorId = 3723011404;
      this.subclassOfId = 3374092470;
      this._slots = ['userId', 'accessHash'];
      this.userId = params.userId;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputPeerUser({ userId, accessHash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputPeerUser = InputPeerUser;
  class InputPeerChannel extends TLObject {
    channelId;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPeerChannel';
      this.constructorId = 666680316;
      this.subclassOfId = 3374092470;
      this._slots = ['channelId', 'accessHash'];
      this.channelId = params.channelId;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let channelId = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputPeerChannel({ channelId, accessHash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputPeerChannel = InputPeerChannel;
  class InputPeerUserFromMessage extends TLObject {
    peer;
    msgId;
    userId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPeerUserFromMessage';
      this.constructorId = 2826635804;
      this.subclassOfId = 3374092470;
      this._slots = ['peer', 'msgId', 'userId'];
      this.peer = params.peer;
      this.msgId = params.msgId;
      this.userId = params.userId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let msgId = await Primitive.Int.read(b);
      let userId = await Primitive.Long.read(b);
      return new Raw2.InputPeerUserFromMessage({ peer, msgId, userId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.msgId !== void 0) {
        b.write(Primitive.Int.write(this.msgId));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      return b.buffer;
    }
  }
  Raw2.InputPeerUserFromMessage = InputPeerUserFromMessage;
  class InputPeerChannelFromMessage extends TLObject {
    peer;
    msgId;
    channelId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPeerChannelFromMessage';
      this.constructorId = 3173648448;
      this.subclassOfId = 3374092470;
      this._slots = ['peer', 'msgId', 'channelId'];
      this.peer = params.peer;
      this.msgId = params.msgId;
      this.channelId = params.channelId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let msgId = await Primitive.Int.read(b);
      let channelId = await Primitive.Long.read(b);
      return new Raw2.InputPeerChannelFromMessage({
        peer,
        msgId,
        channelId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.msgId !== void 0) {
        b.write(Primitive.Int.write(this.msgId));
      }
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      return b.buffer;
    }
  }
  Raw2.InputPeerChannelFromMessage = InputPeerChannelFromMessage;
  class InputUserEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputUserEmpty';
      this.constructorId = 3112732367;
      this.subclassOfId = 3865689926;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputUserEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputUserEmpty = InputUserEmpty;
  class InputUserSelf extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputUserSelf';
      this.constructorId = 4156666175;
      this.subclassOfId = 3865689926;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputUserSelf();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputUserSelf = InputUserSelf;
  class InputUser extends TLObject {
    userId;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputUser';
      this.constructorId = 4061223110;
      this.subclassOfId = 3865689926;
      this._slots = ['userId', 'accessHash'];
      this.userId = params.userId;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputUser({ userId, accessHash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputUser = InputUser;
  class InputUserFromMessage extends TLObject {
    peer;
    msgId;
    userId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputUserFromMessage';
      this.constructorId = 497305826;
      this.subclassOfId = 3865689926;
      this._slots = ['peer', 'msgId', 'userId'];
      this.peer = params.peer;
      this.msgId = params.msgId;
      this.userId = params.userId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let msgId = await Primitive.Int.read(b);
      let userId = await Primitive.Long.read(b);
      return new Raw2.InputUserFromMessage({ peer, msgId, userId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.msgId !== void 0) {
        b.write(Primitive.Int.write(this.msgId));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      return b.buffer;
    }
  }
  Raw2.InputUserFromMessage = InputUserFromMessage;
  class InputPhoneContact extends TLObject {
    clientId;
    phone;
    firstName;
    lastName;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPhoneContact';
      this.constructorId = 4086478836;
      this.subclassOfId = 2926144130;
      this._slots = ['clientId', 'phone', 'firstName', 'lastName'];
      this.clientId = params.clientId;
      this.phone = params.phone;
      this.firstName = params.firstName;
      this.lastName = params.lastName;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let clientId = await Primitive.Long.read(b);
      let phone2 = await Primitive.String.read(b);
      let firstName = await Primitive.String.read(b);
      let lastName = await Primitive.String.read(b);
      return new Raw2.InputPhoneContact({
        clientId,
        phone: phone2,
        firstName,
        lastName,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.clientId !== void 0) {
        b.write(Primitive.Long.write(this.clientId));
      }
      if (this.phone !== void 0) {
        b.write(Primitive.String.write(this.phone));
      }
      if (this.firstName !== void 0) {
        b.write(Primitive.String.write(this.firstName));
      }
      if (this.lastName !== void 0) {
        b.write(Primitive.String.write(this.lastName));
      }
      return b.buffer;
    }
  }
  Raw2.InputPhoneContact = InputPhoneContact;
  class InputFile extends TLObject {
    id;
    parts;
    name;
    md5Checksum;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputFile';
      this.constructorId = 4113560191;
      this.subclassOfId = 3882180383;
      this._slots = ['id', 'parts', 'name', 'md5Checksum'];
      this.id = params.id;
      this.parts = params.parts;
      this.name = params.name;
      this.md5Checksum = params.md5Checksum;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let parts = await Primitive.Int.read(b);
      let name = await Primitive.String.read(b);
      let md5Checksum = await Primitive.String.read(b);
      return new Raw2.InputFile({ id, parts, name, md5Checksum });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.parts !== void 0) {
        b.write(Primitive.Int.write(this.parts));
      }
      if (this.name !== void 0) {
        b.write(Primitive.String.write(this.name));
      }
      if (this.md5Checksum !== void 0) {
        b.write(Primitive.String.write(this.md5Checksum));
      }
      return b.buffer;
    }
  }
  Raw2.InputFile = InputFile;
  class InputFileBig extends TLObject {
    id;
    parts;
    name;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputFileBig';
      this.constructorId = 4199484341;
      this.subclassOfId = 3882180383;
      this._slots = ['id', 'parts', 'name'];
      this.id = params.id;
      this.parts = params.parts;
      this.name = params.name;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let parts = await Primitive.Int.read(b);
      let name = await Primitive.String.read(b);
      return new Raw2.InputFileBig({ id, parts, name });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.parts !== void 0) {
        b.write(Primitive.Int.write(this.parts));
      }
      if (this.name !== void 0) {
        b.write(Primitive.String.write(this.name));
      }
      return b.buffer;
    }
  }
  Raw2.InputFileBig = InputFileBig;
  class InputMediaEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputMediaEmpty';
      this.constructorId = 2523198847;
      this.subclassOfId = 4210575092;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputMediaEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputMediaEmpty = InputMediaEmpty;
  class InputMediaUploadedPhoto extends TLObject {
    spoiler;
    file;
    stickers;
    ttlSeconds;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMediaUploadedPhoto';
      this.constructorId = 505969924;
      this.subclassOfId = 4210575092;
      this._slots = ['spoiler', 'file', 'stickers', 'ttlSeconds'];
      this.spoiler = params.spoiler;
      this.file = params.file;
      this.stickers = params.stickers;
      this.ttlSeconds = params.ttlSeconds;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let spoiler = flags & (1 << 2) ? true : false;
      let file = await TLObject.read(b);
      let stickers2 = flags & (1 << 0) ? await TLObject.read(b) : [];
      let ttlSeconds = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.InputMediaUploadedPhoto({
        spoiler,
        file,
        stickers: stickers2,
        ttlSeconds,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.spoiler ? 1 << 2 : 0;
      flags |= this.stickers ? 1 << 0 : 0;
      flags |= this.ttlSeconds !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.file !== void 0) {
        b.write(this.file.write());
      }
      if (this.stickers) {
        b.write(Primitive.Vector.write(this.stickers));
      }
      if (this.ttlSeconds !== void 0) {
        b.write(Primitive.Int.write(this.ttlSeconds));
      }
      return b.buffer;
    }
  }
  Raw2.InputMediaUploadedPhoto = InputMediaUploadedPhoto;
  class InputMediaPhoto extends TLObject {
    spoiler;
    id;
    ttlSeconds;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMediaPhoto';
      this.constructorId = 3015312949;
      this.subclassOfId = 4210575092;
      this._slots = ['spoiler', 'id', 'ttlSeconds'];
      this.spoiler = params.spoiler;
      this.id = params.id;
      this.ttlSeconds = params.ttlSeconds;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let spoiler = flags & (1 << 1) ? true : false;
      let id = await TLObject.read(b);
      let ttlSeconds = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.InputMediaPhoto({ spoiler, id, ttlSeconds });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.spoiler ? 1 << 1 : 0;
      flags |= this.ttlSeconds !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(this.id.write());
      }
      if (this.ttlSeconds !== void 0) {
        b.write(Primitive.Int.write(this.ttlSeconds));
      }
      return b.buffer;
    }
  }
  Raw2.InputMediaPhoto = InputMediaPhoto;
  class InputMediaGeoPoint extends TLObject {
    geoPoint;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMediaGeoPoint';
      this.constructorId = 4190388548;
      this.subclassOfId = 4210575092;
      this._slots = ['geoPoint'];
      this.geoPoint = params.geoPoint;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let geoPoint = await TLObject.read(b);
      return new Raw2.InputMediaGeoPoint({ geoPoint });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.geoPoint !== void 0) {
        b.write(this.geoPoint.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputMediaGeoPoint = InputMediaGeoPoint;
  class InputMediaContact extends TLObject {
    phoneNumber;
    firstName;
    lastName;
    vcard;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMediaContact';
      this.constructorId = 4171988475;
      this.subclassOfId = 4210575092;
      this._slots = ['phoneNumber', 'firstName', 'lastName', 'vcard'];
      this.phoneNumber = params.phoneNumber;
      this.firstName = params.firstName;
      this.lastName = params.lastName;
      this.vcard = params.vcard;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let phoneNumber = await Primitive.String.read(b);
      let firstName = await Primitive.String.read(b);
      let lastName = await Primitive.String.read(b);
      let vcard = await Primitive.String.read(b);
      return new Raw2.InputMediaContact({
        phoneNumber,
        firstName,
        lastName,
        vcard,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.phoneNumber !== void 0) {
        b.write(Primitive.String.write(this.phoneNumber));
      }
      if (this.firstName !== void 0) {
        b.write(Primitive.String.write(this.firstName));
      }
      if (this.lastName !== void 0) {
        b.write(Primitive.String.write(this.lastName));
      }
      if (this.vcard !== void 0) {
        b.write(Primitive.String.write(this.vcard));
      }
      return b.buffer;
    }
  }
  Raw2.InputMediaContact = InputMediaContact;
  class InputMediaUploadedDocument extends TLObject {
    nosoundVideo;
    forceFile;
    spoiler;
    file;
    thumb;
    mimeType;
    attributes;
    stickers;
    ttlSeconds;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMediaUploadedDocument';
      this.constructorId = 1530447553;
      this.subclassOfId = 4210575092;
      this._slots = [
        'nosoundVideo',
        'forceFile',
        'spoiler',
        'file',
        'thumb',
        'mimeType',
        'attributes',
        'stickers',
        'ttlSeconds',
      ];
      this.nosoundVideo = params.nosoundVideo;
      this.forceFile = params.forceFile;
      this.spoiler = params.spoiler;
      this.file = params.file;
      this.thumb = params.thumb;
      this.mimeType = params.mimeType;
      this.attributes = params.attributes;
      this.stickers = params.stickers;
      this.ttlSeconds = params.ttlSeconds;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let nosoundVideo = flags & (1 << 3) ? true : false;
      let forceFile = flags & (1 << 4) ? true : false;
      let spoiler = flags & (1 << 5) ? true : false;
      let file = await TLObject.read(b);
      let thumb = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      let mimeType = await Primitive.String.read(b);
      let attributes = await TLObject.read(b);
      let stickers2 = flags & (1 << 0) ? await TLObject.read(b) : [];
      let ttlSeconds = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.InputMediaUploadedDocument({
        nosoundVideo,
        forceFile,
        spoiler,
        file,
        thumb,
        mimeType,
        attributes,
        stickers: stickers2,
        ttlSeconds,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.nosoundVideo ? 1 << 3 : 0;
      flags |= this.forceFile ? 1 << 4 : 0;
      flags |= this.spoiler ? 1 << 5 : 0;
      flags |= this.thumb !== void 0 ? 1 << 2 : 0;
      flags |= this.stickers ? 1 << 0 : 0;
      flags |= this.ttlSeconds !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.file !== void 0) {
        b.write(this.file.write());
      }
      if (this.thumb !== void 0) {
        b.write(this.thumb.write());
      }
      if (this.mimeType !== void 0) {
        b.write(Primitive.String.write(this.mimeType));
      }
      if (this.attributes) {
        b.write(Primitive.Vector.write(this.attributes));
      }
      if (this.stickers) {
        b.write(Primitive.Vector.write(this.stickers));
      }
      if (this.ttlSeconds !== void 0) {
        b.write(Primitive.Int.write(this.ttlSeconds));
      }
      return b.buffer;
    }
  }
  Raw2.InputMediaUploadedDocument = InputMediaUploadedDocument;
  class InputMediaDocument extends TLObject {
    spoiler;
    id;
    ttlSeconds;
    query;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMediaDocument';
      this.constructorId = 860303448;
      this.subclassOfId = 4210575092;
      this._slots = ['spoiler', 'id', 'ttlSeconds', 'query'];
      this.spoiler = params.spoiler;
      this.id = params.id;
      this.ttlSeconds = params.ttlSeconds;
      this.query = params.query;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let spoiler = flags & (1 << 2) ? true : false;
      let id = await TLObject.read(b);
      let ttlSeconds = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let query = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      return new Raw2.InputMediaDocument({
        spoiler,
        id,
        ttlSeconds,
        query,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.spoiler ? 1 << 2 : 0;
      flags |= this.ttlSeconds !== void 0 ? 1 << 0 : 0;
      flags |= this.query !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(this.id.write());
      }
      if (this.ttlSeconds !== void 0) {
        b.write(Primitive.Int.write(this.ttlSeconds));
      }
      if (this.query !== void 0) {
        b.write(Primitive.String.write(this.query));
      }
      return b.buffer;
    }
  }
  Raw2.InputMediaDocument = InputMediaDocument;
  class InputMediaVenue extends TLObject {
    geoPoint;
    title;
    address;
    provider;
    venueId;
    venueType;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMediaVenue';
      this.constructorId = 3242007569;
      this.subclassOfId = 4210575092;
      this._slots = ['geoPoint', 'title', 'address', 'provider', 'venueId', 'venueType'];
      this.geoPoint = params.geoPoint;
      this.title = params.title;
      this.address = params.address;
      this.provider = params.provider;
      this.venueId = params.venueId;
      this.venueType = params.venueType;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let geoPoint = await TLObject.read(b);
      let title = await Primitive.String.read(b);
      let address = await Primitive.String.read(b);
      let provider = await Primitive.String.read(b);
      let venueId = await Primitive.String.read(b);
      let venueType = await Primitive.String.read(b);
      return new Raw2.InputMediaVenue({
        geoPoint,
        title,
        address,
        provider,
        venueId,
        venueType,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.geoPoint !== void 0) {
        b.write(this.geoPoint.write());
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.address !== void 0) {
        b.write(Primitive.String.write(this.address));
      }
      if (this.provider !== void 0) {
        b.write(Primitive.String.write(this.provider));
      }
      if (this.venueId !== void 0) {
        b.write(Primitive.String.write(this.venueId));
      }
      if (this.venueType !== void 0) {
        b.write(Primitive.String.write(this.venueType));
      }
      return b.buffer;
    }
  }
  Raw2.InputMediaVenue = InputMediaVenue;
  class InputMediaPhotoExternal extends TLObject {
    spoiler;
    url;
    ttlSeconds;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMediaPhotoExternal';
      this.constructorId = 3854302746;
      this.subclassOfId = 4210575092;
      this._slots = ['spoiler', 'url', 'ttlSeconds'];
      this.spoiler = params.spoiler;
      this.url = params.url;
      this.ttlSeconds = params.ttlSeconds;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let spoiler = flags & (1 << 1) ? true : false;
      let url = await Primitive.String.read(b);
      let ttlSeconds = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.InputMediaPhotoExternal({
        spoiler,
        url,
        ttlSeconds,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.spoiler ? 1 << 1 : 0;
      flags |= this.ttlSeconds !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.ttlSeconds !== void 0) {
        b.write(Primitive.Int.write(this.ttlSeconds));
      }
      return b.buffer;
    }
  }
  Raw2.InputMediaPhotoExternal = InputMediaPhotoExternal;
  class InputMediaDocumentExternal extends TLObject {
    spoiler;
    url;
    ttlSeconds;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMediaDocumentExternal';
      this.constructorId = 4216511641;
      this.subclassOfId = 4210575092;
      this._slots = ['spoiler', 'url', 'ttlSeconds'];
      this.spoiler = params.spoiler;
      this.url = params.url;
      this.ttlSeconds = params.ttlSeconds;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let spoiler = flags & (1 << 1) ? true : false;
      let url = await Primitive.String.read(b);
      let ttlSeconds = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.InputMediaDocumentExternal({
        spoiler,
        url,
        ttlSeconds,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.spoiler ? 1 << 1 : 0;
      flags |= this.ttlSeconds !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.ttlSeconds !== void 0) {
        b.write(Primitive.Int.write(this.ttlSeconds));
      }
      return b.buffer;
    }
  }
  Raw2.InputMediaDocumentExternal = InputMediaDocumentExternal;
  class InputMediaGame extends TLObject {
    id;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMediaGame';
      this.constructorId = 3544138739;
      this.subclassOfId = 4210575092;
      this._slots = ['id'];
      this.id = params.id;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await TLObject.read(b);
      return new Raw2.InputMediaGame({ id });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(this.id.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputMediaGame = InputMediaGame;
  class InputMediaInvoice extends TLObject {
    title;
    description;
    photo;
    invoice;
    payload;
    provider;
    providerData;
    startParam;
    extendedMedia;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMediaInvoice';
      this.constructorId = 2394269397;
      this.subclassOfId = 4210575092;
      this._slots = [
        'title',
        'description',
        'photo',
        'invoice',
        'payload',
        'provider',
        'providerData',
        'startParam',
        'extendedMedia',
      ];
      this.title = params.title;
      this.description = params.description;
      this.photo = params.photo;
      this.invoice = params.invoice;
      this.payload = params.payload;
      this.provider = params.provider;
      this.providerData = params.providerData;
      this.startParam = params.startParam;
      this.extendedMedia = params.extendedMedia;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let title = await Primitive.String.read(b);
      let description = await Primitive.String.read(b);
      let photo = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let invoice = await TLObject.read(b);
      let payload = await Primitive.Bytes.read(b);
      let provider = await Primitive.String.read(b);
      let providerData = await TLObject.read(b);
      let startParam = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let extendedMedia = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.InputMediaInvoice({
        title,
        description,
        photo,
        invoice,
        payload,
        provider,
        providerData,
        startParam,
        extendedMedia,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.photo !== void 0 ? 1 << 0 : 0;
      flags |= this.startParam !== void 0 ? 1 << 1 : 0;
      flags |= this.extendedMedia !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.description !== void 0) {
        b.write(Primitive.String.write(this.description));
      }
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      if (this.invoice !== void 0) {
        b.write(this.invoice.write());
      }
      if (this.payload !== void 0) {
        b.write(Primitive.Bytes.write(this.payload));
      }
      if (this.provider !== void 0) {
        b.write(Primitive.String.write(this.provider));
      }
      if (this.providerData !== void 0) {
        b.write(this.providerData.write());
      }
      if (this.startParam !== void 0) {
        b.write(Primitive.String.write(this.startParam));
      }
      if (this.extendedMedia !== void 0) {
        b.write(this.extendedMedia.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputMediaInvoice = InputMediaInvoice;
  class InputMediaGeoLive extends TLObject {
    stopped;
    geoPoint;
    heading;
    period;
    proximityNotificationRadius;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMediaGeoLive';
      this.constructorId = 2535434307;
      this.subclassOfId = 4210575092;
      this._slots = ['stopped', 'geoPoint', 'heading', 'period', 'proximityNotificationRadius'];
      this.stopped = params.stopped;
      this.geoPoint = params.geoPoint;
      this.heading = params.heading;
      this.period = params.period;
      this.proximityNotificationRadius = params.proximityNotificationRadius;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let stopped = flags & (1 << 0) ? true : false;
      let geoPoint = await TLObject.read(b);
      let heading = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      let period = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      let proximityNotificationRadius = flags & (1 << 3) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.InputMediaGeoLive({
        stopped,
        geoPoint,
        heading,
        period,
        proximityNotificationRadius,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.stopped ? 1 << 0 : 0;
      flags |= this.heading !== void 0 ? 1 << 2 : 0;
      flags |= this.period !== void 0 ? 1 << 1 : 0;
      flags |= this.proximityNotificationRadius !== void 0 ? 1 << 3 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.geoPoint !== void 0) {
        b.write(this.geoPoint.write());
      }
      if (this.heading !== void 0) {
        b.write(Primitive.Int.write(this.heading));
      }
      if (this.period !== void 0) {
        b.write(Primitive.Int.write(this.period));
      }
      if (this.proximityNotificationRadius !== void 0) {
        b.write(Primitive.Int.write(this.proximityNotificationRadius));
      }
      return b.buffer;
    }
  }
  Raw2.InputMediaGeoLive = InputMediaGeoLive;
  class InputMediaPoll extends TLObject {
    poll;
    correctAnswers;
    solution;
    solutionEntities;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMediaPoll';
      this.constructorId = 261416433;
      this.subclassOfId = 4210575092;
      this._slots = ['poll', 'correctAnswers', 'solution', 'solutionEntities'];
      this.poll = params.poll;
      this.correctAnswers = params.correctAnswers;
      this.solution = params.solution;
      this.solutionEntities = params.solutionEntities;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let poll = await TLObject.read(b);
      let correctAnswers = flags & (1 << 0) ? await TLObject.read(b, Primitive.Bytes) : [];
      let solution = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let solutionEntities = flags & (1 << 1) ? await TLObject.read(b) : [];
      return new Raw2.InputMediaPoll({
        poll,
        correctAnswers,
        solution,
        solutionEntities,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.correctAnswers ? 1 << 0 : 0;
      flags |= this.solution !== void 0 ? 1 << 1 : 0;
      flags |= this.solutionEntities ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.poll !== void 0) {
        b.write(this.poll.write());
      }
      if (this.correctAnswers) {
        b.write(Primitive.Vector.write(this.correctAnswers, Primitive.Bytes));
      }
      if (this.solution !== void 0) {
        b.write(Primitive.String.write(this.solution));
      }
      if (this.solutionEntities) {
        b.write(Primitive.Vector.write(this.solutionEntities));
      }
      return b.buffer;
    }
  }
  Raw2.InputMediaPoll = InputMediaPoll;
  class InputMediaDice extends TLObject {
    emoticon;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMediaDice';
      this.constructorId = 3866083195;
      this.subclassOfId = 4210575092;
      this._slots = ['emoticon'];
      this.emoticon = params.emoticon;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let emoticon = await Primitive.String.read(b);
      return new Raw2.InputMediaDice({ emoticon });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.emoticon !== void 0) {
        b.write(Primitive.String.write(this.emoticon));
      }
      return b.buffer;
    }
  }
  Raw2.InputMediaDice = InputMediaDice;
  class InputMediaStory extends TLObject {
    peer;
    id;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMediaStory';
      this.constructorId = 2315114360;
      this.subclassOfId = 4210575092;
      this._slots = ['peer', 'id'];
      this.peer = params.peer;
      this.id = params.id;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let id = await Primitive.Int.read(b);
      return new Raw2.InputMediaStory({ peer, id });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      return b.buffer;
    }
  }
  Raw2.InputMediaStory = InputMediaStory;
  class InputMediaWebPage extends TLObject {
    forceLargeMedia;
    forceSmallMedia;
    optional;
    url;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMediaWebPage';
      this.constructorId = 3256584265;
      this.subclassOfId = 4210575092;
      this._slots = ['forceLargeMedia', 'forceSmallMedia', 'optional', 'url'];
      this.forceLargeMedia = params.forceLargeMedia;
      this.forceSmallMedia = params.forceSmallMedia;
      this.optional = params.optional;
      this.url = params.url;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let forceLargeMedia = flags & (1 << 0) ? true : false;
      let forceSmallMedia = flags & (1 << 1) ? true : false;
      let optional = flags & (1 << 2) ? true : false;
      let url = await Primitive.String.read(b);
      return new Raw2.InputMediaWebPage({
        forceLargeMedia,
        forceSmallMedia,
        optional,
        url,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.forceLargeMedia ? 1 << 0 : 0;
      flags |= this.forceSmallMedia ? 1 << 1 : 0;
      flags |= this.optional ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      return b.buffer;
    }
  }
  Raw2.InputMediaWebPage = InputMediaWebPage;
  class InputChatPhotoEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputChatPhotoEmpty';
      this.constructorId = 480546647;
      this.subclassOfId = 3572182388;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputChatPhotoEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputChatPhotoEmpty = InputChatPhotoEmpty;
  class InputChatUploadedPhoto extends TLObject {
    file;
    video;
    videoStartTs;
    videoEmojiMarkup;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputChatUploadedPhoto';
      this.constructorId = 3184373440;
      this.subclassOfId = 3572182388;
      this._slots = ['file', 'video', 'videoStartTs', 'videoEmojiMarkup'];
      this.file = params.file;
      this.video = params.video;
      this.videoStartTs = params.videoStartTs;
      this.videoEmojiMarkup = params.videoEmojiMarkup;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let file = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let video = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      let videoStartTs = flags & (1 << 2) ? await Primitive.Double.read(b) : void 0;
      let videoEmojiMarkup = flags & (1 << 3) ? await TLObject.read(b) : void 0;
      return new Raw2.InputChatUploadedPhoto({
        file,
        video,
        videoStartTs,
        videoEmojiMarkup,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.file !== void 0 ? 1 << 0 : 0;
      flags |= this.video !== void 0 ? 1 << 1 : 0;
      flags |= this.videoStartTs !== void 0 ? 1 << 2 : 0;
      flags |= this.videoEmojiMarkup !== void 0 ? 1 << 3 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.file !== void 0) {
        b.write(this.file.write());
      }
      if (this.video !== void 0) {
        b.write(this.video.write());
      }
      if (this.videoStartTs !== void 0) {
        b.write(Primitive.Double.write(this.videoStartTs));
      }
      if (this.videoEmojiMarkup !== void 0) {
        b.write(this.videoEmojiMarkup.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputChatUploadedPhoto = InputChatUploadedPhoto;
  class InputChatPhoto extends TLObject {
    id;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputChatPhoto';
      this.constructorId = 2303962423;
      this.subclassOfId = 3572182388;
      this._slots = ['id'];
      this.id = params.id;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await TLObject.read(b);
      return new Raw2.InputChatPhoto({ id });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(this.id.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputChatPhoto = InputChatPhoto;
  class InputGeoPointEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputGeoPointEmpty';
      this.constructorId = 3837862870;
      this.subclassOfId = 70308389;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputGeoPointEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputGeoPointEmpty = InputGeoPointEmpty;
  class InputGeoPoint extends TLObject {
    lat;
    long;
    accuracyRadius;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputGeoPoint';
      this.constructorId = 1210199983;
      this.subclassOfId = 70308389;
      this._slots = ['lat', 'long', 'accuracyRadius'];
      this.lat = params.lat;
      this.long = params.long;
      this.accuracyRadius = params.accuracyRadius;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let lat = await Primitive.Double.read(b);
      let long = await Primitive.Double.read(b);
      let accuracyRadius = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.InputGeoPoint({ lat, long, accuracyRadius });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.accuracyRadius !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.lat !== void 0) {
        b.write(Primitive.Double.write(this.lat));
      }
      if (this.long !== void 0) {
        b.write(Primitive.Double.write(this.long));
      }
      if (this.accuracyRadius !== void 0) {
        b.write(Primitive.Int.write(this.accuracyRadius));
      }
      return b.buffer;
    }
  }
  Raw2.InputGeoPoint = InputGeoPoint;
  class InputPhotoEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPhotoEmpty';
      this.constructorId = 483901197;
      this.subclassOfId = 2221106144;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPhotoEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPhotoEmpty = InputPhotoEmpty;
  class InputPhoto extends TLObject {
    id;
    accessHash;
    fileReference;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPhoto';
      this.constructorId = 1001634122;
      this.subclassOfId = 2221106144;
      this._slots = ['id', 'accessHash', 'fileReference'];
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.fileReference = params.fileReference;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let fileReference = await Primitive.Bytes.read(b);
      return new Raw2.InputPhoto({ id, accessHash, fileReference });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.fileReference !== void 0) {
        b.write(Primitive.Bytes.write(this.fileReference));
      }
      return b.buffer;
    }
  }
  Raw2.InputPhoto = InputPhoto;
  class InputFileLocation extends TLObject {
    volumeId;
    localId;
    secret;
    fileReference;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputFileLocation';
      this.constructorId = 3755650017;
      this.subclassOfId = 354669666;
      this._slots = ['volumeId', 'localId', 'secret', 'fileReference'];
      this.volumeId = params.volumeId;
      this.localId = params.localId;
      this.secret = params.secret;
      this.fileReference = params.fileReference;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let volumeId = await Primitive.Long.read(b);
      let localId = await Primitive.Int.read(b);
      let secret = await Primitive.Long.read(b);
      let fileReference = await Primitive.Bytes.read(b);
      return new Raw2.InputFileLocation({
        volumeId,
        localId,
        secret,
        fileReference,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.volumeId !== void 0) {
        b.write(Primitive.Long.write(this.volumeId));
      }
      if (this.localId !== void 0) {
        b.write(Primitive.Int.write(this.localId));
      }
      if (this.secret !== void 0) {
        b.write(Primitive.Long.write(this.secret));
      }
      if (this.fileReference !== void 0) {
        b.write(Primitive.Bytes.write(this.fileReference));
      }
      return b.buffer;
    }
  }
  Raw2.InputFileLocation = InputFileLocation;
  class InputEncryptedFileLocation extends TLObject {
    id;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputEncryptedFileLocation';
      this.constructorId = 4112735573;
      this.subclassOfId = 354669666;
      this._slots = ['id', 'accessHash'];
      this.id = params.id;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputEncryptedFileLocation({ id, accessHash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputEncryptedFileLocation = InputEncryptedFileLocation;
  class InputDocumentFileLocation extends TLObject {
    id;
    accessHash;
    fileReference;
    thumbSize;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputDocumentFileLocation';
      this.constructorId = 3134223748;
      this.subclassOfId = 354669666;
      this._slots = ['id', 'accessHash', 'fileReference', 'thumbSize'];
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.fileReference = params.fileReference;
      this.thumbSize = params.thumbSize;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let fileReference = await Primitive.Bytes.read(b);
      let thumbSize = await Primitive.String.read(b);
      return new Raw2.InputDocumentFileLocation({
        id,
        accessHash,
        fileReference,
        thumbSize,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.fileReference !== void 0) {
        b.write(Primitive.Bytes.write(this.fileReference));
      }
      if (this.thumbSize !== void 0) {
        b.write(Primitive.String.write(this.thumbSize));
      }
      return b.buffer;
    }
  }
  Raw2.InputDocumentFileLocation = InputDocumentFileLocation;
  class InputSecureFileLocation extends TLObject {
    id;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputSecureFileLocation';
      this.constructorId = 3418877480;
      this.subclassOfId = 354669666;
      this._slots = ['id', 'accessHash'];
      this.id = params.id;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputSecureFileLocation({ id, accessHash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputSecureFileLocation = InputSecureFileLocation;
  class InputTakeoutFileLocation extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputTakeoutFileLocation';
      this.constructorId = 700340377;
      this.subclassOfId = 354669666;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputTakeoutFileLocation();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputTakeoutFileLocation = InputTakeoutFileLocation;
  class InputPhotoFileLocation extends TLObject {
    id;
    accessHash;
    fileReference;
    thumbSize;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPhotoFileLocation';
      this.constructorId = 1075322878;
      this.subclassOfId = 354669666;
      this._slots = ['id', 'accessHash', 'fileReference', 'thumbSize'];
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.fileReference = params.fileReference;
      this.thumbSize = params.thumbSize;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let fileReference = await Primitive.Bytes.read(b);
      let thumbSize = await Primitive.String.read(b);
      return new Raw2.InputPhotoFileLocation({
        id,
        accessHash,
        fileReference,
        thumbSize,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.fileReference !== void 0) {
        b.write(Primitive.Bytes.write(this.fileReference));
      }
      if (this.thumbSize !== void 0) {
        b.write(Primitive.String.write(this.thumbSize));
      }
      return b.buffer;
    }
  }
  Raw2.InputPhotoFileLocation = InputPhotoFileLocation;
  class InputPhotoLegacyFileLocation extends TLObject {
    id;
    accessHash;
    fileReference;
    volumeId;
    localId;
    secret;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPhotoLegacyFileLocation';
      this.constructorId = 3627312883;
      this.subclassOfId = 354669666;
      this._slots = ['id', 'accessHash', 'fileReference', 'volumeId', 'localId', 'secret'];
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.fileReference = params.fileReference;
      this.volumeId = params.volumeId;
      this.localId = params.localId;
      this.secret = params.secret;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let fileReference = await Primitive.Bytes.read(b);
      let volumeId = await Primitive.Long.read(b);
      let localId = await Primitive.Int.read(b);
      let secret = await Primitive.Long.read(b);
      return new Raw2.InputPhotoLegacyFileLocation({
        id,
        accessHash,
        fileReference,
        volumeId,
        localId,
        secret,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.fileReference !== void 0) {
        b.write(Primitive.Bytes.write(this.fileReference));
      }
      if (this.volumeId !== void 0) {
        b.write(Primitive.Long.write(this.volumeId));
      }
      if (this.localId !== void 0) {
        b.write(Primitive.Int.write(this.localId));
      }
      if (this.secret !== void 0) {
        b.write(Primitive.Long.write(this.secret));
      }
      return b.buffer;
    }
  }
  Raw2.InputPhotoLegacyFileLocation = InputPhotoLegacyFileLocation;
  class InputPeerPhotoFileLocation extends TLObject {
    big;
    peer;
    photoId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPeerPhotoFileLocation';
      this.constructorId = 925204121;
      this.subclassOfId = 354669666;
      this._slots = ['big', 'peer', 'photoId'];
      this.big = params.big;
      this.peer = params.peer;
      this.photoId = params.photoId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let big = flags & (1 << 0) ? true : false;
      let peer = await TLObject.read(b);
      let photoId = await Primitive.Long.read(b);
      return new Raw2.InputPeerPhotoFileLocation({ big, peer, photoId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.big ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.photoId !== void 0) {
        b.write(Primitive.Long.write(this.photoId));
      }
      return b.buffer;
    }
  }
  Raw2.InputPeerPhotoFileLocation = InputPeerPhotoFileLocation;
  class InputStickerSetThumb extends TLObject {
    stickerset;
    thumbVersion;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputStickerSetThumb';
      this.constructorId = 2642736091;
      this.subclassOfId = 354669666;
      this._slots = ['stickerset', 'thumbVersion'];
      this.stickerset = params.stickerset;
      this.thumbVersion = params.thumbVersion;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let stickerset = await TLObject.read(b);
      let thumbVersion = await Primitive.Int.read(b);
      return new Raw2.InputStickerSetThumb({ stickerset, thumbVersion });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.stickerset !== void 0) {
        b.write(this.stickerset.write());
      }
      if (this.thumbVersion !== void 0) {
        b.write(Primitive.Int.write(this.thumbVersion));
      }
      return b.buffer;
    }
  }
  Raw2.InputStickerSetThumb = InputStickerSetThumb;
  class InputGroupCallStream extends TLObject {
    call;
    timeMs;
    scale;
    videoChannel;
    videoQuality;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputGroupCallStream';
      this.constructorId = 93890858;
      this.subclassOfId = 354669666;
      this._slots = ['call', 'timeMs', 'scale', 'videoChannel', 'videoQuality'];
      this.call = params.call;
      this.timeMs = params.timeMs;
      this.scale = params.scale;
      this.videoChannel = params.videoChannel;
      this.videoQuality = params.videoQuality;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let call = await TLObject.read(b);
      let timeMs = await Primitive.Long.read(b);
      let scale = await Primitive.Int.read(b);
      let videoChannel = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let videoQuality = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.InputGroupCallStream({
        call,
        timeMs,
        scale,
        videoChannel,
        videoQuality,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.videoChannel !== void 0 ? 1 << 0 : 0;
      flags |= this.videoQuality !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.call !== void 0) {
        b.write(this.call.write());
      }
      if (this.timeMs !== void 0) {
        b.write(Primitive.Long.write(this.timeMs));
      }
      if (this.scale !== void 0) {
        b.write(Primitive.Int.write(this.scale));
      }
      if (this.videoChannel !== void 0) {
        b.write(Primitive.Int.write(this.videoChannel));
      }
      if (this.videoQuality !== void 0) {
        b.write(Primitive.Int.write(this.videoQuality));
      }
      return b.buffer;
    }
  }
  Raw2.InputGroupCallStream = InputGroupCallStream;
  class PeerUser extends TLObject {
    userId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PeerUser';
      this.constructorId = 1498486562;
      this.subclassOfId = 47470215;
      this._slots = ['userId'];
      this.userId = params.userId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      return new Raw2.PeerUser({ userId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      return b.buffer;
    }
  }
  Raw2.PeerUser = PeerUser;
  class PeerChat extends TLObject {
    chatId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PeerChat';
      this.constructorId = 918946202;
      this.subclassOfId = 47470215;
      this._slots = ['chatId'];
      this.chatId = params.chatId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chatId = await Primitive.Long.read(b);
      return new Raw2.PeerChat({ chatId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chatId !== void 0) {
        b.write(Primitive.Long.write(this.chatId));
      }
      return b.buffer;
    }
  }
  Raw2.PeerChat = PeerChat;
  class PeerChannel extends TLObject {
    channelId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PeerChannel';
      this.constructorId = 2728736542;
      this.subclassOfId = 47470215;
      this._slots = ['channelId'];
      this.channelId = params.channelId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let channelId = await Primitive.Long.read(b);
      return new Raw2.PeerChannel({ channelId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      return b.buffer;
    }
  }
  Raw2.PeerChannel = PeerChannel;
  class UserEmpty extends TLObject {
    id;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UserEmpty';
      this.constructorId = 3552332666;
      this.subclassOfId = 765557111;
      this._slots = ['id'];
      this.id = params.id;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      return new Raw2.UserEmpty({ id });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      return b.buffer;
    }
  }
  Raw2.UserEmpty = UserEmpty;
  class User extends TLObject {
    self;
    contact;
    mutualContact;
    deleted;
    bot;
    botChatHistory;
    botNochats;
    verified;
    restricted;
    min;
    botInlineGeo;
    support;
    scam;
    applyMinPhoto;
    fake;
    botAttachMenu;
    premium;
    attachMenuEnabled;
    botCanEdit;
    closeFriend;
    storiesHidden;
    storiesUnavailable;
    contactRequirePremium;
    botBusiness;
    id;
    accessHash;
    firstName;
    lastName;
    username;
    phone;
    photo;
    status;
    botInfoVersion;
    restrictionReason;
    botInlinePlaceholder;
    langCode;
    emojiStatus;
    usernames;
    storiesMaxId;
    color;
    profileColor;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'User';
      this.constructorId = 559694904;
      this.subclassOfId = 765557111;
      this._slots = [
        'self',
        'contact',
        'mutualContact',
        'deleted',
        'bot',
        'botChatHistory',
        'botNochats',
        'verified',
        'restricted',
        'min',
        'botInlineGeo',
        'support',
        'scam',
        'applyMinPhoto',
        'fake',
        'botAttachMenu',
        'premium',
        'attachMenuEnabled',
        'botCanEdit',
        'closeFriend',
        'storiesHidden',
        'storiesUnavailable',
        'contactRequirePremium',
        'botBusiness',
        'id',
        'accessHash',
        'firstName',
        'lastName',
        'username',
        'phone',
        'photo',
        'status',
        'botInfoVersion',
        'restrictionReason',
        'botInlinePlaceholder',
        'langCode',
        'emojiStatus',
        'usernames',
        'storiesMaxId',
        'color',
        'profileColor',
      ];
      this.self = params.self;
      this.contact = params.contact;
      this.mutualContact = params.mutualContact;
      this.deleted = params.deleted;
      this.bot = params.bot;
      this.botChatHistory = params.botChatHistory;
      this.botNochats = params.botNochats;
      this.verified = params.verified;
      this.restricted = params.restricted;
      this.min = params.min;
      this.botInlineGeo = params.botInlineGeo;
      this.support = params.support;
      this.scam = params.scam;
      this.applyMinPhoto = params.applyMinPhoto;
      this.fake = params.fake;
      this.botAttachMenu = params.botAttachMenu;
      this.premium = params.premium;
      this.attachMenuEnabled = params.attachMenuEnabled;
      this.botCanEdit = params.botCanEdit;
      this.closeFriend = params.closeFriend;
      this.storiesHidden = params.storiesHidden;
      this.storiesUnavailable = params.storiesUnavailable;
      this.contactRequirePremium = params.contactRequirePremium;
      this.botBusiness = params.botBusiness;
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.firstName = params.firstName;
      this.lastName = params.lastName;
      this.username = params.username;
      this.phone = params.phone;
      this.photo = params.photo;
      this.status = params.status;
      this.botInfoVersion = params.botInfoVersion;
      this.restrictionReason = params.restrictionReason;
      this.botInlinePlaceholder = params.botInlinePlaceholder;
      this.langCode = params.langCode;
      this.emojiStatus = params.emojiStatus;
      this.usernames = params.usernames;
      this.storiesMaxId = params.storiesMaxId;
      this.color = params.color;
      this.profileColor = params.profileColor;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let self = flags & (1 << 10) ? true : false;
      let contact = flags & (1 << 11) ? true : false;
      let mutualContact = flags & (1 << 12) ? true : false;
      let deleted = flags & (1 << 13) ? true : false;
      let bot = flags & (1 << 14) ? true : false;
      let botChatHistory = flags & (1 << 15) ? true : false;
      let botNochats = flags & (1 << 16) ? true : false;
      let verified = flags & (1 << 17) ? true : false;
      let restricted = flags & (1 << 18) ? true : false;
      let min = flags & (1 << 20) ? true : false;
      let botInlineGeo = flags & (1 << 21) ? true : false;
      let support = flags & (1 << 23) ? true : false;
      let scam = flags & (1 << 24) ? true : false;
      let applyMinPhoto = flags & (1 << 25) ? true : false;
      let fake = flags & (1 << 26) ? true : false;
      let botAttachMenu = flags & (1 << 27) ? true : false;
      let premium2 = flags & (1 << 28) ? true : false;
      let attachMenuEnabled = flags & (1 << 29) ? true : false;
      let flags2 = await Primitive.Int.read(b);
      let botCanEdit = flags2 & (1 << 1) ? true : false;
      let closeFriend = flags2 & (1 << 2) ? true : false;
      let storiesHidden = flags2 & (1 << 3) ? true : false;
      let storiesUnavailable = flags2 & (1 << 4) ? true : false;
      let contactRequirePremium = flags2 & (1 << 10) ? true : false;
      let botBusiness = flags2 & (1 << 11) ? true : false;
      let id = await Primitive.Long.read(b);
      let accessHash = flags & (1 << 0) ? await Primitive.Long.read(b) : void 0;
      let firstName = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let lastName = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
      let username = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
      let phone2 = flags & (1 << 4) ? await Primitive.String.read(b) : void 0;
      let photo = flags & (1 << 5) ? await TLObject.read(b) : void 0;
      let status = flags & (1 << 6) ? await TLObject.read(b) : void 0;
      let botInfoVersion = flags & (1 << 14) ? await Primitive.Int.read(b) : void 0;
      let restrictionReason = flags & (1 << 18) ? await TLObject.read(b) : [];
      let botInlinePlaceholder = flags & (1 << 19) ? await Primitive.String.read(b) : void 0;
      let langCode = flags & (1 << 22) ? await Primitive.String.read(b) : void 0;
      let emojiStatus = flags & (1 << 30) ? await TLObject.read(b) : void 0;
      let usernames = flags2 & (1 << 0) ? await TLObject.read(b) : [];
      let storiesMaxId = flags2 & (1 << 5) ? await Primitive.Int.read(b) : void 0;
      let color = flags2 & (1 << 8) ? await TLObject.read(b) : void 0;
      let profileColor = flags2 & (1 << 9) ? await TLObject.read(b) : void 0;
      return new Raw2.User({
        self,
        contact,
        mutualContact,
        deleted,
        bot,
        botChatHistory,
        botNochats,
        verified,
        restricted,
        min,
        botInlineGeo,
        support,
        scam,
        applyMinPhoto,
        fake,
        botAttachMenu,
        premium: premium2,
        attachMenuEnabled,
        botCanEdit,
        closeFriend,
        storiesHidden,
        storiesUnavailable,
        contactRequirePremium,
        botBusiness,
        id,
        accessHash,
        firstName,
        lastName,
        username,
        phone: phone2,
        photo,
        status,
        botInfoVersion,
        restrictionReason,
        botInlinePlaceholder,
        langCode,
        emojiStatus,
        usernames,
        storiesMaxId,
        color,
        profileColor,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.self ? 1 << 10 : 0;
      flags |= this.contact ? 1 << 11 : 0;
      flags |= this.mutualContact ? 1 << 12 : 0;
      flags |= this.deleted ? 1 << 13 : 0;
      flags |= this.bot ? 1 << 14 : 0;
      flags |= this.botChatHistory ? 1 << 15 : 0;
      flags |= this.botNochats ? 1 << 16 : 0;
      flags |= this.verified ? 1 << 17 : 0;
      flags |= this.restricted ? 1 << 18 : 0;
      flags |= this.min ? 1 << 20 : 0;
      flags |= this.botInlineGeo ? 1 << 21 : 0;
      flags |= this.support ? 1 << 23 : 0;
      flags |= this.scam ? 1 << 24 : 0;
      flags |= this.applyMinPhoto ? 1 << 25 : 0;
      flags |= this.fake ? 1 << 26 : 0;
      flags |= this.botAttachMenu ? 1 << 27 : 0;
      flags |= this.premium ? 1 << 28 : 0;
      flags |= this.attachMenuEnabled ? 1 << 29 : 0;
      flags |= this.accessHash !== void 0 ? 1 << 0 : 0;
      flags |= this.firstName !== void 0 ? 1 << 1 : 0;
      flags |= this.lastName !== void 0 ? 1 << 2 : 0;
      flags |= this.username !== void 0 ? 1 << 3 : 0;
      flags |= this.phone !== void 0 ? 1 << 4 : 0;
      flags |= this.photo !== void 0 ? 1 << 5 : 0;
      flags |= this.status !== void 0 ? 1 << 6 : 0;
      flags |= this.botInfoVersion !== void 0 ? 1 << 14 : 0;
      flags |= this.restrictionReason ? 1 << 18 : 0;
      flags |= this.botInlinePlaceholder !== void 0 ? 1 << 19 : 0;
      flags |= this.langCode !== void 0 ? 1 << 22 : 0;
      flags |= this.emojiStatus !== void 0 ? 1 << 30 : 0;
      b.write(Primitive.Int.write(flags));
      let flags2 = 0;
      flags2 |= this.botCanEdit ? 1 << 1 : 0;
      flags2 |= this.closeFriend ? 1 << 2 : 0;
      flags2 |= this.storiesHidden ? 1 << 3 : 0;
      flags2 |= this.storiesUnavailable ? 1 << 4 : 0;
      flags2 |= this.contactRequirePremium ? 1 << 10 : 0;
      flags2 |= this.botBusiness ? 1 << 11 : 0;
      flags2 |= this.usernames ? 1 << 0 : 0;
      flags2 |= this.storiesMaxId !== void 0 ? 1 << 5 : 0;
      flags2 |= this.color !== void 0 ? 1 << 8 : 0;
      flags2 |= this.profileColor !== void 0 ? 1 << 9 : 0;
      b.write(Primitive.Int.write(flags2));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.firstName !== void 0) {
        b.write(Primitive.String.write(this.firstName));
      }
      if (this.lastName !== void 0) {
        b.write(Primitive.String.write(this.lastName));
      }
      if (this.username !== void 0) {
        b.write(Primitive.String.write(this.username));
      }
      if (this.phone !== void 0) {
        b.write(Primitive.String.write(this.phone));
      }
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      if (this.status !== void 0) {
        b.write(this.status.write());
      }
      if (this.botInfoVersion !== void 0) {
        b.write(Primitive.Int.write(this.botInfoVersion));
      }
      if (this.restrictionReason) {
        b.write(Primitive.Vector.write(this.restrictionReason));
      }
      if (this.botInlinePlaceholder !== void 0) {
        b.write(Primitive.String.write(this.botInlinePlaceholder));
      }
      if (this.langCode !== void 0) {
        b.write(Primitive.String.write(this.langCode));
      }
      if (this.emojiStatus !== void 0) {
        b.write(this.emojiStatus.write());
      }
      if (this.usernames) {
        b.write(Primitive.Vector.write(this.usernames));
      }
      if (this.storiesMaxId !== void 0) {
        b.write(Primitive.Int.write(this.storiesMaxId));
      }
      if (this.color !== void 0) {
        b.write(this.color.write());
      }
      if (this.profileColor !== void 0) {
        b.write(this.profileColor.write());
      }
      return b.buffer;
    }
  }
  Raw2.User = User;
  class UserProfilePhotoEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UserProfilePhotoEmpty';
      this.constructorId = 1326562017;
      this.subclassOfId = 3325267837;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UserProfilePhotoEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UserProfilePhotoEmpty = UserProfilePhotoEmpty;
  class UserProfilePhoto extends TLObject {
    hasVideo;
    personal;
    photoId;
    strippedThumb;
    dcId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UserProfilePhoto';
      this.constructorId = 2194798342;
      this.subclassOfId = 3325267837;
      this._slots = ['hasVideo', 'personal', 'photoId', 'strippedThumb', 'dcId'];
      this.hasVideo = params.hasVideo;
      this.personal = params.personal;
      this.photoId = params.photoId;
      this.strippedThumb = params.strippedThumb;
      this.dcId = params.dcId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let hasVideo = flags & (1 << 0) ? true : false;
      let personal = flags & (1 << 2) ? true : false;
      let photoId = await Primitive.Long.read(b);
      let strippedThumb = flags & (1 << 1) ? await Primitive.Bytes.read(b) : void 0;
      let dcId = await Primitive.Int.read(b);
      return new Raw2.UserProfilePhoto({
        hasVideo,
        personal,
        photoId,
        strippedThumb,
        dcId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.hasVideo ? 1 << 0 : 0;
      flags |= this.personal ? 1 << 2 : 0;
      flags |= this.strippedThumb !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.photoId !== void 0) {
        b.write(Primitive.Long.write(this.photoId));
      }
      if (this.strippedThumb !== void 0) {
        b.write(Primitive.Bytes.write(this.strippedThumb));
      }
      if (this.dcId !== void 0) {
        b.write(Primitive.Int.write(this.dcId));
      }
      return b.buffer;
    }
  }
  Raw2.UserProfilePhoto = UserProfilePhoto;
  class UserStatusEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UserStatusEmpty';
      this.constructorId = 164646985;
      this.subclassOfId = 1527477310;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UserStatusEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UserStatusEmpty = UserStatusEmpty;
  class UserStatusOnline extends TLObject {
    expires;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UserStatusOnline';
      this.constructorId = 3988339017;
      this.subclassOfId = 1527477310;
      this._slots = ['expires'];
      this.expires = params.expires;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let expires = await Primitive.Int.read(b);
      return new Raw2.UserStatusOnline({ expires });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.expires !== void 0) {
        b.write(Primitive.Int.write(this.expires));
      }
      return b.buffer;
    }
  }
  Raw2.UserStatusOnline = UserStatusOnline;
  class UserStatusOffline extends TLObject {
    wasOnline;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UserStatusOffline';
      this.constructorId = 9203775;
      this.subclassOfId = 1527477310;
      this._slots = ['wasOnline'];
      this.wasOnline = params.wasOnline;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let wasOnline = await Primitive.Int.read(b);
      return new Raw2.UserStatusOffline({ wasOnline });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.wasOnline !== void 0) {
        b.write(Primitive.Int.write(this.wasOnline));
      }
      return b.buffer;
    }
  }
  Raw2.UserStatusOffline = UserStatusOffline;
  class UserStatusRecently extends TLObject {
    byMe;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UserStatusRecently';
      this.constructorId = 2065268168;
      this.subclassOfId = 1527477310;
      this._slots = ['byMe'];
      this.byMe = params.byMe;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let byMe = flags & (1 << 0) ? true : false;
      return new Raw2.UserStatusRecently({ byMe });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.byMe ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      return b.buffer;
    }
  }
  Raw2.UserStatusRecently = UserStatusRecently;
  class UserStatusLastWeek extends TLObject {
    byMe;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UserStatusLastWeek';
      this.constructorId = 1410997530;
      this.subclassOfId = 1527477310;
      this._slots = ['byMe'];
      this.byMe = params.byMe;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let byMe = flags & (1 << 0) ? true : false;
      return new Raw2.UserStatusLastWeek({ byMe });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.byMe ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      return b.buffer;
    }
  }
  Raw2.UserStatusLastWeek = UserStatusLastWeek;
  class UserStatusLastMonth extends TLObject {
    byMe;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UserStatusLastMonth';
      this.constructorId = 1703516023;
      this.subclassOfId = 1527477310;
      this._slots = ['byMe'];
      this.byMe = params.byMe;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let byMe = flags & (1 << 0) ? true : false;
      return new Raw2.UserStatusLastMonth({ byMe });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.byMe ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      return b.buffer;
    }
  }
  Raw2.UserStatusLastMonth = UserStatusLastMonth;
  class ChatEmpty extends TLObject {
    id;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatEmpty';
      this.constructorId = 693512293;
      this.subclassOfId = 3316604308;
      this._slots = ['id'];
      this.id = params.id;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      return new Raw2.ChatEmpty({ id });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      return b.buffer;
    }
  }
  Raw2.ChatEmpty = ChatEmpty;
  class Chat extends TLObject {
    creator;
    left;
    deactivated;
    callActive;
    callNotEmpty;
    noforwards;
    id;
    title;
    photo;
    participantsCount;
    date;
    version;
    migratedTo;
    adminRights;
    defaultBannedRights;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Chat';
      this.constructorId = 1103884886;
      this.subclassOfId = 3316604308;
      this._slots = [
        'creator',
        'left',
        'deactivated',
        'callActive',
        'callNotEmpty',
        'noforwards',
        'id',
        'title',
        'photo',
        'participantsCount',
        'date',
        'version',
        'migratedTo',
        'adminRights',
        'defaultBannedRights',
      ];
      this.creator = params.creator;
      this.left = params.left;
      this.deactivated = params.deactivated;
      this.callActive = params.callActive;
      this.callNotEmpty = params.callNotEmpty;
      this.noforwards = params.noforwards;
      this.id = params.id;
      this.title = params.title;
      this.photo = params.photo;
      this.participantsCount = params.participantsCount;
      this.date = params.date;
      this.version = params.version;
      this.migratedTo = params.migratedTo;
      this.adminRights = params.adminRights;
      this.defaultBannedRights = params.defaultBannedRights;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let creator = flags & (1 << 0) ? true : false;
      let left = flags & (1 << 2) ? true : false;
      let deactivated = flags & (1 << 5) ? true : false;
      let callActive = flags & (1 << 23) ? true : false;
      let callNotEmpty = flags & (1 << 24) ? true : false;
      let noforwards = flags & (1 << 25) ? true : false;
      let id = await Primitive.Long.read(b);
      let title = await Primitive.String.read(b);
      let photo = await TLObject.read(b);
      let participantsCount = await Primitive.Int.read(b);
      let date = await Primitive.Int.read(b);
      let version = await Primitive.Int.read(b);
      let migratedTo = flags & (1 << 6) ? await TLObject.read(b) : void 0;
      let adminRights = flags & (1 << 14) ? await TLObject.read(b) : void 0;
      let defaultBannedRights = flags & (1 << 18) ? await TLObject.read(b) : void 0;
      return new Raw2.Chat({
        creator,
        left,
        deactivated,
        callActive,
        callNotEmpty,
        noforwards,
        id,
        title,
        photo,
        participantsCount,
        date,
        version,
        migratedTo,
        adminRights,
        defaultBannedRights,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.creator ? 1 << 0 : 0;
      flags |= this.left ? 1 << 2 : 0;
      flags |= this.deactivated ? 1 << 5 : 0;
      flags |= this.callActive ? 1 << 23 : 0;
      flags |= this.callNotEmpty ? 1 << 24 : 0;
      flags |= this.noforwards ? 1 << 25 : 0;
      flags |= this.migratedTo !== void 0 ? 1 << 6 : 0;
      flags |= this.adminRights !== void 0 ? 1 << 14 : 0;
      flags |= this.defaultBannedRights !== void 0 ? 1 << 18 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      if (this.participantsCount !== void 0) {
        b.write(Primitive.Int.write(this.participantsCount));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.version !== void 0) {
        b.write(Primitive.Int.write(this.version));
      }
      if (this.migratedTo !== void 0) {
        b.write(this.migratedTo.write());
      }
      if (this.adminRights !== void 0) {
        b.write(this.adminRights.write());
      }
      if (this.defaultBannedRights !== void 0) {
        b.write(this.defaultBannedRights.write());
      }
      return b.buffer;
    }
  }
  Raw2.Chat = Chat;
  class ChatForbidden extends TLObject {
    id;
    title;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatForbidden';
      this.constructorId = 1704108455;
      this.subclassOfId = 3316604308;
      this._slots = ['id', 'title'];
      this.id = params.id;
      this.title = params.title;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let title = await Primitive.String.read(b);
      return new Raw2.ChatForbidden({ id, title });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      return b.buffer;
    }
  }
  Raw2.ChatForbidden = ChatForbidden;
  class Channel extends TLObject {
    creator;
    left;
    broadcast;
    verified;
    megagroup;
    restricted;
    signatures;
    min;
    scam;
    hasLink;
    hasGeo;
    slowmodeEnabled;
    callActive;
    callNotEmpty;
    fake;
    gigagroup;
    noforwards;
    joinToSend;
    joinRequest;
    forum;
    storiesHidden;
    storiesHiddenMin;
    storiesUnavailable;
    id;
    accessHash;
    title;
    username;
    photo;
    date;
    restrictionReason;
    adminRights;
    bannedRights;
    defaultBannedRights;
    participantsCount;
    usernames;
    storiesMaxId;
    color;
    profileColor;
    emojiStatus;
    level;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Channel';
      this.constructorId = 179174543;
      this.subclassOfId = 3316604308;
      this._slots = [
        'creator',
        'left',
        'broadcast',
        'verified',
        'megagroup',
        'restricted',
        'signatures',
        'min',
        'scam',
        'hasLink',
        'hasGeo',
        'slowmodeEnabled',
        'callActive',
        'callNotEmpty',
        'fake',
        'gigagroup',
        'noforwards',
        'joinToSend',
        'joinRequest',
        'forum',
        'storiesHidden',
        'storiesHiddenMin',
        'storiesUnavailable',
        'id',
        'accessHash',
        'title',
        'username',
        'photo',
        'date',
        'restrictionReason',
        'adminRights',
        'bannedRights',
        'defaultBannedRights',
        'participantsCount',
        'usernames',
        'storiesMaxId',
        'color',
        'profileColor',
        'emojiStatus',
        'level',
      ];
      this.creator = params.creator;
      this.left = params.left;
      this.broadcast = params.broadcast;
      this.verified = params.verified;
      this.megagroup = params.megagroup;
      this.restricted = params.restricted;
      this.signatures = params.signatures;
      this.min = params.min;
      this.scam = params.scam;
      this.hasLink = params.hasLink;
      this.hasGeo = params.hasGeo;
      this.slowmodeEnabled = params.slowmodeEnabled;
      this.callActive = params.callActive;
      this.callNotEmpty = params.callNotEmpty;
      this.fake = params.fake;
      this.gigagroup = params.gigagroup;
      this.noforwards = params.noforwards;
      this.joinToSend = params.joinToSend;
      this.joinRequest = params.joinRequest;
      this.forum = params.forum;
      this.storiesHidden = params.storiesHidden;
      this.storiesHiddenMin = params.storiesHiddenMin;
      this.storiesUnavailable = params.storiesUnavailable;
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.title = params.title;
      this.username = params.username;
      this.photo = params.photo;
      this.date = params.date;
      this.restrictionReason = params.restrictionReason;
      this.adminRights = params.adminRights;
      this.bannedRights = params.bannedRights;
      this.defaultBannedRights = params.defaultBannedRights;
      this.participantsCount = params.participantsCount;
      this.usernames = params.usernames;
      this.storiesMaxId = params.storiesMaxId;
      this.color = params.color;
      this.profileColor = params.profileColor;
      this.emojiStatus = params.emojiStatus;
      this.level = params.level;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let creator = flags & (1 << 0) ? true : false;
      let left = flags & (1 << 2) ? true : false;
      let broadcast = flags & (1 << 5) ? true : false;
      let verified = flags & (1 << 7) ? true : false;
      let megagroup = flags & (1 << 8) ? true : false;
      let restricted = flags & (1 << 9) ? true : false;
      let signatures = flags & (1 << 11) ? true : false;
      let min = flags & (1 << 12) ? true : false;
      let scam = flags & (1 << 19) ? true : false;
      let hasLink = flags & (1 << 20) ? true : false;
      let hasGeo = flags & (1 << 21) ? true : false;
      let slowmodeEnabled = flags & (1 << 22) ? true : false;
      let callActive = flags & (1 << 23) ? true : false;
      let callNotEmpty = flags & (1 << 24) ? true : false;
      let fake = flags & (1 << 25) ? true : false;
      let gigagroup = flags & (1 << 26) ? true : false;
      let noforwards = flags & (1 << 27) ? true : false;
      let joinToSend = flags & (1 << 28) ? true : false;
      let joinRequest = flags & (1 << 29) ? true : false;
      let forum = flags & (1 << 30) ? true : false;
      let flags2 = await Primitive.Int.read(b);
      let storiesHidden = flags2 & (1 << 1) ? true : false;
      let storiesHiddenMin = flags2 & (1 << 2) ? true : false;
      let storiesUnavailable = flags2 & (1 << 3) ? true : false;
      let id = await Primitive.Long.read(b);
      let accessHash = flags & (1 << 13) ? await Primitive.Long.read(b) : void 0;
      let title = await Primitive.String.read(b);
      let username = flags & (1 << 6) ? await Primitive.String.read(b) : void 0;
      let photo = await TLObject.read(b);
      let date = await Primitive.Int.read(b);
      let restrictionReason = flags & (1 << 9) ? await TLObject.read(b) : [];
      let adminRights = flags & (1 << 14) ? await TLObject.read(b) : void 0;
      let bannedRights = flags & (1 << 15) ? await TLObject.read(b) : void 0;
      let defaultBannedRights = flags & (1 << 18) ? await TLObject.read(b) : void 0;
      let participantsCount = flags & (1 << 17) ? await Primitive.Int.read(b) : void 0;
      let usernames = flags2 & (1 << 0) ? await TLObject.read(b) : [];
      let storiesMaxId = flags2 & (1 << 4) ? await Primitive.Int.read(b) : void 0;
      let color = flags2 & (1 << 7) ? await TLObject.read(b) : void 0;
      let profileColor = flags2 & (1 << 8) ? await TLObject.read(b) : void 0;
      let emojiStatus = flags2 & (1 << 9) ? await TLObject.read(b) : void 0;
      let level = flags2 & (1 << 10) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.Channel({
        creator,
        left,
        broadcast,
        verified,
        megagroup,
        restricted,
        signatures,
        min,
        scam,
        hasLink,
        hasGeo,
        slowmodeEnabled,
        callActive,
        callNotEmpty,
        fake,
        gigagroup,
        noforwards,
        joinToSend,
        joinRequest,
        forum,
        storiesHidden,
        storiesHiddenMin,
        storiesUnavailable,
        id,
        accessHash,
        title,
        username,
        photo,
        date,
        restrictionReason,
        adminRights,
        bannedRights,
        defaultBannedRights,
        participantsCount,
        usernames,
        storiesMaxId,
        color,
        profileColor,
        emojiStatus,
        level,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.creator ? 1 << 0 : 0;
      flags |= this.left ? 1 << 2 : 0;
      flags |= this.broadcast ? 1 << 5 : 0;
      flags |= this.verified ? 1 << 7 : 0;
      flags |= this.megagroup ? 1 << 8 : 0;
      flags |= this.restricted ? 1 << 9 : 0;
      flags |= this.signatures ? 1 << 11 : 0;
      flags |= this.min ? 1 << 12 : 0;
      flags |= this.scam ? 1 << 19 : 0;
      flags |= this.hasLink ? 1 << 20 : 0;
      flags |= this.hasGeo ? 1 << 21 : 0;
      flags |= this.slowmodeEnabled ? 1 << 22 : 0;
      flags |= this.callActive ? 1 << 23 : 0;
      flags |= this.callNotEmpty ? 1 << 24 : 0;
      flags |= this.fake ? 1 << 25 : 0;
      flags |= this.gigagroup ? 1 << 26 : 0;
      flags |= this.noforwards ? 1 << 27 : 0;
      flags |= this.joinToSend ? 1 << 28 : 0;
      flags |= this.joinRequest ? 1 << 29 : 0;
      flags |= this.forum ? 1 << 30 : 0;
      flags |= this.accessHash !== void 0 ? 1 << 13 : 0;
      flags |= this.username !== void 0 ? 1 << 6 : 0;
      flags |= this.restrictionReason ? 1 << 9 : 0;
      flags |= this.adminRights !== void 0 ? 1 << 14 : 0;
      flags |= this.bannedRights !== void 0 ? 1 << 15 : 0;
      flags |= this.defaultBannedRights !== void 0 ? 1 << 18 : 0;
      flags |= this.participantsCount !== void 0 ? 1 << 17 : 0;
      b.write(Primitive.Int.write(flags));
      let flags2 = 0;
      flags2 |= this.storiesHidden ? 1 << 1 : 0;
      flags2 |= this.storiesHiddenMin ? 1 << 2 : 0;
      flags2 |= this.storiesUnavailable ? 1 << 3 : 0;
      flags2 |= this.usernames ? 1 << 0 : 0;
      flags2 |= this.storiesMaxId !== void 0 ? 1 << 4 : 0;
      flags2 |= this.color !== void 0 ? 1 << 7 : 0;
      flags2 |= this.profileColor !== void 0 ? 1 << 8 : 0;
      flags2 |= this.emojiStatus !== void 0 ? 1 << 9 : 0;
      flags2 |= this.level !== void 0 ? 1 << 10 : 0;
      b.write(Primitive.Int.write(flags2));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.username !== void 0) {
        b.write(Primitive.String.write(this.username));
      }
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.restrictionReason) {
        b.write(Primitive.Vector.write(this.restrictionReason));
      }
      if (this.adminRights !== void 0) {
        b.write(this.adminRights.write());
      }
      if (this.bannedRights !== void 0) {
        b.write(this.bannedRights.write());
      }
      if (this.defaultBannedRights !== void 0) {
        b.write(this.defaultBannedRights.write());
      }
      if (this.participantsCount !== void 0) {
        b.write(Primitive.Int.write(this.participantsCount));
      }
      if (this.usernames) {
        b.write(Primitive.Vector.write(this.usernames));
      }
      if (this.storiesMaxId !== void 0) {
        b.write(Primitive.Int.write(this.storiesMaxId));
      }
      if (this.color !== void 0) {
        b.write(this.color.write());
      }
      if (this.profileColor !== void 0) {
        b.write(this.profileColor.write());
      }
      if (this.emojiStatus !== void 0) {
        b.write(this.emojiStatus.write());
      }
      if (this.level !== void 0) {
        b.write(Primitive.Int.write(this.level));
      }
      return b.buffer;
    }
  }
  Raw2.Channel = Channel;
  class ChannelForbidden extends TLObject {
    broadcast;
    megagroup;
    id;
    accessHash;
    title;
    untilDate;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelForbidden';
      this.constructorId = 399807445;
      this.subclassOfId = 3316604308;
      this._slots = ['broadcast', 'megagroup', 'id', 'accessHash', 'title', 'untilDate'];
      this.broadcast = params.broadcast;
      this.megagroup = params.megagroup;
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.title = params.title;
      this.untilDate = params.untilDate;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let broadcast = flags & (1 << 5) ? true : false;
      let megagroup = flags & (1 << 8) ? true : false;
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let title = await Primitive.String.read(b);
      let untilDate = flags & (1 << 16) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.ChannelForbidden({
        broadcast,
        megagroup,
        id,
        accessHash,
        title,
        untilDate,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.broadcast ? 1 << 5 : 0;
      flags |= this.megagroup ? 1 << 8 : 0;
      flags |= this.untilDate !== void 0 ? 1 << 16 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.untilDate !== void 0) {
        b.write(Primitive.Int.write(this.untilDate));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelForbidden = ChannelForbidden;
  class ChatFull extends TLObject {
    canSetUsername;
    hasScheduled;
    translationsDisabled;
    id;
    about;
    participants;
    chatPhoto;
    notifySettings;
    exportedInvite;
    botInfo;
    pinnedMsgId;
    folderId;
    call;
    ttlPeriod;
    groupcallDefaultJoinAs;
    themeEmoticon;
    requestsPending;
    recentRequesters;
    availableReactions;
    reactionsLimit;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatFull';
      this.constructorId = 640893467;
      this.subclassOfId = 3566872215;
      this._slots = [
        'canSetUsername',
        'hasScheduled',
        'translationsDisabled',
        'id',
        'about',
        'participants',
        'chatPhoto',
        'notifySettings',
        'exportedInvite',
        'botInfo',
        'pinnedMsgId',
        'folderId',
        'call',
        'ttlPeriod',
        'groupcallDefaultJoinAs',
        'themeEmoticon',
        'requestsPending',
        'recentRequesters',
        'availableReactions',
        'reactionsLimit',
      ];
      this.canSetUsername = params.canSetUsername;
      this.hasScheduled = params.hasScheduled;
      this.translationsDisabled = params.translationsDisabled;
      this.id = params.id;
      this.about = params.about;
      this.participants = params.participants;
      this.chatPhoto = params.chatPhoto;
      this.notifySettings = params.notifySettings;
      this.exportedInvite = params.exportedInvite;
      this.botInfo = params.botInfo;
      this.pinnedMsgId = params.pinnedMsgId;
      this.folderId = params.folderId;
      this.call = params.call;
      this.ttlPeriod = params.ttlPeriod;
      this.groupcallDefaultJoinAs = params.groupcallDefaultJoinAs;
      this.themeEmoticon = params.themeEmoticon;
      this.requestsPending = params.requestsPending;
      this.recentRequesters = params.recentRequesters;
      this.availableReactions = params.availableReactions;
      this.reactionsLimit = params.reactionsLimit;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let canSetUsername = flags & (1 << 7) ? true : false;
      let hasScheduled = flags & (1 << 8) ? true : false;
      let translationsDisabled = flags & (1 << 19) ? true : false;
      let id = await Primitive.Long.read(b);
      let about = await Primitive.String.read(b);
      let participants = await TLObject.read(b);
      let chatPhoto = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      let notifySettings = await TLObject.read(b);
      let exportedInvite = flags & (1 << 13) ? await TLObject.read(b) : void 0;
      let botInfo = flags & (1 << 3) ? await TLObject.read(b) : [];
      let pinnedMsgId = flags & (1 << 6) ? await Primitive.Int.read(b) : void 0;
      let folderId = flags & (1 << 11) ? await Primitive.Int.read(b) : void 0;
      let call = flags & (1 << 12) ? await TLObject.read(b) : void 0;
      let ttlPeriod = flags & (1 << 14) ? await Primitive.Int.read(b) : void 0;
      let groupcallDefaultJoinAs = flags & (1 << 15) ? await TLObject.read(b) : void 0;
      let themeEmoticon = flags & (1 << 16) ? await Primitive.String.read(b) : void 0;
      let requestsPending = flags & (1 << 17) ? await Primitive.Int.read(b) : void 0;
      let recentRequesters = flags & (1 << 17) ? await TLObject.read(b, Primitive.Long) : [];
      let availableReactions = flags & (1 << 18) ? await TLObject.read(b) : void 0;
      let reactionsLimit = flags & (1 << 20) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.ChatFull({
        canSetUsername,
        hasScheduled,
        translationsDisabled,
        id,
        about,
        participants,
        chatPhoto,
        notifySettings,
        exportedInvite,
        botInfo,
        pinnedMsgId,
        folderId,
        call,
        ttlPeriod,
        groupcallDefaultJoinAs,
        themeEmoticon,
        requestsPending,
        recentRequesters,
        availableReactions,
        reactionsLimit,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.canSetUsername ? 1 << 7 : 0;
      flags |= this.hasScheduled ? 1 << 8 : 0;
      flags |= this.translationsDisabled ? 1 << 19 : 0;
      flags |= this.chatPhoto !== void 0 ? 1 << 2 : 0;
      flags |= this.exportedInvite !== void 0 ? 1 << 13 : 0;
      flags |= this.botInfo ? 1 << 3 : 0;
      flags |= this.pinnedMsgId !== void 0 ? 1 << 6 : 0;
      flags |= this.folderId !== void 0 ? 1 << 11 : 0;
      flags |= this.call !== void 0 ? 1 << 12 : 0;
      flags |= this.ttlPeriod !== void 0 ? 1 << 14 : 0;
      flags |= this.groupcallDefaultJoinAs !== void 0 ? 1 << 15 : 0;
      flags |= this.themeEmoticon !== void 0 ? 1 << 16 : 0;
      flags |= this.requestsPending !== void 0 ? 1 << 17 : 0;
      flags |= this.recentRequesters ? 1 << 17 : 0;
      flags |= this.availableReactions !== void 0 ? 1 << 18 : 0;
      flags |= this.reactionsLimit !== void 0 ? 1 << 20 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.about !== void 0) {
        b.write(Primitive.String.write(this.about));
      }
      if (this.participants !== void 0) {
        b.write(this.participants.write());
      }
      if (this.chatPhoto !== void 0) {
        b.write(this.chatPhoto.write());
      }
      if (this.notifySettings !== void 0) {
        b.write(this.notifySettings.write());
      }
      if (this.exportedInvite !== void 0) {
        b.write(this.exportedInvite.write());
      }
      if (this.botInfo) {
        b.write(Primitive.Vector.write(this.botInfo));
      }
      if (this.pinnedMsgId !== void 0) {
        b.write(Primitive.Int.write(this.pinnedMsgId));
      }
      if (this.folderId !== void 0) {
        b.write(Primitive.Int.write(this.folderId));
      }
      if (this.call !== void 0) {
        b.write(this.call.write());
      }
      if (this.ttlPeriod !== void 0) {
        b.write(Primitive.Int.write(this.ttlPeriod));
      }
      if (this.groupcallDefaultJoinAs !== void 0) {
        b.write(this.groupcallDefaultJoinAs.write());
      }
      if (this.themeEmoticon !== void 0) {
        b.write(Primitive.String.write(this.themeEmoticon));
      }
      if (this.requestsPending !== void 0) {
        b.write(Primitive.Int.write(this.requestsPending));
      }
      if (this.recentRequesters) {
        b.write(Primitive.Vector.write(this.recentRequesters, Primitive.Long));
      }
      if (this.availableReactions !== void 0) {
        b.write(this.availableReactions.write());
      }
      if (this.reactionsLimit !== void 0) {
        b.write(Primitive.Int.write(this.reactionsLimit));
      }
      return b.buffer;
    }
  }
  Raw2.ChatFull = ChatFull;
  class ChannelFull extends TLObject {
    canViewParticipants;
    canSetUsername;
    canSetStickers;
    hiddenPrehistory;
    canSetLocation;
    hasScheduled;
    canViewStats;
    blocked;
    canDeleteChannel;
    antispam;
    participantsHidden;
    translationsDisabled;
    storiesPinnedAvailable;
    viewForumAsMessages;
    restrictedSponsored;
    canViewRevenue;
    id;
    about;
    participantsCount;
    adminsCount;
    kickedCount;
    bannedCount;
    onlineCount;
    readInboxMaxId;
    readOutboxMaxId;
    unreadCount;
    chatPhoto;
    notifySettings;
    exportedInvite;
    botInfo;
    migratedFromChatId;
    migratedFromMaxId;
    pinnedMsgId;
    stickerset;
    availableMinId;
    folderId;
    linkedChatId;
    location;
    slowmodeSeconds;
    slowmodeNextSendDate;
    statsDc;
    pts;
    call;
    ttlPeriod;
    pendingSuggestions;
    groupcallDefaultJoinAs;
    themeEmoticon;
    requestsPending;
    recentRequesters;
    defaultSendAs;
    availableReactions;
    reactionsLimit;
    stories;
    wallpaper;
    boostsApplied;
    boostsUnrestrict;
    emojiset;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelFull';
      this.constructorId = 3148559501;
      this.subclassOfId = 3566872215;
      this._slots = [
        'canViewParticipants',
        'canSetUsername',
        'canSetStickers',
        'hiddenPrehistory',
        'canSetLocation',
        'hasScheduled',
        'canViewStats',
        'blocked',
        'canDeleteChannel',
        'antispam',
        'participantsHidden',
        'translationsDisabled',
        'storiesPinnedAvailable',
        'viewForumAsMessages',
        'restrictedSponsored',
        'canViewRevenue',
        'id',
        'about',
        'participantsCount',
        'adminsCount',
        'kickedCount',
        'bannedCount',
        'onlineCount',
        'readInboxMaxId',
        'readOutboxMaxId',
        'unreadCount',
        'chatPhoto',
        'notifySettings',
        'exportedInvite',
        'botInfo',
        'migratedFromChatId',
        'migratedFromMaxId',
        'pinnedMsgId',
        'stickerset',
        'availableMinId',
        'folderId',
        'linkedChatId',
        'location',
        'slowmodeSeconds',
        'slowmodeNextSendDate',
        'statsDc',
        'pts',
        'call',
        'ttlPeriod',
        'pendingSuggestions',
        'groupcallDefaultJoinAs',
        'themeEmoticon',
        'requestsPending',
        'recentRequesters',
        'defaultSendAs',
        'availableReactions',
        'reactionsLimit',
        'stories',
        'wallpaper',
        'boostsApplied',
        'boostsUnrestrict',
        'emojiset',
      ];
      this.canViewParticipants = params.canViewParticipants;
      this.canSetUsername = params.canSetUsername;
      this.canSetStickers = params.canSetStickers;
      this.hiddenPrehistory = params.hiddenPrehistory;
      this.canSetLocation = params.canSetLocation;
      this.hasScheduled = params.hasScheduled;
      this.canViewStats = params.canViewStats;
      this.blocked = params.blocked;
      this.canDeleteChannel = params.canDeleteChannel;
      this.antispam = params.antispam;
      this.participantsHidden = params.participantsHidden;
      this.translationsDisabled = params.translationsDisabled;
      this.storiesPinnedAvailable = params.storiesPinnedAvailable;
      this.viewForumAsMessages = params.viewForumAsMessages;
      this.restrictedSponsored = params.restrictedSponsored;
      this.canViewRevenue = params.canViewRevenue;
      this.id = params.id;
      this.about = params.about;
      this.participantsCount = params.participantsCount;
      this.adminsCount = params.adminsCount;
      this.kickedCount = params.kickedCount;
      this.bannedCount = params.bannedCount;
      this.onlineCount = params.onlineCount;
      this.readInboxMaxId = params.readInboxMaxId;
      this.readOutboxMaxId = params.readOutboxMaxId;
      this.unreadCount = params.unreadCount;
      this.chatPhoto = params.chatPhoto;
      this.notifySettings = params.notifySettings;
      this.exportedInvite = params.exportedInvite;
      this.botInfo = params.botInfo;
      this.migratedFromChatId = params.migratedFromChatId;
      this.migratedFromMaxId = params.migratedFromMaxId;
      this.pinnedMsgId = params.pinnedMsgId;
      this.stickerset = params.stickerset;
      this.availableMinId = params.availableMinId;
      this.folderId = params.folderId;
      this.linkedChatId = params.linkedChatId;
      this.location = params.location;
      this.slowmodeSeconds = params.slowmodeSeconds;
      this.slowmodeNextSendDate = params.slowmodeNextSendDate;
      this.statsDc = params.statsDc;
      this.pts = params.pts;
      this.call = params.call;
      this.ttlPeriod = params.ttlPeriod;
      this.pendingSuggestions = params.pendingSuggestions;
      this.groupcallDefaultJoinAs = params.groupcallDefaultJoinAs;
      this.themeEmoticon = params.themeEmoticon;
      this.requestsPending = params.requestsPending;
      this.recentRequesters = params.recentRequesters;
      this.defaultSendAs = params.defaultSendAs;
      this.availableReactions = params.availableReactions;
      this.reactionsLimit = params.reactionsLimit;
      this.stories = params.stories;
      this.wallpaper = params.wallpaper;
      this.boostsApplied = params.boostsApplied;
      this.boostsUnrestrict = params.boostsUnrestrict;
      this.emojiset = params.emojiset;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let canViewParticipants = flags & (1 << 3) ? true : false;
      let canSetUsername = flags & (1 << 6) ? true : false;
      let canSetStickers = flags & (1 << 7) ? true : false;
      let hiddenPrehistory = flags & (1 << 10) ? true : false;
      let canSetLocation = flags & (1 << 16) ? true : false;
      let hasScheduled = flags & (1 << 19) ? true : false;
      let canViewStats = flags & (1 << 20) ? true : false;
      let blocked = flags & (1 << 22) ? true : false;
      let flags2 = await Primitive.Int.read(b);
      let canDeleteChannel = flags2 & (1 << 0) ? true : false;
      let antispam = flags2 & (1 << 1) ? true : false;
      let participantsHidden = flags2 & (1 << 2) ? true : false;
      let translationsDisabled = flags2 & (1 << 3) ? true : false;
      let storiesPinnedAvailable = flags2 & (1 << 5) ? true : false;
      let viewForumAsMessages = flags2 & (1 << 6) ? true : false;
      let restrictedSponsored = flags2 & (1 << 11) ? true : false;
      let canViewRevenue = flags2 & (1 << 12) ? true : false;
      let id = await Primitive.Long.read(b);
      let about = await Primitive.String.read(b);
      let participantsCount = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let adminsCount = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      let kickedCount = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      let bannedCount = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      let onlineCount = flags & (1 << 13) ? await Primitive.Int.read(b) : void 0;
      let readInboxMaxId = await Primitive.Int.read(b);
      let readOutboxMaxId = await Primitive.Int.read(b);
      let unreadCount = await Primitive.Int.read(b);
      let chatPhoto = await TLObject.read(b);
      let notifySettings = await TLObject.read(b);
      let exportedInvite = flags & (1 << 23) ? await TLObject.read(b) : void 0;
      let botInfo = await TLObject.read(b);
      let migratedFromChatId = flags & (1 << 4) ? await Primitive.Long.read(b) : void 0;
      let migratedFromMaxId = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
      let pinnedMsgId = flags & (1 << 5) ? await Primitive.Int.read(b) : void 0;
      let stickerset = flags & (1 << 8) ? await TLObject.read(b) : void 0;
      let availableMinId = flags & (1 << 9) ? await Primitive.Int.read(b) : void 0;
      let folderId = flags & (1 << 11) ? await Primitive.Int.read(b) : void 0;
      let linkedChatId = flags & (1 << 14) ? await Primitive.Long.read(b) : void 0;
      let location = flags & (1 << 15) ? await TLObject.read(b) : void 0;
      let slowmodeSeconds = flags & (1 << 17) ? await Primitive.Int.read(b) : void 0;
      let slowmodeNextSendDate = flags & (1 << 18) ? await Primitive.Int.read(b) : void 0;
      let statsDc = flags & (1 << 12) ? await Primitive.Int.read(b) : void 0;
      let pts = await Primitive.Int.read(b);
      let call = flags & (1 << 21) ? await TLObject.read(b) : void 0;
      let ttlPeriod = flags & (1 << 24) ? await Primitive.Int.read(b) : void 0;
      let pendingSuggestions = flags & (1 << 25) ? await TLObject.read(b, Primitive.String) : [];
      let groupcallDefaultJoinAs = flags & (1 << 26) ? await TLObject.read(b) : void 0;
      let themeEmoticon = flags & (1 << 27) ? await Primitive.String.read(b) : void 0;
      let requestsPending = flags & (1 << 28) ? await Primitive.Int.read(b) : void 0;
      let recentRequesters = flags & (1 << 28) ? await TLObject.read(b, Primitive.Long) : [];
      let defaultSendAs = flags & (1 << 29) ? await TLObject.read(b) : void 0;
      let availableReactions = flags & (1 << 30) ? await TLObject.read(b) : void 0;
      let reactionsLimit = flags2 & (1 << 13) ? await Primitive.Int.read(b) : void 0;
      let stories2 = flags2 & (1 << 4) ? await TLObject.read(b) : void 0;
      let wallpaper = flags2 & (1 << 7) ? await TLObject.read(b) : void 0;
      let boostsApplied = flags2 & (1 << 8) ? await Primitive.Int.read(b) : void 0;
      let boostsUnrestrict = flags2 & (1 << 9) ? await Primitive.Int.read(b) : void 0;
      let emojiset = flags2 & (1 << 10) ? await TLObject.read(b) : void 0;
      return new Raw2.ChannelFull({
        canViewParticipants,
        canSetUsername,
        canSetStickers,
        hiddenPrehistory,
        canSetLocation,
        hasScheduled,
        canViewStats,
        blocked,
        canDeleteChannel,
        antispam,
        participantsHidden,
        translationsDisabled,
        storiesPinnedAvailable,
        viewForumAsMessages,
        restrictedSponsored,
        canViewRevenue,
        id,
        about,
        participantsCount,
        adminsCount,
        kickedCount,
        bannedCount,
        onlineCount,
        readInboxMaxId,
        readOutboxMaxId,
        unreadCount,
        chatPhoto,
        notifySettings,
        exportedInvite,
        botInfo,
        migratedFromChatId,
        migratedFromMaxId,
        pinnedMsgId,
        stickerset,
        availableMinId,
        folderId,
        linkedChatId,
        location,
        slowmodeSeconds,
        slowmodeNextSendDate,
        statsDc,
        pts,
        call,
        ttlPeriod,
        pendingSuggestions,
        groupcallDefaultJoinAs,
        themeEmoticon,
        requestsPending,
        recentRequesters,
        defaultSendAs,
        availableReactions,
        reactionsLimit,
        stories: stories2,
        wallpaper,
        boostsApplied,
        boostsUnrestrict,
        emojiset,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.canViewParticipants ? 1 << 3 : 0;
      flags |= this.canSetUsername ? 1 << 6 : 0;
      flags |= this.canSetStickers ? 1 << 7 : 0;
      flags |= this.hiddenPrehistory ? 1 << 10 : 0;
      flags |= this.canSetLocation ? 1 << 16 : 0;
      flags |= this.hasScheduled ? 1 << 19 : 0;
      flags |= this.canViewStats ? 1 << 20 : 0;
      flags |= this.blocked ? 1 << 22 : 0;
      flags |= this.participantsCount !== void 0 ? 1 << 0 : 0;
      flags |= this.adminsCount !== void 0 ? 1 << 1 : 0;
      flags |= this.kickedCount !== void 0 ? 1 << 2 : 0;
      flags |= this.bannedCount !== void 0 ? 1 << 2 : 0;
      flags |= this.onlineCount !== void 0 ? 1 << 13 : 0;
      flags |= this.exportedInvite !== void 0 ? 1 << 23 : 0;
      flags |= this.migratedFromChatId !== void 0 ? 1 << 4 : 0;
      flags |= this.migratedFromMaxId !== void 0 ? 1 << 4 : 0;
      flags |= this.pinnedMsgId !== void 0 ? 1 << 5 : 0;
      flags |= this.stickerset !== void 0 ? 1 << 8 : 0;
      flags |= this.availableMinId !== void 0 ? 1 << 9 : 0;
      flags |= this.folderId !== void 0 ? 1 << 11 : 0;
      flags |= this.linkedChatId !== void 0 ? 1 << 14 : 0;
      flags |= this.location !== void 0 ? 1 << 15 : 0;
      flags |= this.slowmodeSeconds !== void 0 ? 1 << 17 : 0;
      flags |= this.slowmodeNextSendDate !== void 0 ? 1 << 18 : 0;
      flags |= this.statsDc !== void 0 ? 1 << 12 : 0;
      flags |= this.call !== void 0 ? 1 << 21 : 0;
      flags |= this.ttlPeriod !== void 0 ? 1 << 24 : 0;
      flags |= this.pendingSuggestions ? 1 << 25 : 0;
      flags |= this.groupcallDefaultJoinAs !== void 0 ? 1 << 26 : 0;
      flags |= this.themeEmoticon !== void 0 ? 1 << 27 : 0;
      flags |= this.requestsPending !== void 0 ? 1 << 28 : 0;
      flags |= this.recentRequesters ? 1 << 28 : 0;
      flags |= this.defaultSendAs !== void 0 ? 1 << 29 : 0;
      flags |= this.availableReactions !== void 0 ? 1 << 30 : 0;
      b.write(Primitive.Int.write(flags));
      let flags2 = 0;
      flags2 |= this.canDeleteChannel ? 1 << 0 : 0;
      flags2 |= this.antispam ? 1 << 1 : 0;
      flags2 |= this.participantsHidden ? 1 << 2 : 0;
      flags2 |= this.translationsDisabled ? 1 << 3 : 0;
      flags2 |= this.storiesPinnedAvailable ? 1 << 5 : 0;
      flags2 |= this.viewForumAsMessages ? 1 << 6 : 0;
      flags2 |= this.restrictedSponsored ? 1 << 11 : 0;
      flags2 |= this.canViewRevenue ? 1 << 12 : 0;
      flags2 |= this.reactionsLimit !== void 0 ? 1 << 13 : 0;
      flags2 |= this.stories !== void 0 ? 1 << 4 : 0;
      flags2 |= this.wallpaper !== void 0 ? 1 << 7 : 0;
      flags2 |= this.boostsApplied !== void 0 ? 1 << 8 : 0;
      flags2 |= this.boostsUnrestrict !== void 0 ? 1 << 9 : 0;
      flags2 |= this.emojiset !== void 0 ? 1 << 10 : 0;
      b.write(Primitive.Int.write(flags2));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.about !== void 0) {
        b.write(Primitive.String.write(this.about));
      }
      if (this.participantsCount !== void 0) {
        b.write(Primitive.Int.write(this.participantsCount));
      }
      if (this.adminsCount !== void 0) {
        b.write(Primitive.Int.write(this.adminsCount));
      }
      if (this.kickedCount !== void 0) {
        b.write(Primitive.Int.write(this.kickedCount));
      }
      if (this.bannedCount !== void 0) {
        b.write(Primitive.Int.write(this.bannedCount));
      }
      if (this.onlineCount !== void 0) {
        b.write(Primitive.Int.write(this.onlineCount));
      }
      if (this.readInboxMaxId !== void 0) {
        b.write(Primitive.Int.write(this.readInboxMaxId));
      }
      if (this.readOutboxMaxId !== void 0) {
        b.write(Primitive.Int.write(this.readOutboxMaxId));
      }
      if (this.unreadCount !== void 0) {
        b.write(Primitive.Int.write(this.unreadCount));
      }
      if (this.chatPhoto !== void 0) {
        b.write(this.chatPhoto.write());
      }
      if (this.notifySettings !== void 0) {
        b.write(this.notifySettings.write());
      }
      if (this.exportedInvite !== void 0) {
        b.write(this.exportedInvite.write());
      }
      if (this.botInfo) {
        b.write(Primitive.Vector.write(this.botInfo));
      }
      if (this.migratedFromChatId !== void 0) {
        b.write(Primitive.Long.write(this.migratedFromChatId));
      }
      if (this.migratedFromMaxId !== void 0) {
        b.write(Primitive.Int.write(this.migratedFromMaxId));
      }
      if (this.pinnedMsgId !== void 0) {
        b.write(Primitive.Int.write(this.pinnedMsgId));
      }
      if (this.stickerset !== void 0) {
        b.write(this.stickerset.write());
      }
      if (this.availableMinId !== void 0) {
        b.write(Primitive.Int.write(this.availableMinId));
      }
      if (this.folderId !== void 0) {
        b.write(Primitive.Int.write(this.folderId));
      }
      if (this.linkedChatId !== void 0) {
        b.write(Primitive.Long.write(this.linkedChatId));
      }
      if (this.location !== void 0) {
        b.write(this.location.write());
      }
      if (this.slowmodeSeconds !== void 0) {
        b.write(Primitive.Int.write(this.slowmodeSeconds));
      }
      if (this.slowmodeNextSendDate !== void 0) {
        b.write(Primitive.Int.write(this.slowmodeNextSendDate));
      }
      if (this.statsDc !== void 0) {
        b.write(Primitive.Int.write(this.statsDc));
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.call !== void 0) {
        b.write(this.call.write());
      }
      if (this.ttlPeriod !== void 0) {
        b.write(Primitive.Int.write(this.ttlPeriod));
      }
      if (this.pendingSuggestions) {
        b.write(Primitive.Vector.write(this.pendingSuggestions, Primitive.String));
      }
      if (this.groupcallDefaultJoinAs !== void 0) {
        b.write(this.groupcallDefaultJoinAs.write());
      }
      if (this.themeEmoticon !== void 0) {
        b.write(Primitive.String.write(this.themeEmoticon));
      }
      if (this.requestsPending !== void 0) {
        b.write(Primitive.Int.write(this.requestsPending));
      }
      if (this.recentRequesters) {
        b.write(Primitive.Vector.write(this.recentRequesters, Primitive.Long));
      }
      if (this.defaultSendAs !== void 0) {
        b.write(this.defaultSendAs.write());
      }
      if (this.availableReactions !== void 0) {
        b.write(this.availableReactions.write());
      }
      if (this.reactionsLimit !== void 0) {
        b.write(Primitive.Int.write(this.reactionsLimit));
      }
      if (this.stories !== void 0) {
        b.write(this.stories.write());
      }
      if (this.wallpaper !== void 0) {
        b.write(this.wallpaper.write());
      }
      if (this.boostsApplied !== void 0) {
        b.write(Primitive.Int.write(this.boostsApplied));
      }
      if (this.boostsUnrestrict !== void 0) {
        b.write(Primitive.Int.write(this.boostsUnrestrict));
      }
      if (this.emojiset !== void 0) {
        b.write(this.emojiset.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelFull = ChannelFull;
  class ChatParticipant extends TLObject {
    userId;
    inviterId;
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatParticipant';
      this.constructorId = 3224190983;
      this.subclassOfId = 2105307014;
      this._slots = ['userId', 'inviterId', 'date'];
      this.userId = params.userId;
      this.inviterId = params.inviterId;
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      let inviterId = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      return new Raw2.ChatParticipant({ userId, inviterId, date });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.inviterId !== void 0) {
        b.write(Primitive.Long.write(this.inviterId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.ChatParticipant = ChatParticipant;
  class ChatParticipantCreator extends TLObject {
    userId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatParticipantCreator';
      this.constructorId = 3832270564;
      this.subclassOfId = 2105307014;
      this._slots = ['userId'];
      this.userId = params.userId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      return new Raw2.ChatParticipantCreator({ userId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      return b.buffer;
    }
  }
  Raw2.ChatParticipantCreator = ChatParticipantCreator;
  class ChatParticipantAdmin extends TLObject {
    userId;
    inviterId;
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatParticipantAdmin';
      this.constructorId = 2694004571;
      this.subclassOfId = 2105307014;
      this._slots = ['userId', 'inviterId', 'date'];
      this.userId = params.userId;
      this.inviterId = params.inviterId;
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      let inviterId = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      return new Raw2.ChatParticipantAdmin({ userId, inviterId, date });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.inviterId !== void 0) {
        b.write(Primitive.Long.write(this.inviterId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.ChatParticipantAdmin = ChatParticipantAdmin;
  class ChatParticipantsForbidden extends TLObject {
    chatId;
    selfParticipant;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatParticipantsForbidden';
      this.constructorId = 2271466465;
      this.subclassOfId = 531142001;
      this._slots = ['chatId', 'selfParticipant'];
      this.chatId = params.chatId;
      this.selfParticipant = params.selfParticipant;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let chatId = await Primitive.Long.read(b);
      let selfParticipant = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      return new Raw2.ChatParticipantsForbidden({
        chatId,
        selfParticipant,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.selfParticipant !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.chatId !== void 0) {
        b.write(Primitive.Long.write(this.chatId));
      }
      if (this.selfParticipant !== void 0) {
        b.write(this.selfParticipant.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChatParticipantsForbidden = ChatParticipantsForbidden;
  class ChatParticipants extends TLObject {
    chatId;
    participants;
    version;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatParticipants';
      this.constructorId = 1018991608;
      this.subclassOfId = 531142001;
      this._slots = ['chatId', 'participants', 'version'];
      this.chatId = params.chatId;
      this.participants = params.participants;
      this.version = params.version;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chatId = await Primitive.Long.read(b);
      let participants = await TLObject.read(b);
      let version = await Primitive.Int.read(b);
      return new Raw2.ChatParticipants({
        chatId,
        participants,
        version,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chatId !== void 0) {
        b.write(Primitive.Long.write(this.chatId));
      }
      if (this.participants) {
        b.write(Primitive.Vector.write(this.participants));
      }
      if (this.version !== void 0) {
        b.write(Primitive.Int.write(this.version));
      }
      return b.buffer;
    }
  }
  Raw2.ChatParticipants = ChatParticipants;
  class ChatPhotoEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'ChatPhotoEmpty';
      this.constructorId = 935395612;
      this.subclassOfId = 2889794789;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.ChatPhotoEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.ChatPhotoEmpty = ChatPhotoEmpty;
  class ChatPhoto extends TLObject {
    hasVideo;
    photoId;
    strippedThumb;
    dcId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatPhoto';
      this.constructorId = 476978193;
      this.subclassOfId = 2889794789;
      this._slots = ['hasVideo', 'photoId', 'strippedThumb', 'dcId'];
      this.hasVideo = params.hasVideo;
      this.photoId = params.photoId;
      this.strippedThumb = params.strippedThumb;
      this.dcId = params.dcId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let hasVideo = flags & (1 << 0) ? true : false;
      let photoId = await Primitive.Long.read(b);
      let strippedThumb = flags & (1 << 1) ? await Primitive.Bytes.read(b) : void 0;
      let dcId = await Primitive.Int.read(b);
      return new Raw2.ChatPhoto({
        hasVideo,
        photoId,
        strippedThumb,
        dcId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.hasVideo ? 1 << 0 : 0;
      flags |= this.strippedThumb !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.photoId !== void 0) {
        b.write(Primitive.Long.write(this.photoId));
      }
      if (this.strippedThumb !== void 0) {
        b.write(Primitive.Bytes.write(this.strippedThumb));
      }
      if (this.dcId !== void 0) {
        b.write(Primitive.Int.write(this.dcId));
      }
      return b.buffer;
    }
  }
  Raw2.ChatPhoto = ChatPhoto;
  class MessageEmpty extends TLObject {
    id;
    peerId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEmpty';
      this.constructorId = 2426849924;
      this.subclassOfId = 2030045667;
      this._slots = ['id', 'peerId'];
      this.id = params.id;
      this.peerId = params.peerId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let id = await Primitive.Int.read(b);
      let peerId = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      return new Raw2.MessageEmpty({ id, peerId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.peerId !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.peerId !== void 0) {
        b.write(this.peerId.write());
      }
      return b.buffer;
    }
  }
  Raw2.MessageEmpty = MessageEmpty;
  class Message extends TLObject {
    out;
    mentioned;
    mediaUnread;
    silent;
    post;
    fromScheduled;
    legacy;
    editHide;
    pinned;
    noforwards;
    invertMedia;
    offline;
    id;
    fromId;
    fromBoostsApplied;
    peerId;
    savedPeerId;
    fwdFrom;
    viaBotId;
    viaBusinessBotId;
    replyTo;
    date;
    message;
    media;
    replyMarkup;
    entities;
    views;
    forwards;
    replies;
    editDate;
    postAuthor;
    groupedId;
    reactions;
    restrictionReason;
    ttlPeriod;
    quickReplyShortcutId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Message';
      this.constructorId = 592953125;
      this.subclassOfId = 2030045667;
      this._slots = [
        'out',
        'mentioned',
        'mediaUnread',
        'silent',
        'post',
        'fromScheduled',
        'legacy',
        'editHide',
        'pinned',
        'noforwards',
        'invertMedia',
        'offline',
        'id',
        'fromId',
        'fromBoostsApplied',
        'peerId',
        'savedPeerId',
        'fwdFrom',
        'viaBotId',
        'viaBusinessBotId',
        'replyTo',
        'date',
        'message',
        'media',
        'replyMarkup',
        'entities',
        'views',
        'forwards',
        'replies',
        'editDate',
        'postAuthor',
        'groupedId',
        'reactions',
        'restrictionReason',
        'ttlPeriod',
        'quickReplyShortcutId',
      ];
      this.out = params.out;
      this.mentioned = params.mentioned;
      this.mediaUnread = params.mediaUnread;
      this.silent = params.silent;
      this.post = params.post;
      this.fromScheduled = params.fromScheduled;
      this.legacy = params.legacy;
      this.editHide = params.editHide;
      this.pinned = params.pinned;
      this.noforwards = params.noforwards;
      this.invertMedia = params.invertMedia;
      this.offline = params.offline;
      this.id = params.id;
      this.fromId = params.fromId;
      this.fromBoostsApplied = params.fromBoostsApplied;
      this.peerId = params.peerId;
      this.savedPeerId = params.savedPeerId;
      this.fwdFrom = params.fwdFrom;
      this.viaBotId = params.viaBotId;
      this.viaBusinessBotId = params.viaBusinessBotId;
      this.replyTo = params.replyTo;
      this.date = params.date;
      this.message = params.message;
      this.media = params.media;
      this.replyMarkup = params.replyMarkup;
      this.entities = params.entities;
      this.views = params.views;
      this.forwards = params.forwards;
      this.replies = params.replies;
      this.editDate = params.editDate;
      this.postAuthor = params.postAuthor;
      this.groupedId = params.groupedId;
      this.reactions = params.reactions;
      this.restrictionReason = params.restrictionReason;
      this.ttlPeriod = params.ttlPeriod;
      this.quickReplyShortcutId = params.quickReplyShortcutId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let out = flags & (1 << 1) ? true : false;
      let mentioned = flags & (1 << 4) ? true : false;
      let mediaUnread = flags & (1 << 5) ? true : false;
      let silent = flags & (1 << 13) ? true : false;
      let post = flags & (1 << 14) ? true : false;
      let fromScheduled = flags & (1 << 18) ? true : false;
      let legacy = flags & (1 << 19) ? true : false;
      let editHide = flags & (1 << 21) ? true : false;
      let pinned = flags & (1 << 24) ? true : false;
      let noforwards = flags & (1 << 26) ? true : false;
      let invertMedia = flags & (1 << 27) ? true : false;
      let flags2 = await Primitive.Int.read(b);
      let offline = flags2 & (1 << 1) ? true : false;
      let id = await Primitive.Int.read(b);
      let fromId = flags & (1 << 8) ? await TLObject.read(b) : void 0;
      let fromBoostsApplied = flags & (1 << 29) ? await Primitive.Int.read(b) : void 0;
      let peerId = await TLObject.read(b);
      let savedPeerId = flags & (1 << 28) ? await TLObject.read(b) : void 0;
      let fwdFrom = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      let viaBotId = flags & (1 << 11) ? await Primitive.Long.read(b) : void 0;
      let viaBusinessBotId = flags2 & (1 << 0) ? await Primitive.Long.read(b) : void 0;
      let replyTo = flags & (1 << 3) ? await TLObject.read(b) : void 0;
      let date = await Primitive.Int.read(b);
      let message = await Primitive.String.read(b);
      let media = flags & (1 << 9) ? await TLObject.read(b) : void 0;
      let replyMarkup = flags & (1 << 6) ? await TLObject.read(b) : void 0;
      let entities = flags & (1 << 7) ? await TLObject.read(b) : [];
      let views = flags & (1 << 10) ? await Primitive.Int.read(b) : void 0;
      let forwards = flags & (1 << 10) ? await Primitive.Int.read(b) : void 0;
      let replies = flags & (1 << 23) ? await TLObject.read(b) : void 0;
      let editDate = flags & (1 << 15) ? await Primitive.Int.read(b) : void 0;
      let postAuthor = flags & (1 << 16) ? await Primitive.String.read(b) : void 0;
      let groupedId = flags & (1 << 17) ? await Primitive.Long.read(b) : void 0;
      let reactions = flags & (1 << 20) ? await TLObject.read(b) : void 0;
      let restrictionReason = flags & (1 << 22) ? await TLObject.read(b) : [];
      let ttlPeriod = flags & (1 << 25) ? await Primitive.Int.read(b) : void 0;
      let quickReplyShortcutId = flags & (1 << 30) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.Message({
        out,
        mentioned,
        mediaUnread,
        silent,
        post,
        fromScheduled,
        legacy,
        editHide,
        pinned,
        noforwards,
        invertMedia,
        offline,
        id,
        fromId,
        fromBoostsApplied,
        peerId,
        savedPeerId,
        fwdFrom,
        viaBotId,
        viaBusinessBotId,
        replyTo,
        date,
        message,
        media,
        replyMarkup,
        entities,
        views,
        forwards,
        replies,
        editDate,
        postAuthor,
        groupedId,
        reactions,
        restrictionReason,
        ttlPeriod,
        quickReplyShortcutId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.out ? 1 << 1 : 0;
      flags |= this.mentioned ? 1 << 4 : 0;
      flags |= this.mediaUnread ? 1 << 5 : 0;
      flags |= this.silent ? 1 << 13 : 0;
      flags |= this.post ? 1 << 14 : 0;
      flags |= this.fromScheduled ? 1 << 18 : 0;
      flags |= this.legacy ? 1 << 19 : 0;
      flags |= this.editHide ? 1 << 21 : 0;
      flags |= this.pinned ? 1 << 24 : 0;
      flags |= this.noforwards ? 1 << 26 : 0;
      flags |= this.invertMedia ? 1 << 27 : 0;
      flags |= this.fromId !== void 0 ? 1 << 8 : 0;
      flags |= this.fromBoostsApplied !== void 0 ? 1 << 29 : 0;
      flags |= this.savedPeerId !== void 0 ? 1 << 28 : 0;
      flags |= this.fwdFrom !== void 0 ? 1 << 2 : 0;
      flags |= this.viaBotId !== void 0 ? 1 << 11 : 0;
      flags |= this.replyTo !== void 0 ? 1 << 3 : 0;
      flags |= this.media !== void 0 ? 1 << 9 : 0;
      flags |= this.replyMarkup !== void 0 ? 1 << 6 : 0;
      flags |= this.entities ? 1 << 7 : 0;
      flags |= this.views !== void 0 ? 1 << 10 : 0;
      flags |= this.forwards !== void 0 ? 1 << 10 : 0;
      flags |= this.replies !== void 0 ? 1 << 23 : 0;
      flags |= this.editDate !== void 0 ? 1 << 15 : 0;
      flags |= this.postAuthor !== void 0 ? 1 << 16 : 0;
      flags |= this.groupedId !== void 0 ? 1 << 17 : 0;
      flags |= this.reactions !== void 0 ? 1 << 20 : 0;
      flags |= this.restrictionReason ? 1 << 22 : 0;
      flags |= this.ttlPeriod !== void 0 ? 1 << 25 : 0;
      flags |= this.quickReplyShortcutId !== void 0 ? 1 << 30 : 0;
      b.write(Primitive.Int.write(flags));
      let flags2 = 0;
      flags2 |= this.offline ? 1 << 1 : 0;
      flags2 |= this.viaBusinessBotId !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags2));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.fromId !== void 0) {
        b.write(this.fromId.write());
      }
      if (this.fromBoostsApplied !== void 0) {
        b.write(Primitive.Int.write(this.fromBoostsApplied));
      }
      if (this.peerId !== void 0) {
        b.write(this.peerId.write());
      }
      if (this.savedPeerId !== void 0) {
        b.write(this.savedPeerId.write());
      }
      if (this.fwdFrom !== void 0) {
        b.write(this.fwdFrom.write());
      }
      if (this.viaBotId !== void 0) {
        b.write(Primitive.Long.write(this.viaBotId));
      }
      if (this.viaBusinessBotId !== void 0) {
        b.write(Primitive.Long.write(this.viaBusinessBotId));
      }
      if (this.replyTo !== void 0) {
        b.write(this.replyTo.write());
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.media !== void 0) {
        b.write(this.media.write());
      }
      if (this.replyMarkup !== void 0) {
        b.write(this.replyMarkup.write());
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      if (this.views !== void 0) {
        b.write(Primitive.Int.write(this.views));
      }
      if (this.forwards !== void 0) {
        b.write(Primitive.Int.write(this.forwards));
      }
      if (this.replies !== void 0) {
        b.write(this.replies.write());
      }
      if (this.editDate !== void 0) {
        b.write(Primitive.Int.write(this.editDate));
      }
      if (this.postAuthor !== void 0) {
        b.write(Primitive.String.write(this.postAuthor));
      }
      if (this.groupedId !== void 0) {
        b.write(Primitive.Long.write(this.groupedId));
      }
      if (this.reactions !== void 0) {
        b.write(this.reactions.write());
      }
      if (this.restrictionReason) {
        b.write(Primitive.Vector.write(this.restrictionReason));
      }
      if (this.ttlPeriod !== void 0) {
        b.write(Primitive.Int.write(this.ttlPeriod));
      }
      if (this.quickReplyShortcutId !== void 0) {
        b.write(Primitive.Int.write(this.quickReplyShortcutId));
      }
      return b.buffer;
    }
  }
  Raw2.Message = Message;
  class MessageService extends TLObject {
    out;
    mentioned;
    mediaUnread;
    silent;
    post;
    legacy;
    id;
    fromId;
    peerId;
    replyTo;
    date;
    action;
    ttlPeriod;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageService';
      this.constructorId = 721967202;
      this.subclassOfId = 2030045667;
      this._slots = [
        'out',
        'mentioned',
        'mediaUnread',
        'silent',
        'post',
        'legacy',
        'id',
        'fromId',
        'peerId',
        'replyTo',
        'date',
        'action',
        'ttlPeriod',
      ];
      this.out = params.out;
      this.mentioned = params.mentioned;
      this.mediaUnread = params.mediaUnread;
      this.silent = params.silent;
      this.post = params.post;
      this.legacy = params.legacy;
      this.id = params.id;
      this.fromId = params.fromId;
      this.peerId = params.peerId;
      this.replyTo = params.replyTo;
      this.date = params.date;
      this.action = params.action;
      this.ttlPeriod = params.ttlPeriod;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let out = flags & (1 << 1) ? true : false;
      let mentioned = flags & (1 << 4) ? true : false;
      let mediaUnread = flags & (1 << 5) ? true : false;
      let silent = flags & (1 << 13) ? true : false;
      let post = flags & (1 << 14) ? true : false;
      let legacy = flags & (1 << 19) ? true : false;
      let id = await Primitive.Int.read(b);
      let fromId = flags & (1 << 8) ? await TLObject.read(b) : void 0;
      let peerId = await TLObject.read(b);
      let replyTo = flags & (1 << 3) ? await TLObject.read(b) : void 0;
      let date = await Primitive.Int.read(b);
      let action = await TLObject.read(b);
      let ttlPeriod = flags & (1 << 25) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.MessageService({
        out,
        mentioned,
        mediaUnread,
        silent,
        post,
        legacy,
        id,
        fromId,
        peerId,
        replyTo,
        date,
        action,
        ttlPeriod,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.out ? 1 << 1 : 0;
      flags |= this.mentioned ? 1 << 4 : 0;
      flags |= this.mediaUnread ? 1 << 5 : 0;
      flags |= this.silent ? 1 << 13 : 0;
      flags |= this.post ? 1 << 14 : 0;
      flags |= this.legacy ? 1 << 19 : 0;
      flags |= this.fromId !== void 0 ? 1 << 8 : 0;
      flags |= this.replyTo !== void 0 ? 1 << 3 : 0;
      flags |= this.ttlPeriod !== void 0 ? 1 << 25 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.fromId !== void 0) {
        b.write(this.fromId.write());
      }
      if (this.peerId !== void 0) {
        b.write(this.peerId.write());
      }
      if (this.replyTo !== void 0) {
        b.write(this.replyTo.write());
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.action !== void 0) {
        b.write(this.action.write());
      }
      if (this.ttlPeriod !== void 0) {
        b.write(Primitive.Int.write(this.ttlPeriod));
      }
      return b.buffer;
    }
  }
  Raw2.MessageService = MessageService;
  class MessageMediaEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'MessageMediaEmpty';
      this.constructorId = 1038967584;
      this.subclassOfId = 1198308914;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.MessageMediaEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.MessageMediaEmpty = MessageMediaEmpty;
  class MessageMediaPhoto extends TLObject {
    spoiler;
    photo;
    ttlSeconds;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageMediaPhoto';
      this.constructorId = 1766936791;
      this.subclassOfId = 1198308914;
      this._slots = ['spoiler', 'photo', 'ttlSeconds'];
      this.spoiler = params.spoiler;
      this.photo = params.photo;
      this.ttlSeconds = params.ttlSeconds;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let spoiler = flags & (1 << 3) ? true : false;
      let photo = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let ttlSeconds = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.MessageMediaPhoto({ spoiler, photo, ttlSeconds });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.spoiler ? 1 << 3 : 0;
      flags |= this.photo !== void 0 ? 1 << 0 : 0;
      flags |= this.ttlSeconds !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      if (this.ttlSeconds !== void 0) {
        b.write(Primitive.Int.write(this.ttlSeconds));
      }
      return b.buffer;
    }
  }
  Raw2.MessageMediaPhoto = MessageMediaPhoto;
  class MessageMediaGeo extends TLObject {
    geo;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageMediaGeo';
      this.constructorId = 1457575028;
      this.subclassOfId = 1198308914;
      this._slots = ['geo'];
      this.geo = params.geo;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let geo = await TLObject.read(b);
      return new Raw2.MessageMediaGeo({ geo });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.geo !== void 0) {
        b.write(this.geo.write());
      }
      return b.buffer;
    }
  }
  Raw2.MessageMediaGeo = MessageMediaGeo;
  class MessageMediaContact extends TLObject {
    phoneNumber;
    firstName;
    lastName;
    vcard;
    userId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageMediaContact';
      this.constructorId = 1882335561;
      this.subclassOfId = 1198308914;
      this._slots = ['phoneNumber', 'firstName', 'lastName', 'vcard', 'userId'];
      this.phoneNumber = params.phoneNumber;
      this.firstName = params.firstName;
      this.lastName = params.lastName;
      this.vcard = params.vcard;
      this.userId = params.userId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let phoneNumber = await Primitive.String.read(b);
      let firstName = await Primitive.String.read(b);
      let lastName = await Primitive.String.read(b);
      let vcard = await Primitive.String.read(b);
      let userId = await Primitive.Long.read(b);
      return new Raw2.MessageMediaContact({
        phoneNumber,
        firstName,
        lastName,
        vcard,
        userId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.phoneNumber !== void 0) {
        b.write(Primitive.String.write(this.phoneNumber));
      }
      if (this.firstName !== void 0) {
        b.write(Primitive.String.write(this.firstName));
      }
      if (this.lastName !== void 0) {
        b.write(Primitive.String.write(this.lastName));
      }
      if (this.vcard !== void 0) {
        b.write(Primitive.String.write(this.vcard));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      return b.buffer;
    }
  }
  Raw2.MessageMediaContact = MessageMediaContact;
  class MessageMediaUnsupported extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'MessageMediaUnsupported';
      this.constructorId = 2676290718;
      this.subclassOfId = 1198308914;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.MessageMediaUnsupported();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.MessageMediaUnsupported = MessageMediaUnsupported;
  class MessageMediaDocument extends TLObject {
    nopremium;
    spoiler;
    video;
    round;
    voice;
    document;
    altDocument;
    ttlSeconds;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageMediaDocument';
      this.constructorId = 1291114285;
      this.subclassOfId = 1198308914;
      this._slots = [
        'nopremium',
        'spoiler',
        'video',
        'round',
        'voice',
        'document',
        'altDocument',
        'ttlSeconds',
      ];
      this.nopremium = params.nopremium;
      this.spoiler = params.spoiler;
      this.video = params.video;
      this.round = params.round;
      this.voice = params.voice;
      this.document = params.document;
      this.altDocument = params.altDocument;
      this.ttlSeconds = params.ttlSeconds;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let nopremium = flags & (1 << 3) ? true : false;
      let spoiler = flags & (1 << 4) ? true : false;
      let video = flags & (1 << 6) ? true : false;
      let round = flags & (1 << 7) ? true : false;
      let voice = flags & (1 << 8) ? true : false;
      let document = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let altDocument = flags & (1 << 5) ? await TLObject.read(b) : void 0;
      let ttlSeconds = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.MessageMediaDocument({
        nopremium,
        spoiler,
        video,
        round,
        voice,
        document,
        altDocument,
        ttlSeconds,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.nopremium ? 1 << 3 : 0;
      flags |= this.spoiler ? 1 << 4 : 0;
      flags |= this.video ? 1 << 6 : 0;
      flags |= this.round ? 1 << 7 : 0;
      flags |= this.voice ? 1 << 8 : 0;
      flags |= this.document !== void 0 ? 1 << 0 : 0;
      flags |= this.altDocument !== void 0 ? 1 << 5 : 0;
      flags |= this.ttlSeconds !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.document !== void 0) {
        b.write(this.document.write());
      }
      if (this.altDocument !== void 0) {
        b.write(this.altDocument.write());
      }
      if (this.ttlSeconds !== void 0) {
        b.write(Primitive.Int.write(this.ttlSeconds));
      }
      return b.buffer;
    }
  }
  Raw2.MessageMediaDocument = MessageMediaDocument;
  class MessageMediaWebPage extends TLObject {
    forceLargeMedia;
    forceSmallMedia;
    manual;
    safe;
    webpage;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageMediaWebPage';
      this.constructorId = 3723562043;
      this.subclassOfId = 1198308914;
      this._slots = ['forceLargeMedia', 'forceSmallMedia', 'manual', 'safe', 'webpage'];
      this.forceLargeMedia = params.forceLargeMedia;
      this.forceSmallMedia = params.forceSmallMedia;
      this.manual = params.manual;
      this.safe = params.safe;
      this.webpage = params.webpage;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let forceLargeMedia = flags & (1 << 0) ? true : false;
      let forceSmallMedia = flags & (1 << 1) ? true : false;
      let manual = flags & (1 << 3) ? true : false;
      let safe = flags & (1 << 4) ? true : false;
      let webpage = await TLObject.read(b);
      return new Raw2.MessageMediaWebPage({
        forceLargeMedia,
        forceSmallMedia,
        manual,
        safe,
        webpage,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.forceLargeMedia ? 1 << 0 : 0;
      flags |= this.forceSmallMedia ? 1 << 1 : 0;
      flags |= this.manual ? 1 << 3 : 0;
      flags |= this.safe ? 1 << 4 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.webpage !== void 0) {
        b.write(this.webpage.write());
      }
      return b.buffer;
    }
  }
  Raw2.MessageMediaWebPage = MessageMediaWebPage;
  class MessageMediaVenue extends TLObject {
    geo;
    title;
    address;
    provider;
    venueId;
    venueType;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageMediaVenue';
      this.constructorId = 784356159;
      this.subclassOfId = 1198308914;
      this._slots = ['geo', 'title', 'address', 'provider', 'venueId', 'venueType'];
      this.geo = params.geo;
      this.title = params.title;
      this.address = params.address;
      this.provider = params.provider;
      this.venueId = params.venueId;
      this.venueType = params.venueType;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let geo = await TLObject.read(b);
      let title = await Primitive.String.read(b);
      let address = await Primitive.String.read(b);
      let provider = await Primitive.String.read(b);
      let venueId = await Primitive.String.read(b);
      let venueType = await Primitive.String.read(b);
      return new Raw2.MessageMediaVenue({
        geo,
        title,
        address,
        provider,
        venueId,
        venueType,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.geo !== void 0) {
        b.write(this.geo.write());
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.address !== void 0) {
        b.write(Primitive.String.write(this.address));
      }
      if (this.provider !== void 0) {
        b.write(Primitive.String.write(this.provider));
      }
      if (this.venueId !== void 0) {
        b.write(Primitive.String.write(this.venueId));
      }
      if (this.venueType !== void 0) {
        b.write(Primitive.String.write(this.venueType));
      }
      return b.buffer;
    }
  }
  Raw2.MessageMediaVenue = MessageMediaVenue;
  class MessageMediaGame extends TLObject {
    game;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageMediaGame';
      this.constructorId = 4256272392;
      this.subclassOfId = 1198308914;
      this._slots = ['game'];
      this.game = params.game;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let game = await TLObject.read(b);
      return new Raw2.MessageMediaGame({ game });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.game !== void 0) {
        b.write(this.game.write());
      }
      return b.buffer;
    }
  }
  Raw2.MessageMediaGame = MessageMediaGame;
  class MessageMediaInvoice extends TLObject {
    shippingAddressRequested;
    test;
    title;
    description;
    photo;
    receiptMsgId;
    currency;
    totalAmount;
    startParam;
    extendedMedia;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageMediaInvoice';
      this.constructorId = 4138027219;
      this.subclassOfId = 1198308914;
      this._slots = [
        'shippingAddressRequested',
        'test',
        'title',
        'description',
        'photo',
        'receiptMsgId',
        'currency',
        'totalAmount',
        'startParam',
        'extendedMedia',
      ];
      this.shippingAddressRequested = params.shippingAddressRequested;
      this.test = params.test;
      this.title = params.title;
      this.description = params.description;
      this.photo = params.photo;
      this.receiptMsgId = params.receiptMsgId;
      this.currency = params.currency;
      this.totalAmount = params.totalAmount;
      this.startParam = params.startParam;
      this.extendedMedia = params.extendedMedia;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let shippingAddressRequested = flags & (1 << 1) ? true : false;
      let test = flags & (1 << 3) ? true : false;
      let title = await Primitive.String.read(b);
      let description = await Primitive.String.read(b);
      let photo = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let receiptMsgId = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      let currency = await Primitive.String.read(b);
      let totalAmount = await Primitive.Long.read(b);
      let startParam = await Primitive.String.read(b);
      let extendedMedia = flags & (1 << 4) ? await TLObject.read(b) : void 0;
      return new Raw2.MessageMediaInvoice({
        shippingAddressRequested,
        test,
        title,
        description,
        photo,
        receiptMsgId,
        currency,
        totalAmount,
        startParam,
        extendedMedia,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.shippingAddressRequested ? 1 << 1 : 0;
      flags |= this.test ? 1 << 3 : 0;
      flags |= this.photo !== void 0 ? 1 << 0 : 0;
      flags |= this.receiptMsgId !== void 0 ? 1 << 2 : 0;
      flags |= this.extendedMedia !== void 0 ? 1 << 4 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.description !== void 0) {
        b.write(Primitive.String.write(this.description));
      }
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      if (this.receiptMsgId !== void 0) {
        b.write(Primitive.Int.write(this.receiptMsgId));
      }
      if (this.currency !== void 0) {
        b.write(Primitive.String.write(this.currency));
      }
      if (this.totalAmount !== void 0) {
        b.write(Primitive.Long.write(this.totalAmount));
      }
      if (this.startParam !== void 0) {
        b.write(Primitive.String.write(this.startParam));
      }
      if (this.extendedMedia !== void 0) {
        b.write(this.extendedMedia.write());
      }
      return b.buffer;
    }
  }
  Raw2.MessageMediaInvoice = MessageMediaInvoice;
  class MessageMediaGeoLive extends TLObject {
    geo;
    heading;
    period;
    proximityNotificationRadius;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageMediaGeoLive';
      this.constructorId = 3108030054;
      this.subclassOfId = 1198308914;
      this._slots = ['geo', 'heading', 'period', 'proximityNotificationRadius'];
      this.geo = params.geo;
      this.heading = params.heading;
      this.period = params.period;
      this.proximityNotificationRadius = params.proximityNotificationRadius;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let geo = await TLObject.read(b);
      let heading = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let period = await Primitive.Int.read(b);
      let proximityNotificationRadius = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.MessageMediaGeoLive({
        geo,
        heading,
        period,
        proximityNotificationRadius,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.heading !== void 0 ? 1 << 0 : 0;
      flags |= this.proximityNotificationRadius !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.geo !== void 0) {
        b.write(this.geo.write());
      }
      if (this.heading !== void 0) {
        b.write(Primitive.Int.write(this.heading));
      }
      if (this.period !== void 0) {
        b.write(Primitive.Int.write(this.period));
      }
      if (this.proximityNotificationRadius !== void 0) {
        b.write(Primitive.Int.write(this.proximityNotificationRadius));
      }
      return b.buffer;
    }
  }
  Raw2.MessageMediaGeoLive = MessageMediaGeoLive;
  class MessageMediaPoll extends TLObject {
    poll;
    results;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageMediaPoll';
      this.constructorId = 1272375192;
      this.subclassOfId = 1198308914;
      this._slots = ['poll', 'results'];
      this.poll = params.poll;
      this.results = params.results;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let poll = await TLObject.read(b);
      let results = await TLObject.read(b);
      return new Raw2.MessageMediaPoll({ poll, results });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.poll !== void 0) {
        b.write(this.poll.write());
      }
      if (this.results !== void 0) {
        b.write(this.results.write());
      }
      return b.buffer;
    }
  }
  Raw2.MessageMediaPoll = MessageMediaPoll;
  class MessageMediaDice extends TLObject {
    value;
    emoticon;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageMediaDice';
      this.constructorId = 1065280907;
      this.subclassOfId = 1198308914;
      this._slots = ['value', 'emoticon'];
      this.value = params.value;
      this.emoticon = params.emoticon;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let value = await Primitive.Int.read(b);
      let emoticon = await Primitive.String.read(b);
      return new Raw2.MessageMediaDice({ value, emoticon });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.value !== void 0) {
        b.write(Primitive.Int.write(this.value));
      }
      if (this.emoticon !== void 0) {
        b.write(Primitive.String.write(this.emoticon));
      }
      return b.buffer;
    }
  }
  Raw2.MessageMediaDice = MessageMediaDice;
  class MessageMediaStory extends TLObject {
    viaMention;
    peer;
    id;
    story;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageMediaStory';
      this.constructorId = 1758159491;
      this.subclassOfId = 1198308914;
      this._slots = ['viaMention', 'peer', 'id', 'story'];
      this.viaMention = params.viaMention;
      this.peer = params.peer;
      this.id = params.id;
      this.story = params.story;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let viaMention = flags & (1 << 1) ? true : false;
      let peer = await TLObject.read(b);
      let id = await Primitive.Int.read(b);
      let story = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      return new Raw2.MessageMediaStory({
        viaMention,
        peer,
        id,
        story,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.viaMention ? 1 << 1 : 0;
      flags |= this.story !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.story !== void 0) {
        b.write(this.story.write());
      }
      return b.buffer;
    }
  }
  Raw2.MessageMediaStory = MessageMediaStory;
  class MessageMediaGiveaway extends TLObject {
    onlyNewSubscribers;
    winnersAreVisible;
    channels;
    countriesIso2;
    prizeDescription;
    quantity;
    months;
    untilDate;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageMediaGiveaway';
      this.constructorId = 3668805040;
      this.subclassOfId = 1198308914;
      this._slots = [
        'onlyNewSubscribers',
        'winnersAreVisible',
        'channels',
        'countriesIso2',
        'prizeDescription',
        'quantity',
        'months',
        'untilDate',
      ];
      this.onlyNewSubscribers = params.onlyNewSubscribers;
      this.winnersAreVisible = params.winnersAreVisible;
      this.channels = params.channels;
      this.countriesIso2 = params.countriesIso2;
      this.prizeDescription = params.prizeDescription;
      this.quantity = params.quantity;
      this.months = params.months;
      this.untilDate = params.untilDate;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let onlyNewSubscribers = flags & (1 << 0) ? true : false;
      let winnersAreVisible = flags & (1 << 2) ? true : false;
      let channels2 = await TLObject.read(b, Primitive.Long);
      let countriesIso2 = flags & (1 << 1) ? await TLObject.read(b, Primitive.String) : [];
      let prizeDescription = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
      let quantity = await Primitive.Int.read(b);
      let months = await Primitive.Int.read(b);
      let untilDate = await Primitive.Int.read(b);
      return new Raw2.MessageMediaGiveaway({
        onlyNewSubscribers,
        winnersAreVisible,
        channels: channels2,
        countriesIso2,
        prizeDescription,
        quantity,
        months,
        untilDate,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.onlyNewSubscribers ? 1 << 0 : 0;
      flags |= this.winnersAreVisible ? 1 << 2 : 0;
      flags |= this.countriesIso2 ? 1 << 1 : 0;
      flags |= this.prizeDescription !== void 0 ? 1 << 3 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.channels) {
        b.write(Primitive.Vector.write(this.channels, Primitive.Long));
      }
      if (this.countriesIso2) {
        b.write(Primitive.Vector.write(this.countriesIso2, Primitive.String));
      }
      if (this.prizeDescription !== void 0) {
        b.write(Primitive.String.write(this.prizeDescription));
      }
      if (this.quantity !== void 0) {
        b.write(Primitive.Int.write(this.quantity));
      }
      if (this.months !== void 0) {
        b.write(Primitive.Int.write(this.months));
      }
      if (this.untilDate !== void 0) {
        b.write(Primitive.Int.write(this.untilDate));
      }
      return b.buffer;
    }
  }
  Raw2.MessageMediaGiveaway = MessageMediaGiveaway;
  class MessageMediaGiveawayResults extends TLObject {
    onlyNewSubscribers;
    refunded;
    channelId;
    additionalPeersCount;
    launchMsgId;
    winnersCount;
    unclaimedCount;
    winners;
    months;
    prizeDescription;
    untilDate;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageMediaGiveawayResults';
      this.constructorId = 3331919976;
      this.subclassOfId = 1198308914;
      this._slots = [
        'onlyNewSubscribers',
        'refunded',
        'channelId',
        'additionalPeersCount',
        'launchMsgId',
        'winnersCount',
        'unclaimedCount',
        'winners',
        'months',
        'prizeDescription',
        'untilDate',
      ];
      this.onlyNewSubscribers = params.onlyNewSubscribers;
      this.refunded = params.refunded;
      this.channelId = params.channelId;
      this.additionalPeersCount = params.additionalPeersCount;
      this.launchMsgId = params.launchMsgId;
      this.winnersCount = params.winnersCount;
      this.unclaimedCount = params.unclaimedCount;
      this.winners = params.winners;
      this.months = params.months;
      this.prizeDescription = params.prizeDescription;
      this.untilDate = params.untilDate;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let onlyNewSubscribers = flags & (1 << 0) ? true : false;
      let refunded = flags & (1 << 2) ? true : false;
      let channelId = await Primitive.Long.read(b);
      let additionalPeersCount = flags & (1 << 3) ? await Primitive.Int.read(b) : void 0;
      let launchMsgId = await Primitive.Int.read(b);
      let winnersCount = await Primitive.Int.read(b);
      let unclaimedCount = await Primitive.Int.read(b);
      let winners = await TLObject.read(b, Primitive.Long);
      let months = await Primitive.Int.read(b);
      let prizeDescription = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let untilDate = await Primitive.Int.read(b);
      return new Raw2.MessageMediaGiveawayResults({
        onlyNewSubscribers,
        refunded,
        channelId,
        additionalPeersCount,
        launchMsgId,
        winnersCount,
        unclaimedCount,
        winners,
        months,
        prizeDescription,
        untilDate,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.onlyNewSubscribers ? 1 << 0 : 0;
      flags |= this.refunded ? 1 << 2 : 0;
      flags |= this.additionalPeersCount !== void 0 ? 1 << 3 : 0;
      flags |= this.prizeDescription !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.additionalPeersCount !== void 0) {
        b.write(Primitive.Int.write(this.additionalPeersCount));
      }
      if (this.launchMsgId !== void 0) {
        b.write(Primitive.Int.write(this.launchMsgId));
      }
      if (this.winnersCount !== void 0) {
        b.write(Primitive.Int.write(this.winnersCount));
      }
      if (this.unclaimedCount !== void 0) {
        b.write(Primitive.Int.write(this.unclaimedCount));
      }
      if (this.winners) {
        b.write(Primitive.Vector.write(this.winners, Primitive.Long));
      }
      if (this.months !== void 0) {
        b.write(Primitive.Int.write(this.months));
      }
      if (this.prizeDescription !== void 0) {
        b.write(Primitive.String.write(this.prizeDescription));
      }
      if (this.untilDate !== void 0) {
        b.write(Primitive.Int.write(this.untilDate));
      }
      return b.buffer;
    }
  }
  Raw2.MessageMediaGiveawayResults = MessageMediaGiveawayResults;
  class MessageActionEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'MessageActionEmpty';
      this.constructorId = 3064919984;
      this.subclassOfId = 2256589094;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.MessageActionEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.MessageActionEmpty = MessageActionEmpty;
  class MessageActionChatCreate extends TLObject {
    title;
    users;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionChatCreate';
      this.constructorId = 3175599021;
      this.subclassOfId = 2256589094;
      this._slots = ['title', 'users'];
      this.title = params.title;
      this.users = params.users;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let title = await Primitive.String.read(b);
      let users2 = await TLObject.read(b, Primitive.Long);
      return new Raw2.MessageActionChatCreate({ title, users: users2 });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.users) {
        b.write(Primitive.Vector.write(this.users, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionChatCreate = MessageActionChatCreate;
  class MessageActionChatEditTitle extends TLObject {
    title;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionChatEditTitle';
      this.constructorId = 3047280218;
      this.subclassOfId = 2256589094;
      this._slots = ['title'];
      this.title = params.title;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let title = await Primitive.String.read(b);
      return new Raw2.MessageActionChatEditTitle({ title });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionChatEditTitle = MessageActionChatEditTitle;
  class MessageActionChatEditPhoto extends TLObject {
    photo;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionChatEditPhoto';
      this.constructorId = 2144015272;
      this.subclassOfId = 2256589094;
      this._slots = ['photo'];
      this.photo = params.photo;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let photo = await TLObject.read(b);
      return new Raw2.MessageActionChatEditPhoto({ photo });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionChatEditPhoto = MessageActionChatEditPhoto;
  class MessageActionChatDeletePhoto extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'MessageActionChatDeletePhoto';
      this.constructorId = 2514746351;
      this.subclassOfId = 2256589094;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.MessageActionChatDeletePhoto();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.MessageActionChatDeletePhoto = MessageActionChatDeletePhoto;
  class MessageActionChatAddUser extends TLObject {
    users;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionChatAddUser';
      this.constructorId = 365886720;
      this.subclassOfId = 2256589094;
      this._slots = ['users'];
      this.users = params.users;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let users2 = await TLObject.read(b, Primitive.Long);
      return new Raw2.MessageActionChatAddUser({ users: users2 });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.users) {
        b.write(Primitive.Vector.write(this.users, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionChatAddUser = MessageActionChatAddUser;
  class MessageActionChatDeleteUser extends TLObject {
    userId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionChatDeleteUser';
      this.constructorId = 2755604684;
      this.subclassOfId = 2256589094;
      this._slots = ['userId'];
      this.userId = params.userId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      return new Raw2.MessageActionChatDeleteUser({ userId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionChatDeleteUser = MessageActionChatDeleteUser;
  class MessageActionChatJoinedByLink extends TLObject {
    inviterId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionChatJoinedByLink';
      this.constructorId = 51520707;
      this.subclassOfId = 2256589094;
      this._slots = ['inviterId'];
      this.inviterId = params.inviterId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let inviterId = await Primitive.Long.read(b);
      return new Raw2.MessageActionChatJoinedByLink({ inviterId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.inviterId !== void 0) {
        b.write(Primitive.Long.write(this.inviterId));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionChatJoinedByLink = MessageActionChatJoinedByLink;
  class MessageActionChannelCreate extends TLObject {
    title;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionChannelCreate';
      this.constructorId = 2513611922;
      this.subclassOfId = 2256589094;
      this._slots = ['title'];
      this.title = params.title;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let title = await Primitive.String.read(b);
      return new Raw2.MessageActionChannelCreate({ title });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionChannelCreate = MessageActionChannelCreate;
  class MessageActionChatMigrateTo extends TLObject {
    channelId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionChatMigrateTo';
      this.constructorId = 3775102866;
      this.subclassOfId = 2256589094;
      this._slots = ['channelId'];
      this.channelId = params.channelId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let channelId = await Primitive.Long.read(b);
      return new Raw2.MessageActionChatMigrateTo({ channelId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionChatMigrateTo = MessageActionChatMigrateTo;
  class MessageActionChannelMigrateFrom extends TLObject {
    title;
    chatId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionChannelMigrateFrom';
      this.constructorId = 3929622761;
      this.subclassOfId = 2256589094;
      this._slots = ['title', 'chatId'];
      this.title = params.title;
      this.chatId = params.chatId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let title = await Primitive.String.read(b);
      let chatId = await Primitive.Long.read(b);
      return new Raw2.MessageActionChannelMigrateFrom({ title, chatId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.chatId !== void 0) {
        b.write(Primitive.Long.write(this.chatId));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionChannelMigrateFrom = MessageActionChannelMigrateFrom;
  class MessageActionPinMessage extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'MessageActionPinMessage';
      this.constructorId = 2495428845;
      this.subclassOfId = 2256589094;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.MessageActionPinMessage();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.MessageActionPinMessage = MessageActionPinMessage;
  class MessageActionHistoryClear extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'MessageActionHistoryClear';
      this.constructorId = 2679813636;
      this.subclassOfId = 2256589094;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.MessageActionHistoryClear();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.MessageActionHistoryClear = MessageActionHistoryClear;
  class MessageActionGameScore extends TLObject {
    gameId;
    score;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionGameScore';
      this.constructorId = 2460428406;
      this.subclassOfId = 2256589094;
      this._slots = ['gameId', 'score'];
      this.gameId = params.gameId;
      this.score = params.score;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let gameId = await Primitive.Long.read(b);
      let score = await Primitive.Int.read(b);
      return new Raw2.MessageActionGameScore({ gameId, score });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.gameId !== void 0) {
        b.write(Primitive.Long.write(this.gameId));
      }
      if (this.score !== void 0) {
        b.write(Primitive.Int.write(this.score));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionGameScore = MessageActionGameScore;
  class MessageActionPaymentSentMe extends TLObject {
    recurringInit;
    recurringUsed;
    currency;
    totalAmount;
    payload;
    info;
    shippingOptionId;
    charge;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionPaymentSentMe';
      this.constructorId = 2402399015;
      this.subclassOfId = 2256589094;
      this._slots = [
        'recurringInit',
        'recurringUsed',
        'currency',
        'totalAmount',
        'payload',
        'info',
        'shippingOptionId',
        'charge',
      ];
      this.recurringInit = params.recurringInit;
      this.recurringUsed = params.recurringUsed;
      this.currency = params.currency;
      this.totalAmount = params.totalAmount;
      this.payload = params.payload;
      this.info = params.info;
      this.shippingOptionId = params.shippingOptionId;
      this.charge = params.charge;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let recurringInit = flags & (1 << 2) ? true : false;
      let recurringUsed = flags & (1 << 3) ? true : false;
      let currency = await Primitive.String.read(b);
      let totalAmount = await Primitive.Long.read(b);
      let payload = await Primitive.Bytes.read(b);
      let info = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let shippingOptionId = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let charge = await TLObject.read(b);
      return new Raw2.MessageActionPaymentSentMe({
        recurringInit,
        recurringUsed,
        currency,
        totalAmount,
        payload,
        info,
        shippingOptionId,
        charge,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.recurringInit ? 1 << 2 : 0;
      flags |= this.recurringUsed ? 1 << 3 : 0;
      flags |= this.info !== void 0 ? 1 << 0 : 0;
      flags |= this.shippingOptionId !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.currency !== void 0) {
        b.write(Primitive.String.write(this.currency));
      }
      if (this.totalAmount !== void 0) {
        b.write(Primitive.Long.write(this.totalAmount));
      }
      if (this.payload !== void 0) {
        b.write(Primitive.Bytes.write(this.payload));
      }
      if (this.info !== void 0) {
        b.write(this.info.write());
      }
      if (this.shippingOptionId !== void 0) {
        b.write(Primitive.String.write(this.shippingOptionId));
      }
      if (this.charge !== void 0) {
        b.write(this.charge.write());
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionPaymentSentMe = MessageActionPaymentSentMe;
  class MessageActionPaymentSent extends TLObject {
    recurringInit;
    recurringUsed;
    currency;
    totalAmount;
    invoiceSlug;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionPaymentSent';
      this.constructorId = 2518040406;
      this.subclassOfId = 2256589094;
      this._slots = ['recurringInit', 'recurringUsed', 'currency', 'totalAmount', 'invoiceSlug'];
      this.recurringInit = params.recurringInit;
      this.recurringUsed = params.recurringUsed;
      this.currency = params.currency;
      this.totalAmount = params.totalAmount;
      this.invoiceSlug = params.invoiceSlug;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let recurringInit = flags & (1 << 2) ? true : false;
      let recurringUsed = flags & (1 << 3) ? true : false;
      let currency = await Primitive.String.read(b);
      let totalAmount = await Primitive.Long.read(b);
      let invoiceSlug = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      return new Raw2.MessageActionPaymentSent({
        recurringInit,
        recurringUsed,
        currency,
        totalAmount,
        invoiceSlug,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.recurringInit ? 1 << 2 : 0;
      flags |= this.recurringUsed ? 1 << 3 : 0;
      flags |= this.invoiceSlug !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.currency !== void 0) {
        b.write(Primitive.String.write(this.currency));
      }
      if (this.totalAmount !== void 0) {
        b.write(Primitive.Long.write(this.totalAmount));
      }
      if (this.invoiceSlug !== void 0) {
        b.write(Primitive.String.write(this.invoiceSlug));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionPaymentSent = MessageActionPaymentSent;
  class MessageActionPhoneCall extends TLObject {
    video;
    callId;
    reason;
    duration;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionPhoneCall';
      this.constructorId = 2162236031;
      this.subclassOfId = 2256589094;
      this._slots = ['video', 'callId', 'reason', 'duration'];
      this.video = params.video;
      this.callId = params.callId;
      this.reason = params.reason;
      this.duration = params.duration;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let video = flags & (1 << 2) ? true : false;
      let callId = await Primitive.Long.read(b);
      let reason = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let duration = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.MessageActionPhoneCall({
        video,
        callId,
        reason,
        duration,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.video ? 1 << 2 : 0;
      flags |= this.reason !== void 0 ? 1 << 0 : 0;
      flags |= this.duration !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.callId !== void 0) {
        b.write(Primitive.Long.write(this.callId));
      }
      if (this.reason !== void 0) {
        b.write(this.reason.write());
      }
      if (this.duration !== void 0) {
        b.write(Primitive.Int.write(this.duration));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionPhoneCall = MessageActionPhoneCall;
  class MessageActionScreenshotTaken extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'MessageActionScreenshotTaken';
      this.constructorId = 1200788123;
      this.subclassOfId = 2256589094;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.MessageActionScreenshotTaken();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.MessageActionScreenshotTaken = MessageActionScreenshotTaken;
  class MessageActionCustomAction extends TLObject {
    message;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionCustomAction';
      this.constructorId = 4209418070;
      this.subclassOfId = 2256589094;
      this._slots = ['message'];
      this.message = params.message;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let message = await Primitive.String.read(b);
      return new Raw2.MessageActionCustomAction({ message });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionCustomAction = MessageActionCustomAction;
  class MessageActionBotAllowed extends TLObject {
    attachMenu;
    fromRequest;
    domain;
    app;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionBotAllowed';
      this.constructorId = 3306608249;
      this.subclassOfId = 2256589094;
      this._slots = ['attachMenu', 'fromRequest', 'domain', 'app'];
      this.attachMenu = params.attachMenu;
      this.fromRequest = params.fromRequest;
      this.domain = params.domain;
      this.app = params.app;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let attachMenu = flags & (1 << 1) ? true : false;
      let fromRequest = flags & (1 << 3) ? true : false;
      let domain = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let app = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.MessageActionBotAllowed({
        attachMenu,
        fromRequest,
        domain,
        app,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.attachMenu ? 1 << 1 : 0;
      flags |= this.fromRequest ? 1 << 3 : 0;
      flags |= this.domain !== void 0 ? 1 << 0 : 0;
      flags |= this.app !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.domain !== void 0) {
        b.write(Primitive.String.write(this.domain));
      }
      if (this.app !== void 0) {
        b.write(this.app.write());
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionBotAllowed = MessageActionBotAllowed;
  class MessageActionSecureValuesSentMe extends TLObject {
    values;
    credentials;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionSecureValuesSentMe';
      this.constructorId = 455635795;
      this.subclassOfId = 2256589094;
      this._slots = ['values', 'credentials'];
      this.values = params.values;
      this.credentials = params.credentials;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let values = await TLObject.read(b);
      let credentials = await TLObject.read(b);
      return new Raw2.MessageActionSecureValuesSentMe({ values, credentials });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.values) {
        b.write(Primitive.Vector.write(this.values));
      }
      if (this.credentials !== void 0) {
        b.write(this.credentials.write());
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionSecureValuesSentMe = MessageActionSecureValuesSentMe;
  class MessageActionSecureValuesSent extends TLObject {
    types;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionSecureValuesSent';
      this.constructorId = 3646710100;
      this.subclassOfId = 2256589094;
      this._slots = ['types'];
      this.types = params.types;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let types = await TLObject.read(b);
      return new Raw2.MessageActionSecureValuesSent({ types });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.types) {
        b.write(Primitive.Vector.write(this.types));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionSecureValuesSent = MessageActionSecureValuesSent;
  class MessageActionContactSignUp extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'MessageActionContactSignUp';
      this.constructorId = 4092747638;
      this.subclassOfId = 2256589094;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.MessageActionContactSignUp();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.MessageActionContactSignUp = MessageActionContactSignUp;
  class MessageActionGeoProximityReached extends TLObject {
    fromId;
    toId;
    distance;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionGeoProximityReached';
      this.constructorId = 2564871831;
      this.subclassOfId = 2256589094;
      this._slots = ['fromId', 'toId', 'distance'];
      this.fromId = params.fromId;
      this.toId = params.toId;
      this.distance = params.distance;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let fromId = await TLObject.read(b);
      let toId = await TLObject.read(b);
      let distance = await Primitive.Int.read(b);
      return new Raw2.MessageActionGeoProximityReached({
        fromId,
        toId,
        distance,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.fromId !== void 0) {
        b.write(this.fromId.write());
      }
      if (this.toId !== void 0) {
        b.write(this.toId.write());
      }
      if (this.distance !== void 0) {
        b.write(Primitive.Int.write(this.distance));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionGeoProximityReached = MessageActionGeoProximityReached;
  class MessageActionGroupCall extends TLObject {
    call;
    duration;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionGroupCall';
      this.constructorId = 2047704898;
      this.subclassOfId = 2256589094;
      this._slots = ['call', 'duration'];
      this.call = params.call;
      this.duration = params.duration;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let call = await TLObject.read(b);
      let duration = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.MessageActionGroupCall({ call, duration });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.duration !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.call !== void 0) {
        b.write(this.call.write());
      }
      if (this.duration !== void 0) {
        b.write(Primitive.Int.write(this.duration));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionGroupCall = MessageActionGroupCall;
  class MessageActionInviteToGroupCall extends TLObject {
    call;
    users;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionInviteToGroupCall';
      this.constructorId = 1345295095;
      this.subclassOfId = 2256589094;
      this._slots = ['call', 'users'];
      this.call = params.call;
      this.users = params.users;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let call = await TLObject.read(b);
      let users2 = await TLObject.read(b, Primitive.Long);
      return new Raw2.MessageActionInviteToGroupCall({ call, users: users2 });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.call !== void 0) {
        b.write(this.call.write());
      }
      if (this.users) {
        b.write(Primitive.Vector.write(this.users, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionInviteToGroupCall = MessageActionInviteToGroupCall;
  class MessageActionSetMessagesTTL extends TLObject {
    period;
    autoSettingFrom;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionSetMessagesTTL';
      this.constructorId = 1007897979;
      this.subclassOfId = 2256589094;
      this._slots = ['period', 'autoSettingFrom'];
      this.period = params.period;
      this.autoSettingFrom = params.autoSettingFrom;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let period = await Primitive.Int.read(b);
      let autoSettingFrom = flags & (1 << 0) ? await Primitive.Long.read(b) : void 0;
      return new Raw2.MessageActionSetMessagesTTL({
        period,
        autoSettingFrom,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.autoSettingFrom !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.period !== void 0) {
        b.write(Primitive.Int.write(this.period));
      }
      if (this.autoSettingFrom !== void 0) {
        b.write(Primitive.Long.write(this.autoSettingFrom));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionSetMessagesTTL = MessageActionSetMessagesTTL;
  class MessageActionGroupCallScheduled extends TLObject {
    call;
    scheduleDate;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionGroupCallScheduled';
      this.constructorId = 3013637729;
      this.subclassOfId = 2256589094;
      this._slots = ['call', 'scheduleDate'];
      this.call = params.call;
      this.scheduleDate = params.scheduleDate;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let call = await TLObject.read(b);
      let scheduleDate = await Primitive.Int.read(b);
      return new Raw2.MessageActionGroupCallScheduled({ call, scheduleDate });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.call !== void 0) {
        b.write(this.call.write());
      }
      if (this.scheduleDate !== void 0) {
        b.write(Primitive.Int.write(this.scheduleDate));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionGroupCallScheduled = MessageActionGroupCallScheduled;
  class MessageActionSetChatTheme extends TLObject {
    emoticon;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionSetChatTheme';
      this.constructorId = 2860016453;
      this.subclassOfId = 2256589094;
      this._slots = ['emoticon'];
      this.emoticon = params.emoticon;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let emoticon = await Primitive.String.read(b);
      return new Raw2.MessageActionSetChatTheme({ emoticon });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.emoticon !== void 0) {
        b.write(Primitive.String.write(this.emoticon));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionSetChatTheme = MessageActionSetChatTheme;
  class MessageActionChatJoinedByRequest extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'MessageActionChatJoinedByRequest';
      this.constructorId = 3955008459;
      this.subclassOfId = 2256589094;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.MessageActionChatJoinedByRequest();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.MessageActionChatJoinedByRequest = MessageActionChatJoinedByRequest;
  class MessageActionWebViewDataSentMe extends TLObject {
    text;
    data;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionWebViewDataSentMe';
      this.constructorId = 1205698681;
      this.subclassOfId = 2256589094;
      this._slots = ['text', 'data'];
      this.text = params.text;
      this.data = params.data;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      let data = await Primitive.String.read(b);
      return new Raw2.MessageActionWebViewDataSentMe({ text, data });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      if (this.data !== void 0) {
        b.write(Primitive.String.write(this.data));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionWebViewDataSentMe = MessageActionWebViewDataSentMe;
  class MessageActionWebViewDataSent extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionWebViewDataSent';
      this.constructorId = 3032714421;
      this.subclassOfId = 2256589094;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      return new Raw2.MessageActionWebViewDataSent({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionWebViewDataSent = MessageActionWebViewDataSent;
  class MessageActionGiftPremium extends TLObject {
    currency;
    amount;
    months;
    cryptoCurrency;
    cryptoAmount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionGiftPremium';
      this.constructorId = 3359468268;
      this.subclassOfId = 2256589094;
      this._slots = ['currency', 'amount', 'months', 'cryptoCurrency', 'cryptoAmount'];
      this.currency = params.currency;
      this.amount = params.amount;
      this.months = params.months;
      this.cryptoCurrency = params.cryptoCurrency;
      this.cryptoAmount = params.cryptoAmount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let currency = await Primitive.String.read(b);
      let amount = await Primitive.Long.read(b);
      let months = await Primitive.Int.read(b);
      let cryptoCurrency = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let cryptoAmount = flags & (1 << 0) ? await Primitive.Long.read(b) : void 0;
      return new Raw2.MessageActionGiftPremium({
        currency,
        amount,
        months,
        cryptoCurrency,
        cryptoAmount,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.cryptoCurrency !== void 0 ? 1 << 0 : 0;
      flags |= this.cryptoAmount !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.currency !== void 0) {
        b.write(Primitive.String.write(this.currency));
      }
      if (this.amount !== void 0) {
        b.write(Primitive.Long.write(this.amount));
      }
      if (this.months !== void 0) {
        b.write(Primitive.Int.write(this.months));
      }
      if (this.cryptoCurrency !== void 0) {
        b.write(Primitive.String.write(this.cryptoCurrency));
      }
      if (this.cryptoAmount !== void 0) {
        b.write(Primitive.Long.write(this.cryptoAmount));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionGiftPremium = MessageActionGiftPremium;
  class MessageActionTopicCreate extends TLObject {
    title;
    iconColor;
    iconEmojiId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionTopicCreate';
      this.constructorId = 228168278;
      this.subclassOfId = 2256589094;
      this._slots = ['title', 'iconColor', 'iconEmojiId'];
      this.title = params.title;
      this.iconColor = params.iconColor;
      this.iconEmojiId = params.iconEmojiId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let title = await Primitive.String.read(b);
      let iconColor = await Primitive.Int.read(b);
      let iconEmojiId = flags & (1 << 0) ? await Primitive.Long.read(b) : void 0;
      return new Raw2.MessageActionTopicCreate({
        title,
        iconColor,
        iconEmojiId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.iconEmojiId !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.iconColor !== void 0) {
        b.write(Primitive.Int.write(this.iconColor));
      }
      if (this.iconEmojiId !== void 0) {
        b.write(Primitive.Long.write(this.iconEmojiId));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionTopicCreate = MessageActionTopicCreate;
  class MessageActionTopicEdit extends TLObject {
    title;
    iconEmojiId;
    closed;
    hidden;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionTopicEdit';
      this.constructorId = 3230943264;
      this.subclassOfId = 2256589094;
      this._slots = ['title', 'iconEmojiId', 'closed', 'hidden'];
      this.title = params.title;
      this.iconEmojiId = params.iconEmojiId;
      this.closed = params.closed;
      this.hidden = params.hidden;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let title = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let iconEmojiId = flags & (1 << 1) ? await Primitive.Long.read(b) : void 0;
      let closed = flags & (1 << 2) ? await Primitive.Bool.read(b) : void 0;
      let hidden = flags & (1 << 3) ? await Primitive.Bool.read(b) : void 0;
      return new Raw2.MessageActionTopicEdit({
        title,
        iconEmojiId,
        closed,
        hidden,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.title !== void 0 ? 1 << 0 : 0;
      flags |= this.iconEmojiId !== void 0 ? 1 << 1 : 0;
      flags |= this.closed !== void 0 ? 1 << 2 : 0;
      flags |= this.hidden !== void 0 ? 1 << 3 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.iconEmojiId !== void 0) {
        b.write(Primitive.Long.write(this.iconEmojiId));
      }
      if (this.closed !== void 0) {
        b.write(Primitive.Bool.write(this.closed));
      }
      if (this.hidden !== void 0) {
        b.write(Primitive.Bool.write(this.hidden));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionTopicEdit = MessageActionTopicEdit;
  class MessageActionSuggestProfilePhoto extends TLObject {
    photo;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionSuggestProfilePhoto';
      this.constructorId = 1474192222;
      this.subclassOfId = 2256589094;
      this._slots = ['photo'];
      this.photo = params.photo;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let photo = await TLObject.read(b);
      return new Raw2.MessageActionSuggestProfilePhoto({ photo });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionSuggestProfilePhoto = MessageActionSuggestProfilePhoto;
  class MessageActionRequestedPeer extends TLObject {
    buttonId;
    peers;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionRequestedPeer';
      this.constructorId = 827428507;
      this.subclassOfId = 2256589094;
      this._slots = ['buttonId', 'peers'];
      this.buttonId = params.buttonId;
      this.peers = params.peers;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let buttonId = await Primitive.Int.read(b);
      let peers = await TLObject.read(b);
      return new Raw2.MessageActionRequestedPeer({ buttonId, peers });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.buttonId !== void 0) {
        b.write(Primitive.Int.write(this.buttonId));
      }
      if (this.peers) {
        b.write(Primitive.Vector.write(this.peers));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionRequestedPeer = MessageActionRequestedPeer;
  class MessageActionSetChatWallPaper extends TLObject {
    same;
    forBoth;
    wallpaper;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionSetChatWallPaper';
      this.constructorId = 1348510708;
      this.subclassOfId = 2256589094;
      this._slots = ['same', 'forBoth', 'wallpaper'];
      this.same = params.same;
      this.forBoth = params.forBoth;
      this.wallpaper = params.wallpaper;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let same = flags & (1 << 0) ? true : false;
      let forBoth = flags & (1 << 1) ? true : false;
      let wallpaper = await TLObject.read(b);
      return new Raw2.MessageActionSetChatWallPaper({
        same,
        forBoth,
        wallpaper,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.same ? 1 << 0 : 0;
      flags |= this.forBoth ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.wallpaper !== void 0) {
        b.write(this.wallpaper.write());
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionSetChatWallPaper = MessageActionSetChatWallPaper;
  class MessageActionGiftCode extends TLObject {
    viaGiveaway;
    unclaimed;
    boostPeer;
    months;
    slug;
    currency;
    amount;
    cryptoCurrency;
    cryptoAmount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionGiftCode';
      this.constructorId = 1737240073;
      this.subclassOfId = 2256589094;
      this._slots = [
        'viaGiveaway',
        'unclaimed',
        'boostPeer',
        'months',
        'slug',
        'currency',
        'amount',
        'cryptoCurrency',
        'cryptoAmount',
      ];
      this.viaGiveaway = params.viaGiveaway;
      this.unclaimed = params.unclaimed;
      this.boostPeer = params.boostPeer;
      this.months = params.months;
      this.slug = params.slug;
      this.currency = params.currency;
      this.amount = params.amount;
      this.cryptoCurrency = params.cryptoCurrency;
      this.cryptoAmount = params.cryptoAmount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let viaGiveaway = flags & (1 << 0) ? true : false;
      let unclaimed = flags & (1 << 2) ? true : false;
      let boostPeer = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      let months = await Primitive.Int.read(b);
      let slug = await Primitive.String.read(b);
      let currency = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
      let amount = flags & (1 << 2) ? await Primitive.Long.read(b) : void 0;
      let cryptoCurrency = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
      let cryptoAmount = flags & (1 << 3) ? await Primitive.Long.read(b) : void 0;
      return new Raw2.MessageActionGiftCode({
        viaGiveaway,
        unclaimed,
        boostPeer,
        months,
        slug,
        currency,
        amount,
        cryptoCurrency,
        cryptoAmount,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.viaGiveaway ? 1 << 0 : 0;
      flags |= this.unclaimed ? 1 << 2 : 0;
      flags |= this.boostPeer !== void 0 ? 1 << 1 : 0;
      flags |= this.currency !== void 0 ? 1 << 2 : 0;
      flags |= this.amount !== void 0 ? 1 << 2 : 0;
      flags |= this.cryptoCurrency !== void 0 ? 1 << 3 : 0;
      flags |= this.cryptoAmount !== void 0 ? 1 << 3 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.boostPeer !== void 0) {
        b.write(this.boostPeer.write());
      }
      if (this.months !== void 0) {
        b.write(Primitive.Int.write(this.months));
      }
      if (this.slug !== void 0) {
        b.write(Primitive.String.write(this.slug));
      }
      if (this.currency !== void 0) {
        b.write(Primitive.String.write(this.currency));
      }
      if (this.amount !== void 0) {
        b.write(Primitive.Long.write(this.amount));
      }
      if (this.cryptoCurrency !== void 0) {
        b.write(Primitive.String.write(this.cryptoCurrency));
      }
      if (this.cryptoAmount !== void 0) {
        b.write(Primitive.Long.write(this.cryptoAmount));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionGiftCode = MessageActionGiftCode;
  class MessageActionGiveawayLaunch extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'MessageActionGiveawayLaunch';
      this.constructorId = 858499565;
      this.subclassOfId = 2256589094;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.MessageActionGiveawayLaunch();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.MessageActionGiveawayLaunch = MessageActionGiveawayLaunch;
  class MessageActionGiveawayResults extends TLObject {
    winnersCount;
    unclaimedCount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionGiveawayResults';
      this.constructorId = 715107781;
      this.subclassOfId = 2256589094;
      this._slots = ['winnersCount', 'unclaimedCount'];
      this.winnersCount = params.winnersCount;
      this.unclaimedCount = params.unclaimedCount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let winnersCount = await Primitive.Int.read(b);
      let unclaimedCount = await Primitive.Int.read(b);
      return new Raw2.MessageActionGiveawayResults({
        winnersCount,
        unclaimedCount,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.winnersCount !== void 0) {
        b.write(Primitive.Int.write(this.winnersCount));
      }
      if (this.unclaimedCount !== void 0) {
        b.write(Primitive.Int.write(this.unclaimedCount));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionGiveawayResults = MessageActionGiveawayResults;
  class MessageActionBoostApply extends TLObject {
    boosts;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionBoostApply';
      this.constructorId = 3422726765;
      this.subclassOfId = 2256589094;
      this._slots = ['boosts'];
      this.boosts = params.boosts;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let boosts = await Primitive.Int.read(b);
      return new Raw2.MessageActionBoostApply({ boosts });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.boosts !== void 0) {
        b.write(Primitive.Int.write(this.boosts));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionBoostApply = MessageActionBoostApply;
  class MessageActionRequestedPeerSentMe extends TLObject {
    buttonId;
    peers;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageActionRequestedPeerSentMe';
      this.constructorId = 2477987912;
      this.subclassOfId = 2256589094;
      this._slots = ['buttonId', 'peers'];
      this.buttonId = params.buttonId;
      this.peers = params.peers;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let buttonId = await Primitive.Int.read(b);
      let peers = await TLObject.read(b);
      return new Raw2.MessageActionRequestedPeerSentMe({ buttonId, peers });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.buttonId !== void 0) {
        b.write(Primitive.Int.write(this.buttonId));
      }
      if (this.peers) {
        b.write(Primitive.Vector.write(this.peers));
      }
      return b.buffer;
    }
  }
  Raw2.MessageActionRequestedPeerSentMe = MessageActionRequestedPeerSentMe;
  class Dialog extends TLObject {
    pinned;
    unreadMark;
    viewForumAsMessages;
    peer;
    topMessage;
    readInboxMaxId;
    readOutboxMaxId;
    unreadCount;
    unreadMentionsCount;
    unreadReactionsCount;
    notifySettings;
    pts;
    draft;
    folderId;
    ttlPeriod;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Dialog';
      this.constructorId = 3582593222;
      this.subclassOfId = 1120787796;
      this._slots = [
        'pinned',
        'unreadMark',
        'viewForumAsMessages',
        'peer',
        'topMessage',
        'readInboxMaxId',
        'readOutboxMaxId',
        'unreadCount',
        'unreadMentionsCount',
        'unreadReactionsCount',
        'notifySettings',
        'pts',
        'draft',
        'folderId',
        'ttlPeriod',
      ];
      this.pinned = params.pinned;
      this.unreadMark = params.unreadMark;
      this.viewForumAsMessages = params.viewForumAsMessages;
      this.peer = params.peer;
      this.topMessage = params.topMessage;
      this.readInboxMaxId = params.readInboxMaxId;
      this.readOutboxMaxId = params.readOutboxMaxId;
      this.unreadCount = params.unreadCount;
      this.unreadMentionsCount = params.unreadMentionsCount;
      this.unreadReactionsCount = params.unreadReactionsCount;
      this.notifySettings = params.notifySettings;
      this.pts = params.pts;
      this.draft = params.draft;
      this.folderId = params.folderId;
      this.ttlPeriod = params.ttlPeriod;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let pinned = flags & (1 << 2) ? true : false;
      let unreadMark = flags & (1 << 3) ? true : false;
      let viewForumAsMessages = flags & (1 << 6) ? true : false;
      let peer = await TLObject.read(b);
      let topMessage = await Primitive.Int.read(b);
      let readInboxMaxId = await Primitive.Int.read(b);
      let readOutboxMaxId = await Primitive.Int.read(b);
      let unreadCount = await Primitive.Int.read(b);
      let unreadMentionsCount = await Primitive.Int.read(b);
      let unreadReactionsCount = await Primitive.Int.read(b);
      let notifySettings = await TLObject.read(b);
      let pts = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let draft = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      let folderId = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
      let ttlPeriod = flags & (1 << 5) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.Dialog({
        pinned,
        unreadMark,
        viewForumAsMessages,
        peer,
        topMessage,
        readInboxMaxId,
        readOutboxMaxId,
        unreadCount,
        unreadMentionsCount,
        unreadReactionsCount,
        notifySettings,
        pts,
        draft,
        folderId,
        ttlPeriod,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.pinned ? 1 << 2 : 0;
      flags |= this.unreadMark ? 1 << 3 : 0;
      flags |= this.viewForumAsMessages ? 1 << 6 : 0;
      flags |= this.pts !== void 0 ? 1 << 0 : 0;
      flags |= this.draft !== void 0 ? 1 << 1 : 0;
      flags |= this.folderId !== void 0 ? 1 << 4 : 0;
      flags |= this.ttlPeriod !== void 0 ? 1 << 5 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.topMessage !== void 0) {
        b.write(Primitive.Int.write(this.topMessage));
      }
      if (this.readInboxMaxId !== void 0) {
        b.write(Primitive.Int.write(this.readInboxMaxId));
      }
      if (this.readOutboxMaxId !== void 0) {
        b.write(Primitive.Int.write(this.readOutboxMaxId));
      }
      if (this.unreadCount !== void 0) {
        b.write(Primitive.Int.write(this.unreadCount));
      }
      if (this.unreadMentionsCount !== void 0) {
        b.write(Primitive.Int.write(this.unreadMentionsCount));
      }
      if (this.unreadReactionsCount !== void 0) {
        b.write(Primitive.Int.write(this.unreadReactionsCount));
      }
      if (this.notifySettings !== void 0) {
        b.write(this.notifySettings.write());
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.draft !== void 0) {
        b.write(this.draft.write());
      }
      if (this.folderId !== void 0) {
        b.write(Primitive.Int.write(this.folderId));
      }
      if (this.ttlPeriod !== void 0) {
        b.write(Primitive.Int.write(this.ttlPeriod));
      }
      return b.buffer;
    }
  }
  Raw2.Dialog = Dialog;
  class DialogFolder extends TLObject {
    pinned;
    folder;
    peer;
    topMessage;
    unreadMutedPeersCount;
    unreadUnmutedPeersCount;
    unreadMutedMessagesCount;
    unreadUnmutedMessagesCount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DialogFolder';
      this.constructorId = 1908216652;
      this.subclassOfId = 1120787796;
      this._slots = [
        'pinned',
        'folder',
        'peer',
        'topMessage',
        'unreadMutedPeersCount',
        'unreadUnmutedPeersCount',
        'unreadMutedMessagesCount',
        'unreadUnmutedMessagesCount',
      ];
      this.pinned = params.pinned;
      this.folder = params.folder;
      this.peer = params.peer;
      this.topMessage = params.topMessage;
      this.unreadMutedPeersCount = params.unreadMutedPeersCount;
      this.unreadUnmutedPeersCount = params.unreadUnmutedPeersCount;
      this.unreadMutedMessagesCount = params.unreadMutedMessagesCount;
      this.unreadUnmutedMessagesCount = params.unreadUnmutedMessagesCount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let pinned = flags & (1 << 2) ? true : false;
      let folder = await TLObject.read(b);
      let peer = await TLObject.read(b);
      let topMessage = await Primitive.Int.read(b);
      let unreadMutedPeersCount = await Primitive.Int.read(b);
      let unreadUnmutedPeersCount = await Primitive.Int.read(b);
      let unreadMutedMessagesCount = await Primitive.Int.read(b);
      let unreadUnmutedMessagesCount = await Primitive.Int.read(b);
      return new Raw2.DialogFolder({
        pinned,
        folder,
        peer,
        topMessage,
        unreadMutedPeersCount,
        unreadUnmutedPeersCount,
        unreadMutedMessagesCount,
        unreadUnmutedMessagesCount,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.pinned ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.folder !== void 0) {
        b.write(this.folder.write());
      }
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.topMessage !== void 0) {
        b.write(Primitive.Int.write(this.topMessage));
      }
      if (this.unreadMutedPeersCount !== void 0) {
        b.write(Primitive.Int.write(this.unreadMutedPeersCount));
      }
      if (this.unreadUnmutedPeersCount !== void 0) {
        b.write(Primitive.Int.write(this.unreadUnmutedPeersCount));
      }
      if (this.unreadMutedMessagesCount !== void 0) {
        b.write(Primitive.Int.write(this.unreadMutedMessagesCount));
      }
      if (this.unreadUnmutedMessagesCount !== void 0) {
        b.write(Primitive.Int.write(this.unreadUnmutedMessagesCount));
      }
      return b.buffer;
    }
  }
  Raw2.DialogFolder = DialogFolder;
  class PhotoEmpty extends TLObject {
    id;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PhotoEmpty';
      this.constructorId = 590459437;
      this.subclassOfId = 3581324060;
      this._slots = ['id'];
      this.id = params.id;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      return new Raw2.PhotoEmpty({ id });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      return b.buffer;
    }
  }
  Raw2.PhotoEmpty = PhotoEmpty;
  class Photo extends TLObject {
    hasStickers;
    id;
    accessHash;
    fileReference;
    date;
    sizes;
    videoSizes;
    dcId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Photo';
      this.constructorId = 4212750949;
      this.subclassOfId = 3581324060;
      this._slots = [
        'hasStickers',
        'id',
        'accessHash',
        'fileReference',
        'date',
        'sizes',
        'videoSizes',
        'dcId',
      ];
      this.hasStickers = params.hasStickers;
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.fileReference = params.fileReference;
      this.date = params.date;
      this.sizes = params.sizes;
      this.videoSizes = params.videoSizes;
      this.dcId = params.dcId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let hasStickers = flags & (1 << 0) ? true : false;
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let fileReference = await Primitive.Bytes.read(b);
      let date = await Primitive.Int.read(b);
      let sizes = await TLObject.read(b);
      let videoSizes = flags & (1 << 1) ? await TLObject.read(b) : [];
      let dcId = await Primitive.Int.read(b);
      return new Raw2.Photo({
        hasStickers,
        id,
        accessHash,
        fileReference,
        date,
        sizes,
        videoSizes,
        dcId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.hasStickers ? 1 << 0 : 0;
      flags |= this.videoSizes ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.fileReference !== void 0) {
        b.write(Primitive.Bytes.write(this.fileReference));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.sizes) {
        b.write(Primitive.Vector.write(this.sizes));
      }
      if (this.videoSizes) {
        b.write(Primitive.Vector.write(this.videoSizes));
      }
      if (this.dcId !== void 0) {
        b.write(Primitive.Int.write(this.dcId));
      }
      return b.buffer;
    }
  }
  Raw2.Photo = Photo;
  class PhotoSizeEmpty extends TLObject {
    type;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PhotoSizeEmpty';
      this.constructorId = 236446268;
      this.subclassOfId = 399256025;
      this._slots = ['type'];
      this.type = params.type;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let type = await Primitive.String.read(b);
      return new Raw2.PhotoSizeEmpty({ type });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.type !== void 0) {
        b.write(Primitive.String.write(this.type));
      }
      return b.buffer;
    }
  }
  Raw2.PhotoSizeEmpty = PhotoSizeEmpty;
  class PhotoSize extends TLObject {
    type;
    w;
    h;
    size;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PhotoSize';
      this.constructorId = 1976012384;
      this.subclassOfId = 399256025;
      this._slots = ['type', 'w', 'h', 'size'];
      this.type = params.type;
      this.w = params.w;
      this.h = params.h;
      this.size = params.size;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let type = await Primitive.String.read(b);
      let w = await Primitive.Int.read(b);
      let h = await Primitive.Int.read(b);
      let size = await Primitive.Int.read(b);
      return new Raw2.PhotoSize({ type, w, h, size });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.type !== void 0) {
        b.write(Primitive.String.write(this.type));
      }
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Int.write(this.size));
      }
      return b.buffer;
    }
  }
  Raw2.PhotoSize = PhotoSize;
  class PhotoCachedSize extends TLObject {
    type;
    w;
    h;
    bytes;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PhotoCachedSize';
      this.constructorId = 35527382;
      this.subclassOfId = 399256025;
      this._slots = ['type', 'w', 'h', 'bytes'];
      this.type = params.type;
      this.w = params.w;
      this.h = params.h;
      this.bytes = params.bytes;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let type = await Primitive.String.read(b);
      let w = await Primitive.Int.read(b);
      let h = await Primitive.Int.read(b);
      let bytes = await Primitive.Bytes.read(b);
      return new Raw2.PhotoCachedSize({ type, w, h, bytes });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.type !== void 0) {
        b.write(Primitive.String.write(this.type));
      }
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      if (this.bytes !== void 0) {
        b.write(Primitive.Bytes.write(this.bytes));
      }
      return b.buffer;
    }
  }
  Raw2.PhotoCachedSize = PhotoCachedSize;
  class PhotoStrippedSize extends TLObject {
    type;
    bytes;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PhotoStrippedSize';
      this.constructorId = 3769678894;
      this.subclassOfId = 399256025;
      this._slots = ['type', 'bytes'];
      this.type = params.type;
      this.bytes = params.bytes;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let type = await Primitive.String.read(b);
      let bytes = await Primitive.Bytes.read(b);
      return new Raw2.PhotoStrippedSize({ type, bytes });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.type !== void 0) {
        b.write(Primitive.String.write(this.type));
      }
      if (this.bytes !== void 0) {
        b.write(Primitive.Bytes.write(this.bytes));
      }
      return b.buffer;
    }
  }
  Raw2.PhotoStrippedSize = PhotoStrippedSize;
  class PhotoSizeProgressive extends TLObject {
    type;
    w;
    h;
    sizes;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PhotoSizeProgressive';
      this.constructorId = 4198431637;
      this.subclassOfId = 399256025;
      this._slots = ['type', 'w', 'h', 'sizes'];
      this.type = params.type;
      this.w = params.w;
      this.h = params.h;
      this.sizes = params.sizes;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let type = await Primitive.String.read(b);
      let w = await Primitive.Int.read(b);
      let h = await Primitive.Int.read(b);
      let sizes = await TLObject.read(b, Primitive.Int);
      return new Raw2.PhotoSizeProgressive({ type, w, h, sizes });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.type !== void 0) {
        b.write(Primitive.String.write(this.type));
      }
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      if (this.sizes) {
        b.write(Primitive.Vector.write(this.sizes, Primitive.Int));
      }
      return b.buffer;
    }
  }
  Raw2.PhotoSizeProgressive = PhotoSizeProgressive;
  class PhotoPathSize extends TLObject {
    type;
    bytes;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PhotoPathSize';
      this.constructorId = 3626061121;
      this.subclassOfId = 399256025;
      this._slots = ['type', 'bytes'];
      this.type = params.type;
      this.bytes = params.bytes;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let type = await Primitive.String.read(b);
      let bytes = await Primitive.Bytes.read(b);
      return new Raw2.PhotoPathSize({ type, bytes });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.type !== void 0) {
        b.write(Primitive.String.write(this.type));
      }
      if (this.bytes !== void 0) {
        b.write(Primitive.Bytes.write(this.bytes));
      }
      return b.buffer;
    }
  }
  Raw2.PhotoPathSize = PhotoPathSize;
  class GeoPointEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'GeoPointEmpty';
      this.constructorId = 286776671;
      this.subclassOfId = 3591430509;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.GeoPointEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.GeoPointEmpty = GeoPointEmpty;
  class GeoPoint extends TLObject {
    long;
    lat;
    accessHash;
    accuracyRadius;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'GeoPoint';
      this.constructorId = 2997024355;
      this.subclassOfId = 3591430509;
      this._slots = ['long', 'lat', 'accessHash', 'accuracyRadius'];
      this.long = params.long;
      this.lat = params.lat;
      this.accessHash = params.accessHash;
      this.accuracyRadius = params.accuracyRadius;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let long = await Primitive.Double.read(b);
      let lat = await Primitive.Double.read(b);
      let accessHash = await Primitive.Long.read(b);
      let accuracyRadius = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.GeoPoint({
        long,
        lat,
        accessHash,
        accuracyRadius,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.accuracyRadius !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.long !== void 0) {
        b.write(Primitive.Double.write(this.long));
      }
      if (this.lat !== void 0) {
        b.write(Primitive.Double.write(this.lat));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.accuracyRadius !== void 0) {
        b.write(Primitive.Int.write(this.accuracyRadius));
      }
      return b.buffer;
    }
  }
  Raw2.GeoPoint = GeoPoint;
  class InputNotifyPeer extends TLObject {
    peer;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputNotifyPeer';
      this.constructorId = 3099351820;
      this.subclassOfId = 1486362133;
      this._slots = ['peer'];
      this.peer = params.peer;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      return new Raw2.InputNotifyPeer({ peer });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputNotifyPeer = InputNotifyPeer;
  class InputNotifyUsers extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputNotifyUsers';
      this.constructorId = 423314455;
      this.subclassOfId = 1486362133;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputNotifyUsers();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputNotifyUsers = InputNotifyUsers;
  class InputNotifyChats extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputNotifyChats';
      this.constructorId = 1251338318;
      this.subclassOfId = 1486362133;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputNotifyChats();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputNotifyChats = InputNotifyChats;
  class InputNotifyBroadcasts extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputNotifyBroadcasts';
      this.constructorId = 2983951486;
      this.subclassOfId = 1486362133;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputNotifyBroadcasts();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputNotifyBroadcasts = InputNotifyBroadcasts;
  class InputNotifyForumTopic extends TLObject {
    peer;
    topMsgId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputNotifyForumTopic';
      this.constructorId = 1548122514;
      this.subclassOfId = 1486362133;
      this._slots = ['peer', 'topMsgId'];
      this.peer = params.peer;
      this.topMsgId = params.topMsgId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let topMsgId = await Primitive.Int.read(b);
      return new Raw2.InputNotifyForumTopic({ peer, topMsgId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.topMsgId !== void 0) {
        b.write(Primitive.Int.write(this.topMsgId));
      }
      return b.buffer;
    }
  }
  Raw2.InputNotifyForumTopic = InputNotifyForumTopic;
  class InputPeerNotifySettings extends TLObject {
    showPreviews;
    silent;
    muteUntil;
    sound;
    storiesMuted;
    storiesHideSender;
    storiesSound;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPeerNotifySettings';
      this.constructorId = 3402328802;
      this.subclassOfId = 2430274317;
      this._slots = [
        'showPreviews',
        'silent',
        'muteUntil',
        'sound',
        'storiesMuted',
        'storiesHideSender',
        'storiesSound',
      ];
      this.showPreviews = params.showPreviews;
      this.silent = params.silent;
      this.muteUntil = params.muteUntil;
      this.sound = params.sound;
      this.storiesMuted = params.storiesMuted;
      this.storiesHideSender = params.storiesHideSender;
      this.storiesSound = params.storiesSound;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let showPreviews = flags & (1 << 0) ? await Primitive.Bool.read(b) : void 0;
      let silent = flags & (1 << 1) ? await Primitive.Bool.read(b) : void 0;
      let muteUntil = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      let sound = flags & (1 << 3) ? await TLObject.read(b) : void 0;
      let storiesMuted = flags & (1 << 6) ? await Primitive.Bool.read(b) : void 0;
      let storiesHideSender = flags & (1 << 7) ? await Primitive.Bool.read(b) : void 0;
      let storiesSound = flags & (1 << 8) ? await TLObject.read(b) : void 0;
      return new Raw2.InputPeerNotifySettings({
        showPreviews,
        silent,
        muteUntil,
        sound,
        storiesMuted,
        storiesHideSender,
        storiesSound,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.showPreviews !== void 0 ? 1 << 0 : 0;
      flags |= this.silent !== void 0 ? 1 << 1 : 0;
      flags |= this.muteUntil !== void 0 ? 1 << 2 : 0;
      flags |= this.sound !== void 0 ? 1 << 3 : 0;
      flags |= this.storiesMuted !== void 0 ? 1 << 6 : 0;
      flags |= this.storiesHideSender !== void 0 ? 1 << 7 : 0;
      flags |= this.storiesSound !== void 0 ? 1 << 8 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.showPreviews !== void 0) {
        b.write(Primitive.Bool.write(this.showPreviews));
      }
      if (this.silent !== void 0) {
        b.write(Primitive.Bool.write(this.silent));
      }
      if (this.muteUntil !== void 0) {
        b.write(Primitive.Int.write(this.muteUntil));
      }
      if (this.sound !== void 0) {
        b.write(this.sound.write());
      }
      if (this.storiesMuted !== void 0) {
        b.write(Primitive.Bool.write(this.storiesMuted));
      }
      if (this.storiesHideSender !== void 0) {
        b.write(Primitive.Bool.write(this.storiesHideSender));
      }
      if (this.storiesSound !== void 0) {
        b.write(this.storiesSound.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputPeerNotifySettings = InputPeerNotifySettings;
  class PeerNotifySettings extends TLObject {
    showPreviews;
    silent;
    muteUntil;
    iosSound;
    androidSound;
    otherSound;
    storiesMuted;
    storiesHideSender;
    storiesIosSound;
    storiesAndroidSound;
    storiesOtherSound;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PeerNotifySettings';
      this.constructorId = 2573347852;
      this.subclassOfId = 3475030132;
      this._slots = [
        'showPreviews',
        'silent',
        'muteUntil',
        'iosSound',
        'androidSound',
        'otherSound',
        'storiesMuted',
        'storiesHideSender',
        'storiesIosSound',
        'storiesAndroidSound',
        'storiesOtherSound',
      ];
      this.showPreviews = params.showPreviews;
      this.silent = params.silent;
      this.muteUntil = params.muteUntil;
      this.iosSound = params.iosSound;
      this.androidSound = params.androidSound;
      this.otherSound = params.otherSound;
      this.storiesMuted = params.storiesMuted;
      this.storiesHideSender = params.storiesHideSender;
      this.storiesIosSound = params.storiesIosSound;
      this.storiesAndroidSound = params.storiesAndroidSound;
      this.storiesOtherSound = params.storiesOtherSound;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let showPreviews = flags & (1 << 0) ? await Primitive.Bool.read(b) : void 0;
      let silent = flags & (1 << 1) ? await Primitive.Bool.read(b) : void 0;
      let muteUntil = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      let iosSound = flags & (1 << 3) ? await TLObject.read(b) : void 0;
      let androidSound = flags & (1 << 4) ? await TLObject.read(b) : void 0;
      let otherSound = flags & (1 << 5) ? await TLObject.read(b) : void 0;
      let storiesMuted = flags & (1 << 6) ? await Primitive.Bool.read(b) : void 0;
      let storiesHideSender = flags & (1 << 7) ? await Primitive.Bool.read(b) : void 0;
      let storiesIosSound = flags & (1 << 8) ? await TLObject.read(b) : void 0;
      let storiesAndroidSound = flags & (1 << 9) ? await TLObject.read(b) : void 0;
      let storiesOtherSound = flags & (1 << 10) ? await TLObject.read(b) : void 0;
      return new Raw2.PeerNotifySettings({
        showPreviews,
        silent,
        muteUntil,
        iosSound,
        androidSound,
        otherSound,
        storiesMuted,
        storiesHideSender,
        storiesIosSound,
        storiesAndroidSound,
        storiesOtherSound,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.showPreviews !== void 0 ? 1 << 0 : 0;
      flags |= this.silent !== void 0 ? 1 << 1 : 0;
      flags |= this.muteUntil !== void 0 ? 1 << 2 : 0;
      flags |= this.iosSound !== void 0 ? 1 << 3 : 0;
      flags |= this.androidSound !== void 0 ? 1 << 4 : 0;
      flags |= this.otherSound !== void 0 ? 1 << 5 : 0;
      flags |= this.storiesMuted !== void 0 ? 1 << 6 : 0;
      flags |= this.storiesHideSender !== void 0 ? 1 << 7 : 0;
      flags |= this.storiesIosSound !== void 0 ? 1 << 8 : 0;
      flags |= this.storiesAndroidSound !== void 0 ? 1 << 9 : 0;
      flags |= this.storiesOtherSound !== void 0 ? 1 << 10 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.showPreviews !== void 0) {
        b.write(Primitive.Bool.write(this.showPreviews));
      }
      if (this.silent !== void 0) {
        b.write(Primitive.Bool.write(this.silent));
      }
      if (this.muteUntil !== void 0) {
        b.write(Primitive.Int.write(this.muteUntil));
      }
      if (this.iosSound !== void 0) {
        b.write(this.iosSound.write());
      }
      if (this.androidSound !== void 0) {
        b.write(this.androidSound.write());
      }
      if (this.otherSound !== void 0) {
        b.write(this.otherSound.write());
      }
      if (this.storiesMuted !== void 0) {
        b.write(Primitive.Bool.write(this.storiesMuted));
      }
      if (this.storiesHideSender !== void 0) {
        b.write(Primitive.Bool.write(this.storiesHideSender));
      }
      if (this.storiesIosSound !== void 0) {
        b.write(this.storiesIosSound.write());
      }
      if (this.storiesAndroidSound !== void 0) {
        b.write(this.storiesAndroidSound.write());
      }
      if (this.storiesOtherSound !== void 0) {
        b.write(this.storiesOtherSound.write());
      }
      return b.buffer;
    }
  }
  Raw2.PeerNotifySettings = PeerNotifySettings;
  class PeerSettings extends TLObject {
    reportSpam;
    addContact;
    blockContact;
    shareContact;
    needContactsException;
    reportGeo;
    autoarchived;
    inviteMembers;
    requestChatBroadcast;
    businessBotPaused;
    businessBotCanReply;
    geoDistance;
    requestChatTitle;
    requestChatDate;
    businessBotId;
    businessBotManageUrl;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PeerSettings';
      this.constructorId = 2899733598;
      this.subclassOfId = 4138180484;
      this._slots = [
        'reportSpam',
        'addContact',
        'blockContact',
        'shareContact',
        'needContactsException',
        'reportGeo',
        'autoarchived',
        'inviteMembers',
        'requestChatBroadcast',
        'businessBotPaused',
        'businessBotCanReply',
        'geoDistance',
        'requestChatTitle',
        'requestChatDate',
        'businessBotId',
        'businessBotManageUrl',
      ];
      this.reportSpam = params.reportSpam;
      this.addContact = params.addContact;
      this.blockContact = params.blockContact;
      this.shareContact = params.shareContact;
      this.needContactsException = params.needContactsException;
      this.reportGeo = params.reportGeo;
      this.autoarchived = params.autoarchived;
      this.inviteMembers = params.inviteMembers;
      this.requestChatBroadcast = params.requestChatBroadcast;
      this.businessBotPaused = params.businessBotPaused;
      this.businessBotCanReply = params.businessBotCanReply;
      this.geoDistance = params.geoDistance;
      this.requestChatTitle = params.requestChatTitle;
      this.requestChatDate = params.requestChatDate;
      this.businessBotId = params.businessBotId;
      this.businessBotManageUrl = params.businessBotManageUrl;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let reportSpam = flags & (1 << 0) ? true : false;
      let addContact = flags & (1 << 1) ? true : false;
      let blockContact = flags & (1 << 2) ? true : false;
      let shareContact = flags & (1 << 3) ? true : false;
      let needContactsException = flags & (1 << 4) ? true : false;
      let reportGeo = flags & (1 << 5) ? true : false;
      let autoarchived = flags & (1 << 7) ? true : false;
      let inviteMembers = flags & (1 << 8) ? true : false;
      let requestChatBroadcast = flags & (1 << 10) ? true : false;
      let businessBotPaused = flags & (1 << 11) ? true : false;
      let businessBotCanReply = flags & (1 << 12) ? true : false;
      let geoDistance = flags & (1 << 6) ? await Primitive.Int.read(b) : void 0;
      let requestChatTitle = flags & (1 << 9) ? await Primitive.String.read(b) : void 0;
      let requestChatDate = flags & (1 << 9) ? await Primitive.Int.read(b) : void 0;
      let businessBotId = flags & (1 << 13) ? await Primitive.Long.read(b) : void 0;
      let businessBotManageUrl = flags & (1 << 13) ? await Primitive.String.read(b) : void 0;
      return new Raw2.PeerSettings({
        reportSpam,
        addContact,
        blockContact,
        shareContact,
        needContactsException,
        reportGeo,
        autoarchived,
        inviteMembers,
        requestChatBroadcast,
        businessBotPaused,
        businessBotCanReply,
        geoDistance,
        requestChatTitle,
        requestChatDate,
        businessBotId,
        businessBotManageUrl,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.reportSpam ? 1 << 0 : 0;
      flags |= this.addContact ? 1 << 1 : 0;
      flags |= this.blockContact ? 1 << 2 : 0;
      flags |= this.shareContact ? 1 << 3 : 0;
      flags |= this.needContactsException ? 1 << 4 : 0;
      flags |= this.reportGeo ? 1 << 5 : 0;
      flags |= this.autoarchived ? 1 << 7 : 0;
      flags |= this.inviteMembers ? 1 << 8 : 0;
      flags |= this.requestChatBroadcast ? 1 << 10 : 0;
      flags |= this.businessBotPaused ? 1 << 11 : 0;
      flags |= this.businessBotCanReply ? 1 << 12 : 0;
      flags |= this.geoDistance !== void 0 ? 1 << 6 : 0;
      flags |= this.requestChatTitle !== void 0 ? 1 << 9 : 0;
      flags |= this.requestChatDate !== void 0 ? 1 << 9 : 0;
      flags |= this.businessBotId !== void 0 ? 1 << 13 : 0;
      flags |= this.businessBotManageUrl !== void 0 ? 1 << 13 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.geoDistance !== void 0) {
        b.write(Primitive.Int.write(this.geoDistance));
      }
      if (this.requestChatTitle !== void 0) {
        b.write(Primitive.String.write(this.requestChatTitle));
      }
      if (this.requestChatDate !== void 0) {
        b.write(Primitive.Int.write(this.requestChatDate));
      }
      if (this.businessBotId !== void 0) {
        b.write(Primitive.Long.write(this.businessBotId));
      }
      if (this.businessBotManageUrl !== void 0) {
        b.write(Primitive.String.write(this.businessBotManageUrl));
      }
      return b.buffer;
    }
  }
  Raw2.PeerSettings = PeerSettings;
  class WallPaper extends TLObject {
    id;
    creator;
    default;
    pattern;
    dark;
    accessHash;
    slug;
    document;
    settings;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'WallPaper';
      this.constructorId = 2755118061;
      this.subclassOfId = 2527250827;
      this._slots = [
        'id',
        'creator',
        'default',
        'pattern',
        'dark',
        'accessHash',
        'slug',
        'document',
        'settings',
      ];
      this.id = params.id;
      this.creator = params.creator;
      this.default = params.default;
      this.pattern = params.pattern;
      this.dark = params.dark;
      this.accessHash = params.accessHash;
      this.slug = params.slug;
      this.document = params.document;
      this.settings = params.settings;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let flags = await Primitive.Int.read(b);
      let creator = flags & (1 << 0) ? true : false;
      let _default = flags & (1 << 1) ? true : false;
      let pattern = flags & (1 << 3) ? true : false;
      let dark = flags & (1 << 4) ? true : false;
      let accessHash = await Primitive.Long.read(b);
      let slug = await Primitive.String.read(b);
      let document = await TLObject.read(b);
      let settings = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.WallPaper({
        id,
        creator,
        default: _default,
        pattern,
        dark,
        accessHash,
        slug,
        document,
        settings,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      let flags = 0;
      flags |= this.creator ? 1 << 0 : 0;
      flags |= this.default ? 1 << 1 : 0;
      flags |= this.pattern ? 1 << 3 : 0;
      flags |= this.dark ? 1 << 4 : 0;
      flags |= this.settings !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.slug !== void 0) {
        b.write(Primitive.String.write(this.slug));
      }
      if (this.document !== void 0) {
        b.write(this.document.write());
      }
      if (this.settings !== void 0) {
        b.write(this.settings.write());
      }
      return b.buffer;
    }
  }
  Raw2.WallPaper = WallPaper;
  class WallPaperNoFile extends TLObject {
    id;
    default;
    dark;
    settings;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'WallPaperNoFile';
      this.constructorId = 3766501654;
      this.subclassOfId = 2527250827;
      this._slots = ['id', 'default', 'dark', 'settings'];
      this.id = params.id;
      this.default = params.default;
      this.dark = params.dark;
      this.settings = params.settings;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let flags = await Primitive.Int.read(b);
      let _default = flags & (1 << 1) ? true : false;
      let dark = flags & (1 << 4) ? true : false;
      let settings = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.WallPaperNoFile({ id, default: _default, dark, settings });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      let flags = 0;
      flags |= this.default ? 1 << 1 : 0;
      flags |= this.dark ? 1 << 4 : 0;
      flags |= this.settings !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.settings !== void 0) {
        b.write(this.settings.write());
      }
      return b.buffer;
    }
  }
  Raw2.WallPaperNoFile = WallPaperNoFile;
  class InputReportReasonSpam extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputReportReasonSpam';
      this.constructorId = 1490799288;
      this.subclassOfId = 2214706471;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputReportReasonSpam();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputReportReasonSpam = InputReportReasonSpam;
  class InputReportReasonViolence extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputReportReasonViolence';
      this.constructorId = 505595789;
      this.subclassOfId = 2214706471;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputReportReasonViolence();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputReportReasonViolence = InputReportReasonViolence;
  class InputReportReasonPornography extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputReportReasonPornography';
      this.constructorId = 777640226;
      this.subclassOfId = 2214706471;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputReportReasonPornography();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputReportReasonPornography = InputReportReasonPornography;
  class InputReportReasonChildAbuse extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputReportReasonChildAbuse';
      this.constructorId = 2918469347;
      this.subclassOfId = 2214706471;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputReportReasonChildAbuse();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputReportReasonChildAbuse = InputReportReasonChildAbuse;
  class InputReportReasonOther extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputReportReasonOther';
      this.constructorId = 3252986545;
      this.subclassOfId = 2214706471;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputReportReasonOther();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputReportReasonOther = InputReportReasonOther;
  class InputReportReasonCopyright extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputReportReasonCopyright';
      this.constructorId = 2609510714;
      this.subclassOfId = 2214706471;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputReportReasonCopyright();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputReportReasonCopyright = InputReportReasonCopyright;
  class InputReportReasonGeoIrrelevant extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputReportReasonGeoIrrelevant';
      this.constructorId = 3688169197;
      this.subclassOfId = 2214706471;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputReportReasonGeoIrrelevant();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputReportReasonGeoIrrelevant = InputReportReasonGeoIrrelevant;
  class InputReportReasonFake extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputReportReasonFake';
      this.constructorId = 4124956391;
      this.subclassOfId = 2214706471;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputReportReasonFake();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputReportReasonFake = InputReportReasonFake;
  class InputReportReasonIllegalDrugs extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputReportReasonIllegalDrugs';
      this.constructorId = 177124030;
      this.subclassOfId = 2214706471;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputReportReasonIllegalDrugs();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputReportReasonIllegalDrugs = InputReportReasonIllegalDrugs;
  class InputReportReasonPersonalDetails extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputReportReasonPersonalDetails';
      this.constructorId = 2663876157;
      this.subclassOfId = 2214706471;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputReportReasonPersonalDetails();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputReportReasonPersonalDetails = InputReportReasonPersonalDetails;
  class UserFull extends TLObject {
    blocked;
    phoneCallsAvailable;
    phoneCallsPrivate;
    canPinMessage;
    hasScheduled;
    videoCallsAvailable;
    voiceMessagesForbidden;
    translationsDisabled;
    storiesPinnedAvailable;
    blockedMyStoriesFrom;
    wallpaperOverridden;
    contactRequirePremium;
    readDatesPrivate;
    sponsoredEnabled;
    id;
    about;
    settings;
    personalPhoto;
    profilePhoto;
    fallbackPhoto;
    notifySettings;
    botInfo;
    pinnedMsgId;
    commonChatsCount;
    folderId;
    ttlPeriod;
    themeEmoticon;
    privateForwardName;
    botGroupAdminRights;
    botBroadcastAdminRights;
    premiumGifts;
    wallpaper;
    stories;
    businessWorkHours;
    businessLocation;
    businessGreetingMessage;
    businessAwayMessage;
    businessIntro;
    birthday;
    personalChannelId;
    personalChannelMessage;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UserFull';
      this.constructorId = 3432609568;
      this.subclassOfId = 524706233;
      this._slots = [
        'blocked',
        'phoneCallsAvailable',
        'phoneCallsPrivate',
        'canPinMessage',
        'hasScheduled',
        'videoCallsAvailable',
        'voiceMessagesForbidden',
        'translationsDisabled',
        'storiesPinnedAvailable',
        'blockedMyStoriesFrom',
        'wallpaperOverridden',
        'contactRequirePremium',
        'readDatesPrivate',
        'sponsoredEnabled',
        'id',
        'about',
        'settings',
        'personalPhoto',
        'profilePhoto',
        'fallbackPhoto',
        'notifySettings',
        'botInfo',
        'pinnedMsgId',
        'commonChatsCount',
        'folderId',
        'ttlPeriod',
        'themeEmoticon',
        'privateForwardName',
        'botGroupAdminRights',
        'botBroadcastAdminRights',
        'premiumGifts',
        'wallpaper',
        'stories',
        'businessWorkHours',
        'businessLocation',
        'businessGreetingMessage',
        'businessAwayMessage',
        'businessIntro',
        'birthday',
        'personalChannelId',
        'personalChannelMessage',
      ];
      this.blocked = params.blocked;
      this.phoneCallsAvailable = params.phoneCallsAvailable;
      this.phoneCallsPrivate = params.phoneCallsPrivate;
      this.canPinMessage = params.canPinMessage;
      this.hasScheduled = params.hasScheduled;
      this.videoCallsAvailable = params.videoCallsAvailable;
      this.voiceMessagesForbidden = params.voiceMessagesForbidden;
      this.translationsDisabled = params.translationsDisabled;
      this.storiesPinnedAvailable = params.storiesPinnedAvailable;
      this.blockedMyStoriesFrom = params.blockedMyStoriesFrom;
      this.wallpaperOverridden = params.wallpaperOverridden;
      this.contactRequirePremium = params.contactRequirePremium;
      this.readDatesPrivate = params.readDatesPrivate;
      this.sponsoredEnabled = params.sponsoredEnabled;
      this.id = params.id;
      this.about = params.about;
      this.settings = params.settings;
      this.personalPhoto = params.personalPhoto;
      this.profilePhoto = params.profilePhoto;
      this.fallbackPhoto = params.fallbackPhoto;
      this.notifySettings = params.notifySettings;
      this.botInfo = params.botInfo;
      this.pinnedMsgId = params.pinnedMsgId;
      this.commonChatsCount = params.commonChatsCount;
      this.folderId = params.folderId;
      this.ttlPeriod = params.ttlPeriod;
      this.themeEmoticon = params.themeEmoticon;
      this.privateForwardName = params.privateForwardName;
      this.botGroupAdminRights = params.botGroupAdminRights;
      this.botBroadcastAdminRights = params.botBroadcastAdminRights;
      this.premiumGifts = params.premiumGifts;
      this.wallpaper = params.wallpaper;
      this.stories = params.stories;
      this.businessWorkHours = params.businessWorkHours;
      this.businessLocation = params.businessLocation;
      this.businessGreetingMessage = params.businessGreetingMessage;
      this.businessAwayMessage = params.businessAwayMessage;
      this.businessIntro = params.businessIntro;
      this.birthday = params.birthday;
      this.personalChannelId = params.personalChannelId;
      this.personalChannelMessage = params.personalChannelMessage;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let blocked = flags & (1 << 0) ? true : false;
      let phoneCallsAvailable = flags & (1 << 4) ? true : false;
      let phoneCallsPrivate = flags & (1 << 5) ? true : false;
      let canPinMessage = flags & (1 << 7) ? true : false;
      let hasScheduled = flags & (1 << 12) ? true : false;
      let videoCallsAvailable = flags & (1 << 13) ? true : false;
      let voiceMessagesForbidden = flags & (1 << 20) ? true : false;
      let translationsDisabled = flags & (1 << 23) ? true : false;
      let storiesPinnedAvailable = flags & (1 << 26) ? true : false;
      let blockedMyStoriesFrom = flags & (1 << 27) ? true : false;
      let wallpaperOverridden = flags & (1 << 28) ? true : false;
      let contactRequirePremium = flags & (1 << 29) ? true : false;
      let readDatesPrivate = flags & (1 << 30) ? true : false;
      let flags2 = await Primitive.Int.read(b);
      let sponsoredEnabled = flags2 & (1 << 7) ? true : false;
      let id = await Primitive.Long.read(b);
      let about = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let settings = await TLObject.read(b);
      let personalPhoto = flags & (1 << 21) ? await TLObject.read(b) : void 0;
      let profilePhoto = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      let fallbackPhoto = flags & (1 << 22) ? await TLObject.read(b) : void 0;
      let notifySettings = await TLObject.read(b);
      let botInfo = flags & (1 << 3) ? await TLObject.read(b) : void 0;
      let pinnedMsgId = flags & (1 << 6) ? await Primitive.Int.read(b) : void 0;
      let commonChatsCount = await Primitive.Int.read(b);
      let folderId = flags & (1 << 11) ? await Primitive.Int.read(b) : void 0;
      let ttlPeriod = flags & (1 << 14) ? await Primitive.Int.read(b) : void 0;
      let themeEmoticon = flags & (1 << 15) ? await Primitive.String.read(b) : void 0;
      let privateForwardName = flags & (1 << 16) ? await Primitive.String.read(b) : void 0;
      let botGroupAdminRights = flags & (1 << 17) ? await TLObject.read(b) : void 0;
      let botBroadcastAdminRights = flags & (1 << 18) ? await TLObject.read(b) : void 0;
      let premiumGifts = flags & (1 << 19) ? await TLObject.read(b) : [];
      let wallpaper = flags & (1 << 24) ? await TLObject.read(b) : void 0;
      let stories2 = flags & (1 << 25) ? await TLObject.read(b) : void 0;
      let businessWorkHours = flags2 & (1 << 0) ? await TLObject.read(b) : void 0;
      let businessLocation = flags2 & (1 << 1) ? await TLObject.read(b) : void 0;
      let businessGreetingMessage = flags2 & (1 << 2) ? await TLObject.read(b) : void 0;
      let businessAwayMessage = flags2 & (1 << 3) ? await TLObject.read(b) : void 0;
      let businessIntro = flags2 & (1 << 4) ? await TLObject.read(b) : void 0;
      let birthday = flags2 & (1 << 5) ? await TLObject.read(b) : void 0;
      let personalChannelId = flags2 & (1 << 6) ? await Primitive.Long.read(b) : void 0;
      let personalChannelMessage = flags2 & (1 << 6) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.UserFull({
        blocked,
        phoneCallsAvailable,
        phoneCallsPrivate,
        canPinMessage,
        hasScheduled,
        videoCallsAvailable,
        voiceMessagesForbidden,
        translationsDisabled,
        storiesPinnedAvailable,
        blockedMyStoriesFrom,
        wallpaperOverridden,
        contactRequirePremium,
        readDatesPrivate,
        sponsoredEnabled,
        id,
        about,
        settings,
        personalPhoto,
        profilePhoto,
        fallbackPhoto,
        notifySettings,
        botInfo,
        pinnedMsgId,
        commonChatsCount,
        folderId,
        ttlPeriod,
        themeEmoticon,
        privateForwardName,
        botGroupAdminRights,
        botBroadcastAdminRights,
        premiumGifts,
        wallpaper,
        stories: stories2,
        businessWorkHours,
        businessLocation,
        businessGreetingMessage,
        businessAwayMessage,
        businessIntro,
        birthday,
        personalChannelId,
        personalChannelMessage,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.blocked ? 1 << 0 : 0;
      flags |= this.phoneCallsAvailable ? 1 << 4 : 0;
      flags |= this.phoneCallsPrivate ? 1 << 5 : 0;
      flags |= this.canPinMessage ? 1 << 7 : 0;
      flags |= this.hasScheduled ? 1 << 12 : 0;
      flags |= this.videoCallsAvailable ? 1 << 13 : 0;
      flags |= this.voiceMessagesForbidden ? 1 << 20 : 0;
      flags |= this.translationsDisabled ? 1 << 23 : 0;
      flags |= this.storiesPinnedAvailable ? 1 << 26 : 0;
      flags |= this.blockedMyStoriesFrom ? 1 << 27 : 0;
      flags |= this.wallpaperOverridden ? 1 << 28 : 0;
      flags |= this.contactRequirePremium ? 1 << 29 : 0;
      flags |= this.readDatesPrivate ? 1 << 30 : 0;
      flags |= this.about !== void 0 ? 1 << 1 : 0;
      flags |= this.personalPhoto !== void 0 ? 1 << 21 : 0;
      flags |= this.profilePhoto !== void 0 ? 1 << 2 : 0;
      flags |= this.fallbackPhoto !== void 0 ? 1 << 22 : 0;
      flags |= this.botInfo !== void 0 ? 1 << 3 : 0;
      flags |= this.pinnedMsgId !== void 0 ? 1 << 6 : 0;
      flags |= this.folderId !== void 0 ? 1 << 11 : 0;
      flags |= this.ttlPeriod !== void 0 ? 1 << 14 : 0;
      flags |= this.themeEmoticon !== void 0 ? 1 << 15 : 0;
      flags |= this.privateForwardName !== void 0 ? 1 << 16 : 0;
      flags |= this.botGroupAdminRights !== void 0 ? 1 << 17 : 0;
      flags |= this.botBroadcastAdminRights !== void 0 ? 1 << 18 : 0;
      flags |= this.premiumGifts ? 1 << 19 : 0;
      flags |= this.wallpaper !== void 0 ? 1 << 24 : 0;
      flags |= this.stories !== void 0 ? 1 << 25 : 0;
      b.write(Primitive.Int.write(flags));
      let flags2 = 0;
      flags2 |= this.sponsoredEnabled ? 1 << 7 : 0;
      flags2 |= this.businessWorkHours !== void 0 ? 1 << 0 : 0;
      flags2 |= this.businessLocation !== void 0 ? 1 << 1 : 0;
      flags2 |= this.businessGreetingMessage !== void 0 ? 1 << 2 : 0;
      flags2 |= this.businessAwayMessage !== void 0 ? 1 << 3 : 0;
      flags2 |= this.businessIntro !== void 0 ? 1 << 4 : 0;
      flags2 |= this.birthday !== void 0 ? 1 << 5 : 0;
      flags2 |= this.personalChannelId !== void 0 ? 1 << 6 : 0;
      flags2 |= this.personalChannelMessage !== void 0 ? 1 << 6 : 0;
      b.write(Primitive.Int.write(flags2));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.about !== void 0) {
        b.write(Primitive.String.write(this.about));
      }
      if (this.settings !== void 0) {
        b.write(this.settings.write());
      }
      if (this.personalPhoto !== void 0) {
        b.write(this.personalPhoto.write());
      }
      if (this.profilePhoto !== void 0) {
        b.write(this.profilePhoto.write());
      }
      if (this.fallbackPhoto !== void 0) {
        b.write(this.fallbackPhoto.write());
      }
      if (this.notifySettings !== void 0) {
        b.write(this.notifySettings.write());
      }
      if (this.botInfo !== void 0) {
        b.write(this.botInfo.write());
      }
      if (this.pinnedMsgId !== void 0) {
        b.write(Primitive.Int.write(this.pinnedMsgId));
      }
      if (this.commonChatsCount !== void 0) {
        b.write(Primitive.Int.write(this.commonChatsCount));
      }
      if (this.folderId !== void 0) {
        b.write(Primitive.Int.write(this.folderId));
      }
      if (this.ttlPeriod !== void 0) {
        b.write(Primitive.Int.write(this.ttlPeriod));
      }
      if (this.themeEmoticon !== void 0) {
        b.write(Primitive.String.write(this.themeEmoticon));
      }
      if (this.privateForwardName !== void 0) {
        b.write(Primitive.String.write(this.privateForwardName));
      }
      if (this.botGroupAdminRights !== void 0) {
        b.write(this.botGroupAdminRights.write());
      }
      if (this.botBroadcastAdminRights !== void 0) {
        b.write(this.botBroadcastAdminRights.write());
      }
      if (this.premiumGifts) {
        b.write(Primitive.Vector.write(this.premiumGifts));
      }
      if (this.wallpaper !== void 0) {
        b.write(this.wallpaper.write());
      }
      if (this.stories !== void 0) {
        b.write(this.stories.write());
      }
      if (this.businessWorkHours !== void 0) {
        b.write(this.businessWorkHours.write());
      }
      if (this.businessLocation !== void 0) {
        b.write(this.businessLocation.write());
      }
      if (this.businessGreetingMessage !== void 0) {
        b.write(this.businessGreetingMessage.write());
      }
      if (this.businessAwayMessage !== void 0) {
        b.write(this.businessAwayMessage.write());
      }
      if (this.businessIntro !== void 0) {
        b.write(this.businessIntro.write());
      }
      if (this.birthday !== void 0) {
        b.write(this.birthday.write());
      }
      if (this.personalChannelId !== void 0) {
        b.write(Primitive.Long.write(this.personalChannelId));
      }
      if (this.personalChannelMessage !== void 0) {
        b.write(Primitive.Int.write(this.personalChannelMessage));
      }
      return b.buffer;
    }
  }
  Raw2.UserFull = UserFull;
  class Contact extends TLObject {
    userId;
    mutual;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Contact';
      this.constructorId = 341499403;
      this.subclassOfId = 2212487076;
      this._slots = ['userId', 'mutual'];
      this.userId = params.userId;
      this.mutual = params.mutual;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      let mutual = await Primitive.Bool.read(b);
      return new Raw2.Contact({ userId, mutual });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.mutual !== void 0) {
        b.write(Primitive.Bool.write(this.mutual));
      }
      return b.buffer;
    }
  }
  Raw2.Contact = Contact;
  class ImportedContact extends TLObject {
    userId;
    clientId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ImportedContact';
      this.constructorId = 3242081360;
      this.subclassOfId = 3041246170;
      this._slots = ['userId', 'clientId'];
      this.userId = params.userId;
      this.clientId = params.clientId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      let clientId = await Primitive.Long.read(b);
      return new Raw2.ImportedContact({ userId, clientId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.clientId !== void 0) {
        b.write(Primitive.Long.write(this.clientId));
      }
      return b.buffer;
    }
  }
  Raw2.ImportedContact = ImportedContact;
  class ContactStatus extends TLObject {
    userId;
    status;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ContactStatus';
      this.constructorId = 383348795;
      this.subclassOfId = 1757468492;
      this._slots = ['userId', 'status'];
      this.userId = params.userId;
      this.status = params.status;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      let status = await TLObject.read(b);
      return new Raw2.ContactStatus({ userId, status });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.status !== void 0) {
        b.write(this.status.write());
      }
      return b.buffer;
    }
  }
  Raw2.ContactStatus = ContactStatus;
  class InputMessagesFilterEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputMessagesFilterEmpty';
      this.constructorId = 1474492012;
      this.subclassOfId = 2318855188;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputMessagesFilterEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputMessagesFilterEmpty = InputMessagesFilterEmpty;
  class InputMessagesFilterPhotos extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputMessagesFilterPhotos';
      this.constructorId = 2517214492;
      this.subclassOfId = 2318855188;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputMessagesFilterPhotos();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputMessagesFilterPhotos = InputMessagesFilterPhotos;
  class InputMessagesFilterVideo extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputMessagesFilterVideo';
      this.constructorId = 2680163941;
      this.subclassOfId = 2318855188;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputMessagesFilterVideo();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputMessagesFilterVideo = InputMessagesFilterVideo;
  class InputMessagesFilterPhotoVideo extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputMessagesFilterPhotoVideo';
      this.constructorId = 1458172132;
      this.subclassOfId = 2318855188;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputMessagesFilterPhotoVideo();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputMessagesFilterPhotoVideo = InputMessagesFilterPhotoVideo;
  class InputMessagesFilterDocument extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputMessagesFilterDocument';
      this.constructorId = 2665345416;
      this.subclassOfId = 2318855188;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputMessagesFilterDocument();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputMessagesFilterDocument = InputMessagesFilterDocument;
  class InputMessagesFilterUrl extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputMessagesFilterUrl';
      this.constructorId = 2129714567;
      this.subclassOfId = 2318855188;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputMessagesFilterUrl();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputMessagesFilterUrl = InputMessagesFilterUrl;
  class InputMessagesFilterGif extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputMessagesFilterGif';
      this.constructorId = 4291323271;
      this.subclassOfId = 2318855188;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputMessagesFilterGif();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputMessagesFilterGif = InputMessagesFilterGif;
  class InputMessagesFilterVoice extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputMessagesFilterVoice';
      this.constructorId = 1358283666;
      this.subclassOfId = 2318855188;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputMessagesFilterVoice();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputMessagesFilterVoice = InputMessagesFilterVoice;
  class InputMessagesFilterMusic extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputMessagesFilterMusic';
      this.constructorId = 928101534;
      this.subclassOfId = 2318855188;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputMessagesFilterMusic();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputMessagesFilterMusic = InputMessagesFilterMusic;
  class InputMessagesFilterChatPhotos extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputMessagesFilterChatPhotos';
      this.constructorId = 975236280;
      this.subclassOfId = 2318855188;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputMessagesFilterChatPhotos();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputMessagesFilterChatPhotos = InputMessagesFilterChatPhotos;
  class InputMessagesFilterPhoneCalls extends TLObject {
    missed;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMessagesFilterPhoneCalls';
      this.constructorId = 2160695144;
      this.subclassOfId = 2318855188;
      this._slots = ['missed'];
      this.missed = params.missed;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let missed = flags & (1 << 0) ? true : false;
      return new Raw2.InputMessagesFilterPhoneCalls({ missed });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.missed ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      return b.buffer;
    }
  }
  Raw2.InputMessagesFilterPhoneCalls = InputMessagesFilterPhoneCalls;
  class InputMessagesFilterRoundVoice extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputMessagesFilterRoundVoice';
      this.constructorId = 2054952868;
      this.subclassOfId = 2318855188;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputMessagesFilterRoundVoice();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputMessagesFilterRoundVoice = InputMessagesFilterRoundVoice;
  class InputMessagesFilterRoundVideo extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputMessagesFilterRoundVideo';
      this.constructorId = 3041516115;
      this.subclassOfId = 2318855188;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputMessagesFilterRoundVideo();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputMessagesFilterRoundVideo = InputMessagesFilterRoundVideo;
  class InputMessagesFilterMyMentions extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputMessagesFilterMyMentions';
      this.constructorId = 3254314650;
      this.subclassOfId = 2318855188;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputMessagesFilterMyMentions();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputMessagesFilterMyMentions = InputMessagesFilterMyMentions;
  class InputMessagesFilterGeo extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputMessagesFilterGeo';
      this.constructorId = 3875695885;
      this.subclassOfId = 2318855188;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputMessagesFilterGeo();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputMessagesFilterGeo = InputMessagesFilterGeo;
  class InputMessagesFilterContacts extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputMessagesFilterContacts';
      this.constructorId = 3764575107;
      this.subclassOfId = 2318855188;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputMessagesFilterContacts();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputMessagesFilterContacts = InputMessagesFilterContacts;
  class InputMessagesFilterPinned extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputMessagesFilterPinned';
      this.constructorId = 464520273;
      this.subclassOfId = 2318855188;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputMessagesFilterPinned();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputMessagesFilterPinned = InputMessagesFilterPinned;
  class UpdateNewMessage extends TLObject {
    message;
    pts;
    ptsCount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateNewMessage';
      this.constructorId = 522914557;
      this.subclassOfId = 2676568142;
      this._slots = ['message', 'pts', 'ptsCount'];
      this.message = params.message;
      this.pts = params.pts;
      this.ptsCount = params.ptsCount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let message = await TLObject.read(b);
      let pts = await Primitive.Int.read(b);
      let ptsCount = await Primitive.Int.read(b);
      return new Raw2.UpdateNewMessage({ message, pts, ptsCount });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.message !== void 0) {
        b.write(this.message.write());
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.ptsCount !== void 0) {
        b.write(Primitive.Int.write(this.ptsCount));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateNewMessage = UpdateNewMessage;
  class UpdateMessageID extends TLObject {
    id;
    randomId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateMessageID';
      this.constructorId = 1318109142;
      this.subclassOfId = 2676568142;
      this._slots = ['id', 'randomId'];
      this.id = params.id;
      this.randomId = params.randomId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Int.read(b);
      let randomId = await Primitive.Long.read(b);
      return new Raw2.UpdateMessageID({ id, randomId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.randomId !== void 0) {
        b.write(Primitive.Long.write(this.randomId));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateMessageID = UpdateMessageID;
  class UpdateDeleteMessages extends TLObject {
    messages;
    pts;
    ptsCount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateDeleteMessages';
      this.constructorId = 2718806245;
      this.subclassOfId = 2676568142;
      this._slots = ['messages', 'pts', 'ptsCount'];
      this.messages = params.messages;
      this.pts = params.pts;
      this.ptsCount = params.ptsCount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let messages2 = await TLObject.read(b, Primitive.Int);
      let pts = await Primitive.Int.read(b);
      let ptsCount = await Primitive.Int.read(b);
      return new Raw2.UpdateDeleteMessages({ messages: messages2, pts, ptsCount });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.messages) {
        b.write(Primitive.Vector.write(this.messages, Primitive.Int));
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.ptsCount !== void 0) {
        b.write(Primitive.Int.write(this.ptsCount));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateDeleteMessages = UpdateDeleteMessages;
  class UpdateUserTyping extends TLObject {
    userId;
    action;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateUserTyping';
      this.constructorId = 3223225727;
      this.subclassOfId = 2676568142;
      this._slots = ['userId', 'action'];
      this.userId = params.userId;
      this.action = params.action;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      let action = await TLObject.read(b);
      return new Raw2.UpdateUserTyping({ userId, action });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.action !== void 0) {
        b.write(this.action.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateUserTyping = UpdateUserTyping;
  class UpdateChatUserTyping extends TLObject {
    chatId;
    fromId;
    action;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChatUserTyping';
      this.constructorId = 2202565360;
      this.subclassOfId = 2676568142;
      this._slots = ['chatId', 'fromId', 'action'];
      this.chatId = params.chatId;
      this.fromId = params.fromId;
      this.action = params.action;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chatId = await Primitive.Long.read(b);
      let fromId = await TLObject.read(b);
      let action = await TLObject.read(b);
      return new Raw2.UpdateChatUserTyping({ chatId, fromId, action });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chatId !== void 0) {
        b.write(Primitive.Long.write(this.chatId));
      }
      if (this.fromId !== void 0) {
        b.write(this.fromId.write());
      }
      if (this.action !== void 0) {
        b.write(this.action.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChatUserTyping = UpdateChatUserTyping;
  class UpdateChatParticipants extends TLObject {
    participants;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChatParticipants';
      this.constructorId = 125178264;
      this.subclassOfId = 2676568142;
      this._slots = ['participants'];
      this.participants = params.participants;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let participants = await TLObject.read(b);
      return new Raw2.UpdateChatParticipants({ participants });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.participants !== void 0) {
        b.write(this.participants.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChatParticipants = UpdateChatParticipants;
  class UpdateUserStatus extends TLObject {
    userId;
    status;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateUserStatus';
      this.constructorId = 3854432478;
      this.subclassOfId = 2676568142;
      this._slots = ['userId', 'status'];
      this.userId = params.userId;
      this.status = params.status;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      let status = await TLObject.read(b);
      return new Raw2.UpdateUserStatus({ userId, status });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.status !== void 0) {
        b.write(this.status.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateUserStatus = UpdateUserStatus;
  class UpdateUserName extends TLObject {
    userId;
    firstName;
    lastName;
    usernames;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateUserName';
      this.constructorId = 2810480932;
      this.subclassOfId = 2676568142;
      this._slots = ['userId', 'firstName', 'lastName', 'usernames'];
      this.userId = params.userId;
      this.firstName = params.firstName;
      this.lastName = params.lastName;
      this.usernames = params.usernames;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      let firstName = await Primitive.String.read(b);
      let lastName = await Primitive.String.read(b);
      let usernames = await TLObject.read(b);
      return new Raw2.UpdateUserName({
        userId,
        firstName,
        lastName,
        usernames,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.firstName !== void 0) {
        b.write(Primitive.String.write(this.firstName));
      }
      if (this.lastName !== void 0) {
        b.write(Primitive.String.write(this.lastName));
      }
      if (this.usernames) {
        b.write(Primitive.Vector.write(this.usernames));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateUserName = UpdateUserName;
  class UpdateNewAuthorization extends TLObject {
    unconfirmed;
    hash;
    date;
    device;
    location;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateNewAuthorization';
      this.constructorId = 2303831023;
      this.subclassOfId = 2676568142;
      this._slots = ['unconfirmed', 'hash', 'date', 'device', 'location'];
      this.unconfirmed = params.unconfirmed;
      this.hash = params.hash;
      this.date = params.date;
      this.device = params.device;
      this.location = params.location;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let unconfirmed = flags & (1 << 0) ? true : false;
      let hash = await Primitive.Long.read(b);
      let date = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let device = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let location = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      return new Raw2.UpdateNewAuthorization({
        unconfirmed,
        hash,
        date,
        device,
        location,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.unconfirmed ? 1 << 0 : 0;
      flags |= this.date !== void 0 ? 1 << 0 : 0;
      flags |= this.device !== void 0 ? 1 << 0 : 0;
      flags |= this.location !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.hash !== void 0) {
        b.write(Primitive.Long.write(this.hash));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.device !== void 0) {
        b.write(Primitive.String.write(this.device));
      }
      if (this.location !== void 0) {
        b.write(Primitive.String.write(this.location));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateNewAuthorization = UpdateNewAuthorization;
  class UpdateNewEncryptedMessage extends TLObject {
    message;
    qts;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateNewEncryptedMessage';
      this.constructorId = 314359194;
      this.subclassOfId = 2676568142;
      this._slots = ['message', 'qts'];
      this.message = params.message;
      this.qts = params.qts;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let message = await TLObject.read(b);
      let qts = await Primitive.Int.read(b);
      return new Raw2.UpdateNewEncryptedMessage({ message, qts });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.message !== void 0) {
        b.write(this.message.write());
      }
      if (this.qts !== void 0) {
        b.write(Primitive.Int.write(this.qts));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateNewEncryptedMessage = UpdateNewEncryptedMessage;
  class UpdateEncryptedChatTyping extends TLObject {
    chatId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateEncryptedChatTyping';
      this.constructorId = 386986326;
      this.subclassOfId = 2676568142;
      this._slots = ['chatId'];
      this.chatId = params.chatId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chatId = await Primitive.Int.read(b);
      return new Raw2.UpdateEncryptedChatTyping({ chatId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chatId !== void 0) {
        b.write(Primitive.Int.write(this.chatId));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateEncryptedChatTyping = UpdateEncryptedChatTyping;
  class UpdateEncryption extends TLObject {
    chat;
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateEncryption';
      this.constructorId = 3030575245;
      this.subclassOfId = 2676568142;
      this._slots = ['chat', 'date'];
      this.chat = params.chat;
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chat = await TLObject.read(b);
      let date = await Primitive.Int.read(b);
      return new Raw2.UpdateEncryption({ chat, date });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chat !== void 0) {
        b.write(this.chat.write());
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateEncryption = UpdateEncryption;
  class UpdateEncryptedMessagesRead extends TLObject {
    chatId;
    maxDate;
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateEncryptedMessagesRead';
      this.constructorId = 956179895;
      this.subclassOfId = 2676568142;
      this._slots = ['chatId', 'maxDate', 'date'];
      this.chatId = params.chatId;
      this.maxDate = params.maxDate;
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chatId = await Primitive.Int.read(b);
      let maxDate = await Primitive.Int.read(b);
      let date = await Primitive.Int.read(b);
      return new Raw2.UpdateEncryptedMessagesRead({ chatId, maxDate, date });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chatId !== void 0) {
        b.write(Primitive.Int.write(this.chatId));
      }
      if (this.maxDate !== void 0) {
        b.write(Primitive.Int.write(this.maxDate));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateEncryptedMessagesRead = UpdateEncryptedMessagesRead;
  class UpdateChatParticipantAdd extends TLObject {
    chatId;
    userId;
    inviterId;
    date;
    version;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChatParticipantAdd';
      this.constructorId = 1037718609;
      this.subclassOfId = 2676568142;
      this._slots = ['chatId', 'userId', 'inviterId', 'date', 'version'];
      this.chatId = params.chatId;
      this.userId = params.userId;
      this.inviterId = params.inviterId;
      this.date = params.date;
      this.version = params.version;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chatId = await Primitive.Long.read(b);
      let userId = await Primitive.Long.read(b);
      let inviterId = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let version = await Primitive.Int.read(b);
      return new Raw2.UpdateChatParticipantAdd({
        chatId,
        userId,
        inviterId,
        date,
        version,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chatId !== void 0) {
        b.write(Primitive.Long.write(this.chatId));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.inviterId !== void 0) {
        b.write(Primitive.Long.write(this.inviterId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.version !== void 0) {
        b.write(Primitive.Int.write(this.version));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChatParticipantAdd = UpdateChatParticipantAdd;
  class UpdateChatParticipantDelete extends TLObject {
    chatId;
    userId;
    version;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChatParticipantDelete';
      this.constructorId = 3811523959;
      this.subclassOfId = 2676568142;
      this._slots = ['chatId', 'userId', 'version'];
      this.chatId = params.chatId;
      this.userId = params.userId;
      this.version = params.version;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chatId = await Primitive.Long.read(b);
      let userId = await Primitive.Long.read(b);
      let version = await Primitive.Int.read(b);
      return new Raw2.UpdateChatParticipantDelete({
        chatId,
        userId,
        version,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chatId !== void 0) {
        b.write(Primitive.Long.write(this.chatId));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.version !== void 0) {
        b.write(Primitive.Int.write(this.version));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChatParticipantDelete = UpdateChatParticipantDelete;
  class UpdateDcOptions extends TLObject {
    dcOptions;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateDcOptions';
      this.constructorId = 2388564083;
      this.subclassOfId = 2676568142;
      this._slots = ['dcOptions'];
      this.dcOptions = params.dcOptions;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let dcOptions = await TLObject.read(b);
      return new Raw2.UpdateDcOptions({ dcOptions });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.dcOptions) {
        b.write(Primitive.Vector.write(this.dcOptions));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateDcOptions = UpdateDcOptions;
  class UpdateNotifySettings extends TLObject {
    peer;
    notifySettings;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateNotifySettings';
      this.constructorId = 3200411887;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'notifySettings'];
      this.peer = params.peer;
      this.notifySettings = params.notifySettings;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let notifySettings = await TLObject.read(b);
      return new Raw2.UpdateNotifySettings({ peer, notifySettings });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.notifySettings !== void 0) {
        b.write(this.notifySettings.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateNotifySettings = UpdateNotifySettings;
  class UpdateServiceNotification extends TLObject {
    popup;
    invertMedia;
    inboxDate;
    type;
    message;
    media;
    entities;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateServiceNotification';
      this.constructorId = 3957614617;
      this.subclassOfId = 2676568142;
      this._slots = ['popup', 'invertMedia', 'inboxDate', 'type', 'message', 'media', 'entities'];
      this.popup = params.popup;
      this.invertMedia = params.invertMedia;
      this.inboxDate = params.inboxDate;
      this.type = params.type;
      this.message = params.message;
      this.media = params.media;
      this.entities = params.entities;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let popup = flags & (1 << 0) ? true : false;
      let invertMedia = flags & (1 << 2) ? true : false;
      let inboxDate = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      let type = await Primitive.String.read(b);
      let message = await Primitive.String.read(b);
      let media = await TLObject.read(b);
      let entities = await TLObject.read(b);
      return new Raw2.UpdateServiceNotification({
        popup,
        invertMedia,
        inboxDate,
        type,
        message,
        media,
        entities,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.popup ? 1 << 0 : 0;
      flags |= this.invertMedia ? 1 << 2 : 0;
      flags |= this.inboxDate !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.inboxDate !== void 0) {
        b.write(Primitive.Int.write(this.inboxDate));
      }
      if (this.type !== void 0) {
        b.write(Primitive.String.write(this.type));
      }
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.media !== void 0) {
        b.write(this.media.write());
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateServiceNotification = UpdateServiceNotification;
  class UpdatePrivacy extends TLObject {
    key;
    rules;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdatePrivacy';
      this.constructorId = 3996854058;
      this.subclassOfId = 2676568142;
      this._slots = ['key', 'rules'];
      this.key = params.key;
      this.rules = params.rules;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let key = await TLObject.read(b);
      let rules = await TLObject.read(b);
      return new Raw2.UpdatePrivacy({ key, rules });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.key !== void 0) {
        b.write(this.key.write());
      }
      if (this.rules) {
        b.write(Primitive.Vector.write(this.rules));
      }
      return b.buffer;
    }
  }
  Raw2.UpdatePrivacy = UpdatePrivacy;
  class UpdateUserPhone extends TLObject {
    userId;
    phone;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateUserPhone';
      this.constructorId = 88680979;
      this.subclassOfId = 2676568142;
      this._slots = ['userId', 'phone'];
      this.userId = params.userId;
      this.phone = params.phone;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      let phone2 = await Primitive.String.read(b);
      return new Raw2.UpdateUserPhone({ userId, phone: phone2 });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.phone !== void 0) {
        b.write(Primitive.String.write(this.phone));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateUserPhone = UpdateUserPhone;
  class UpdateReadHistoryInbox extends TLObject {
    folderId;
    peer;
    maxId;
    stillUnreadCount;
    pts;
    ptsCount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateReadHistoryInbox';
      this.constructorId = 2627162079;
      this.subclassOfId = 2676568142;
      this._slots = ['folderId', 'peer', 'maxId', 'stillUnreadCount', 'pts', 'ptsCount'];
      this.folderId = params.folderId;
      this.peer = params.peer;
      this.maxId = params.maxId;
      this.stillUnreadCount = params.stillUnreadCount;
      this.pts = params.pts;
      this.ptsCount = params.ptsCount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let folderId = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let peer = await TLObject.read(b);
      let maxId = await Primitive.Int.read(b);
      let stillUnreadCount = await Primitive.Int.read(b);
      let pts = await Primitive.Int.read(b);
      let ptsCount = await Primitive.Int.read(b);
      return new Raw2.UpdateReadHistoryInbox({
        folderId,
        peer,
        maxId,
        stillUnreadCount,
        pts,
        ptsCount,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.folderId !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.folderId !== void 0) {
        b.write(Primitive.Int.write(this.folderId));
      }
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.maxId !== void 0) {
        b.write(Primitive.Int.write(this.maxId));
      }
      if (this.stillUnreadCount !== void 0) {
        b.write(Primitive.Int.write(this.stillUnreadCount));
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.ptsCount !== void 0) {
        b.write(Primitive.Int.write(this.ptsCount));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateReadHistoryInbox = UpdateReadHistoryInbox;
  class UpdateReadHistoryOutbox extends TLObject {
    peer;
    maxId;
    pts;
    ptsCount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateReadHistoryOutbox';
      this.constructorId = 791617983;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'maxId', 'pts', 'ptsCount'];
      this.peer = params.peer;
      this.maxId = params.maxId;
      this.pts = params.pts;
      this.ptsCount = params.ptsCount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let maxId = await Primitive.Int.read(b);
      let pts = await Primitive.Int.read(b);
      let ptsCount = await Primitive.Int.read(b);
      return new Raw2.UpdateReadHistoryOutbox({
        peer,
        maxId,
        pts,
        ptsCount,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.maxId !== void 0) {
        b.write(Primitive.Int.write(this.maxId));
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.ptsCount !== void 0) {
        b.write(Primitive.Int.write(this.ptsCount));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateReadHistoryOutbox = UpdateReadHistoryOutbox;
  class UpdateWebPage extends TLObject {
    webpage;
    pts;
    ptsCount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateWebPage';
      this.constructorId = 2139689491;
      this.subclassOfId = 2676568142;
      this._slots = ['webpage', 'pts', 'ptsCount'];
      this.webpage = params.webpage;
      this.pts = params.pts;
      this.ptsCount = params.ptsCount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let webpage = await TLObject.read(b);
      let pts = await Primitive.Int.read(b);
      let ptsCount = await Primitive.Int.read(b);
      return new Raw2.UpdateWebPage({ webpage, pts, ptsCount });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.webpage !== void 0) {
        b.write(this.webpage.write());
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.ptsCount !== void 0) {
        b.write(Primitive.Int.write(this.ptsCount));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateWebPage = UpdateWebPage;
  class UpdateReadMessagesContents extends TLObject {
    messages;
    pts;
    ptsCount;
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateReadMessagesContents';
      this.constructorId = 4163006849;
      this.subclassOfId = 2676568142;
      this._slots = ['messages', 'pts', 'ptsCount', 'date'];
      this.messages = params.messages;
      this.pts = params.pts;
      this.ptsCount = params.ptsCount;
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let messages2 = await TLObject.read(b, Primitive.Int);
      let pts = await Primitive.Int.read(b);
      let ptsCount = await Primitive.Int.read(b);
      let date = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.UpdateReadMessagesContents({
        messages: messages2,
        pts,
        ptsCount,
        date,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.date !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.messages) {
        b.write(Primitive.Vector.write(this.messages, Primitive.Int));
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.ptsCount !== void 0) {
        b.write(Primitive.Int.write(this.ptsCount));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateReadMessagesContents = UpdateReadMessagesContents;
  class UpdateChannelTooLong extends TLObject {
    channelId;
    pts;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChannelTooLong';
      this.constructorId = 277713951;
      this.subclassOfId = 2676568142;
      this._slots = ['channelId', 'pts'];
      this.channelId = params.channelId;
      this.pts = params.pts;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let channelId = await Primitive.Long.read(b);
      let pts = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.UpdateChannelTooLong({ channelId, pts });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.pts !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChannelTooLong = UpdateChannelTooLong;
  class UpdateChannel extends TLObject {
    channelId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChannel';
      this.constructorId = 1666927625;
      this.subclassOfId = 2676568142;
      this._slots = ['channelId'];
      this.channelId = params.channelId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let channelId = await Primitive.Long.read(b);
      return new Raw2.UpdateChannel({ channelId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChannel = UpdateChannel;
  class UpdateNewChannelMessage extends TLObject {
    message;
    pts;
    ptsCount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateNewChannelMessage';
      this.constructorId = 1656358105;
      this.subclassOfId = 2676568142;
      this._slots = ['message', 'pts', 'ptsCount'];
      this.message = params.message;
      this.pts = params.pts;
      this.ptsCount = params.ptsCount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let message = await TLObject.read(b);
      let pts = await Primitive.Int.read(b);
      let ptsCount = await Primitive.Int.read(b);
      return new Raw2.UpdateNewChannelMessage({ message, pts, ptsCount });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.message !== void 0) {
        b.write(this.message.write());
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.ptsCount !== void 0) {
        b.write(Primitive.Int.write(this.ptsCount));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateNewChannelMessage = UpdateNewChannelMessage;
  class UpdateReadChannelInbox extends TLObject {
    folderId;
    channelId;
    maxId;
    stillUnreadCount;
    pts;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateReadChannelInbox';
      this.constructorId = 2452516368;
      this.subclassOfId = 2676568142;
      this._slots = ['folderId', 'channelId', 'maxId', 'stillUnreadCount', 'pts'];
      this.folderId = params.folderId;
      this.channelId = params.channelId;
      this.maxId = params.maxId;
      this.stillUnreadCount = params.stillUnreadCount;
      this.pts = params.pts;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let folderId = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let channelId = await Primitive.Long.read(b);
      let maxId = await Primitive.Int.read(b);
      let stillUnreadCount = await Primitive.Int.read(b);
      let pts = await Primitive.Int.read(b);
      return new Raw2.UpdateReadChannelInbox({
        folderId,
        channelId,
        maxId,
        stillUnreadCount,
        pts,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.folderId !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.folderId !== void 0) {
        b.write(Primitive.Int.write(this.folderId));
      }
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.maxId !== void 0) {
        b.write(Primitive.Int.write(this.maxId));
      }
      if (this.stillUnreadCount !== void 0) {
        b.write(Primitive.Int.write(this.stillUnreadCount));
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateReadChannelInbox = UpdateReadChannelInbox;
  class UpdateDeleteChannelMessages extends TLObject {
    channelId;
    messages;
    pts;
    ptsCount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateDeleteChannelMessages';
      this.constructorId = 3274529554;
      this.subclassOfId = 2676568142;
      this._slots = ['channelId', 'messages', 'pts', 'ptsCount'];
      this.channelId = params.channelId;
      this.messages = params.messages;
      this.pts = params.pts;
      this.ptsCount = params.ptsCount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let channelId = await Primitive.Long.read(b);
      let messages2 = await TLObject.read(b, Primitive.Int);
      let pts = await Primitive.Int.read(b);
      let ptsCount = await Primitive.Int.read(b);
      return new Raw2.UpdateDeleteChannelMessages({
        channelId,
        messages: messages2,
        pts,
        ptsCount,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.messages) {
        b.write(Primitive.Vector.write(this.messages, Primitive.Int));
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.ptsCount !== void 0) {
        b.write(Primitive.Int.write(this.ptsCount));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateDeleteChannelMessages = UpdateDeleteChannelMessages;
  class UpdateChannelMessageViews extends TLObject {
    channelId;
    id;
    views;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChannelMessageViews';
      this.constructorId = 4062620680;
      this.subclassOfId = 2676568142;
      this._slots = ['channelId', 'id', 'views'];
      this.channelId = params.channelId;
      this.id = params.id;
      this.views = params.views;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let channelId = await Primitive.Long.read(b);
      let id = await Primitive.Int.read(b);
      let views = await Primitive.Int.read(b);
      return new Raw2.UpdateChannelMessageViews({ channelId, id, views });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.views !== void 0) {
        b.write(Primitive.Int.write(this.views));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChannelMessageViews = UpdateChannelMessageViews;
  class UpdateChatParticipantAdmin extends TLObject {
    chatId;
    userId;
    isAdmin;
    version;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChatParticipantAdmin';
      this.constructorId = 3620364706;
      this.subclassOfId = 2676568142;
      this._slots = ['chatId', 'userId', 'isAdmin', 'version'];
      this.chatId = params.chatId;
      this.userId = params.userId;
      this.isAdmin = params.isAdmin;
      this.version = params.version;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chatId = await Primitive.Long.read(b);
      let userId = await Primitive.Long.read(b);
      let isAdmin = await Primitive.Bool.read(b);
      let version = await Primitive.Int.read(b);
      return new Raw2.UpdateChatParticipantAdmin({
        chatId,
        userId,
        isAdmin,
        version,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chatId !== void 0) {
        b.write(Primitive.Long.write(this.chatId));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.isAdmin !== void 0) {
        b.write(Primitive.Bool.write(this.isAdmin));
      }
      if (this.version !== void 0) {
        b.write(Primitive.Int.write(this.version));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChatParticipantAdmin = UpdateChatParticipantAdmin;
  class UpdateNewStickerSet extends TLObject {
    stickerset;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateNewStickerSet';
      this.constructorId = 1753886890;
      this.subclassOfId = 2676568142;
      this._slots = ['stickerset'];
      this.stickerset = params.stickerset;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let stickerset = await TLObject.read(b);
      return new Raw2.UpdateNewStickerSet({ stickerset });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.stickerset !== void 0) {
        b.write(this.stickerset.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateNewStickerSet = UpdateNewStickerSet;
  class UpdateStickerSetsOrder extends TLObject {
    masks;
    emojis;
    order;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateStickerSetsOrder';
      this.constructorId = 196268545;
      this.subclassOfId = 2676568142;
      this._slots = ['masks', 'emojis', 'order'];
      this.masks = params.masks;
      this.emojis = params.emojis;
      this.order = params.order;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let masks = flags & (1 << 0) ? true : false;
      let emojis = flags & (1 << 1) ? true : false;
      let order = await TLObject.read(b, Primitive.Long);
      return new Raw2.UpdateStickerSetsOrder({ masks, emojis, order });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.masks ? 1 << 0 : 0;
      flags |= this.emojis ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.order) {
        b.write(Primitive.Vector.write(this.order, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateStickerSetsOrder = UpdateStickerSetsOrder;
  class UpdateStickerSets extends TLObject {
    masks;
    emojis;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateStickerSets';
      this.constructorId = 834816008;
      this.subclassOfId = 2676568142;
      this._slots = ['masks', 'emojis'];
      this.masks = params.masks;
      this.emojis = params.emojis;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let masks = flags & (1 << 0) ? true : false;
      let emojis = flags & (1 << 1) ? true : false;
      return new Raw2.UpdateStickerSets({ masks, emojis });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.masks ? 1 << 0 : 0;
      flags |= this.emojis ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      return b.buffer;
    }
  }
  Raw2.UpdateStickerSets = UpdateStickerSets;
  class UpdateSavedGifs extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UpdateSavedGifs';
      this.constructorId = 2473931806;
      this.subclassOfId = 2676568142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UpdateSavedGifs();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UpdateSavedGifs = UpdateSavedGifs;
  class UpdateBotInlineQuery extends TLObject {
    queryId;
    userId;
    query;
    geo;
    peerType;
    offset;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateBotInlineQuery';
      this.constructorId = 1232025500;
      this.subclassOfId = 2676568142;
      this._slots = ['queryId', 'userId', 'query', 'geo', 'peerType', 'offset'];
      this.queryId = params.queryId;
      this.userId = params.userId;
      this.query = params.query;
      this.geo = params.geo;
      this.peerType = params.peerType;
      this.offset = params.offset;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let queryId = await Primitive.Long.read(b);
      let userId = await Primitive.Long.read(b);
      let query = await Primitive.String.read(b);
      let geo = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let peerType = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      let offset = await Primitive.String.read(b);
      return new Raw2.UpdateBotInlineQuery({
        queryId,
        userId,
        query,
        geo,
        peerType,
        offset,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.geo !== void 0 ? 1 << 0 : 0;
      flags |= this.peerType !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.queryId !== void 0) {
        b.write(Primitive.Long.write(this.queryId));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.query !== void 0) {
        b.write(Primitive.String.write(this.query));
      }
      if (this.geo !== void 0) {
        b.write(this.geo.write());
      }
      if (this.peerType !== void 0) {
        b.write(this.peerType.write());
      }
      if (this.offset !== void 0) {
        b.write(Primitive.String.write(this.offset));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateBotInlineQuery = UpdateBotInlineQuery;
  class UpdateBotInlineSend extends TLObject {
    userId;
    query;
    geo;
    id;
    msgId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateBotInlineSend';
      this.constructorId = 317794823;
      this.subclassOfId = 2676568142;
      this._slots = ['userId', 'query', 'geo', 'id', 'msgId'];
      this.userId = params.userId;
      this.query = params.query;
      this.geo = params.geo;
      this.id = params.id;
      this.msgId = params.msgId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let userId = await Primitive.Long.read(b);
      let query = await Primitive.String.read(b);
      let geo = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let id = await Primitive.String.read(b);
      let msgId = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      return new Raw2.UpdateBotInlineSend({
        userId,
        query,
        geo,
        id,
        msgId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.geo !== void 0 ? 1 << 0 : 0;
      flags |= this.msgId !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.query !== void 0) {
        b.write(Primitive.String.write(this.query));
      }
      if (this.geo !== void 0) {
        b.write(this.geo.write());
      }
      if (this.id !== void 0) {
        b.write(Primitive.String.write(this.id));
      }
      if (this.msgId !== void 0) {
        b.write(this.msgId.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateBotInlineSend = UpdateBotInlineSend;
  class UpdateEditChannelMessage extends TLObject {
    message;
    pts;
    ptsCount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateEditChannelMessage';
      this.constructorId = 457133559;
      this.subclassOfId = 2676568142;
      this._slots = ['message', 'pts', 'ptsCount'];
      this.message = params.message;
      this.pts = params.pts;
      this.ptsCount = params.ptsCount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let message = await TLObject.read(b);
      let pts = await Primitive.Int.read(b);
      let ptsCount = await Primitive.Int.read(b);
      return new Raw2.UpdateEditChannelMessage({ message, pts, ptsCount });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.message !== void 0) {
        b.write(this.message.write());
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.ptsCount !== void 0) {
        b.write(Primitive.Int.write(this.ptsCount));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateEditChannelMessage = UpdateEditChannelMessage;
  class UpdateBotCallbackQuery extends TLObject {
    queryId;
    userId;
    peer;
    msgId;
    chatInstance;
    data;
    gameShortName;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateBotCallbackQuery';
      this.constructorId = 3117401229;
      this.subclassOfId = 2676568142;
      this._slots = ['queryId', 'userId', 'peer', 'msgId', 'chatInstance', 'data', 'gameShortName'];
      this.queryId = params.queryId;
      this.userId = params.userId;
      this.peer = params.peer;
      this.msgId = params.msgId;
      this.chatInstance = params.chatInstance;
      this.data = params.data;
      this.gameShortName = params.gameShortName;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let queryId = await Primitive.Long.read(b);
      let userId = await Primitive.Long.read(b);
      let peer = await TLObject.read(b);
      let msgId = await Primitive.Int.read(b);
      let chatInstance = await Primitive.Long.read(b);
      let data = flags & (1 << 0) ? await Primitive.Bytes.read(b) : void 0;
      let gameShortName = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      return new Raw2.UpdateBotCallbackQuery({
        queryId,
        userId,
        peer,
        msgId,
        chatInstance,
        data,
        gameShortName,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.data !== void 0 ? 1 << 0 : 0;
      flags |= this.gameShortName !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.queryId !== void 0) {
        b.write(Primitive.Long.write(this.queryId));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.msgId !== void 0) {
        b.write(Primitive.Int.write(this.msgId));
      }
      if (this.chatInstance !== void 0) {
        b.write(Primitive.Long.write(this.chatInstance));
      }
      if (this.data !== void 0) {
        b.write(Primitive.Bytes.write(this.data));
      }
      if (this.gameShortName !== void 0) {
        b.write(Primitive.String.write(this.gameShortName));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateBotCallbackQuery = UpdateBotCallbackQuery;
  class UpdateEditMessage extends TLObject {
    message;
    pts;
    ptsCount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateEditMessage';
      this.constructorId = 3825430691;
      this.subclassOfId = 2676568142;
      this._slots = ['message', 'pts', 'ptsCount'];
      this.message = params.message;
      this.pts = params.pts;
      this.ptsCount = params.ptsCount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let message = await TLObject.read(b);
      let pts = await Primitive.Int.read(b);
      let ptsCount = await Primitive.Int.read(b);
      return new Raw2.UpdateEditMessage({ message, pts, ptsCount });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.message !== void 0) {
        b.write(this.message.write());
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.ptsCount !== void 0) {
        b.write(Primitive.Int.write(this.ptsCount));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateEditMessage = UpdateEditMessage;
  class UpdateInlineBotCallbackQuery extends TLObject {
    queryId;
    userId;
    msgId;
    chatInstance;
    data;
    gameShortName;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateInlineBotCallbackQuery';
      this.constructorId = 1763610706;
      this.subclassOfId = 2676568142;
      this._slots = ['queryId', 'userId', 'msgId', 'chatInstance', 'data', 'gameShortName'];
      this.queryId = params.queryId;
      this.userId = params.userId;
      this.msgId = params.msgId;
      this.chatInstance = params.chatInstance;
      this.data = params.data;
      this.gameShortName = params.gameShortName;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let queryId = await Primitive.Long.read(b);
      let userId = await Primitive.Long.read(b);
      let msgId = await TLObject.read(b);
      let chatInstance = await Primitive.Long.read(b);
      let data = flags & (1 << 0) ? await Primitive.Bytes.read(b) : void 0;
      let gameShortName = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      return new Raw2.UpdateInlineBotCallbackQuery({
        queryId,
        userId,
        msgId,
        chatInstance,
        data,
        gameShortName,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.data !== void 0 ? 1 << 0 : 0;
      flags |= this.gameShortName !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.queryId !== void 0) {
        b.write(Primitive.Long.write(this.queryId));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.msgId !== void 0) {
        b.write(this.msgId.write());
      }
      if (this.chatInstance !== void 0) {
        b.write(Primitive.Long.write(this.chatInstance));
      }
      if (this.data !== void 0) {
        b.write(Primitive.Bytes.write(this.data));
      }
      if (this.gameShortName !== void 0) {
        b.write(Primitive.String.write(this.gameShortName));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateInlineBotCallbackQuery = UpdateInlineBotCallbackQuery;
  class UpdateReadChannelOutbox extends TLObject {
    channelId;
    maxId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateReadChannelOutbox';
      this.constructorId = 3076495785;
      this.subclassOfId = 2676568142;
      this._slots = ['channelId', 'maxId'];
      this.channelId = params.channelId;
      this.maxId = params.maxId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let channelId = await Primitive.Long.read(b);
      let maxId = await Primitive.Int.read(b);
      return new Raw2.UpdateReadChannelOutbox({ channelId, maxId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.maxId !== void 0) {
        b.write(Primitive.Int.write(this.maxId));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateReadChannelOutbox = UpdateReadChannelOutbox;
  class UpdateDraftMessage extends TLObject {
    peer;
    topMsgId;
    draft;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateDraftMessage';
      this.constructorId = 457829485;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'topMsgId', 'draft'];
      this.peer = params.peer;
      this.topMsgId = params.topMsgId;
      this.draft = params.draft;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let peer = await TLObject.read(b);
      let topMsgId = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let draft = await TLObject.read(b);
      return new Raw2.UpdateDraftMessage({ peer, topMsgId, draft });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.topMsgId !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.topMsgId !== void 0) {
        b.write(Primitive.Int.write(this.topMsgId));
      }
      if (this.draft !== void 0) {
        b.write(this.draft.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateDraftMessage = UpdateDraftMessage;
  class UpdateReadFeaturedStickers extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UpdateReadFeaturedStickers';
      this.constructorId = 1461528386;
      this.subclassOfId = 2676568142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UpdateReadFeaturedStickers();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UpdateReadFeaturedStickers = UpdateReadFeaturedStickers;
  class UpdateRecentStickers extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UpdateRecentStickers';
      this.constructorId = 2588027936;
      this.subclassOfId = 2676568142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UpdateRecentStickers();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UpdateRecentStickers = UpdateRecentStickers;
  class UpdateConfig extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UpdateConfig';
      this.constructorId = 2720652550;
      this.subclassOfId = 2676568142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UpdateConfig();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UpdateConfig = UpdateConfig;
  class UpdatePtsChanged extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UpdatePtsChanged';
      this.constructorId = 861169551;
      this.subclassOfId = 2676568142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UpdatePtsChanged();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UpdatePtsChanged = UpdatePtsChanged;
  class UpdateChannelWebPage extends TLObject {
    channelId;
    webpage;
    pts;
    ptsCount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChannelWebPage';
      this.constructorId = 791390623;
      this.subclassOfId = 2676568142;
      this._slots = ['channelId', 'webpage', 'pts', 'ptsCount'];
      this.channelId = params.channelId;
      this.webpage = params.webpage;
      this.pts = params.pts;
      this.ptsCount = params.ptsCount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let channelId = await Primitive.Long.read(b);
      let webpage = await TLObject.read(b);
      let pts = await Primitive.Int.read(b);
      let ptsCount = await Primitive.Int.read(b);
      return new Raw2.UpdateChannelWebPage({
        channelId,
        webpage,
        pts,
        ptsCount,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.webpage !== void 0) {
        b.write(this.webpage.write());
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.ptsCount !== void 0) {
        b.write(Primitive.Int.write(this.ptsCount));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChannelWebPage = UpdateChannelWebPage;
  class UpdateDialogPinned extends TLObject {
    pinned;
    folderId;
    peer;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateDialogPinned';
      this.constructorId = 1852826908;
      this.subclassOfId = 2676568142;
      this._slots = ['pinned', 'folderId', 'peer'];
      this.pinned = params.pinned;
      this.folderId = params.folderId;
      this.peer = params.peer;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let pinned = flags & (1 << 0) ? true : false;
      let folderId = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      let peer = await TLObject.read(b);
      return new Raw2.UpdateDialogPinned({ pinned, folderId, peer });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.pinned ? 1 << 0 : 0;
      flags |= this.folderId !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.folderId !== void 0) {
        b.write(Primitive.Int.write(this.folderId));
      }
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateDialogPinned = UpdateDialogPinned;
  class UpdatePinnedDialogs extends TLObject {
    folderId;
    order;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdatePinnedDialogs';
      this.constructorId = 4195302562;
      this.subclassOfId = 2676568142;
      this._slots = ['folderId', 'order'];
      this.folderId = params.folderId;
      this.order = params.order;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let folderId = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      let order = flags & (1 << 0) ? await TLObject.read(b) : [];
      return new Raw2.UpdatePinnedDialogs({ folderId, order });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.folderId !== void 0 ? 1 << 1 : 0;
      flags |= this.order ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.folderId !== void 0) {
        b.write(Primitive.Int.write(this.folderId));
      }
      if (this.order) {
        b.write(Primitive.Vector.write(this.order));
      }
      return b.buffer;
    }
  }
  Raw2.UpdatePinnedDialogs = UpdatePinnedDialogs;
  class UpdateBotWebhookJSON extends TLObject {
    data;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateBotWebhookJSON';
      this.constructorId = 2199371971;
      this.subclassOfId = 2676568142;
      this._slots = ['data'];
      this.data = params.data;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let data = await TLObject.read(b);
      return new Raw2.UpdateBotWebhookJSON({ data });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.data !== void 0) {
        b.write(this.data.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateBotWebhookJSON = UpdateBotWebhookJSON;
  class UpdateBotWebhookJSONQuery extends TLObject {
    queryId;
    data;
    timeout;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateBotWebhookJSONQuery';
      this.constructorId = 2610053286;
      this.subclassOfId = 2676568142;
      this._slots = ['queryId', 'data', 'timeout'];
      this.queryId = params.queryId;
      this.data = params.data;
      this.timeout = params.timeout;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let queryId = await Primitive.Long.read(b);
      let data = await TLObject.read(b);
      let timeout = await Primitive.Int.read(b);
      return new Raw2.UpdateBotWebhookJSONQuery({ queryId, data, timeout });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.queryId !== void 0) {
        b.write(Primitive.Long.write(this.queryId));
      }
      if (this.data !== void 0) {
        b.write(this.data.write());
      }
      if (this.timeout !== void 0) {
        b.write(Primitive.Int.write(this.timeout));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateBotWebhookJSONQuery = UpdateBotWebhookJSONQuery;
  class UpdateBotShippingQuery extends TLObject {
    queryId;
    userId;
    payload;
    shippingAddress;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateBotShippingQuery';
      this.constructorId = 3048144253;
      this.subclassOfId = 2676568142;
      this._slots = ['queryId', 'userId', 'payload', 'shippingAddress'];
      this.queryId = params.queryId;
      this.userId = params.userId;
      this.payload = params.payload;
      this.shippingAddress = params.shippingAddress;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let queryId = await Primitive.Long.read(b);
      let userId = await Primitive.Long.read(b);
      let payload = await Primitive.Bytes.read(b);
      let shippingAddress = await TLObject.read(b);
      return new Raw2.UpdateBotShippingQuery({
        queryId,
        userId,
        payload,
        shippingAddress,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.queryId !== void 0) {
        b.write(Primitive.Long.write(this.queryId));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.payload !== void 0) {
        b.write(Primitive.Bytes.write(this.payload));
      }
      if (this.shippingAddress !== void 0) {
        b.write(this.shippingAddress.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateBotShippingQuery = UpdateBotShippingQuery;
  class UpdateBotPrecheckoutQuery extends TLObject {
    queryId;
    userId;
    payload;
    info;
    shippingOptionId;
    currency;
    totalAmount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateBotPrecheckoutQuery';
      this.constructorId = 2359990934;
      this.subclassOfId = 2676568142;
      this._slots = [
        'queryId',
        'userId',
        'payload',
        'info',
        'shippingOptionId',
        'currency',
        'totalAmount',
      ];
      this.queryId = params.queryId;
      this.userId = params.userId;
      this.payload = params.payload;
      this.info = params.info;
      this.shippingOptionId = params.shippingOptionId;
      this.currency = params.currency;
      this.totalAmount = params.totalAmount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let queryId = await Primitive.Long.read(b);
      let userId = await Primitive.Long.read(b);
      let payload = await Primitive.Bytes.read(b);
      let info = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let shippingOptionId = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let currency = await Primitive.String.read(b);
      let totalAmount = await Primitive.Long.read(b);
      return new Raw2.UpdateBotPrecheckoutQuery({
        queryId,
        userId,
        payload,
        info,
        shippingOptionId,
        currency,
        totalAmount,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.info !== void 0 ? 1 << 0 : 0;
      flags |= this.shippingOptionId !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.queryId !== void 0) {
        b.write(Primitive.Long.write(this.queryId));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.payload !== void 0) {
        b.write(Primitive.Bytes.write(this.payload));
      }
      if (this.info !== void 0) {
        b.write(this.info.write());
      }
      if (this.shippingOptionId !== void 0) {
        b.write(Primitive.String.write(this.shippingOptionId));
      }
      if (this.currency !== void 0) {
        b.write(Primitive.String.write(this.currency));
      }
      if (this.totalAmount !== void 0) {
        b.write(Primitive.Long.write(this.totalAmount));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateBotPrecheckoutQuery = UpdateBotPrecheckoutQuery;
  class UpdatePhoneCall extends TLObject {
    phoneCall;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdatePhoneCall';
      this.constructorId = 2869914398;
      this.subclassOfId = 2676568142;
      this._slots = ['phoneCall'];
      this.phoneCall = params.phoneCall;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let phoneCall = await TLObject.read(b);
      return new Raw2.UpdatePhoneCall({ phoneCall });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.phoneCall !== void 0) {
        b.write(this.phoneCall.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdatePhoneCall = UpdatePhoneCall;
  class UpdateLangPackTooLong extends TLObject {
    langCode;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateLangPackTooLong';
      this.constructorId = 1180041828;
      this.subclassOfId = 2676568142;
      this._slots = ['langCode'];
      this.langCode = params.langCode;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let langCode = await Primitive.String.read(b);
      return new Raw2.UpdateLangPackTooLong({ langCode });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.langCode !== void 0) {
        b.write(Primitive.String.write(this.langCode));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateLangPackTooLong = UpdateLangPackTooLong;
  class UpdateLangPack extends TLObject {
    difference;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateLangPack';
      this.constructorId = 1442983757;
      this.subclassOfId = 2676568142;
      this._slots = ['difference'];
      this.difference = params.difference;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let difference = await TLObject.read(b);
      return new Raw2.UpdateLangPack({ difference });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.difference !== void 0) {
        b.write(this.difference.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateLangPack = UpdateLangPack;
  class UpdateFavedStickers extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UpdateFavedStickers';
      this.constructorId = 3843135853;
      this.subclassOfId = 2676568142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UpdateFavedStickers();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UpdateFavedStickers = UpdateFavedStickers;
  class UpdateChannelReadMessagesContents extends TLObject {
    channelId;
    topMsgId;
    messages;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChannelReadMessagesContents';
      this.constructorId = 3928556893;
      this.subclassOfId = 2676568142;
      this._slots = ['channelId', 'topMsgId', 'messages'];
      this.channelId = params.channelId;
      this.topMsgId = params.topMsgId;
      this.messages = params.messages;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let channelId = await Primitive.Long.read(b);
      let topMsgId = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let messages2 = await TLObject.read(b, Primitive.Int);
      return new Raw2.UpdateChannelReadMessagesContents({
        channelId,
        topMsgId,
        messages: messages2,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.topMsgId !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.topMsgId !== void 0) {
        b.write(Primitive.Int.write(this.topMsgId));
      }
      if (this.messages) {
        b.write(Primitive.Vector.write(this.messages, Primitive.Int));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChannelReadMessagesContents = UpdateChannelReadMessagesContents;
  class UpdateContactsReset extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UpdateContactsReset';
      this.constructorId = 1887741886;
      this.subclassOfId = 2676568142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UpdateContactsReset();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UpdateContactsReset = UpdateContactsReset;
  class UpdateChannelAvailableMessages extends TLObject {
    channelId;
    availableMinId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChannelAvailableMessages';
      this.constructorId = 2990524056;
      this.subclassOfId = 2676568142;
      this._slots = ['channelId', 'availableMinId'];
      this.channelId = params.channelId;
      this.availableMinId = params.availableMinId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let channelId = await Primitive.Long.read(b);
      let availableMinId = await Primitive.Int.read(b);
      return new Raw2.UpdateChannelAvailableMessages({
        channelId,
        availableMinId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.availableMinId !== void 0) {
        b.write(Primitive.Int.write(this.availableMinId));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChannelAvailableMessages = UpdateChannelAvailableMessages;
  class UpdateDialogUnreadMark extends TLObject {
    unread;
    peer;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateDialogUnreadMark';
      this.constructorId = 3781450179;
      this.subclassOfId = 2676568142;
      this._slots = ['unread', 'peer'];
      this.unread = params.unread;
      this.peer = params.peer;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let unread = flags & (1 << 0) ? true : false;
      let peer = await TLObject.read(b);
      return new Raw2.UpdateDialogUnreadMark({ unread, peer });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.unread ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateDialogUnreadMark = UpdateDialogUnreadMark;
  class UpdateMessagePoll extends TLObject {
    pollId;
    poll;
    results;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateMessagePoll';
      this.constructorId = 2896258427;
      this.subclassOfId = 2676568142;
      this._slots = ['pollId', 'poll', 'results'];
      this.pollId = params.pollId;
      this.poll = params.poll;
      this.results = params.results;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let pollId = await Primitive.Long.read(b);
      let poll = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let results = await TLObject.read(b);
      return new Raw2.UpdateMessagePoll({ pollId, poll, results });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.poll !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.pollId !== void 0) {
        b.write(Primitive.Long.write(this.pollId));
      }
      if (this.poll !== void 0) {
        b.write(this.poll.write());
      }
      if (this.results !== void 0) {
        b.write(this.results.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateMessagePoll = UpdateMessagePoll;
  class UpdateChatDefaultBannedRights extends TLObject {
    peer;
    defaultBannedRights;
    version;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChatDefaultBannedRights';
      this.constructorId = 1421875280;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'defaultBannedRights', 'version'];
      this.peer = params.peer;
      this.defaultBannedRights = params.defaultBannedRights;
      this.version = params.version;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let defaultBannedRights = await TLObject.read(b);
      let version = await Primitive.Int.read(b);
      return new Raw2.UpdateChatDefaultBannedRights({
        peer,
        defaultBannedRights,
        version,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.defaultBannedRights !== void 0) {
        b.write(this.defaultBannedRights.write());
      }
      if (this.version !== void 0) {
        b.write(Primitive.Int.write(this.version));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChatDefaultBannedRights = UpdateChatDefaultBannedRights;
  class UpdateFolderPeers extends TLObject {
    folderPeers;
    pts;
    ptsCount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateFolderPeers';
      this.constructorId = 422972864;
      this.subclassOfId = 2676568142;
      this._slots = ['folderPeers', 'pts', 'ptsCount'];
      this.folderPeers = params.folderPeers;
      this.pts = params.pts;
      this.ptsCount = params.ptsCount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let folderPeers = await TLObject.read(b);
      let pts = await Primitive.Int.read(b);
      let ptsCount = await Primitive.Int.read(b);
      return new Raw2.UpdateFolderPeers({ folderPeers, pts, ptsCount });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.folderPeers) {
        b.write(Primitive.Vector.write(this.folderPeers));
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.ptsCount !== void 0) {
        b.write(Primitive.Int.write(this.ptsCount));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateFolderPeers = UpdateFolderPeers;
  class UpdatePeerSettings extends TLObject {
    peer;
    settings;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdatePeerSettings';
      this.constructorId = 1786671974;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'settings'];
      this.peer = params.peer;
      this.settings = params.settings;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let settings = await TLObject.read(b);
      return new Raw2.UpdatePeerSettings({ peer, settings });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.settings !== void 0) {
        b.write(this.settings.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdatePeerSettings = UpdatePeerSettings;
  class UpdatePeerLocated extends TLObject {
    peers;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdatePeerLocated';
      this.constructorId = 3031420848;
      this.subclassOfId = 2676568142;
      this._slots = ['peers'];
      this.peers = params.peers;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peers = await TLObject.read(b);
      return new Raw2.UpdatePeerLocated({ peers });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peers) {
        b.write(Primitive.Vector.write(this.peers));
      }
      return b.buffer;
    }
  }
  Raw2.UpdatePeerLocated = UpdatePeerLocated;
  class UpdateNewScheduledMessage extends TLObject {
    message;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateNewScheduledMessage';
      this.constructorId = 967122427;
      this.subclassOfId = 2676568142;
      this._slots = ['message'];
      this.message = params.message;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let message = await TLObject.read(b);
      return new Raw2.UpdateNewScheduledMessage({ message });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.message !== void 0) {
        b.write(this.message.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateNewScheduledMessage = UpdateNewScheduledMessage;
  class UpdateDeleteScheduledMessages extends TLObject {
    peer;
    messages;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateDeleteScheduledMessages';
      this.constructorId = 2424728814;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'messages'];
      this.peer = params.peer;
      this.messages = params.messages;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let messages2 = await TLObject.read(b, Primitive.Int);
      return new Raw2.UpdateDeleteScheduledMessages({ peer, messages: messages2 });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.messages) {
        b.write(Primitive.Vector.write(this.messages, Primitive.Int));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateDeleteScheduledMessages = UpdateDeleteScheduledMessages;
  class UpdateTheme extends TLObject {
    theme;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateTheme';
      this.constructorId = 2182544291;
      this.subclassOfId = 2676568142;
      this._slots = ['theme'];
      this.theme = params.theme;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let theme = await TLObject.read(b);
      return new Raw2.UpdateTheme({ theme });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.theme !== void 0) {
        b.write(this.theme.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateTheme = UpdateTheme;
  class UpdateGeoLiveViewed extends TLObject {
    peer;
    msgId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateGeoLiveViewed';
      this.constructorId = 2267003193;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'msgId'];
      this.peer = params.peer;
      this.msgId = params.msgId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let msgId = await Primitive.Int.read(b);
      return new Raw2.UpdateGeoLiveViewed({ peer, msgId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.msgId !== void 0) {
        b.write(Primitive.Int.write(this.msgId));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateGeoLiveViewed = UpdateGeoLiveViewed;
  class UpdateLoginToken extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UpdateLoginToken';
      this.constructorId = 1448076945;
      this.subclassOfId = 2676568142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UpdateLoginToken();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UpdateLoginToken = UpdateLoginToken;
  class UpdateMessagePollVote extends TLObject {
    pollId;
    peer;
    options;
    qts;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateMessagePollVote';
      this.constructorId = 619974263;
      this.subclassOfId = 2676568142;
      this._slots = ['pollId', 'peer', 'options', 'qts'];
      this.pollId = params.pollId;
      this.peer = params.peer;
      this.options = params.options;
      this.qts = params.qts;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let pollId = await Primitive.Long.read(b);
      let peer = await TLObject.read(b);
      let options = await TLObject.read(b, Primitive.Bytes);
      let qts = await Primitive.Int.read(b);
      return new Raw2.UpdateMessagePollVote({
        pollId,
        peer,
        options,
        qts,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.pollId !== void 0) {
        b.write(Primitive.Long.write(this.pollId));
      }
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.options) {
        b.write(Primitive.Vector.write(this.options, Primitive.Bytes));
      }
      if (this.qts !== void 0) {
        b.write(Primitive.Int.write(this.qts));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateMessagePollVote = UpdateMessagePollVote;
  class UpdateDialogFilter extends TLObject {
    id;
    filter;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateDialogFilter';
      this.constructorId = 654302845;
      this.subclassOfId = 2676568142;
      this._slots = ['id', 'filter'];
      this.id = params.id;
      this.filter = params.filter;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let id = await Primitive.Int.read(b);
      let filter = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      return new Raw2.UpdateDialogFilter({ id, filter });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.filter !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.filter !== void 0) {
        b.write(this.filter.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateDialogFilter = UpdateDialogFilter;
  class UpdateDialogFilterOrder extends TLObject {
    order;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateDialogFilterOrder';
      this.constructorId = 2782339333;
      this.subclassOfId = 2676568142;
      this._slots = ['order'];
      this.order = params.order;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let order = await TLObject.read(b, Primitive.Int);
      return new Raw2.UpdateDialogFilterOrder({ order });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.order) {
        b.write(Primitive.Vector.write(this.order, Primitive.Int));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateDialogFilterOrder = UpdateDialogFilterOrder;
  class UpdateDialogFilters extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UpdateDialogFilters';
      this.constructorId = 889491791;
      this.subclassOfId = 2676568142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UpdateDialogFilters();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UpdateDialogFilters = UpdateDialogFilters;
  class UpdatePhoneCallSignalingData extends TLObject {
    phoneCallId;
    data;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdatePhoneCallSignalingData';
      this.constructorId = 643940105;
      this.subclassOfId = 2676568142;
      this._slots = ['phoneCallId', 'data'];
      this.phoneCallId = params.phoneCallId;
      this.data = params.data;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let phoneCallId = await Primitive.Long.read(b);
      let data = await Primitive.Bytes.read(b);
      return new Raw2.UpdatePhoneCallSignalingData({ phoneCallId, data });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.phoneCallId !== void 0) {
        b.write(Primitive.Long.write(this.phoneCallId));
      }
      if (this.data !== void 0) {
        b.write(Primitive.Bytes.write(this.data));
      }
      return b.buffer;
    }
  }
  Raw2.UpdatePhoneCallSignalingData = UpdatePhoneCallSignalingData;
  class UpdateChannelMessageForwards extends TLObject {
    channelId;
    id;
    forwards;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChannelMessageForwards';
      this.constructorId = 3533318132;
      this.subclassOfId = 2676568142;
      this._slots = ['channelId', 'id', 'forwards'];
      this.channelId = params.channelId;
      this.id = params.id;
      this.forwards = params.forwards;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let channelId = await Primitive.Long.read(b);
      let id = await Primitive.Int.read(b);
      let forwards = await Primitive.Int.read(b);
      return new Raw2.UpdateChannelMessageForwards({
        channelId,
        id,
        forwards,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.forwards !== void 0) {
        b.write(Primitive.Int.write(this.forwards));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChannelMessageForwards = UpdateChannelMessageForwards;
  class UpdateReadChannelDiscussionInbox extends TLObject {
    channelId;
    topMsgId;
    readMaxId;
    broadcastId;
    broadcastPost;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateReadChannelDiscussionInbox';
      this.constructorId = 3601962310;
      this.subclassOfId = 2676568142;
      this._slots = ['channelId', 'topMsgId', 'readMaxId', 'broadcastId', 'broadcastPost'];
      this.channelId = params.channelId;
      this.topMsgId = params.topMsgId;
      this.readMaxId = params.readMaxId;
      this.broadcastId = params.broadcastId;
      this.broadcastPost = params.broadcastPost;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let channelId = await Primitive.Long.read(b);
      let topMsgId = await Primitive.Int.read(b);
      let readMaxId = await Primitive.Int.read(b);
      let broadcastId = flags & (1 << 0) ? await Primitive.Long.read(b) : void 0;
      let broadcastPost = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.UpdateReadChannelDiscussionInbox({
        channelId,
        topMsgId,
        readMaxId,
        broadcastId,
        broadcastPost,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.broadcastId !== void 0 ? 1 << 0 : 0;
      flags |= this.broadcastPost !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.topMsgId !== void 0) {
        b.write(Primitive.Int.write(this.topMsgId));
      }
      if (this.readMaxId !== void 0) {
        b.write(Primitive.Int.write(this.readMaxId));
      }
      if (this.broadcastId !== void 0) {
        b.write(Primitive.Long.write(this.broadcastId));
      }
      if (this.broadcastPost !== void 0) {
        b.write(Primitive.Int.write(this.broadcastPost));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateReadChannelDiscussionInbox = UpdateReadChannelDiscussionInbox;
  class UpdateReadChannelDiscussionOutbox extends TLObject {
    channelId;
    topMsgId;
    readMaxId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateReadChannelDiscussionOutbox';
      this.constructorId = 1767677564;
      this.subclassOfId = 2676568142;
      this._slots = ['channelId', 'topMsgId', 'readMaxId'];
      this.channelId = params.channelId;
      this.topMsgId = params.topMsgId;
      this.readMaxId = params.readMaxId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let channelId = await Primitive.Long.read(b);
      let topMsgId = await Primitive.Int.read(b);
      let readMaxId = await Primitive.Int.read(b);
      return new Raw2.UpdateReadChannelDiscussionOutbox({
        channelId,
        topMsgId,
        readMaxId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.topMsgId !== void 0) {
        b.write(Primitive.Int.write(this.topMsgId));
      }
      if (this.readMaxId !== void 0) {
        b.write(Primitive.Int.write(this.readMaxId));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateReadChannelDiscussionOutbox = UpdateReadChannelDiscussionOutbox;
  class UpdatePeerBlocked extends TLObject {
    blocked;
    blockedMyStoriesFrom;
    peerId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdatePeerBlocked';
      this.constructorId = 3957356370;
      this.subclassOfId = 2676568142;
      this._slots = ['blocked', 'blockedMyStoriesFrom', 'peerId'];
      this.blocked = params.blocked;
      this.blockedMyStoriesFrom = params.blockedMyStoriesFrom;
      this.peerId = params.peerId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let blocked = flags & (1 << 0) ? true : false;
      let blockedMyStoriesFrom = flags & (1 << 1) ? true : false;
      let peerId = await TLObject.read(b);
      return new Raw2.UpdatePeerBlocked({
        blocked,
        blockedMyStoriesFrom,
        peerId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.blocked ? 1 << 0 : 0;
      flags |= this.blockedMyStoriesFrom ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peerId !== void 0) {
        b.write(this.peerId.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdatePeerBlocked = UpdatePeerBlocked;
  class UpdateChannelUserTyping extends TLObject {
    channelId;
    topMsgId;
    fromId;
    action;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChannelUserTyping';
      this.constructorId = 2357774627;
      this.subclassOfId = 2676568142;
      this._slots = ['channelId', 'topMsgId', 'fromId', 'action'];
      this.channelId = params.channelId;
      this.topMsgId = params.topMsgId;
      this.fromId = params.fromId;
      this.action = params.action;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let channelId = await Primitive.Long.read(b);
      let topMsgId = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let fromId = await TLObject.read(b);
      let action = await TLObject.read(b);
      return new Raw2.UpdateChannelUserTyping({
        channelId,
        topMsgId,
        fromId,
        action,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.topMsgId !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.topMsgId !== void 0) {
        b.write(Primitive.Int.write(this.topMsgId));
      }
      if (this.fromId !== void 0) {
        b.write(this.fromId.write());
      }
      if (this.action !== void 0) {
        b.write(this.action.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChannelUserTyping = UpdateChannelUserTyping;
  class UpdatePinnedMessages extends TLObject {
    pinned;
    peer;
    messages;
    pts;
    ptsCount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdatePinnedMessages';
      this.constructorId = 3984976565;
      this.subclassOfId = 2676568142;
      this._slots = ['pinned', 'peer', 'messages', 'pts', 'ptsCount'];
      this.pinned = params.pinned;
      this.peer = params.peer;
      this.messages = params.messages;
      this.pts = params.pts;
      this.ptsCount = params.ptsCount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let pinned = flags & (1 << 0) ? true : false;
      let peer = await TLObject.read(b);
      let messages2 = await TLObject.read(b, Primitive.Int);
      let pts = await Primitive.Int.read(b);
      let ptsCount = await Primitive.Int.read(b);
      return new Raw2.UpdatePinnedMessages({
        pinned,
        peer,
        messages: messages2,
        pts,
        ptsCount,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.pinned ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.messages) {
        b.write(Primitive.Vector.write(this.messages, Primitive.Int));
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.ptsCount !== void 0) {
        b.write(Primitive.Int.write(this.ptsCount));
      }
      return b.buffer;
    }
  }
  Raw2.UpdatePinnedMessages = UpdatePinnedMessages;
  class UpdatePinnedChannelMessages extends TLObject {
    pinned;
    channelId;
    messages;
    pts;
    ptsCount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdatePinnedChannelMessages';
      this.constructorId = 1538885128;
      this.subclassOfId = 2676568142;
      this._slots = ['pinned', 'channelId', 'messages', 'pts', 'ptsCount'];
      this.pinned = params.pinned;
      this.channelId = params.channelId;
      this.messages = params.messages;
      this.pts = params.pts;
      this.ptsCount = params.ptsCount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let pinned = flags & (1 << 0) ? true : false;
      let channelId = await Primitive.Long.read(b);
      let messages2 = await TLObject.read(b, Primitive.Int);
      let pts = await Primitive.Int.read(b);
      let ptsCount = await Primitive.Int.read(b);
      return new Raw2.UpdatePinnedChannelMessages({
        pinned,
        channelId,
        messages: messages2,
        pts,
        ptsCount,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.pinned ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.messages) {
        b.write(Primitive.Vector.write(this.messages, Primitive.Int));
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.ptsCount !== void 0) {
        b.write(Primitive.Int.write(this.ptsCount));
      }
      return b.buffer;
    }
  }
  Raw2.UpdatePinnedChannelMessages = UpdatePinnedChannelMessages;
  class UpdateChat extends TLObject {
    chatId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChat';
      this.constructorId = 4170869326;
      this.subclassOfId = 2676568142;
      this._slots = ['chatId'];
      this.chatId = params.chatId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chatId = await Primitive.Long.read(b);
      return new Raw2.UpdateChat({ chatId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chatId !== void 0) {
        b.write(Primitive.Long.write(this.chatId));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChat = UpdateChat;
  class UpdateGroupCallParticipants extends TLObject {
    call;
    participants;
    version;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateGroupCallParticipants';
      this.constructorId = 4075543374;
      this.subclassOfId = 2676568142;
      this._slots = ['call', 'participants', 'version'];
      this.call = params.call;
      this.participants = params.participants;
      this.version = params.version;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let call = await TLObject.read(b);
      let participants = await TLObject.read(b);
      let version = await Primitive.Int.read(b);
      return new Raw2.UpdateGroupCallParticipants({
        call,
        participants,
        version,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.call !== void 0) {
        b.write(this.call.write());
      }
      if (this.participants) {
        b.write(Primitive.Vector.write(this.participants));
      }
      if (this.version !== void 0) {
        b.write(Primitive.Int.write(this.version));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateGroupCallParticipants = UpdateGroupCallParticipants;
  class UpdateGroupCall extends TLObject {
    chatId;
    call;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateGroupCall';
      this.constructorId = 347227392;
      this.subclassOfId = 2676568142;
      this._slots = ['chatId', 'call'];
      this.chatId = params.chatId;
      this.call = params.call;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chatId = await Primitive.Long.read(b);
      let call = await TLObject.read(b);
      return new Raw2.UpdateGroupCall({ chatId, call });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chatId !== void 0) {
        b.write(Primitive.Long.write(this.chatId));
      }
      if (this.call !== void 0) {
        b.write(this.call.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateGroupCall = UpdateGroupCall;
  class UpdatePeerHistoryTTL extends TLObject {
    peer;
    ttlPeriod;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdatePeerHistoryTTL';
      this.constructorId = 3147544997;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'ttlPeriod'];
      this.peer = params.peer;
      this.ttlPeriod = params.ttlPeriod;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let peer = await TLObject.read(b);
      let ttlPeriod = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.UpdatePeerHistoryTTL({ peer, ttlPeriod });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.ttlPeriod !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.ttlPeriod !== void 0) {
        b.write(Primitive.Int.write(this.ttlPeriod));
      }
      return b.buffer;
    }
  }
  Raw2.UpdatePeerHistoryTTL = UpdatePeerHistoryTTL;
  class UpdateChatParticipant extends TLObject {
    chatId;
    date;
    actorId;
    userId;
    prevParticipant;
    newParticipant;
    invite;
    qts;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChatParticipant';
      this.constructorId = 3498534458;
      this.subclassOfId = 2676568142;
      this._slots = [
        'chatId',
        'date',
        'actorId',
        'userId',
        'prevParticipant',
        'newParticipant',
        'invite',
        'qts',
      ];
      this.chatId = params.chatId;
      this.date = params.date;
      this.actorId = params.actorId;
      this.userId = params.userId;
      this.prevParticipant = params.prevParticipant;
      this.newParticipant = params.newParticipant;
      this.invite = params.invite;
      this.qts = params.qts;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let chatId = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let actorId = await Primitive.Long.read(b);
      let userId = await Primitive.Long.read(b);
      let prevParticipant = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let newParticipant = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      let invite = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      let qts = await Primitive.Int.read(b);
      return new Raw2.UpdateChatParticipant({
        chatId,
        date,
        actorId,
        userId,
        prevParticipant,
        newParticipant,
        invite,
        qts,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.prevParticipant !== void 0 ? 1 << 0 : 0;
      flags |= this.newParticipant !== void 0 ? 1 << 1 : 0;
      flags |= this.invite !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.chatId !== void 0) {
        b.write(Primitive.Long.write(this.chatId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.actorId !== void 0) {
        b.write(Primitive.Long.write(this.actorId));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.prevParticipant !== void 0) {
        b.write(this.prevParticipant.write());
      }
      if (this.newParticipant !== void 0) {
        b.write(this.newParticipant.write());
      }
      if (this.invite !== void 0) {
        b.write(this.invite.write());
      }
      if (this.qts !== void 0) {
        b.write(Primitive.Int.write(this.qts));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChatParticipant = UpdateChatParticipant;
  class UpdateChannelParticipant extends TLObject {
    viaChatlist;
    channelId;
    date;
    actorId;
    userId;
    prevParticipant;
    newParticipant;
    invite;
    qts;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChannelParticipant';
      this.constructorId = 2556246715;
      this.subclassOfId = 2676568142;
      this._slots = [
        'viaChatlist',
        'channelId',
        'date',
        'actorId',
        'userId',
        'prevParticipant',
        'newParticipant',
        'invite',
        'qts',
      ];
      this.viaChatlist = params.viaChatlist;
      this.channelId = params.channelId;
      this.date = params.date;
      this.actorId = params.actorId;
      this.userId = params.userId;
      this.prevParticipant = params.prevParticipant;
      this.newParticipant = params.newParticipant;
      this.invite = params.invite;
      this.qts = params.qts;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let viaChatlist = flags & (1 << 3) ? true : false;
      let channelId = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let actorId = await Primitive.Long.read(b);
      let userId = await Primitive.Long.read(b);
      let prevParticipant = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let newParticipant = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      let invite = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      let qts = await Primitive.Int.read(b);
      return new Raw2.UpdateChannelParticipant({
        viaChatlist,
        channelId,
        date,
        actorId,
        userId,
        prevParticipant,
        newParticipant,
        invite,
        qts,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.viaChatlist ? 1 << 3 : 0;
      flags |= this.prevParticipant !== void 0 ? 1 << 0 : 0;
      flags |= this.newParticipant !== void 0 ? 1 << 1 : 0;
      flags |= this.invite !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.actorId !== void 0) {
        b.write(Primitive.Long.write(this.actorId));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.prevParticipant !== void 0) {
        b.write(this.prevParticipant.write());
      }
      if (this.newParticipant !== void 0) {
        b.write(this.newParticipant.write());
      }
      if (this.invite !== void 0) {
        b.write(this.invite.write());
      }
      if (this.qts !== void 0) {
        b.write(Primitive.Int.write(this.qts));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChannelParticipant = UpdateChannelParticipant;
  class UpdateBotStopped extends TLObject {
    userId;
    date;
    stopped;
    qts;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateBotStopped';
      this.constructorId = 3297184329;
      this.subclassOfId = 2676568142;
      this._slots = ['userId', 'date', 'stopped', 'qts'];
      this.userId = params.userId;
      this.date = params.date;
      this.stopped = params.stopped;
      this.qts = params.qts;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let stopped = await Primitive.Bool.read(b);
      let qts = await Primitive.Int.read(b);
      return new Raw2.UpdateBotStopped({ userId, date, stopped, qts });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.stopped !== void 0) {
        b.write(Primitive.Bool.write(this.stopped));
      }
      if (this.qts !== void 0) {
        b.write(Primitive.Int.write(this.qts));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateBotStopped = UpdateBotStopped;
  class UpdateGroupCallConnection extends TLObject {
    presentation;
    params;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateGroupCallConnection';
      this.constructorId = 192428418;
      this.subclassOfId = 2676568142;
      this._slots = ['presentation', 'params'];
      this.presentation = params.presentation;
      this.params = params.params;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let presentation = flags & (1 << 0) ? true : false;
      let params = await TLObject.read(b);
      return new Raw2.UpdateGroupCallConnection({ presentation, params });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.presentation ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.params !== void 0) {
        b.write(this.params.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateGroupCallConnection = UpdateGroupCallConnection;
  class UpdateBotCommands extends TLObject {
    peer;
    botId;
    commands;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateBotCommands';
      this.constructorId = 1299263278;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'botId', 'commands'];
      this.peer = params.peer;
      this.botId = params.botId;
      this.commands = params.commands;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let botId = await Primitive.Long.read(b);
      let commands = await TLObject.read(b);
      return new Raw2.UpdateBotCommands({ peer, botId, commands });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.botId !== void 0) {
        b.write(Primitive.Long.write(this.botId));
      }
      if (this.commands) {
        b.write(Primitive.Vector.write(this.commands));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateBotCommands = UpdateBotCommands;
  class UpdatePendingJoinRequests extends TLObject {
    peer;
    requestsPending;
    recentRequesters;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdatePendingJoinRequests';
      this.constructorId = 1885586395;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'requestsPending', 'recentRequesters'];
      this.peer = params.peer;
      this.requestsPending = params.requestsPending;
      this.recentRequesters = params.recentRequesters;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let requestsPending = await Primitive.Int.read(b);
      let recentRequesters = await TLObject.read(b, Primitive.Long);
      return new Raw2.UpdatePendingJoinRequests({
        peer,
        requestsPending,
        recentRequesters,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.requestsPending !== void 0) {
        b.write(Primitive.Int.write(this.requestsPending));
      }
      if (this.recentRequesters) {
        b.write(Primitive.Vector.write(this.recentRequesters, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.UpdatePendingJoinRequests = UpdatePendingJoinRequests;
  class UpdateBotChatInviteRequester extends TLObject {
    peer;
    date;
    userId;
    about;
    invite;
    qts;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateBotChatInviteRequester';
      this.constructorId = 299870598;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'date', 'userId', 'about', 'invite', 'qts'];
      this.peer = params.peer;
      this.date = params.date;
      this.userId = params.userId;
      this.about = params.about;
      this.invite = params.invite;
      this.qts = params.qts;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let date = await Primitive.Int.read(b);
      let userId = await Primitive.Long.read(b);
      let about = await Primitive.String.read(b);
      let invite = await TLObject.read(b);
      let qts = await Primitive.Int.read(b);
      return new Raw2.UpdateBotChatInviteRequester({
        peer,
        date,
        userId,
        about,
        invite,
        qts,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.about !== void 0) {
        b.write(Primitive.String.write(this.about));
      }
      if (this.invite !== void 0) {
        b.write(this.invite.write());
      }
      if (this.qts !== void 0) {
        b.write(Primitive.Int.write(this.qts));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateBotChatInviteRequester = UpdateBotChatInviteRequester;
  class UpdateMessageReactions extends TLObject {
    peer;
    msgId;
    topMsgId;
    reactions;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateMessageReactions';
      this.constructorId = 1578843320;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'msgId', 'topMsgId', 'reactions'];
      this.peer = params.peer;
      this.msgId = params.msgId;
      this.topMsgId = params.topMsgId;
      this.reactions = params.reactions;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let peer = await TLObject.read(b);
      let msgId = await Primitive.Int.read(b);
      let topMsgId = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let reactions = await TLObject.read(b);
      return new Raw2.UpdateMessageReactions({
        peer,
        msgId,
        topMsgId,
        reactions,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.topMsgId !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.msgId !== void 0) {
        b.write(Primitive.Int.write(this.msgId));
      }
      if (this.topMsgId !== void 0) {
        b.write(Primitive.Int.write(this.topMsgId));
      }
      if (this.reactions !== void 0) {
        b.write(this.reactions.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateMessageReactions = UpdateMessageReactions;
  class UpdateAttachMenuBots extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UpdateAttachMenuBots';
      this.constructorId = 397910539;
      this.subclassOfId = 2676568142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UpdateAttachMenuBots();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UpdateAttachMenuBots = UpdateAttachMenuBots;
  class UpdateWebViewResultSent extends TLObject {
    queryId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateWebViewResultSent';
      this.constructorId = 361936797;
      this.subclassOfId = 2676568142;
      this._slots = ['queryId'];
      this.queryId = params.queryId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let queryId = await Primitive.Long.read(b);
      return new Raw2.UpdateWebViewResultSent({ queryId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.queryId !== void 0) {
        b.write(Primitive.Long.write(this.queryId));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateWebViewResultSent = UpdateWebViewResultSent;
  class UpdateBotMenuButton extends TLObject {
    botId;
    button;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateBotMenuButton';
      this.constructorId = 347625491;
      this.subclassOfId = 2676568142;
      this._slots = ['botId', 'button'];
      this.botId = params.botId;
      this.button = params.button;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let botId = await Primitive.Long.read(b);
      let button = await TLObject.read(b);
      return new Raw2.UpdateBotMenuButton({ botId, button });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.botId !== void 0) {
        b.write(Primitive.Long.write(this.botId));
      }
      if (this.button !== void 0) {
        b.write(this.button.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateBotMenuButton = UpdateBotMenuButton;
  class UpdateSavedRingtones extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UpdateSavedRingtones';
      this.constructorId = 1960361625;
      this.subclassOfId = 2676568142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UpdateSavedRingtones();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UpdateSavedRingtones = UpdateSavedRingtones;
  class UpdateTranscribedAudio extends TLObject {
    pending;
    peer;
    msgId;
    transcriptionId;
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateTranscribedAudio';
      this.constructorId = 8703322;
      this.subclassOfId = 2676568142;
      this._slots = ['pending', 'peer', 'msgId', 'transcriptionId', 'text'];
      this.pending = params.pending;
      this.peer = params.peer;
      this.msgId = params.msgId;
      this.transcriptionId = params.transcriptionId;
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let pending = flags & (1 << 0) ? true : false;
      let peer = await TLObject.read(b);
      let msgId = await Primitive.Int.read(b);
      let transcriptionId = await Primitive.Long.read(b);
      let text = await Primitive.String.read(b);
      return new Raw2.UpdateTranscribedAudio({
        pending,
        peer,
        msgId,
        transcriptionId,
        text,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.pending ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.msgId !== void 0) {
        b.write(Primitive.Int.write(this.msgId));
      }
      if (this.transcriptionId !== void 0) {
        b.write(Primitive.Long.write(this.transcriptionId));
      }
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateTranscribedAudio = UpdateTranscribedAudio;
  class UpdateReadFeaturedEmojiStickers extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UpdateReadFeaturedEmojiStickers';
      this.constructorId = 4216080748;
      this.subclassOfId = 2676568142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UpdateReadFeaturedEmojiStickers();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UpdateReadFeaturedEmojiStickers = UpdateReadFeaturedEmojiStickers;
  class UpdateUserEmojiStatus extends TLObject {
    userId;
    emojiStatus;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateUserEmojiStatus';
      this.constructorId = 674706841;
      this.subclassOfId = 2676568142;
      this._slots = ['userId', 'emojiStatus'];
      this.userId = params.userId;
      this.emojiStatus = params.emojiStatus;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      let emojiStatus = await TLObject.read(b);
      return new Raw2.UpdateUserEmojiStatus({ userId, emojiStatus });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.emojiStatus !== void 0) {
        b.write(this.emojiStatus.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateUserEmojiStatus = UpdateUserEmojiStatus;
  class UpdateRecentEmojiStatuses extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UpdateRecentEmojiStatuses';
      this.constructorId = 821314523;
      this.subclassOfId = 2676568142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UpdateRecentEmojiStatuses();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UpdateRecentEmojiStatuses = UpdateRecentEmojiStatuses;
  class UpdateRecentReactions extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UpdateRecentReactions';
      this.constructorId = 1870160884;
      this.subclassOfId = 2676568142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UpdateRecentReactions();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UpdateRecentReactions = UpdateRecentReactions;
  class UpdateMoveStickerSetToTop extends TLObject {
    masks;
    emojis;
    stickerset;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateMoveStickerSetToTop';
      this.constructorId = 2264715141;
      this.subclassOfId = 2676568142;
      this._slots = ['masks', 'emojis', 'stickerset'];
      this.masks = params.masks;
      this.emojis = params.emojis;
      this.stickerset = params.stickerset;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let masks = flags & (1 << 0) ? true : false;
      let emojis = flags & (1 << 1) ? true : false;
      let stickerset = await Primitive.Long.read(b);
      return new Raw2.UpdateMoveStickerSetToTop({
        masks,
        emojis,
        stickerset,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.masks ? 1 << 0 : 0;
      flags |= this.emojis ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.stickerset !== void 0) {
        b.write(Primitive.Long.write(this.stickerset));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateMoveStickerSetToTop = UpdateMoveStickerSetToTop;
  class UpdateMessageExtendedMedia extends TLObject {
    peer;
    msgId;
    extendedMedia;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateMessageExtendedMedia';
      this.constructorId = 1517529484;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'msgId', 'extendedMedia'];
      this.peer = params.peer;
      this.msgId = params.msgId;
      this.extendedMedia = params.extendedMedia;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let msgId = await Primitive.Int.read(b);
      let extendedMedia = await TLObject.read(b);
      return new Raw2.UpdateMessageExtendedMedia({
        peer,
        msgId,
        extendedMedia,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.msgId !== void 0) {
        b.write(Primitive.Int.write(this.msgId));
      }
      if (this.extendedMedia !== void 0) {
        b.write(this.extendedMedia.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateMessageExtendedMedia = UpdateMessageExtendedMedia;
  class UpdateChannelPinnedTopic extends TLObject {
    pinned;
    channelId;
    topicId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChannelPinnedTopic';
      this.constructorId = 422509539;
      this.subclassOfId = 2676568142;
      this._slots = ['pinned', 'channelId', 'topicId'];
      this.pinned = params.pinned;
      this.channelId = params.channelId;
      this.topicId = params.topicId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let pinned = flags & (1 << 0) ? true : false;
      let channelId = await Primitive.Long.read(b);
      let topicId = await Primitive.Int.read(b);
      return new Raw2.UpdateChannelPinnedTopic({
        pinned,
        channelId,
        topicId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.pinned ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.topicId !== void 0) {
        b.write(Primitive.Int.write(this.topicId));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChannelPinnedTopic = UpdateChannelPinnedTopic;
  class UpdateChannelPinnedTopics extends TLObject {
    channelId;
    order;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChannelPinnedTopics';
      this.constructorId = 4263085570;
      this.subclassOfId = 2676568142;
      this._slots = ['channelId', 'order'];
      this.channelId = params.channelId;
      this.order = params.order;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let channelId = await Primitive.Long.read(b);
      let order = flags & (1 << 0) ? await TLObject.read(b, Primitive.Int) : [];
      return new Raw2.UpdateChannelPinnedTopics({ channelId, order });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.order ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.order) {
        b.write(Primitive.Vector.write(this.order, Primitive.Int));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChannelPinnedTopics = UpdateChannelPinnedTopics;
  class UpdateUser extends TLObject {
    userId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateUser';
      this.constructorId = 542282808;
      this.subclassOfId = 2676568142;
      this._slots = ['userId'];
      this.userId = params.userId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      return new Raw2.UpdateUser({ userId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateUser = UpdateUser;
  class UpdateAutoSaveSettings extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UpdateAutoSaveSettings';
      this.constructorId = 3959795863;
      this.subclassOfId = 2676568142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UpdateAutoSaveSettings();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UpdateAutoSaveSettings = UpdateAutoSaveSettings;
  class UpdateStory extends TLObject {
    peer;
    story;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateStory';
      this.constructorId = 1974712216;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'story'];
      this.peer = params.peer;
      this.story = params.story;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let story = await TLObject.read(b);
      return new Raw2.UpdateStory({ peer, story });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.story !== void 0) {
        b.write(this.story.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateStory = UpdateStory;
  class UpdateReadStories extends TLObject {
    peer;
    maxId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateReadStories';
      this.constructorId = 4149121835;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'maxId'];
      this.peer = params.peer;
      this.maxId = params.maxId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let maxId = await Primitive.Int.read(b);
      return new Raw2.UpdateReadStories({ peer, maxId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.maxId !== void 0) {
        b.write(Primitive.Int.write(this.maxId));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateReadStories = UpdateReadStories;
  class UpdateStoryID extends TLObject {
    id;
    randomId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateStoryID';
      this.constructorId = 468923833;
      this.subclassOfId = 2676568142;
      this._slots = ['id', 'randomId'];
      this.id = params.id;
      this.randomId = params.randomId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Int.read(b);
      let randomId = await Primitive.Long.read(b);
      return new Raw2.UpdateStoryID({ id, randomId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.randomId !== void 0) {
        b.write(Primitive.Long.write(this.randomId));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateStoryID = UpdateStoryID;
  class UpdateStoriesStealthMode extends TLObject {
    stealthMode;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateStoriesStealthMode';
      this.constructorId = 738741697;
      this.subclassOfId = 2676568142;
      this._slots = ['stealthMode'];
      this.stealthMode = params.stealthMode;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let stealthMode = await TLObject.read(b);
      return new Raw2.UpdateStoriesStealthMode({ stealthMode });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.stealthMode !== void 0) {
        b.write(this.stealthMode.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateStoriesStealthMode = UpdateStoriesStealthMode;
  class UpdateSentStoryReaction extends TLObject {
    peer;
    storyId;
    reaction;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateSentStoryReaction';
      this.constructorId = 2103604867;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'storyId', 'reaction'];
      this.peer = params.peer;
      this.storyId = params.storyId;
      this.reaction = params.reaction;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let storyId = await Primitive.Int.read(b);
      let reaction = await TLObject.read(b);
      return new Raw2.UpdateSentStoryReaction({ peer, storyId, reaction });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.storyId !== void 0) {
        b.write(Primitive.Int.write(this.storyId));
      }
      if (this.reaction !== void 0) {
        b.write(this.reaction.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateSentStoryReaction = UpdateSentStoryReaction;
  class UpdateBotChatBoost extends TLObject {
    peer;
    boost;
    qts;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateBotChatBoost';
      this.constructorId = 2421019804;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'boost', 'qts'];
      this.peer = params.peer;
      this.boost = params.boost;
      this.qts = params.qts;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let boost = await TLObject.read(b);
      let qts = await Primitive.Int.read(b);
      return new Raw2.UpdateBotChatBoost({ peer, boost, qts });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.boost !== void 0) {
        b.write(this.boost.write());
      }
      if (this.qts !== void 0) {
        b.write(Primitive.Int.write(this.qts));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateBotChatBoost = UpdateBotChatBoost;
  class UpdateChannelViewForumAsMessages extends TLObject {
    channelId;
    enabled;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateChannelViewForumAsMessages';
      this.constructorId = 129403168;
      this.subclassOfId = 2676568142;
      this._slots = ['channelId', 'enabled'];
      this.channelId = params.channelId;
      this.enabled = params.enabled;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let channelId = await Primitive.Long.read(b);
      let enabled = await Primitive.Bool.read(b);
      return new Raw2.UpdateChannelViewForumAsMessages({ channelId, enabled });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.enabled !== void 0) {
        b.write(Primitive.Bool.write(this.enabled));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateChannelViewForumAsMessages = UpdateChannelViewForumAsMessages;
  class UpdatePeerWallpaper extends TLObject {
    wallpaperOverridden;
    peer;
    wallpaper;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdatePeerWallpaper';
      this.constructorId = 2923368477;
      this.subclassOfId = 2676568142;
      this._slots = ['wallpaperOverridden', 'peer', 'wallpaper'];
      this.wallpaperOverridden = params.wallpaperOverridden;
      this.peer = params.peer;
      this.wallpaper = params.wallpaper;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let wallpaperOverridden = flags & (1 << 1) ? true : false;
      let peer = await TLObject.read(b);
      let wallpaper = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      return new Raw2.UpdatePeerWallpaper({
        wallpaperOverridden,
        peer,
        wallpaper,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.wallpaperOverridden ? 1 << 1 : 0;
      flags |= this.wallpaper !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.wallpaper !== void 0) {
        b.write(this.wallpaper.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdatePeerWallpaper = UpdatePeerWallpaper;
  class UpdateBotMessageReaction extends TLObject {
    peer;
    msgId;
    date;
    actor;
    oldReactions;
    newReactions;
    qts;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateBotMessageReaction';
      this.constructorId = 2887898062;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'msgId', 'date', 'actor', 'oldReactions', 'newReactions', 'qts'];
      this.peer = params.peer;
      this.msgId = params.msgId;
      this.date = params.date;
      this.actor = params.actor;
      this.oldReactions = params.oldReactions;
      this.newReactions = params.newReactions;
      this.qts = params.qts;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let msgId = await Primitive.Int.read(b);
      let date = await Primitive.Int.read(b);
      let actor = await TLObject.read(b);
      let oldReactions = await TLObject.read(b);
      let newReactions = await TLObject.read(b);
      let qts = await Primitive.Int.read(b);
      return new Raw2.UpdateBotMessageReaction({
        peer,
        msgId,
        date,
        actor,
        oldReactions,
        newReactions,
        qts,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.msgId !== void 0) {
        b.write(Primitive.Int.write(this.msgId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.actor !== void 0) {
        b.write(this.actor.write());
      }
      if (this.oldReactions) {
        b.write(Primitive.Vector.write(this.oldReactions));
      }
      if (this.newReactions) {
        b.write(Primitive.Vector.write(this.newReactions));
      }
      if (this.qts !== void 0) {
        b.write(Primitive.Int.write(this.qts));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateBotMessageReaction = UpdateBotMessageReaction;
  class UpdateBotMessageReactions extends TLObject {
    peer;
    msgId;
    date;
    reactions;
    qts;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateBotMessageReactions';
      this.constructorId = 164329305;
      this.subclassOfId = 2676568142;
      this._slots = ['peer', 'msgId', 'date', 'reactions', 'qts'];
      this.peer = params.peer;
      this.msgId = params.msgId;
      this.date = params.date;
      this.reactions = params.reactions;
      this.qts = params.qts;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let msgId = await Primitive.Int.read(b);
      let date = await Primitive.Int.read(b);
      let reactions = await TLObject.read(b);
      let qts = await Primitive.Int.read(b);
      return new Raw2.UpdateBotMessageReactions({
        peer,
        msgId,
        date,
        reactions,
        qts,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.msgId !== void 0) {
        b.write(Primitive.Int.write(this.msgId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.reactions) {
        b.write(Primitive.Vector.write(this.reactions));
      }
      if (this.qts !== void 0) {
        b.write(Primitive.Int.write(this.qts));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateBotMessageReactions = UpdateBotMessageReactions;
  class UpdateSavedDialogPinned extends TLObject {
    pinned;
    peer;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateSavedDialogPinned';
      this.constructorId = 2930744948;
      this.subclassOfId = 2676568142;
      this._slots = ['pinned', 'peer'];
      this.pinned = params.pinned;
      this.peer = params.peer;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let pinned = flags & (1 << 0) ? true : false;
      let peer = await TLObject.read(b);
      return new Raw2.UpdateSavedDialogPinned({ pinned, peer });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.pinned ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateSavedDialogPinned = UpdateSavedDialogPinned;
  class UpdatePinnedSavedDialogs extends TLObject {
    order;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdatePinnedSavedDialogs';
      this.constructorId = 1751942566;
      this.subclassOfId = 2676568142;
      this._slots = ['order'];
      this.order = params.order;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let order = flags & (1 << 0) ? await TLObject.read(b) : [];
      return new Raw2.UpdatePinnedSavedDialogs({ order });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.order ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.order) {
        b.write(Primitive.Vector.write(this.order));
      }
      return b.buffer;
    }
  }
  Raw2.UpdatePinnedSavedDialogs = UpdatePinnedSavedDialogs;
  class UpdateSavedReactionTags extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UpdateSavedReactionTags';
      this.constructorId = 969307186;
      this.subclassOfId = 2676568142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UpdateSavedReactionTags();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UpdateSavedReactionTags = UpdateSavedReactionTags;
  class UpdateSmsJob extends TLObject {
    jobId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateSmsJob';
      this.constructorId = 4049758676;
      this.subclassOfId = 2676568142;
      this._slots = ['jobId'];
      this.jobId = params.jobId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let jobId = await Primitive.String.read(b);
      return new Raw2.UpdateSmsJob({ jobId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.jobId !== void 0) {
        b.write(Primitive.String.write(this.jobId));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateSmsJob = UpdateSmsJob;
  class UpdateQuickReplies extends TLObject {
    quickReplies;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateQuickReplies';
      this.constructorId = 4182182578;
      this.subclassOfId = 2676568142;
      this._slots = ['quickReplies'];
      this.quickReplies = params.quickReplies;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let quickReplies = await TLObject.read(b);
      return new Raw2.UpdateQuickReplies({ quickReplies });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.quickReplies) {
        b.write(Primitive.Vector.write(this.quickReplies));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateQuickReplies = UpdateQuickReplies;
  class UpdateNewQuickReply extends TLObject {
    quickReply;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateNewQuickReply';
      this.constructorId = 4114458391;
      this.subclassOfId = 2676568142;
      this._slots = ['quickReply'];
      this.quickReply = params.quickReply;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let quickReply = await TLObject.read(b);
      return new Raw2.UpdateNewQuickReply({ quickReply });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.quickReply !== void 0) {
        b.write(this.quickReply.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateNewQuickReply = UpdateNewQuickReply;
  class UpdateDeleteQuickReply extends TLObject {
    shortcutId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateDeleteQuickReply';
      this.constructorId = 1407644140;
      this.subclassOfId = 2676568142;
      this._slots = ['shortcutId'];
      this.shortcutId = params.shortcutId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let shortcutId = await Primitive.Int.read(b);
      return new Raw2.UpdateDeleteQuickReply({ shortcutId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.shortcutId !== void 0) {
        b.write(Primitive.Int.write(this.shortcutId));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateDeleteQuickReply = UpdateDeleteQuickReply;
  class UpdateQuickReplyMessage extends TLObject {
    message;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateQuickReplyMessage';
      this.constructorId = 1040518415;
      this.subclassOfId = 2676568142;
      this._slots = ['message'];
      this.message = params.message;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let message = await TLObject.read(b);
      return new Raw2.UpdateQuickReplyMessage({ message });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.message !== void 0) {
        b.write(this.message.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateQuickReplyMessage = UpdateQuickReplyMessage;
  class UpdateDeleteQuickReplyMessages extends TLObject {
    shortcutId;
    messages;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateDeleteQuickReplyMessages';
      this.constructorId = 1450174413;
      this.subclassOfId = 2676568142;
      this._slots = ['shortcutId', 'messages'];
      this.shortcutId = params.shortcutId;
      this.messages = params.messages;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let shortcutId = await Primitive.Int.read(b);
      let messages2 = await TLObject.read(b, Primitive.Int);
      return new Raw2.UpdateDeleteQuickReplyMessages({ shortcutId, messages: messages2 });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.shortcutId !== void 0) {
        b.write(Primitive.Int.write(this.shortcutId));
      }
      if (this.messages) {
        b.write(Primitive.Vector.write(this.messages, Primitive.Int));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateDeleteQuickReplyMessages = UpdateDeleteQuickReplyMessages;
  class UpdateBotBusinessConnect extends TLObject {
    connection;
    qts;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateBotBusinessConnect';
      this.constructorId = 2330315130;
      this.subclassOfId = 2676568142;
      this._slots = ['connection', 'qts'];
      this.connection = params.connection;
      this.qts = params.qts;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let connection = await TLObject.read(b);
      let qts = await Primitive.Int.read(b);
      return new Raw2.UpdateBotBusinessConnect({ connection, qts });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.connection !== void 0) {
        b.write(this.connection.write());
      }
      if (this.qts !== void 0) {
        b.write(Primitive.Int.write(this.qts));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateBotBusinessConnect = UpdateBotBusinessConnect;
  class UpdateBotNewBusinessMessage extends TLObject {
    connectionId;
    message;
    replyToMessage;
    qts;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateBotNewBusinessMessage';
      this.constructorId = 2648388732;
      this.subclassOfId = 2676568142;
      this._slots = ['connectionId', 'message', 'replyToMessage', 'qts'];
      this.connectionId = params.connectionId;
      this.message = params.message;
      this.replyToMessage = params.replyToMessage;
      this.qts = params.qts;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let connectionId = await Primitive.String.read(b);
      let message = await TLObject.read(b);
      let replyToMessage = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let qts = await Primitive.Int.read(b);
      return new Raw2.UpdateBotNewBusinessMessage({
        connectionId,
        message,
        replyToMessage,
        qts,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.replyToMessage !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.connectionId !== void 0) {
        b.write(Primitive.String.write(this.connectionId));
      }
      if (this.message !== void 0) {
        b.write(this.message.write());
      }
      if (this.replyToMessage !== void 0) {
        b.write(this.replyToMessage.write());
      }
      if (this.qts !== void 0) {
        b.write(Primitive.Int.write(this.qts));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateBotNewBusinessMessage = UpdateBotNewBusinessMessage;
  class UpdateBotEditBusinessMessage extends TLObject {
    connectionId;
    message;
    replyToMessage;
    qts;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateBotEditBusinessMessage';
      this.constructorId = 132077692;
      this.subclassOfId = 2676568142;
      this._slots = ['connectionId', 'message', 'replyToMessage', 'qts'];
      this.connectionId = params.connectionId;
      this.message = params.message;
      this.replyToMessage = params.replyToMessage;
      this.qts = params.qts;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let connectionId = await Primitive.String.read(b);
      let message = await TLObject.read(b);
      let replyToMessage = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let qts = await Primitive.Int.read(b);
      return new Raw2.UpdateBotEditBusinessMessage({
        connectionId,
        message,
        replyToMessage,
        qts,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.replyToMessage !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.connectionId !== void 0) {
        b.write(Primitive.String.write(this.connectionId));
      }
      if (this.message !== void 0) {
        b.write(this.message.write());
      }
      if (this.replyToMessage !== void 0) {
        b.write(this.replyToMessage.write());
      }
      if (this.qts !== void 0) {
        b.write(Primitive.Int.write(this.qts));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateBotEditBusinessMessage = UpdateBotEditBusinessMessage;
  class UpdateBotDeleteBusinessMessage extends TLObject {
    connectionId;
    peer;
    messages;
    qts;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateBotDeleteBusinessMessage';
      this.constructorId = 2687146030;
      this.subclassOfId = 2676568142;
      this._slots = ['connectionId', 'peer', 'messages', 'qts'];
      this.connectionId = params.connectionId;
      this.peer = params.peer;
      this.messages = params.messages;
      this.qts = params.qts;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let connectionId = await Primitive.String.read(b);
      let peer = await TLObject.read(b);
      let messages2 = await TLObject.read(b, Primitive.Int);
      let qts = await Primitive.Int.read(b);
      return new Raw2.UpdateBotDeleteBusinessMessage({
        connectionId,
        peer,
        messages: messages2,
        qts,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.connectionId !== void 0) {
        b.write(Primitive.String.write(this.connectionId));
      }
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.messages) {
        b.write(Primitive.Vector.write(this.messages, Primitive.Int));
      }
      if (this.qts !== void 0) {
        b.write(Primitive.Int.write(this.qts));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateBotDeleteBusinessMessage = UpdateBotDeleteBusinessMessage;
  class UpdateNewStoryReaction extends TLObject {
    storyId;
    peer;
    reaction;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateNewStoryReaction';
      this.constructorId = 405070859;
      this.subclassOfId = 2676568142;
      this._slots = ['storyId', 'peer', 'reaction'];
      this.storyId = params.storyId;
      this.peer = params.peer;
      this.reaction = params.reaction;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let storyId = await Primitive.Int.read(b);
      let peer = await TLObject.read(b);
      let reaction = await TLObject.read(b);
      return new Raw2.UpdateNewStoryReaction({ storyId, peer, reaction });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.storyId !== void 0) {
        b.write(Primitive.Int.write(this.storyId));
      }
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.reaction !== void 0) {
        b.write(this.reaction.write());
      }
      return b.buffer;
    }
  }
  Raw2.UpdateNewStoryReaction = UpdateNewStoryReaction;
  class UpdatesTooLong extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UpdatesTooLong';
      this.constructorId = 3809980286;
      this.subclassOfId = 2331323052;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UpdatesTooLong();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UpdatesTooLong = UpdatesTooLong;
  class UpdateShortMessage extends TLObject {
    out;
    mentioned;
    mediaUnread;
    silent;
    id;
    userId;
    message;
    pts;
    ptsCount;
    date;
    fwdFrom;
    viaBotId;
    replyTo;
    entities;
    ttlPeriod;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateShortMessage';
      this.constructorId = 826001400;
      this.subclassOfId = 2331323052;
      this._slots = [
        'out',
        'mentioned',
        'mediaUnread',
        'silent',
        'id',
        'userId',
        'message',
        'pts',
        'ptsCount',
        'date',
        'fwdFrom',
        'viaBotId',
        'replyTo',
        'entities',
        'ttlPeriod',
      ];
      this.out = params.out;
      this.mentioned = params.mentioned;
      this.mediaUnread = params.mediaUnread;
      this.silent = params.silent;
      this.id = params.id;
      this.userId = params.userId;
      this.message = params.message;
      this.pts = params.pts;
      this.ptsCount = params.ptsCount;
      this.date = params.date;
      this.fwdFrom = params.fwdFrom;
      this.viaBotId = params.viaBotId;
      this.replyTo = params.replyTo;
      this.entities = params.entities;
      this.ttlPeriod = params.ttlPeriod;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let out = flags & (1 << 1) ? true : false;
      let mentioned = flags & (1 << 4) ? true : false;
      let mediaUnread = flags & (1 << 5) ? true : false;
      let silent = flags & (1 << 13) ? true : false;
      let id = await Primitive.Int.read(b);
      let userId = await Primitive.Long.read(b);
      let message = await Primitive.String.read(b);
      let pts = await Primitive.Int.read(b);
      let ptsCount = await Primitive.Int.read(b);
      let date = await Primitive.Int.read(b);
      let fwdFrom = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      let viaBotId = flags & (1 << 11) ? await Primitive.Long.read(b) : void 0;
      let replyTo = flags & (1 << 3) ? await TLObject.read(b) : void 0;
      let entities = flags & (1 << 7) ? await TLObject.read(b) : [];
      let ttlPeriod = flags & (1 << 25) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.UpdateShortMessage({
        out,
        mentioned,
        mediaUnread,
        silent,
        id,
        userId,
        message,
        pts,
        ptsCount,
        date,
        fwdFrom,
        viaBotId,
        replyTo,
        entities,
        ttlPeriod,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.out ? 1 << 1 : 0;
      flags |= this.mentioned ? 1 << 4 : 0;
      flags |= this.mediaUnread ? 1 << 5 : 0;
      flags |= this.silent ? 1 << 13 : 0;
      flags |= this.fwdFrom !== void 0 ? 1 << 2 : 0;
      flags |= this.viaBotId !== void 0 ? 1 << 11 : 0;
      flags |= this.replyTo !== void 0 ? 1 << 3 : 0;
      flags |= this.entities ? 1 << 7 : 0;
      flags |= this.ttlPeriod !== void 0 ? 1 << 25 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.ptsCount !== void 0) {
        b.write(Primitive.Int.write(this.ptsCount));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.fwdFrom !== void 0) {
        b.write(this.fwdFrom.write());
      }
      if (this.viaBotId !== void 0) {
        b.write(Primitive.Long.write(this.viaBotId));
      }
      if (this.replyTo !== void 0) {
        b.write(this.replyTo.write());
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      if (this.ttlPeriod !== void 0) {
        b.write(Primitive.Int.write(this.ttlPeriod));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateShortMessage = UpdateShortMessage;
  class UpdateShortChatMessage extends TLObject {
    out;
    mentioned;
    mediaUnread;
    silent;
    id;
    fromId;
    chatId;
    message;
    pts;
    ptsCount;
    date;
    fwdFrom;
    viaBotId;
    replyTo;
    entities;
    ttlPeriod;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateShortChatMessage';
      this.constructorId = 1299050149;
      this.subclassOfId = 2331323052;
      this._slots = [
        'out',
        'mentioned',
        'mediaUnread',
        'silent',
        'id',
        'fromId',
        'chatId',
        'message',
        'pts',
        'ptsCount',
        'date',
        'fwdFrom',
        'viaBotId',
        'replyTo',
        'entities',
        'ttlPeriod',
      ];
      this.out = params.out;
      this.mentioned = params.mentioned;
      this.mediaUnread = params.mediaUnread;
      this.silent = params.silent;
      this.id = params.id;
      this.fromId = params.fromId;
      this.chatId = params.chatId;
      this.message = params.message;
      this.pts = params.pts;
      this.ptsCount = params.ptsCount;
      this.date = params.date;
      this.fwdFrom = params.fwdFrom;
      this.viaBotId = params.viaBotId;
      this.replyTo = params.replyTo;
      this.entities = params.entities;
      this.ttlPeriod = params.ttlPeriod;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let out = flags & (1 << 1) ? true : false;
      let mentioned = flags & (1 << 4) ? true : false;
      let mediaUnread = flags & (1 << 5) ? true : false;
      let silent = flags & (1 << 13) ? true : false;
      let id = await Primitive.Int.read(b);
      let fromId = await Primitive.Long.read(b);
      let chatId = await Primitive.Long.read(b);
      let message = await Primitive.String.read(b);
      let pts = await Primitive.Int.read(b);
      let ptsCount = await Primitive.Int.read(b);
      let date = await Primitive.Int.read(b);
      let fwdFrom = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      let viaBotId = flags & (1 << 11) ? await Primitive.Long.read(b) : void 0;
      let replyTo = flags & (1 << 3) ? await TLObject.read(b) : void 0;
      let entities = flags & (1 << 7) ? await TLObject.read(b) : [];
      let ttlPeriod = flags & (1 << 25) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.UpdateShortChatMessage({
        out,
        mentioned,
        mediaUnread,
        silent,
        id,
        fromId,
        chatId,
        message,
        pts,
        ptsCount,
        date,
        fwdFrom,
        viaBotId,
        replyTo,
        entities,
        ttlPeriod,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.out ? 1 << 1 : 0;
      flags |= this.mentioned ? 1 << 4 : 0;
      flags |= this.mediaUnread ? 1 << 5 : 0;
      flags |= this.silent ? 1 << 13 : 0;
      flags |= this.fwdFrom !== void 0 ? 1 << 2 : 0;
      flags |= this.viaBotId !== void 0 ? 1 << 11 : 0;
      flags |= this.replyTo !== void 0 ? 1 << 3 : 0;
      flags |= this.entities ? 1 << 7 : 0;
      flags |= this.ttlPeriod !== void 0 ? 1 << 25 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.fromId !== void 0) {
        b.write(Primitive.Long.write(this.fromId));
      }
      if (this.chatId !== void 0) {
        b.write(Primitive.Long.write(this.chatId));
      }
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.ptsCount !== void 0) {
        b.write(Primitive.Int.write(this.ptsCount));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.fwdFrom !== void 0) {
        b.write(this.fwdFrom.write());
      }
      if (this.viaBotId !== void 0) {
        b.write(Primitive.Long.write(this.viaBotId));
      }
      if (this.replyTo !== void 0) {
        b.write(this.replyTo.write());
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      if (this.ttlPeriod !== void 0) {
        b.write(Primitive.Int.write(this.ttlPeriod));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateShortChatMessage = UpdateShortChatMessage;
  class UpdateShort extends TLObject {
    update;
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateShort';
      this.constructorId = 2027216577;
      this.subclassOfId = 2331323052;
      this._slots = ['update', 'date'];
      this.update = params.update;
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let update = await TLObject.read(b);
      let date = await Primitive.Int.read(b);
      return new Raw2.UpdateShort({ update, date });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.update !== void 0) {
        b.write(this.update.write());
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateShort = UpdateShort;
  class UpdatesCombined extends TLObject {
    updates;
    users;
    chats;
    date;
    seqStart;
    seq;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdatesCombined';
      this.constructorId = 1918567619;
      this.subclassOfId = 2331323052;
      this._slots = ['updates', 'users', 'chats', 'date', 'seqStart', 'seq'];
      this.updates = params.updates;
      this.users = params.users;
      this.chats = params.chats;
      this.date = params.date;
      this.seqStart = params.seqStart;
      this.seq = params.seq;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let updates2 = await TLObject.read(b);
      let users2 = await TLObject.read(b);
      let chats = await TLObject.read(b);
      let date = await Primitive.Int.read(b);
      let seqStart = await Primitive.Int.read(b);
      let seq = await Primitive.Int.read(b);
      return new Raw2.UpdatesCombined({
        updates: updates2,
        users: users2,
        chats,
        date,
        seqStart,
        seq,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.updates) {
        b.write(Primitive.Vector.write(this.updates));
      }
      if (this.users) {
        b.write(Primitive.Vector.write(this.users));
      }
      if (this.chats) {
        b.write(Primitive.Vector.write(this.chats));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.seqStart !== void 0) {
        b.write(Primitive.Int.write(this.seqStart));
      }
      if (this.seq !== void 0) {
        b.write(Primitive.Int.write(this.seq));
      }
      return b.buffer;
    }
  }
  Raw2.UpdatesCombined = UpdatesCombined;
  class Updates extends TLObject {
    updates;
    users;
    chats;
    date;
    seq;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Updates';
      this.constructorId = 1957577280;
      this.subclassOfId = 2331323052;
      this._slots = ['updates', 'users', 'chats', 'date', 'seq'];
      this.updates = params.updates;
      this.users = params.users;
      this.chats = params.chats;
      this.date = params.date;
      this.seq = params.seq;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let updates2 = await TLObject.read(b);
      let users2 = await TLObject.read(b);
      let chats = await TLObject.read(b);
      let date = await Primitive.Int.read(b);
      let seq = await Primitive.Int.read(b);
      return new Raw2.Updates({
        updates: updates2,
        users: users2,
        chats,
        date,
        seq,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.updates) {
        b.write(Primitive.Vector.write(this.updates));
      }
      if (this.users) {
        b.write(Primitive.Vector.write(this.users));
      }
      if (this.chats) {
        b.write(Primitive.Vector.write(this.chats));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.seq !== void 0) {
        b.write(Primitive.Int.write(this.seq));
      }
      return b.buffer;
    }
  }
  Raw2.Updates = Updates;
  class UpdateShortSentMessage extends TLObject {
    out;
    id;
    pts;
    ptsCount;
    date;
    media;
    entities;
    ttlPeriod;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UpdateShortSentMessage';
      this.constructorId = 2417352961;
      this.subclassOfId = 2331323052;
      this._slots = ['out', 'id', 'pts', 'ptsCount', 'date', 'media', 'entities', 'ttlPeriod'];
      this.out = params.out;
      this.id = params.id;
      this.pts = params.pts;
      this.ptsCount = params.ptsCount;
      this.date = params.date;
      this.media = params.media;
      this.entities = params.entities;
      this.ttlPeriod = params.ttlPeriod;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let out = flags & (1 << 1) ? true : false;
      let id = await Primitive.Int.read(b);
      let pts = await Primitive.Int.read(b);
      let ptsCount = await Primitive.Int.read(b);
      let date = await Primitive.Int.read(b);
      let media = flags & (1 << 9) ? await TLObject.read(b) : void 0;
      let entities = flags & (1 << 7) ? await TLObject.read(b) : [];
      let ttlPeriod = flags & (1 << 25) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.UpdateShortSentMessage({
        out,
        id,
        pts,
        ptsCount,
        date,
        media,
        entities,
        ttlPeriod,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.out ? 1 << 1 : 0;
      flags |= this.media !== void 0 ? 1 << 9 : 0;
      flags |= this.entities ? 1 << 7 : 0;
      flags |= this.ttlPeriod !== void 0 ? 1 << 25 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.pts !== void 0) {
        b.write(Primitive.Int.write(this.pts));
      }
      if (this.ptsCount !== void 0) {
        b.write(Primitive.Int.write(this.ptsCount));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.media !== void 0) {
        b.write(this.media.write());
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      if (this.ttlPeriod !== void 0) {
        b.write(Primitive.Int.write(this.ttlPeriod));
      }
      return b.buffer;
    }
  }
  Raw2.UpdateShortSentMessage = UpdateShortSentMessage;
  class DcOption extends TLObject {
    ipv6;
    mediaOnly;
    tcpoOnly;
    cdn;
    static;
    thisPortOnly;
    id;
    ipAddress;
    port;
    secret;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DcOption';
      this.constructorId = 414687501;
      this.subclassOfId = 2655248675;
      this._slots = [
        'ipv6',
        'mediaOnly',
        'tcpoOnly',
        'cdn',
        'static',
        'thisPortOnly',
        'id',
        'ipAddress',
        'port',
        'secret',
      ];
      this.ipv6 = params.ipv6;
      this.mediaOnly = params.mediaOnly;
      this.tcpoOnly = params.tcpoOnly;
      this.cdn = params.cdn;
      this.static = params.static;
      this.thisPortOnly = params.thisPortOnly;
      this.id = params.id;
      this.ipAddress = params.ipAddress;
      this.port = params.port;
      this.secret = params.secret;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let ipv6 = flags & (1 << 0) ? true : false;
      let mediaOnly = flags & (1 << 1) ? true : false;
      let tcpoOnly = flags & (1 << 2) ? true : false;
      let cdn = flags & (1 << 3) ? true : false;
      let _static = flags & (1 << 4) ? true : false;
      let thisPortOnly = flags & (1 << 5) ? true : false;
      let id = await Primitive.Int.read(b);
      let ipAddress = await Primitive.String.read(b);
      let port = await Primitive.Int.read(b);
      let secret = flags & (1 << 10) ? await Primitive.Bytes.read(b) : void 0;
      return new Raw2.DcOption({
        ipv6,
        mediaOnly,
        tcpoOnly,
        cdn,
        static: _static,
        thisPortOnly,
        id,
        ipAddress,
        port,
        secret,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.ipv6 ? 1 << 0 : 0;
      flags |= this.mediaOnly ? 1 << 1 : 0;
      flags |= this.tcpoOnly ? 1 << 2 : 0;
      flags |= this.cdn ? 1 << 3 : 0;
      flags |= this.static ? 1 << 4 : 0;
      flags |= this.thisPortOnly ? 1 << 5 : 0;
      flags |= this.secret !== void 0 ? 1 << 10 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.ipAddress !== void 0) {
        b.write(Primitive.String.write(this.ipAddress));
      }
      if (this.port !== void 0) {
        b.write(Primitive.Int.write(this.port));
      }
      if (this.secret !== void 0) {
        b.write(Primitive.Bytes.write(this.secret));
      }
      return b.buffer;
    }
  }
  Raw2.DcOption = DcOption;
  class Config extends TLObject {
    defaultP2pContacts;
    preloadFeaturedStickers;
    revokePmInbox;
    blockedMode;
    forceTryIpv6;
    date;
    expires;
    testMode;
    thisDc;
    dcOptions;
    dcTxtDomainName;
    chatSizeMax;
    megagroupSizeMax;
    forwardedCountMax;
    onlineUpdatePeriodMs;
    offlineBlurTimeoutMs;
    offlineIdleTimeoutMs;
    onlineCloudTimeoutMs;
    notifyCloudDelayMs;
    notifyDefaultDelayMs;
    pushChatPeriodMs;
    pushChatLimit;
    editTimeLimit;
    revokeTimeLimit;
    revokePmTimeLimit;
    ratingEDecay;
    stickersRecentLimit;
    channelsReadMediaPeriod;
    tmpSessions;
    callReceiveTimeoutMs;
    callRingTimeoutMs;
    callConnectTimeoutMs;
    callPacketTimeoutMs;
    meUrlPrefix;
    autoupdateUrlPrefix;
    gifSearchUsername;
    venueSearchUsername;
    imgSearchUsername;
    staticMapsProvider;
    captionLengthMax;
    messageLengthMax;
    webfileDcId;
    suggestedLangCode;
    langPackVersion;
    baseLangPackVersion;
    reactionsDefault;
    autologinToken;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Config';
      this.constructorId = 3424265246;
      this.subclassOfId = 3542493770;
      this._slots = [
        'defaultP2pContacts',
        'preloadFeaturedStickers',
        'revokePmInbox',
        'blockedMode',
        'forceTryIpv6',
        'date',
        'expires',
        'testMode',
        'thisDc',
        'dcOptions',
        'dcTxtDomainName',
        'chatSizeMax',
        'megagroupSizeMax',
        'forwardedCountMax',
        'onlineUpdatePeriodMs',
        'offlineBlurTimeoutMs',
        'offlineIdleTimeoutMs',
        'onlineCloudTimeoutMs',
        'notifyCloudDelayMs',
        'notifyDefaultDelayMs',
        'pushChatPeriodMs',
        'pushChatLimit',
        'editTimeLimit',
        'revokeTimeLimit',
        'revokePmTimeLimit',
        'ratingEDecay',
        'stickersRecentLimit',
        'channelsReadMediaPeriod',
        'tmpSessions',
        'callReceiveTimeoutMs',
        'callRingTimeoutMs',
        'callConnectTimeoutMs',
        'callPacketTimeoutMs',
        'meUrlPrefix',
        'autoupdateUrlPrefix',
        'gifSearchUsername',
        'venueSearchUsername',
        'imgSearchUsername',
        'staticMapsProvider',
        'captionLengthMax',
        'messageLengthMax',
        'webfileDcId',
        'suggestedLangCode',
        'langPackVersion',
        'baseLangPackVersion',
        'reactionsDefault',
        'autologinToken',
      ];
      this.defaultP2pContacts = params.defaultP2pContacts;
      this.preloadFeaturedStickers = params.preloadFeaturedStickers;
      this.revokePmInbox = params.revokePmInbox;
      this.blockedMode = params.blockedMode;
      this.forceTryIpv6 = params.forceTryIpv6;
      this.date = params.date;
      this.expires = params.expires;
      this.testMode = params.testMode;
      this.thisDc = params.thisDc;
      this.dcOptions = params.dcOptions;
      this.dcTxtDomainName = params.dcTxtDomainName;
      this.chatSizeMax = params.chatSizeMax;
      this.megagroupSizeMax = params.megagroupSizeMax;
      this.forwardedCountMax = params.forwardedCountMax;
      this.onlineUpdatePeriodMs = params.onlineUpdatePeriodMs;
      this.offlineBlurTimeoutMs = params.offlineBlurTimeoutMs;
      this.offlineIdleTimeoutMs = params.offlineIdleTimeoutMs;
      this.onlineCloudTimeoutMs = params.onlineCloudTimeoutMs;
      this.notifyCloudDelayMs = params.notifyCloudDelayMs;
      this.notifyDefaultDelayMs = params.notifyDefaultDelayMs;
      this.pushChatPeriodMs = params.pushChatPeriodMs;
      this.pushChatLimit = params.pushChatLimit;
      this.editTimeLimit = params.editTimeLimit;
      this.revokeTimeLimit = params.revokeTimeLimit;
      this.revokePmTimeLimit = params.revokePmTimeLimit;
      this.ratingEDecay = params.ratingEDecay;
      this.stickersRecentLimit = params.stickersRecentLimit;
      this.channelsReadMediaPeriod = params.channelsReadMediaPeriod;
      this.tmpSessions = params.tmpSessions;
      this.callReceiveTimeoutMs = params.callReceiveTimeoutMs;
      this.callRingTimeoutMs = params.callRingTimeoutMs;
      this.callConnectTimeoutMs = params.callConnectTimeoutMs;
      this.callPacketTimeoutMs = params.callPacketTimeoutMs;
      this.meUrlPrefix = params.meUrlPrefix;
      this.autoupdateUrlPrefix = params.autoupdateUrlPrefix;
      this.gifSearchUsername = params.gifSearchUsername;
      this.venueSearchUsername = params.venueSearchUsername;
      this.imgSearchUsername = params.imgSearchUsername;
      this.staticMapsProvider = params.staticMapsProvider;
      this.captionLengthMax = params.captionLengthMax;
      this.messageLengthMax = params.messageLengthMax;
      this.webfileDcId = params.webfileDcId;
      this.suggestedLangCode = params.suggestedLangCode;
      this.langPackVersion = params.langPackVersion;
      this.baseLangPackVersion = params.baseLangPackVersion;
      this.reactionsDefault = params.reactionsDefault;
      this.autologinToken = params.autologinToken;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let defaultP2pContacts = flags & (1 << 3) ? true : false;
      let preloadFeaturedStickers = flags & (1 << 4) ? true : false;
      let revokePmInbox = flags & (1 << 6) ? true : false;
      let blockedMode = flags & (1 << 8) ? true : false;
      let forceTryIpv6 = flags & (1 << 14) ? true : false;
      let date = await Primitive.Int.read(b);
      let expires = await Primitive.Int.read(b);
      let testMode = await Primitive.Bool.read(b);
      let thisDc = await Primitive.Int.read(b);
      let dcOptions = await TLObject.read(b);
      let dcTxtDomainName = await Primitive.String.read(b);
      let chatSizeMax = await Primitive.Int.read(b);
      let megagroupSizeMax = await Primitive.Int.read(b);
      let forwardedCountMax = await Primitive.Int.read(b);
      let onlineUpdatePeriodMs = await Primitive.Int.read(b);
      let offlineBlurTimeoutMs = await Primitive.Int.read(b);
      let offlineIdleTimeoutMs = await Primitive.Int.read(b);
      let onlineCloudTimeoutMs = await Primitive.Int.read(b);
      let notifyCloudDelayMs = await Primitive.Int.read(b);
      let notifyDefaultDelayMs = await Primitive.Int.read(b);
      let pushChatPeriodMs = await Primitive.Int.read(b);
      let pushChatLimit = await Primitive.Int.read(b);
      let editTimeLimit = await Primitive.Int.read(b);
      let revokeTimeLimit = await Primitive.Int.read(b);
      let revokePmTimeLimit = await Primitive.Int.read(b);
      let ratingEDecay = await Primitive.Int.read(b);
      let stickersRecentLimit = await Primitive.Int.read(b);
      let channelsReadMediaPeriod = await Primitive.Int.read(b);
      let tmpSessions = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let callReceiveTimeoutMs = await Primitive.Int.read(b);
      let callRingTimeoutMs = await Primitive.Int.read(b);
      let callConnectTimeoutMs = await Primitive.Int.read(b);
      let callPacketTimeoutMs = await Primitive.Int.read(b);
      let meUrlPrefix = await Primitive.String.read(b);
      let autoupdateUrlPrefix = flags & (1 << 7) ? await Primitive.String.read(b) : void 0;
      let gifSearchUsername = flags & (1 << 9) ? await Primitive.String.read(b) : void 0;
      let venueSearchUsername = flags & (1 << 10) ? await Primitive.String.read(b) : void 0;
      let imgSearchUsername = flags & (1 << 11) ? await Primitive.String.read(b) : void 0;
      let staticMapsProvider = flags & (1 << 12) ? await Primitive.String.read(b) : void 0;
      let captionLengthMax = await Primitive.Int.read(b);
      let messageLengthMax = await Primitive.Int.read(b);
      let webfileDcId = await Primitive.Int.read(b);
      let suggestedLangCode = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
      let langPackVersion = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      let baseLangPackVersion = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      let reactionsDefault = flags & (1 << 15) ? await TLObject.read(b) : void 0;
      let autologinToken = flags & (1 << 16) ? await Primitive.String.read(b) : void 0;
      return new Raw2.Config({
        defaultP2pContacts,
        preloadFeaturedStickers,
        revokePmInbox,
        blockedMode,
        forceTryIpv6,
        date,
        expires,
        testMode,
        thisDc,
        dcOptions,
        dcTxtDomainName,
        chatSizeMax,
        megagroupSizeMax,
        forwardedCountMax,
        onlineUpdatePeriodMs,
        offlineBlurTimeoutMs,
        offlineIdleTimeoutMs,
        onlineCloudTimeoutMs,
        notifyCloudDelayMs,
        notifyDefaultDelayMs,
        pushChatPeriodMs,
        pushChatLimit,
        editTimeLimit,
        revokeTimeLimit,
        revokePmTimeLimit,
        ratingEDecay,
        stickersRecentLimit,
        channelsReadMediaPeriod,
        tmpSessions,
        callReceiveTimeoutMs,
        callRingTimeoutMs,
        callConnectTimeoutMs,
        callPacketTimeoutMs,
        meUrlPrefix,
        autoupdateUrlPrefix,
        gifSearchUsername,
        venueSearchUsername,
        imgSearchUsername,
        staticMapsProvider,
        captionLengthMax,
        messageLengthMax,
        webfileDcId,
        suggestedLangCode,
        langPackVersion,
        baseLangPackVersion,
        reactionsDefault,
        autologinToken,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.defaultP2pContacts ? 1 << 3 : 0;
      flags |= this.preloadFeaturedStickers ? 1 << 4 : 0;
      flags |= this.revokePmInbox ? 1 << 6 : 0;
      flags |= this.blockedMode ? 1 << 8 : 0;
      flags |= this.forceTryIpv6 ? 1 << 14 : 0;
      flags |= this.tmpSessions !== void 0 ? 1 << 0 : 0;
      flags |= this.autoupdateUrlPrefix !== void 0 ? 1 << 7 : 0;
      flags |= this.gifSearchUsername !== void 0 ? 1 << 9 : 0;
      flags |= this.venueSearchUsername !== void 0 ? 1 << 10 : 0;
      flags |= this.imgSearchUsername !== void 0 ? 1 << 11 : 0;
      flags |= this.staticMapsProvider !== void 0 ? 1 << 12 : 0;
      flags |= this.suggestedLangCode !== void 0 ? 1 << 2 : 0;
      flags |= this.langPackVersion !== void 0 ? 1 << 2 : 0;
      flags |= this.baseLangPackVersion !== void 0 ? 1 << 2 : 0;
      flags |= this.reactionsDefault !== void 0 ? 1 << 15 : 0;
      flags |= this.autologinToken !== void 0 ? 1 << 16 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.expires !== void 0) {
        b.write(Primitive.Int.write(this.expires));
      }
      if (this.testMode !== void 0) {
        b.write(Primitive.Bool.write(this.testMode));
      }
      if (this.thisDc !== void 0) {
        b.write(Primitive.Int.write(this.thisDc));
      }
      if (this.dcOptions) {
        b.write(Primitive.Vector.write(this.dcOptions));
      }
      if (this.dcTxtDomainName !== void 0) {
        b.write(Primitive.String.write(this.dcTxtDomainName));
      }
      if (this.chatSizeMax !== void 0) {
        b.write(Primitive.Int.write(this.chatSizeMax));
      }
      if (this.megagroupSizeMax !== void 0) {
        b.write(Primitive.Int.write(this.megagroupSizeMax));
      }
      if (this.forwardedCountMax !== void 0) {
        b.write(Primitive.Int.write(this.forwardedCountMax));
      }
      if (this.onlineUpdatePeriodMs !== void 0) {
        b.write(Primitive.Int.write(this.onlineUpdatePeriodMs));
      }
      if (this.offlineBlurTimeoutMs !== void 0) {
        b.write(Primitive.Int.write(this.offlineBlurTimeoutMs));
      }
      if (this.offlineIdleTimeoutMs !== void 0) {
        b.write(Primitive.Int.write(this.offlineIdleTimeoutMs));
      }
      if (this.onlineCloudTimeoutMs !== void 0) {
        b.write(Primitive.Int.write(this.onlineCloudTimeoutMs));
      }
      if (this.notifyCloudDelayMs !== void 0) {
        b.write(Primitive.Int.write(this.notifyCloudDelayMs));
      }
      if (this.notifyDefaultDelayMs !== void 0) {
        b.write(Primitive.Int.write(this.notifyDefaultDelayMs));
      }
      if (this.pushChatPeriodMs !== void 0) {
        b.write(Primitive.Int.write(this.pushChatPeriodMs));
      }
      if (this.pushChatLimit !== void 0) {
        b.write(Primitive.Int.write(this.pushChatLimit));
      }
      if (this.editTimeLimit !== void 0) {
        b.write(Primitive.Int.write(this.editTimeLimit));
      }
      if (this.revokeTimeLimit !== void 0) {
        b.write(Primitive.Int.write(this.revokeTimeLimit));
      }
      if (this.revokePmTimeLimit !== void 0) {
        b.write(Primitive.Int.write(this.revokePmTimeLimit));
      }
      if (this.ratingEDecay !== void 0) {
        b.write(Primitive.Int.write(this.ratingEDecay));
      }
      if (this.stickersRecentLimit !== void 0) {
        b.write(Primitive.Int.write(this.stickersRecentLimit));
      }
      if (this.channelsReadMediaPeriod !== void 0) {
        b.write(Primitive.Int.write(this.channelsReadMediaPeriod));
      }
      if (this.tmpSessions !== void 0) {
        b.write(Primitive.Int.write(this.tmpSessions));
      }
      if (this.callReceiveTimeoutMs !== void 0) {
        b.write(Primitive.Int.write(this.callReceiveTimeoutMs));
      }
      if (this.callRingTimeoutMs !== void 0) {
        b.write(Primitive.Int.write(this.callRingTimeoutMs));
      }
      if (this.callConnectTimeoutMs !== void 0) {
        b.write(Primitive.Int.write(this.callConnectTimeoutMs));
      }
      if (this.callPacketTimeoutMs !== void 0) {
        b.write(Primitive.Int.write(this.callPacketTimeoutMs));
      }
      if (this.meUrlPrefix !== void 0) {
        b.write(Primitive.String.write(this.meUrlPrefix));
      }
      if (this.autoupdateUrlPrefix !== void 0) {
        b.write(Primitive.String.write(this.autoupdateUrlPrefix));
      }
      if (this.gifSearchUsername !== void 0) {
        b.write(Primitive.String.write(this.gifSearchUsername));
      }
      if (this.venueSearchUsername !== void 0) {
        b.write(Primitive.String.write(this.venueSearchUsername));
      }
      if (this.imgSearchUsername !== void 0) {
        b.write(Primitive.String.write(this.imgSearchUsername));
      }
      if (this.staticMapsProvider !== void 0) {
        b.write(Primitive.String.write(this.staticMapsProvider));
      }
      if (this.captionLengthMax !== void 0) {
        b.write(Primitive.Int.write(this.captionLengthMax));
      }
      if (this.messageLengthMax !== void 0) {
        b.write(Primitive.Int.write(this.messageLengthMax));
      }
      if (this.webfileDcId !== void 0) {
        b.write(Primitive.Int.write(this.webfileDcId));
      }
      if (this.suggestedLangCode !== void 0) {
        b.write(Primitive.String.write(this.suggestedLangCode));
      }
      if (this.langPackVersion !== void 0) {
        b.write(Primitive.Int.write(this.langPackVersion));
      }
      if (this.baseLangPackVersion !== void 0) {
        b.write(Primitive.Int.write(this.baseLangPackVersion));
      }
      if (this.reactionsDefault !== void 0) {
        b.write(this.reactionsDefault.write());
      }
      if (this.autologinToken !== void 0) {
        b.write(Primitive.String.write(this.autologinToken));
      }
      return b.buffer;
    }
  }
  Raw2.Config = Config;
  class NearestDc extends TLObject {
    country;
    thisDc;
    nearestDc;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'NearestDc';
      this.constructorId = 2384074613;
      this.subclassOfId = 947323999;
      this._slots = ['country', 'thisDc', 'nearestDc'];
      this.country = params.country;
      this.thisDc = params.thisDc;
      this.nearestDc = params.nearestDc;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let country = await Primitive.String.read(b);
      let thisDc = await Primitive.Int.read(b);
      let nearestDc = await Primitive.Int.read(b);
      return new Raw2.NearestDc({ country, thisDc, nearestDc });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.country !== void 0) {
        b.write(Primitive.String.write(this.country));
      }
      if (this.thisDc !== void 0) {
        b.write(Primitive.Int.write(this.thisDc));
      }
      if (this.nearestDc !== void 0) {
        b.write(Primitive.Int.write(this.nearestDc));
      }
      return b.buffer;
    }
  }
  Raw2.NearestDc = NearestDc;
  class EncryptedChatEmpty extends TLObject {
    id;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EncryptedChatEmpty';
      this.constructorId = 2877210784;
      this.subclassOfId = 1831379834;
      this._slots = ['id'];
      this.id = params.id;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Int.read(b);
      return new Raw2.EncryptedChatEmpty({ id });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      return b.buffer;
    }
  }
  Raw2.EncryptedChatEmpty = EncryptedChatEmpty;
  class EncryptedChatWaiting extends TLObject {
    id;
    accessHash;
    date;
    adminId;
    participantId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EncryptedChatWaiting';
      this.constructorId = 1722964307;
      this.subclassOfId = 1831379834;
      this._slots = ['id', 'accessHash', 'date', 'adminId', 'participantId'];
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.date = params.date;
      this.adminId = params.adminId;
      this.participantId = params.participantId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Int.read(b);
      let accessHash = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let adminId = await Primitive.Long.read(b);
      let participantId = await Primitive.Long.read(b);
      return new Raw2.EncryptedChatWaiting({
        id,
        accessHash,
        date,
        adminId,
        participantId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.adminId !== void 0) {
        b.write(Primitive.Long.write(this.adminId));
      }
      if (this.participantId !== void 0) {
        b.write(Primitive.Long.write(this.participantId));
      }
      return b.buffer;
    }
  }
  Raw2.EncryptedChatWaiting = EncryptedChatWaiting;
  class EncryptedChatRequested extends TLObject {
    folderId;
    id;
    accessHash;
    date;
    adminId;
    participantId;
    gA;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EncryptedChatRequested';
      this.constructorId = 1223809356;
      this.subclassOfId = 1831379834;
      this._slots = ['folderId', 'id', 'accessHash', 'date', 'adminId', 'participantId', 'gA'];
      this.folderId = params.folderId;
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.date = params.date;
      this.adminId = params.adminId;
      this.participantId = params.participantId;
      this.gA = params.gA;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let folderId = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let id = await Primitive.Int.read(b);
      let accessHash = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let adminId = await Primitive.Long.read(b);
      let participantId = await Primitive.Long.read(b);
      let gA = await Primitive.Bytes.read(b);
      return new Raw2.EncryptedChatRequested({
        folderId,
        id,
        accessHash,
        date,
        adminId,
        participantId,
        gA,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.folderId !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.folderId !== void 0) {
        b.write(Primitive.Int.write(this.folderId));
      }
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.adminId !== void 0) {
        b.write(Primitive.Long.write(this.adminId));
      }
      if (this.participantId !== void 0) {
        b.write(Primitive.Long.write(this.participantId));
      }
      if (this.gA !== void 0) {
        b.write(Primitive.Bytes.write(this.gA));
      }
      return b.buffer;
    }
  }
  Raw2.EncryptedChatRequested = EncryptedChatRequested;
  class EncryptedChat extends TLObject {
    id;
    accessHash;
    date;
    adminId;
    participantId;
    gAOrB;
    keyFingerprint;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EncryptedChat';
      this.constructorId = 1643173063;
      this.subclassOfId = 1831379834;
      this._slots = [
        'id',
        'accessHash',
        'date',
        'adminId',
        'participantId',
        'gAOrB',
        'keyFingerprint',
      ];
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.date = params.date;
      this.adminId = params.adminId;
      this.participantId = params.participantId;
      this.gAOrB = params.gAOrB;
      this.keyFingerprint = params.keyFingerprint;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Int.read(b);
      let accessHash = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let adminId = await Primitive.Long.read(b);
      let participantId = await Primitive.Long.read(b);
      let gAOrB = await Primitive.Bytes.read(b);
      let keyFingerprint = await Primitive.Long.read(b);
      return new Raw2.EncryptedChat({
        id,
        accessHash,
        date,
        adminId,
        participantId,
        gAOrB,
        keyFingerprint,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.adminId !== void 0) {
        b.write(Primitive.Long.write(this.adminId));
      }
      if (this.participantId !== void 0) {
        b.write(Primitive.Long.write(this.participantId));
      }
      if (this.gAOrB !== void 0) {
        b.write(Primitive.Bytes.write(this.gAOrB));
      }
      if (this.keyFingerprint !== void 0) {
        b.write(Primitive.Long.write(this.keyFingerprint));
      }
      return b.buffer;
    }
  }
  Raw2.EncryptedChat = EncryptedChat;
  class EncryptedChatDiscarded extends TLObject {
    historyDeleted;
    id;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EncryptedChatDiscarded';
      this.constructorId = 505183301;
      this.subclassOfId = 1831379834;
      this._slots = ['historyDeleted', 'id'];
      this.historyDeleted = params.historyDeleted;
      this.id = params.id;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let historyDeleted = flags & (1 << 0) ? true : false;
      let id = await Primitive.Int.read(b);
      return new Raw2.EncryptedChatDiscarded({ historyDeleted, id });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.historyDeleted ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      return b.buffer;
    }
  }
  Raw2.EncryptedChatDiscarded = EncryptedChatDiscarded;
  class InputEncryptedChat extends TLObject {
    chatId;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputEncryptedChat';
      this.constructorId = 4047615457;
      this.subclassOfId = 1819674304;
      this._slots = ['chatId', 'accessHash'];
      this.chatId = params.chatId;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chatId = await Primitive.Int.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputEncryptedChat({ chatId, accessHash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chatId !== void 0) {
        b.write(Primitive.Int.write(this.chatId));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputEncryptedChat = InputEncryptedChat;
  class EncryptedFileEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'EncryptedFileEmpty';
      this.constructorId = 3256830334;
      this.subclassOfId = 2217371584;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.EncryptedFileEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.EncryptedFileEmpty = EncryptedFileEmpty;
  class EncryptedFile extends TLObject {
    id;
    accessHash;
    size;
    dcId;
    keyFingerprint;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EncryptedFile';
      this.constructorId = 2818608344;
      this.subclassOfId = 2217371584;
      this._slots = ['id', 'accessHash', 'size', 'dcId', 'keyFingerprint'];
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.size = params.size;
      this.dcId = params.dcId;
      this.keyFingerprint = params.keyFingerprint;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let size = await Primitive.Long.read(b);
      let dcId = await Primitive.Int.read(b);
      let keyFingerprint = await Primitive.Int.read(b);
      return new Raw2.EncryptedFile({
        id,
        accessHash,
        size,
        dcId,
        keyFingerprint,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Long.write(this.size));
      }
      if (this.dcId !== void 0) {
        b.write(Primitive.Int.write(this.dcId));
      }
      if (this.keyFingerprint !== void 0) {
        b.write(Primitive.Int.write(this.keyFingerprint));
      }
      return b.buffer;
    }
  }
  Raw2.EncryptedFile = EncryptedFile;
  class InputEncryptedFileEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputEncryptedFileEmpty';
      this.constructorId = 406307684;
      this.subclassOfId = 2239021690;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputEncryptedFileEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputEncryptedFileEmpty = InputEncryptedFileEmpty;
  class InputEncryptedFileUploaded extends TLObject {
    id;
    parts;
    md5Checksum;
    keyFingerprint;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputEncryptedFileUploaded';
      this.constructorId = 1690108678;
      this.subclassOfId = 2239021690;
      this._slots = ['id', 'parts', 'md5Checksum', 'keyFingerprint'];
      this.id = params.id;
      this.parts = params.parts;
      this.md5Checksum = params.md5Checksum;
      this.keyFingerprint = params.keyFingerprint;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let parts = await Primitive.Int.read(b);
      let md5Checksum = await Primitive.String.read(b);
      let keyFingerprint = await Primitive.Int.read(b);
      return new Raw2.InputEncryptedFileUploaded({
        id,
        parts,
        md5Checksum,
        keyFingerprint,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.parts !== void 0) {
        b.write(Primitive.Int.write(this.parts));
      }
      if (this.md5Checksum !== void 0) {
        b.write(Primitive.String.write(this.md5Checksum));
      }
      if (this.keyFingerprint !== void 0) {
        b.write(Primitive.Int.write(this.keyFingerprint));
      }
      return b.buffer;
    }
  }
  Raw2.InputEncryptedFileUploaded = InputEncryptedFileUploaded;
  class InputEncryptedFile extends TLObject {
    id;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputEncryptedFile';
      this.constructorId = 1511503333;
      this.subclassOfId = 2239021690;
      this._slots = ['id', 'accessHash'];
      this.id = params.id;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputEncryptedFile({ id, accessHash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputEncryptedFile = InputEncryptedFile;
  class InputEncryptedFileBigUploaded extends TLObject {
    id;
    parts;
    keyFingerprint;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputEncryptedFileBigUploaded';
      this.constructorId = 767652808;
      this.subclassOfId = 2239021690;
      this._slots = ['id', 'parts', 'keyFingerprint'];
      this.id = params.id;
      this.parts = params.parts;
      this.keyFingerprint = params.keyFingerprint;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let parts = await Primitive.Int.read(b);
      let keyFingerprint = await Primitive.Int.read(b);
      return new Raw2.InputEncryptedFileBigUploaded({
        id,
        parts,
        keyFingerprint,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.parts !== void 0) {
        b.write(Primitive.Int.write(this.parts));
      }
      if (this.keyFingerprint !== void 0) {
        b.write(Primitive.Int.write(this.keyFingerprint));
      }
      return b.buffer;
    }
  }
  Raw2.InputEncryptedFileBigUploaded = InputEncryptedFileBigUploaded;
  class EncryptedMessage extends TLObject {
    randomId;
    chatId;
    date;
    bytes;
    file;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EncryptedMessage';
      this.constructorId = 3977822488;
      this.subclassOfId = 597634641;
      this._slots = ['randomId', 'chatId', 'date', 'bytes', 'file'];
      this.randomId = params.randomId;
      this.chatId = params.chatId;
      this.date = params.date;
      this.bytes = params.bytes;
      this.file = params.file;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let randomId = await Primitive.Long.read(b);
      let chatId = await Primitive.Int.read(b);
      let date = await Primitive.Int.read(b);
      let bytes = await Primitive.Bytes.read(b);
      let file = await TLObject.read(b);
      return new Raw2.EncryptedMessage({
        randomId,
        chatId,
        date,
        bytes,
        file,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.randomId !== void 0) {
        b.write(Primitive.Long.write(this.randomId));
      }
      if (this.chatId !== void 0) {
        b.write(Primitive.Int.write(this.chatId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.bytes !== void 0) {
        b.write(Primitive.Bytes.write(this.bytes));
      }
      if (this.file !== void 0) {
        b.write(this.file.write());
      }
      return b.buffer;
    }
  }
  Raw2.EncryptedMessage = EncryptedMessage;
  class EncryptedMessageService extends TLObject {
    randomId;
    chatId;
    date;
    bytes;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EncryptedMessageService';
      this.constructorId = 594758406;
      this.subclassOfId = 597634641;
      this._slots = ['randomId', 'chatId', 'date', 'bytes'];
      this.randomId = params.randomId;
      this.chatId = params.chatId;
      this.date = params.date;
      this.bytes = params.bytes;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let randomId = await Primitive.Long.read(b);
      let chatId = await Primitive.Int.read(b);
      let date = await Primitive.Int.read(b);
      let bytes = await Primitive.Bytes.read(b);
      return new Raw2.EncryptedMessageService({
        randomId,
        chatId,
        date,
        bytes,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.randomId !== void 0) {
        b.write(Primitive.Long.write(this.randomId));
      }
      if (this.chatId !== void 0) {
        b.write(Primitive.Int.write(this.chatId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.bytes !== void 0) {
        b.write(Primitive.Bytes.write(this.bytes));
      }
      return b.buffer;
    }
  }
  Raw2.EncryptedMessageService = EncryptedMessageService;
  class InputDocumentEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputDocumentEmpty';
      this.constructorId = 1928391342;
      this.subclassOfId = 4081048424;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputDocumentEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputDocumentEmpty = InputDocumentEmpty;
  class InputDocument extends TLObject {
    id;
    accessHash;
    fileReference;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputDocument';
      this.constructorId = 448771445;
      this.subclassOfId = 4081048424;
      this._slots = ['id', 'accessHash', 'fileReference'];
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.fileReference = params.fileReference;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let fileReference = await Primitive.Bytes.read(b);
      return new Raw2.InputDocument({
        id,
        accessHash,
        fileReference,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.fileReference !== void 0) {
        b.write(Primitive.Bytes.write(this.fileReference));
      }
      return b.buffer;
    }
  }
  Raw2.InputDocument = InputDocument;
  class DocumentEmpty extends TLObject {
    id;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DocumentEmpty';
      this.constructorId = 922273905;
      this.subclassOfId = 555739168;
      this._slots = ['id'];
      this.id = params.id;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      return new Raw2.DocumentEmpty({ id });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      return b.buffer;
    }
  }
  Raw2.DocumentEmpty = DocumentEmpty;
  class Document extends TLObject {
    id;
    accessHash;
    fileReference;
    date;
    mimeType;
    size;
    thumbs;
    videoThumbs;
    dcId;
    attributes;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Document';
      this.constructorId = 2413085912;
      this.subclassOfId = 555739168;
      this._slots = [
        'id',
        'accessHash',
        'fileReference',
        'date',
        'mimeType',
        'size',
        'thumbs',
        'videoThumbs',
        'dcId',
        'attributes',
      ];
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.fileReference = params.fileReference;
      this.date = params.date;
      this.mimeType = params.mimeType;
      this.size = params.size;
      this.thumbs = params.thumbs;
      this.videoThumbs = params.videoThumbs;
      this.dcId = params.dcId;
      this.attributes = params.attributes;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let fileReference = await Primitive.Bytes.read(b);
      let date = await Primitive.Int.read(b);
      let mimeType = await Primitive.String.read(b);
      let size = await Primitive.Long.read(b);
      let thumbs = flags & (1 << 0) ? await TLObject.read(b) : [];
      let videoThumbs = flags & (1 << 1) ? await TLObject.read(b) : [];
      let dcId = await Primitive.Int.read(b);
      let attributes = await TLObject.read(b);
      return new Raw2.Document({
        id,
        accessHash,
        fileReference,
        date,
        mimeType,
        size,
        thumbs,
        videoThumbs,
        dcId,
        attributes,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.thumbs ? 1 << 0 : 0;
      flags |= this.videoThumbs ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.fileReference !== void 0) {
        b.write(Primitive.Bytes.write(this.fileReference));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.mimeType !== void 0) {
        b.write(Primitive.String.write(this.mimeType));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Long.write(this.size));
      }
      if (this.thumbs) {
        b.write(Primitive.Vector.write(this.thumbs));
      }
      if (this.videoThumbs) {
        b.write(Primitive.Vector.write(this.videoThumbs));
      }
      if (this.dcId !== void 0) {
        b.write(Primitive.Int.write(this.dcId));
      }
      if (this.attributes) {
        b.write(Primitive.Vector.write(this.attributes));
      }
      return b.buffer;
    }
  }
  Raw2.Document = Document;
  class NotifyPeer extends TLObject {
    peer;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'NotifyPeer';
      this.constructorId = 2681474008;
      this.subclassOfId = 3756548142;
      this._slots = ['peer'];
      this.peer = params.peer;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      return new Raw2.NotifyPeer({ peer });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      return b.buffer;
    }
  }
  Raw2.NotifyPeer = NotifyPeer;
  class NotifyUsers extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'NotifyUsers';
      this.constructorId = 3033021260;
      this.subclassOfId = 3756548142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.NotifyUsers();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.NotifyUsers = NotifyUsers;
  class NotifyChats extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'NotifyChats';
      this.constructorId = 3221737155;
      this.subclassOfId = 3756548142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.NotifyChats();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.NotifyChats = NotifyChats;
  class NotifyBroadcasts extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'NotifyBroadcasts';
      this.constructorId = 3591563503;
      this.subclassOfId = 3756548142;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.NotifyBroadcasts();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.NotifyBroadcasts = NotifyBroadcasts;
  class NotifyForumTopic extends TLObject {
    peer;
    topMsgId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'NotifyForumTopic';
      this.constructorId = 577659656;
      this.subclassOfId = 3756548142;
      this._slots = ['peer', 'topMsgId'];
      this.peer = params.peer;
      this.topMsgId = params.topMsgId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let topMsgId = await Primitive.Int.read(b);
      return new Raw2.NotifyForumTopic({ peer, topMsgId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.topMsgId !== void 0) {
        b.write(Primitive.Int.write(this.topMsgId));
      }
      return b.buffer;
    }
  }
  Raw2.NotifyForumTopic = NotifyForumTopic;
  class SendMessageTypingAction extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SendMessageTypingAction';
      this.constructorId = 381645902;
      this.subclassOfId = 548588577;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SendMessageTypingAction();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SendMessageTypingAction = SendMessageTypingAction;
  class SendMessageCancelAction extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SendMessageCancelAction';
      this.constructorId = 4250847477;
      this.subclassOfId = 548588577;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SendMessageCancelAction();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SendMessageCancelAction = SendMessageCancelAction;
  class SendMessageRecordVideoAction extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SendMessageRecordVideoAction';
      this.constructorId = 2710034031;
      this.subclassOfId = 548588577;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SendMessageRecordVideoAction();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SendMessageRecordVideoAction = SendMessageRecordVideoAction;
  class SendMessageUploadVideoAction extends TLObject {
    progress;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SendMessageUploadVideoAction';
      this.constructorId = 3916839660;
      this.subclassOfId = 548588577;
      this._slots = ['progress'];
      this.progress = params.progress;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let progress = await Primitive.Int.read(b);
      return new Raw2.SendMessageUploadVideoAction({ progress });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.progress !== void 0) {
        b.write(Primitive.Int.write(this.progress));
      }
      return b.buffer;
    }
  }
  Raw2.SendMessageUploadVideoAction = SendMessageUploadVideoAction;
  class SendMessageRecordAudioAction extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SendMessageRecordAudioAction';
      this.constructorId = 3576656887;
      this.subclassOfId = 548588577;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SendMessageRecordAudioAction();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SendMessageRecordAudioAction = SendMessageRecordAudioAction;
  class SendMessageUploadAudioAction extends TLObject {
    progress;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SendMessageUploadAudioAction';
      this.constructorId = 4082227115;
      this.subclassOfId = 548588577;
      this._slots = ['progress'];
      this.progress = params.progress;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let progress = await Primitive.Int.read(b);
      return new Raw2.SendMessageUploadAudioAction({ progress });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.progress !== void 0) {
        b.write(Primitive.Int.write(this.progress));
      }
      return b.buffer;
    }
  }
  Raw2.SendMessageUploadAudioAction = SendMessageUploadAudioAction;
  class SendMessageUploadPhotoAction extends TLObject {
    progress;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SendMessageUploadPhotoAction';
      this.constructorId = 3520285222;
      this.subclassOfId = 548588577;
      this._slots = ['progress'];
      this.progress = params.progress;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let progress = await Primitive.Int.read(b);
      return new Raw2.SendMessageUploadPhotoAction({ progress });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.progress !== void 0) {
        b.write(Primitive.Int.write(this.progress));
      }
      return b.buffer;
    }
  }
  Raw2.SendMessageUploadPhotoAction = SendMessageUploadPhotoAction;
  class SendMessageUploadDocumentAction extends TLObject {
    progress;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SendMessageUploadDocumentAction';
      this.constructorId = 2852968932;
      this.subclassOfId = 548588577;
      this._slots = ['progress'];
      this.progress = params.progress;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let progress = await Primitive.Int.read(b);
      return new Raw2.SendMessageUploadDocumentAction({ progress });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.progress !== void 0) {
        b.write(Primitive.Int.write(this.progress));
      }
      return b.buffer;
    }
  }
  Raw2.SendMessageUploadDocumentAction = SendMessageUploadDocumentAction;
  class SendMessageGeoLocationAction extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SendMessageGeoLocationAction';
      this.constructorId = 393186209;
      this.subclassOfId = 548588577;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SendMessageGeoLocationAction();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SendMessageGeoLocationAction = SendMessageGeoLocationAction;
  class SendMessageChooseContactAction extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SendMessageChooseContactAction';
      this.constructorId = 1653390447;
      this.subclassOfId = 548588577;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SendMessageChooseContactAction();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SendMessageChooseContactAction = SendMessageChooseContactAction;
  class SendMessageGamePlayAction extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SendMessageGamePlayAction';
      this.constructorId = 3714748232;
      this.subclassOfId = 548588577;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SendMessageGamePlayAction();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SendMessageGamePlayAction = SendMessageGamePlayAction;
  class SendMessageRecordRoundAction extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SendMessageRecordRoundAction';
      this.constructorId = 2297593788;
      this.subclassOfId = 548588577;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SendMessageRecordRoundAction();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SendMessageRecordRoundAction = SendMessageRecordRoundAction;
  class SendMessageUploadRoundAction extends TLObject {
    progress;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SendMessageUploadRoundAction';
      this.constructorId = 608050278;
      this.subclassOfId = 548588577;
      this._slots = ['progress'];
      this.progress = params.progress;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let progress = await Primitive.Int.read(b);
      return new Raw2.SendMessageUploadRoundAction({ progress });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.progress !== void 0) {
        b.write(Primitive.Int.write(this.progress));
      }
      return b.buffer;
    }
  }
  Raw2.SendMessageUploadRoundAction = SendMessageUploadRoundAction;
  class SpeakingInGroupCallAction extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SpeakingInGroupCallAction';
      this.constructorId = 3643548293;
      this.subclassOfId = 548588577;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SpeakingInGroupCallAction();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SpeakingInGroupCallAction = SpeakingInGroupCallAction;
  class SendMessageHistoryImportAction extends TLObject {
    progress;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SendMessageHistoryImportAction';
      this.constructorId = 3688534598;
      this.subclassOfId = 548588577;
      this._slots = ['progress'];
      this.progress = params.progress;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let progress = await Primitive.Int.read(b);
      return new Raw2.SendMessageHistoryImportAction({ progress });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.progress !== void 0) {
        b.write(Primitive.Int.write(this.progress));
      }
      return b.buffer;
    }
  }
  Raw2.SendMessageHistoryImportAction = SendMessageHistoryImportAction;
  class SendMessageChooseStickerAction extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SendMessageChooseStickerAction';
      this.constructorId = 2958739121;
      this.subclassOfId = 548588577;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SendMessageChooseStickerAction();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SendMessageChooseStickerAction = SendMessageChooseStickerAction;
  class SendMessageEmojiInteraction extends TLObject {
    emoticon;
    msgId;
    interaction;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SendMessageEmojiInteraction';
      this.constructorId = 630664139;
      this.subclassOfId = 548588577;
      this._slots = ['emoticon', 'msgId', 'interaction'];
      this.emoticon = params.emoticon;
      this.msgId = params.msgId;
      this.interaction = params.interaction;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let emoticon = await Primitive.String.read(b);
      let msgId = await Primitive.Int.read(b);
      let interaction = await TLObject.read(b);
      return new Raw2.SendMessageEmojiInteraction({
        emoticon,
        msgId,
        interaction,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.emoticon !== void 0) {
        b.write(Primitive.String.write(this.emoticon));
      }
      if (this.msgId !== void 0) {
        b.write(Primitive.Int.write(this.msgId));
      }
      if (this.interaction !== void 0) {
        b.write(this.interaction.write());
      }
      return b.buffer;
    }
  }
  Raw2.SendMessageEmojiInteraction = SendMessageEmojiInteraction;
  class SendMessageEmojiInteractionSeen extends TLObject {
    emoticon;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SendMessageEmojiInteractionSeen';
      this.constructorId = 3060109358;
      this.subclassOfId = 548588577;
      this._slots = ['emoticon'];
      this.emoticon = params.emoticon;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let emoticon = await Primitive.String.read(b);
      return new Raw2.SendMessageEmojiInteractionSeen({ emoticon });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.emoticon !== void 0) {
        b.write(Primitive.String.write(this.emoticon));
      }
      return b.buffer;
    }
  }
  Raw2.SendMessageEmojiInteractionSeen = SendMessageEmojiInteractionSeen;
  class InputPrivacyKeyStatusTimestamp extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyKeyStatusTimestamp';
      this.constructorId = 1335282456;
      this.subclassOfId = 87435256;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPrivacyKeyStatusTimestamp();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPrivacyKeyStatusTimestamp = InputPrivacyKeyStatusTimestamp;
  class InputPrivacyKeyChatInvite extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyKeyChatInvite';
      this.constructorId = 3187344422;
      this.subclassOfId = 87435256;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPrivacyKeyChatInvite();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPrivacyKeyChatInvite = InputPrivacyKeyChatInvite;
  class InputPrivacyKeyPhoneCall extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyKeyPhoneCall';
      this.constructorId = 4206550111;
      this.subclassOfId = 87435256;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPrivacyKeyPhoneCall();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPrivacyKeyPhoneCall = InputPrivacyKeyPhoneCall;
  class InputPrivacyKeyPhoneP2P extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyKeyPhoneP2P';
      this.constructorId = 3684593874;
      this.subclassOfId = 87435256;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPrivacyKeyPhoneP2P();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPrivacyKeyPhoneP2P = InputPrivacyKeyPhoneP2P;
  class InputPrivacyKeyForwards extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyKeyForwards';
      this.constructorId = 2765966344;
      this.subclassOfId = 87435256;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPrivacyKeyForwards();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPrivacyKeyForwards = InputPrivacyKeyForwards;
  class InputPrivacyKeyProfilePhoto extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyKeyProfilePhoto';
      this.constructorId = 1461304012;
      this.subclassOfId = 87435256;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPrivacyKeyProfilePhoto();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPrivacyKeyProfilePhoto = InputPrivacyKeyProfilePhoto;
  class InputPrivacyKeyPhoneNumber extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyKeyPhoneNumber';
      this.constructorId = 55761658;
      this.subclassOfId = 87435256;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPrivacyKeyPhoneNumber();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPrivacyKeyPhoneNumber = InputPrivacyKeyPhoneNumber;
  class InputPrivacyKeyAddedByPhone extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyKeyAddedByPhone';
      this.constructorId = 3508640733;
      this.subclassOfId = 87435256;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPrivacyKeyAddedByPhone();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPrivacyKeyAddedByPhone = InputPrivacyKeyAddedByPhone;
  class InputPrivacyKeyVoiceMessages extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyKeyVoiceMessages';
      this.constructorId = 2934349160;
      this.subclassOfId = 87435256;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPrivacyKeyVoiceMessages();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPrivacyKeyVoiceMessages = InputPrivacyKeyVoiceMessages;
  class InputPrivacyKeyAbout extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyKeyAbout';
      this.constructorId = 941870144;
      this.subclassOfId = 87435256;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPrivacyKeyAbout();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPrivacyKeyAbout = InputPrivacyKeyAbout;
  class InputPrivacyKeyBirthday extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyKeyBirthday';
      this.constructorId = 3596227020;
      this.subclassOfId = 87435256;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPrivacyKeyBirthday();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPrivacyKeyBirthday = InputPrivacyKeyBirthday;
  class PrivacyKeyStatusTimestamp extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PrivacyKeyStatusTimestamp';
      this.constructorId = 3157175088;
      this.subclassOfId = 2185646531;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PrivacyKeyStatusTimestamp();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PrivacyKeyStatusTimestamp = PrivacyKeyStatusTimestamp;
  class PrivacyKeyChatInvite extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PrivacyKeyChatInvite';
      this.constructorId = 1343122938;
      this.subclassOfId = 2185646531;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PrivacyKeyChatInvite();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PrivacyKeyChatInvite = PrivacyKeyChatInvite;
  class PrivacyKeyPhoneCall extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PrivacyKeyPhoneCall';
      this.constructorId = 1030105979;
      this.subclassOfId = 2185646531;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PrivacyKeyPhoneCall();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PrivacyKeyPhoneCall = PrivacyKeyPhoneCall;
  class PrivacyKeyPhoneP2P extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PrivacyKeyPhoneP2P';
      this.constructorId = 961092808;
      this.subclassOfId = 2185646531;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PrivacyKeyPhoneP2P();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PrivacyKeyPhoneP2P = PrivacyKeyPhoneP2P;
  class PrivacyKeyForwards extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PrivacyKeyForwards';
      this.constructorId = 1777096355;
      this.subclassOfId = 2185646531;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PrivacyKeyForwards();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PrivacyKeyForwards = PrivacyKeyForwards;
  class PrivacyKeyProfilePhoto extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PrivacyKeyProfilePhoto';
      this.constructorId = 2517966829;
      this.subclassOfId = 2185646531;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PrivacyKeyProfilePhoto();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PrivacyKeyProfilePhoto = PrivacyKeyProfilePhoto;
  class PrivacyKeyPhoneNumber extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PrivacyKeyPhoneNumber';
      this.constructorId = 3516589165;
      this.subclassOfId = 2185646531;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PrivacyKeyPhoneNumber();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PrivacyKeyPhoneNumber = PrivacyKeyPhoneNumber;
  class PrivacyKeyAddedByPhone extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PrivacyKeyAddedByPhone';
      this.constructorId = 1124062251;
      this.subclassOfId = 2185646531;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PrivacyKeyAddedByPhone();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PrivacyKeyAddedByPhone = PrivacyKeyAddedByPhone;
  class PrivacyKeyVoiceMessages extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PrivacyKeyVoiceMessages';
      this.constructorId = 110621716;
      this.subclassOfId = 2185646531;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PrivacyKeyVoiceMessages();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PrivacyKeyVoiceMessages = PrivacyKeyVoiceMessages;
  class PrivacyKeyAbout extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PrivacyKeyAbout';
      this.constructorId = 2760292193;
      this.subclassOfId = 2185646531;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PrivacyKeyAbout();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PrivacyKeyAbout = PrivacyKeyAbout;
  class PrivacyKeyBirthday extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PrivacyKeyBirthday';
      this.constructorId = 536913176;
      this.subclassOfId = 2185646531;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PrivacyKeyBirthday();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PrivacyKeyBirthday = PrivacyKeyBirthday;
  class InputPrivacyValueAllowContacts extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyValueAllowContacts';
      this.constructorId = 218751099;
      this.subclassOfId = 1513843490;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPrivacyValueAllowContacts();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPrivacyValueAllowContacts = InputPrivacyValueAllowContacts;
  class InputPrivacyValueAllowAll extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyValueAllowAll';
      this.constructorId = 407582158;
      this.subclassOfId = 1513843490;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPrivacyValueAllowAll();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPrivacyValueAllowAll = InputPrivacyValueAllowAll;
  class InputPrivacyValueAllowUsers extends TLObject {
    users;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyValueAllowUsers';
      this.constructorId = 320652927;
      this.subclassOfId = 1513843490;
      this._slots = ['users'];
      this.users = params.users;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let users2 = await TLObject.read(b);
      return new Raw2.InputPrivacyValueAllowUsers({ users: users2 });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.users) {
        b.write(Primitive.Vector.write(this.users));
      }
      return b.buffer;
    }
  }
  Raw2.InputPrivacyValueAllowUsers = InputPrivacyValueAllowUsers;
  class InputPrivacyValueDisallowContacts extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyValueDisallowContacts';
      this.constructorId = 195371015;
      this.subclassOfId = 1513843490;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPrivacyValueDisallowContacts();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPrivacyValueDisallowContacts = InputPrivacyValueDisallowContacts;
  class InputPrivacyValueDisallowAll extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyValueDisallowAll';
      this.constructorId = 3597362889;
      this.subclassOfId = 1513843490;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPrivacyValueDisallowAll();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPrivacyValueDisallowAll = InputPrivacyValueDisallowAll;
  class InputPrivacyValueDisallowUsers extends TLObject {
    users;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyValueDisallowUsers';
      this.constructorId = 2417034343;
      this.subclassOfId = 1513843490;
      this._slots = ['users'];
      this.users = params.users;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let users2 = await TLObject.read(b);
      return new Raw2.InputPrivacyValueDisallowUsers({ users: users2 });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.users) {
        b.write(Primitive.Vector.write(this.users));
      }
      return b.buffer;
    }
  }
  Raw2.InputPrivacyValueDisallowUsers = InputPrivacyValueDisallowUsers;
  class InputPrivacyValueAllowChatParticipants extends TLObject {
    chats;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyValueAllowChatParticipants';
      this.constructorId = 2215004623;
      this.subclassOfId = 1513843490;
      this._slots = ['chats'];
      this.chats = params.chats;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chats = await TLObject.read(b, Primitive.Long);
      return new Raw2.InputPrivacyValueAllowChatParticipants({ chats });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chats) {
        b.write(Primitive.Vector.write(this.chats, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.InputPrivacyValueAllowChatParticipants = InputPrivacyValueAllowChatParticipants;
  class InputPrivacyValueDisallowChatParticipants extends TLObject {
    chats;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyValueDisallowChatParticipants';
      this.constructorId = 3914272646;
      this.subclassOfId = 1513843490;
      this._slots = ['chats'];
      this.chats = params.chats;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chats = await TLObject.read(b, Primitive.Long);
      return new Raw2.InputPrivacyValueDisallowChatParticipants({ chats });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chats) {
        b.write(Primitive.Vector.write(this.chats, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.InputPrivacyValueDisallowChatParticipants = InputPrivacyValueDisallowChatParticipants;
  class InputPrivacyValueAllowCloseFriends extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyValueAllowCloseFriends';
      this.constructorId = 793067081;
      this.subclassOfId = 1513843490;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPrivacyValueAllowCloseFriends();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPrivacyValueAllowCloseFriends = InputPrivacyValueAllowCloseFriends;
  class InputPrivacyValueAllowPremium extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputPrivacyValueAllowPremium';
      this.constructorId = 2009975281;
      this.subclassOfId = 1513843490;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputPrivacyValueAllowPremium();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputPrivacyValueAllowPremium = InputPrivacyValueAllowPremium;
  class PrivacyValueAllowContacts extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PrivacyValueAllowContacts';
      this.constructorId = 4294843308;
      this.subclassOfId = 3954700912;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PrivacyValueAllowContacts();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PrivacyValueAllowContacts = PrivacyValueAllowContacts;
  class PrivacyValueAllowAll extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PrivacyValueAllowAll';
      this.constructorId = 1698855810;
      this.subclassOfId = 3954700912;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PrivacyValueAllowAll();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PrivacyValueAllowAll = PrivacyValueAllowAll;
  class PrivacyValueAllowUsers extends TLObject {
    users;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PrivacyValueAllowUsers';
      this.constructorId = 3096469426;
      this.subclassOfId = 3954700912;
      this._slots = ['users'];
      this.users = params.users;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let users2 = await TLObject.read(b, Primitive.Long);
      return new Raw2.PrivacyValueAllowUsers({ users: users2 });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.users) {
        b.write(Primitive.Vector.write(this.users, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.PrivacyValueAllowUsers = PrivacyValueAllowUsers;
  class PrivacyValueDisallowContacts extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PrivacyValueDisallowContacts';
      this.constructorId = 4169726490;
      this.subclassOfId = 3954700912;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PrivacyValueDisallowContacts();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PrivacyValueDisallowContacts = PrivacyValueDisallowContacts;
  class PrivacyValueDisallowAll extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PrivacyValueDisallowAll';
      this.constructorId = 2339628899;
      this.subclassOfId = 3954700912;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PrivacyValueDisallowAll();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PrivacyValueDisallowAll = PrivacyValueDisallowAll;
  class PrivacyValueDisallowUsers extends TLObject {
    users;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PrivacyValueDisallowUsers';
      this.constructorId = 3831632193;
      this.subclassOfId = 3954700912;
      this._slots = ['users'];
      this.users = params.users;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let users2 = await TLObject.read(b, Primitive.Long);
      return new Raw2.PrivacyValueDisallowUsers({ users: users2 });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.users) {
        b.write(Primitive.Vector.write(this.users, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.PrivacyValueDisallowUsers = PrivacyValueDisallowUsers;
  class PrivacyValueAllowChatParticipants extends TLObject {
    chats;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PrivacyValueAllowChatParticipants';
      this.constructorId = 1796427406;
      this.subclassOfId = 3954700912;
      this._slots = ['chats'];
      this.chats = params.chats;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chats = await TLObject.read(b, Primitive.Long);
      return new Raw2.PrivacyValueAllowChatParticipants({ chats });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chats) {
        b.write(Primitive.Vector.write(this.chats, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.PrivacyValueAllowChatParticipants = PrivacyValueAllowChatParticipants;
  class PrivacyValueDisallowChatParticipants extends TLObject {
    chats;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PrivacyValueDisallowChatParticipants';
      this.constructorId = 1103656293;
      this.subclassOfId = 3954700912;
      this._slots = ['chats'];
      this.chats = params.chats;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chats = await TLObject.read(b, Primitive.Long);
      return new Raw2.PrivacyValueDisallowChatParticipants({ chats });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chats) {
        b.write(Primitive.Vector.write(this.chats, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.PrivacyValueDisallowChatParticipants = PrivacyValueDisallowChatParticipants;
  class PrivacyValueAllowCloseFriends extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PrivacyValueAllowCloseFriends';
      this.constructorId = 4159232155;
      this.subclassOfId = 3954700912;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PrivacyValueAllowCloseFriends();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PrivacyValueAllowCloseFriends = PrivacyValueAllowCloseFriends;
  class PrivacyValueAllowPremium extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PrivacyValueAllowPremium';
      this.constructorId = 3974725963;
      this.subclassOfId = 3954700912;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PrivacyValueAllowPremium();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PrivacyValueAllowPremium = PrivacyValueAllowPremium;
  class AccountDaysTTL extends TLObject {
    days;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'AccountDaysTTL';
      this.constructorId = 3100684255;
      this.subclassOfId = 3131284872;
      this._slots = ['days'];
      this.days = params.days;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let days = await Primitive.Int.read(b);
      return new Raw2.AccountDaysTTL({ days });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.days !== void 0) {
        b.write(Primitive.Int.write(this.days));
      }
      return b.buffer;
    }
  }
  Raw2.AccountDaysTTL = AccountDaysTTL;
  class DocumentAttributeImageSize extends TLObject {
    w;
    h;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DocumentAttributeImageSize';
      this.constructorId = 1815593308;
      this.subclassOfId = 4146719643;
      this._slots = ['w', 'h'];
      this.w = params.w;
      this.h = params.h;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let w = await Primitive.Int.read(b);
      let h = await Primitive.Int.read(b);
      return new Raw2.DocumentAttributeImageSize({ w, h });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      return b.buffer;
    }
  }
  Raw2.DocumentAttributeImageSize = DocumentAttributeImageSize;
  class DocumentAttributeAnimated extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'DocumentAttributeAnimated';
      this.constructorId = 297109817;
      this.subclassOfId = 4146719643;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.DocumentAttributeAnimated();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.DocumentAttributeAnimated = DocumentAttributeAnimated;
  class DocumentAttributeSticker extends TLObject {
    mask;
    alt;
    stickerset;
    maskCoords;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DocumentAttributeSticker';
      this.constructorId = 1662637586;
      this.subclassOfId = 4146719643;
      this._slots = ['mask', 'alt', 'stickerset', 'maskCoords'];
      this.mask = params.mask;
      this.alt = params.alt;
      this.stickerset = params.stickerset;
      this.maskCoords = params.maskCoords;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let mask = flags & (1 << 1) ? true : false;
      let alt = await Primitive.String.read(b);
      let stickerset = await TLObject.read(b);
      let maskCoords = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      return new Raw2.DocumentAttributeSticker({
        mask,
        alt,
        stickerset,
        maskCoords,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.mask ? 1 << 1 : 0;
      flags |= this.maskCoords !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.alt !== void 0) {
        b.write(Primitive.String.write(this.alt));
      }
      if (this.stickerset !== void 0) {
        b.write(this.stickerset.write());
      }
      if (this.maskCoords !== void 0) {
        b.write(this.maskCoords.write());
      }
      return b.buffer;
    }
  }
  Raw2.DocumentAttributeSticker = DocumentAttributeSticker;
  class DocumentAttributeVideo extends TLObject {
    roundMessage;
    supportsStreaming;
    nosound;
    duration;
    w;
    h;
    preloadPrefixSize;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DocumentAttributeVideo';
      this.constructorId = 3549426114;
      this.subclassOfId = 4146719643;
      this._slots = [
        'roundMessage',
        'supportsStreaming',
        'nosound',
        'duration',
        'w',
        'h',
        'preloadPrefixSize',
      ];
      this.roundMessage = params.roundMessage;
      this.supportsStreaming = params.supportsStreaming;
      this.nosound = params.nosound;
      this.duration = params.duration;
      this.w = params.w;
      this.h = params.h;
      this.preloadPrefixSize = params.preloadPrefixSize;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let roundMessage = flags & (1 << 0) ? true : false;
      let supportsStreaming = flags & (1 << 1) ? true : false;
      let nosound = flags & (1 << 3) ? true : false;
      let duration = await Primitive.Double.read(b);
      let w = await Primitive.Int.read(b);
      let h = await Primitive.Int.read(b);
      let preloadPrefixSize = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.DocumentAttributeVideo({
        roundMessage,
        supportsStreaming,
        nosound,
        duration,
        w,
        h,
        preloadPrefixSize,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.roundMessage ? 1 << 0 : 0;
      flags |= this.supportsStreaming ? 1 << 1 : 0;
      flags |= this.nosound ? 1 << 3 : 0;
      flags |= this.preloadPrefixSize !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.duration !== void 0) {
        b.write(Primitive.Double.write(this.duration));
      }
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      if (this.preloadPrefixSize !== void 0) {
        b.write(Primitive.Int.write(this.preloadPrefixSize));
      }
      return b.buffer;
    }
  }
  Raw2.DocumentAttributeVideo = DocumentAttributeVideo;
  class DocumentAttributeAudio extends TLObject {
    voice;
    duration;
    title;
    performer;
    waveform;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DocumentAttributeAudio';
      this.constructorId = 2555574726;
      this.subclassOfId = 4146719643;
      this._slots = ['voice', 'duration', 'title', 'performer', 'waveform'];
      this.voice = params.voice;
      this.duration = params.duration;
      this.title = params.title;
      this.performer = params.performer;
      this.waveform = params.waveform;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let voice = flags & (1 << 10) ? true : false;
      let duration = await Primitive.Int.read(b);
      let title = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let performer = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let waveform = flags & (1 << 2) ? await Primitive.Bytes.read(b) : void 0;
      return new Raw2.DocumentAttributeAudio({
        voice,
        duration,
        title,
        performer,
        waveform,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.voice ? 1 << 10 : 0;
      flags |= this.title !== void 0 ? 1 << 0 : 0;
      flags |= this.performer !== void 0 ? 1 << 1 : 0;
      flags |= this.waveform !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.duration !== void 0) {
        b.write(Primitive.Int.write(this.duration));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.performer !== void 0) {
        b.write(Primitive.String.write(this.performer));
      }
      if (this.waveform !== void 0) {
        b.write(Primitive.Bytes.write(this.waveform));
      }
      return b.buffer;
    }
  }
  Raw2.DocumentAttributeAudio = DocumentAttributeAudio;
  class DocumentAttributeFilename extends TLObject {
    fileName;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DocumentAttributeFilename';
      this.constructorId = 358154344;
      this.subclassOfId = 4146719643;
      this._slots = ['fileName'];
      this.fileName = params.fileName;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let fileName = await Primitive.String.read(b);
      return new Raw2.DocumentAttributeFilename({ fileName });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.fileName !== void 0) {
        b.write(Primitive.String.write(this.fileName));
      }
      return b.buffer;
    }
  }
  Raw2.DocumentAttributeFilename = DocumentAttributeFilename;
  class DocumentAttributeHasStickers extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'DocumentAttributeHasStickers';
      this.constructorId = 2550256375;
      this.subclassOfId = 4146719643;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.DocumentAttributeHasStickers();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.DocumentAttributeHasStickers = DocumentAttributeHasStickers;
  class DocumentAttributeCustomEmoji extends TLObject {
    free;
    textColor;
    alt;
    stickerset;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DocumentAttributeCustomEmoji';
      this.constructorId = 4245985433;
      this.subclassOfId = 4146719643;
      this._slots = ['free', 'textColor', 'alt', 'stickerset'];
      this.free = params.free;
      this.textColor = params.textColor;
      this.alt = params.alt;
      this.stickerset = params.stickerset;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let free = flags & (1 << 0) ? true : false;
      let textColor = flags & (1 << 1) ? true : false;
      let alt = await Primitive.String.read(b);
      let stickerset = await TLObject.read(b);
      return new Raw2.DocumentAttributeCustomEmoji({
        free,
        textColor,
        alt,
        stickerset,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.free ? 1 << 0 : 0;
      flags |= this.textColor ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.alt !== void 0) {
        b.write(Primitive.String.write(this.alt));
      }
      if (this.stickerset !== void 0) {
        b.write(this.stickerset.write());
      }
      return b.buffer;
    }
  }
  Raw2.DocumentAttributeCustomEmoji = DocumentAttributeCustomEmoji;
  class StickerPack extends TLObject {
    emoticon;
    documents;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StickerPack';
      this.constructorId = 313694676;
      this.subclassOfId = 2683282644;
      this._slots = ['emoticon', 'documents'];
      this.emoticon = params.emoticon;
      this.documents = params.documents;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let emoticon = await Primitive.String.read(b);
      let documents = await TLObject.read(b, Primitive.Long);
      return new Raw2.StickerPack({ emoticon, documents });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.emoticon !== void 0) {
        b.write(Primitive.String.write(this.emoticon));
      }
      if (this.documents) {
        b.write(Primitive.Vector.write(this.documents, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.StickerPack = StickerPack;
  class WebPageEmpty extends TLObject {
    id;
    url;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'WebPageEmpty';
      this.constructorId = 555358088;
      this.subclassOfId = 1437168769;
      this._slots = ['id', 'url'];
      this.id = params.id;
      this.url = params.url;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let id = await Primitive.Long.read(b);
      let url = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      return new Raw2.WebPageEmpty({ id, url });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.url !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      return b.buffer;
    }
  }
  Raw2.WebPageEmpty = WebPageEmpty;
  class WebPagePending extends TLObject {
    id;
    url;
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'WebPagePending';
      this.constructorId = 2966502983;
      this.subclassOfId = 1437168769;
      this._slots = ['id', 'url', 'date'];
      this.id = params.id;
      this.url = params.url;
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let id = await Primitive.Long.read(b);
      let url = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let date = await Primitive.Int.read(b);
      return new Raw2.WebPagePending({ id, url, date });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.url !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.WebPagePending = WebPagePending;
  class WebPage extends TLObject {
    hasLargeMedia;
    id;
    url;
    displayUrl;
    hash;
    type;
    siteName;
    title;
    description;
    photo;
    embedUrl;
    embedType;
    embedWidth;
    embedHeight;
    duration;
    author;
    document;
    cachedPage;
    attributes;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'WebPage';
      this.constructorId = 3902555570;
      this.subclassOfId = 1437168769;
      this._slots = [
        'hasLargeMedia',
        'id',
        'url',
        'displayUrl',
        'hash',
        'type',
        'siteName',
        'title',
        'description',
        'photo',
        'embedUrl',
        'embedType',
        'embedWidth',
        'embedHeight',
        'duration',
        'author',
        'document',
        'cachedPage',
        'attributes',
      ];
      this.hasLargeMedia = params.hasLargeMedia;
      this.id = params.id;
      this.url = params.url;
      this.displayUrl = params.displayUrl;
      this.hash = params.hash;
      this.type = params.type;
      this.siteName = params.siteName;
      this.title = params.title;
      this.description = params.description;
      this.photo = params.photo;
      this.embedUrl = params.embedUrl;
      this.embedType = params.embedType;
      this.embedWidth = params.embedWidth;
      this.embedHeight = params.embedHeight;
      this.duration = params.duration;
      this.author = params.author;
      this.document = params.document;
      this.cachedPage = params.cachedPage;
      this.attributes = params.attributes;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let hasLargeMedia = flags & (1 << 13) ? true : false;
      let id = await Primitive.Long.read(b);
      let url = await Primitive.String.read(b);
      let displayUrl = await Primitive.String.read(b);
      let hash = await Primitive.Int.read(b);
      let type = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let siteName = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let title = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
      let description = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
      let photo = flags & (1 << 4) ? await TLObject.read(b) : void 0;
      let embedUrl = flags & (1 << 5) ? await Primitive.String.read(b) : void 0;
      let embedType = flags & (1 << 5) ? await Primitive.String.read(b) : void 0;
      let embedWidth = flags & (1 << 6) ? await Primitive.Int.read(b) : void 0;
      let embedHeight = flags & (1 << 6) ? await Primitive.Int.read(b) : void 0;
      let duration = flags & (1 << 7) ? await Primitive.Int.read(b) : void 0;
      let author = flags & (1 << 8) ? await Primitive.String.read(b) : void 0;
      let document = flags & (1 << 9) ? await TLObject.read(b) : void 0;
      let cachedPage = flags & (1 << 10) ? await TLObject.read(b) : void 0;
      let attributes = flags & (1 << 12) ? await TLObject.read(b) : [];
      return new Raw2.WebPage({
        hasLargeMedia,
        id,
        url,
        displayUrl,
        hash,
        type,
        siteName,
        title,
        description,
        photo,
        embedUrl,
        embedType,
        embedWidth,
        embedHeight,
        duration,
        author,
        document,
        cachedPage,
        attributes,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.hasLargeMedia ? 1 << 13 : 0;
      flags |= this.type !== void 0 ? 1 << 0 : 0;
      flags |= this.siteName !== void 0 ? 1 << 1 : 0;
      flags |= this.title !== void 0 ? 1 << 2 : 0;
      flags |= this.description !== void 0 ? 1 << 3 : 0;
      flags |= this.photo !== void 0 ? 1 << 4 : 0;
      flags |= this.embedUrl !== void 0 ? 1 << 5 : 0;
      flags |= this.embedType !== void 0 ? 1 << 5 : 0;
      flags |= this.embedWidth !== void 0 ? 1 << 6 : 0;
      flags |= this.embedHeight !== void 0 ? 1 << 6 : 0;
      flags |= this.duration !== void 0 ? 1 << 7 : 0;
      flags |= this.author !== void 0 ? 1 << 8 : 0;
      flags |= this.document !== void 0 ? 1 << 9 : 0;
      flags |= this.cachedPage !== void 0 ? 1 << 10 : 0;
      flags |= this.attributes ? 1 << 12 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.displayUrl !== void 0) {
        b.write(Primitive.String.write(this.displayUrl));
      }
      if (this.hash !== void 0) {
        b.write(Primitive.Int.write(this.hash));
      }
      if (this.type !== void 0) {
        b.write(Primitive.String.write(this.type));
      }
      if (this.siteName !== void 0) {
        b.write(Primitive.String.write(this.siteName));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.description !== void 0) {
        b.write(Primitive.String.write(this.description));
      }
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      if (this.embedUrl !== void 0) {
        b.write(Primitive.String.write(this.embedUrl));
      }
      if (this.embedType !== void 0) {
        b.write(Primitive.String.write(this.embedType));
      }
      if (this.embedWidth !== void 0) {
        b.write(Primitive.Int.write(this.embedWidth));
      }
      if (this.embedHeight !== void 0) {
        b.write(Primitive.Int.write(this.embedHeight));
      }
      if (this.duration !== void 0) {
        b.write(Primitive.Int.write(this.duration));
      }
      if (this.author !== void 0) {
        b.write(Primitive.String.write(this.author));
      }
      if (this.document !== void 0) {
        b.write(this.document.write());
      }
      if (this.cachedPage !== void 0) {
        b.write(this.cachedPage.write());
      }
      if (this.attributes) {
        b.write(Primitive.Vector.write(this.attributes));
      }
      return b.buffer;
    }
  }
  Raw2.WebPage = WebPage;
  class WebPageNotModified extends TLObject {
    cachedPageViews;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'WebPageNotModified';
      this.constructorId = 1930545681;
      this.subclassOfId = 1437168769;
      this._slots = ['cachedPageViews'];
      this.cachedPageViews = params.cachedPageViews;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let cachedPageViews = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.WebPageNotModified({ cachedPageViews });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.cachedPageViews !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.cachedPageViews !== void 0) {
        b.write(Primitive.Int.write(this.cachedPageViews));
      }
      return b.buffer;
    }
  }
  Raw2.WebPageNotModified = WebPageNotModified;
  class Authorization extends TLObject {
    current;
    officialApp;
    passwordPending;
    encryptedRequestsDisabled;
    callRequestsDisabled;
    unconfirmed;
    hash;
    deviceModel;
    platform;
    systemVersion;
    apiId;
    appName;
    appVersion;
    dateCreated;
    dateActive;
    ip;
    country;
    region;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Authorization';
      this.constructorId = 2902578717;
      this.subclassOfId = 3373514778;
      this._slots = [
        'current',
        'officialApp',
        'passwordPending',
        'encryptedRequestsDisabled',
        'callRequestsDisabled',
        'unconfirmed',
        'hash',
        'deviceModel',
        'platform',
        'systemVersion',
        'apiId',
        'appName',
        'appVersion',
        'dateCreated',
        'dateActive',
        'ip',
        'country',
        'region',
      ];
      this.current = params.current;
      this.officialApp = params.officialApp;
      this.passwordPending = params.passwordPending;
      this.encryptedRequestsDisabled = params.encryptedRequestsDisabled;
      this.callRequestsDisabled = params.callRequestsDisabled;
      this.unconfirmed = params.unconfirmed;
      this.hash = params.hash;
      this.deviceModel = params.deviceModel;
      this.platform = params.platform;
      this.systemVersion = params.systemVersion;
      this.apiId = params.apiId;
      this.appName = params.appName;
      this.appVersion = params.appVersion;
      this.dateCreated = params.dateCreated;
      this.dateActive = params.dateActive;
      this.ip = params.ip;
      this.country = params.country;
      this.region = params.region;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let current = flags & (1 << 0) ? true : false;
      let officialApp = flags & (1 << 1) ? true : false;
      let passwordPending = flags & (1 << 2) ? true : false;
      let encryptedRequestsDisabled = flags & (1 << 3) ? true : false;
      let callRequestsDisabled = flags & (1 << 4) ? true : false;
      let unconfirmed = flags & (1 << 5) ? true : false;
      let hash = await Primitive.Long.read(b);
      let deviceModel = await Primitive.String.read(b);
      let platform = await Primitive.String.read(b);
      let systemVersion = await Primitive.String.read(b);
      let apiId = await Primitive.Int.read(b);
      let appName = await Primitive.String.read(b);
      let appVersion = await Primitive.String.read(b);
      let dateCreated = await Primitive.Int.read(b);
      let dateActive = await Primitive.Int.read(b);
      let ip = await Primitive.String.read(b);
      let country = await Primitive.String.read(b);
      let region = await Primitive.String.read(b);
      return new Raw2.Authorization({
        current,
        officialApp,
        passwordPending,
        encryptedRequestsDisabled,
        callRequestsDisabled,
        unconfirmed,
        hash,
        deviceModel,
        platform,
        systemVersion,
        apiId,
        appName,
        appVersion,
        dateCreated,
        dateActive,
        ip,
        country,
        region,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.current ? 1 << 0 : 0;
      flags |= this.officialApp ? 1 << 1 : 0;
      flags |= this.passwordPending ? 1 << 2 : 0;
      flags |= this.encryptedRequestsDisabled ? 1 << 3 : 0;
      flags |= this.callRequestsDisabled ? 1 << 4 : 0;
      flags |= this.unconfirmed ? 1 << 5 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.hash !== void 0) {
        b.write(Primitive.Long.write(this.hash));
      }
      if (this.deviceModel !== void 0) {
        b.write(Primitive.String.write(this.deviceModel));
      }
      if (this.platform !== void 0) {
        b.write(Primitive.String.write(this.platform));
      }
      if (this.systemVersion !== void 0) {
        b.write(Primitive.String.write(this.systemVersion));
      }
      if (this.apiId !== void 0) {
        b.write(Primitive.Int.write(this.apiId));
      }
      if (this.appName !== void 0) {
        b.write(Primitive.String.write(this.appName));
      }
      if (this.appVersion !== void 0) {
        b.write(Primitive.String.write(this.appVersion));
      }
      if (this.dateCreated !== void 0) {
        b.write(Primitive.Int.write(this.dateCreated));
      }
      if (this.dateActive !== void 0) {
        b.write(Primitive.Int.write(this.dateActive));
      }
      if (this.ip !== void 0) {
        b.write(Primitive.String.write(this.ip));
      }
      if (this.country !== void 0) {
        b.write(Primitive.String.write(this.country));
      }
      if (this.region !== void 0) {
        b.write(Primitive.String.write(this.region));
      }
      return b.buffer;
    }
  }
  Raw2.Authorization = Authorization;
  class ReceivedNotifyMessage extends TLObject {
    id;
    flags;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ReceivedNotifyMessage';
      this.constructorId = 2743383929;
      this.subclassOfId = 2841786398;
      this._slots = ['id', 'flags'];
      this.id = params.id;
      this.flags = params.flags;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Int.read(b);
      let flags = await Primitive.Int.read(b);
      return new Raw2.ReceivedNotifyMessage({ id, flags });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.flags !== void 0) {
        b.write(Primitive.Int.write(this.flags));
      }
      return b.buffer;
    }
  }
  Raw2.ReceivedNotifyMessage = ReceivedNotifyMessage;
  class ChatInviteExported extends TLObject {
    revoked;
    permanent;
    requestNeeded;
    link;
    adminId;
    date;
    startDate;
    expireDate;
    usageLimit;
    usage;
    requested;
    title;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatInviteExported';
      this.constructorId = 179611673;
      this.subclassOfId = 3027536472;
      this._slots = [
        'revoked',
        'permanent',
        'requestNeeded',
        'link',
        'adminId',
        'date',
        'startDate',
        'expireDate',
        'usageLimit',
        'usage',
        'requested',
        'title',
      ];
      this.revoked = params.revoked;
      this.permanent = params.permanent;
      this.requestNeeded = params.requestNeeded;
      this.link = params.link;
      this.adminId = params.adminId;
      this.date = params.date;
      this.startDate = params.startDate;
      this.expireDate = params.expireDate;
      this.usageLimit = params.usageLimit;
      this.usage = params.usage;
      this.requested = params.requested;
      this.title = params.title;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let revoked = flags & (1 << 0) ? true : false;
      let permanent = flags & (1 << 5) ? true : false;
      let requestNeeded = flags & (1 << 6) ? true : false;
      let link = await Primitive.String.read(b);
      let adminId = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let startDate = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
      let expireDate = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      let usageLimit = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      let usage = flags & (1 << 3) ? await Primitive.Int.read(b) : void 0;
      let requested = flags & (1 << 7) ? await Primitive.Int.read(b) : void 0;
      let title = flags & (1 << 8) ? await Primitive.String.read(b) : void 0;
      return new Raw2.ChatInviteExported({
        revoked,
        permanent,
        requestNeeded,
        link,
        adminId,
        date,
        startDate,
        expireDate,
        usageLimit,
        usage,
        requested,
        title,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.revoked ? 1 << 0 : 0;
      flags |= this.permanent ? 1 << 5 : 0;
      flags |= this.requestNeeded ? 1 << 6 : 0;
      flags |= this.startDate !== void 0 ? 1 << 4 : 0;
      flags |= this.expireDate !== void 0 ? 1 << 1 : 0;
      flags |= this.usageLimit !== void 0 ? 1 << 2 : 0;
      flags |= this.usage !== void 0 ? 1 << 3 : 0;
      flags |= this.requested !== void 0 ? 1 << 7 : 0;
      flags |= this.title !== void 0 ? 1 << 8 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.link !== void 0) {
        b.write(Primitive.String.write(this.link));
      }
      if (this.adminId !== void 0) {
        b.write(Primitive.Long.write(this.adminId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.startDate !== void 0) {
        b.write(Primitive.Int.write(this.startDate));
      }
      if (this.expireDate !== void 0) {
        b.write(Primitive.Int.write(this.expireDate));
      }
      if (this.usageLimit !== void 0) {
        b.write(Primitive.Int.write(this.usageLimit));
      }
      if (this.usage !== void 0) {
        b.write(Primitive.Int.write(this.usage));
      }
      if (this.requested !== void 0) {
        b.write(Primitive.Int.write(this.requested));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      return b.buffer;
    }
  }
  Raw2.ChatInviteExported = ChatInviteExported;
  class ChatInvitePublicJoinRequests extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'ChatInvitePublicJoinRequests';
      this.constructorId = 3977280183;
      this.subclassOfId = 3027536472;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.ChatInvitePublicJoinRequests();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.ChatInvitePublicJoinRequests = ChatInvitePublicJoinRequests;
  class ChatInviteAlready extends TLObject {
    chat;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatInviteAlready';
      this.constructorId = 1516793212;
      this.subclassOfId = 72750902;
      this._slots = ['chat'];
      this.chat = params.chat;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chat = await TLObject.read(b);
      return new Raw2.ChatInviteAlready({ chat });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chat !== void 0) {
        b.write(this.chat.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChatInviteAlready = ChatInviteAlready;
  class ChatInvite extends TLObject {
    channel;
    broadcast;
    public;
    megagroup;
    requestNeeded;
    verified;
    scam;
    fake;
    title;
    about;
    photo;
    participantsCount;
    participants;
    color;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatInvite';
      this.constructorId = 3454069824;
      this.subclassOfId = 72750902;
      this._slots = [
        'channel',
        'broadcast',
        'public',
        'megagroup',
        'requestNeeded',
        'verified',
        'scam',
        'fake',
        'title',
        'about',
        'photo',
        'participantsCount',
        'participants',
        'color',
      ];
      this.channel = params.channel;
      this.broadcast = params.broadcast;
      this.public = params.public;
      this.megagroup = params.megagroup;
      this.requestNeeded = params.requestNeeded;
      this.verified = params.verified;
      this.scam = params.scam;
      this.fake = params.fake;
      this.title = params.title;
      this.about = params.about;
      this.photo = params.photo;
      this.participantsCount = params.participantsCount;
      this.participants = params.participants;
      this.color = params.color;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let channel = flags & (1 << 0) ? true : false;
      let broadcast = flags & (1 << 1) ? true : false;
      let _public = flags & (1 << 2) ? true : false;
      let megagroup = flags & (1 << 3) ? true : false;
      let requestNeeded = flags & (1 << 6) ? true : false;
      let verified = flags & (1 << 7) ? true : false;
      let scam = flags & (1 << 8) ? true : false;
      let fake = flags & (1 << 9) ? true : false;
      let title = await Primitive.String.read(b);
      let about = flags & (1 << 5) ? await Primitive.String.read(b) : void 0;
      let photo = await TLObject.read(b);
      let participantsCount = await Primitive.Int.read(b);
      let participants = flags & (1 << 4) ? await TLObject.read(b) : [];
      let color = await Primitive.Int.read(b);
      return new Raw2.ChatInvite({
        channel,
        broadcast,
        public: _public,
        megagroup,
        requestNeeded,
        verified,
        scam,
        fake,
        title,
        about,
        photo,
        participantsCount,
        participants,
        color,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.channel ? 1 << 0 : 0;
      flags |= this.broadcast ? 1 << 1 : 0;
      flags |= this.public ? 1 << 2 : 0;
      flags |= this.megagroup ? 1 << 3 : 0;
      flags |= this.requestNeeded ? 1 << 6 : 0;
      flags |= this.verified ? 1 << 7 : 0;
      flags |= this.scam ? 1 << 8 : 0;
      flags |= this.fake ? 1 << 9 : 0;
      flags |= this.about !== void 0 ? 1 << 5 : 0;
      flags |= this.participants ? 1 << 4 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.about !== void 0) {
        b.write(Primitive.String.write(this.about));
      }
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      if (this.participantsCount !== void 0) {
        b.write(Primitive.Int.write(this.participantsCount));
      }
      if (this.participants) {
        b.write(Primitive.Vector.write(this.participants));
      }
      if (this.color !== void 0) {
        b.write(Primitive.Int.write(this.color));
      }
      return b.buffer;
    }
  }
  Raw2.ChatInvite = ChatInvite;
  class ChatInvitePeek extends TLObject {
    chat;
    expires;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatInvitePeek';
      this.constructorId = 1634294960;
      this.subclassOfId = 72750902;
      this._slots = ['chat', 'expires'];
      this.chat = params.chat;
      this.expires = params.expires;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let chat = await TLObject.read(b);
      let expires = await Primitive.Int.read(b);
      return new Raw2.ChatInvitePeek({ chat, expires });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.chat !== void 0) {
        b.write(this.chat.write());
      }
      if (this.expires !== void 0) {
        b.write(Primitive.Int.write(this.expires));
      }
      return b.buffer;
    }
  }
  Raw2.ChatInvitePeek = ChatInvitePeek;
  class InputStickerSetEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputStickerSetEmpty';
      this.constructorId = 4290128789;
      this.subclassOfId = 1034127786;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputStickerSetEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputStickerSetEmpty = InputStickerSetEmpty;
  class InputStickerSetID extends TLObject {
    id;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputStickerSetID';
      this.constructorId = 2649203305;
      this.subclassOfId = 1034127786;
      this._slots = ['id', 'accessHash'];
      this.id = params.id;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputStickerSetID({ id, accessHash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputStickerSetID = InputStickerSetID;
  class InputStickerSetShortName extends TLObject {
    shortName;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputStickerSetShortName';
      this.constructorId = 2250033312;
      this.subclassOfId = 1034127786;
      this._slots = ['shortName'];
      this.shortName = params.shortName;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let shortName = await Primitive.String.read(b);
      return new Raw2.InputStickerSetShortName({ shortName });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.shortName !== void 0) {
        b.write(Primitive.String.write(this.shortName));
      }
      return b.buffer;
    }
  }
  Raw2.InputStickerSetShortName = InputStickerSetShortName;
  class InputStickerSetAnimatedEmoji extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputStickerSetAnimatedEmoji';
      this.constructorId = 42402760;
      this.subclassOfId = 1034127786;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputStickerSetAnimatedEmoji();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputStickerSetAnimatedEmoji = InputStickerSetAnimatedEmoji;
  class InputStickerSetDice extends TLObject {
    emoticon;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputStickerSetDice';
      this.constructorId = 3867103758;
      this.subclassOfId = 1034127786;
      this._slots = ['emoticon'];
      this.emoticon = params.emoticon;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let emoticon = await Primitive.String.read(b);
      return new Raw2.InputStickerSetDice({ emoticon });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.emoticon !== void 0) {
        b.write(Primitive.String.write(this.emoticon));
      }
      return b.buffer;
    }
  }
  Raw2.InputStickerSetDice = InputStickerSetDice;
  class InputStickerSetAnimatedEmojiAnimations extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputStickerSetAnimatedEmojiAnimations';
      this.constructorId = 215889721;
      this.subclassOfId = 1034127786;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputStickerSetAnimatedEmojiAnimations();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputStickerSetAnimatedEmojiAnimations = InputStickerSetAnimatedEmojiAnimations;
  class InputStickerSetPremiumGifts extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputStickerSetPremiumGifts';
      this.constructorId = 3364567810;
      this.subclassOfId = 1034127786;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputStickerSetPremiumGifts();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputStickerSetPremiumGifts = InputStickerSetPremiumGifts;
  class InputStickerSetEmojiGenericAnimations extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputStickerSetEmojiGenericAnimations';
      this.constructorId = 80008398;
      this.subclassOfId = 1034127786;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputStickerSetEmojiGenericAnimations();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputStickerSetEmojiGenericAnimations = InputStickerSetEmojiGenericAnimations;
  class InputStickerSetEmojiDefaultStatuses extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputStickerSetEmojiDefaultStatuses';
      this.constructorId = 701560302;
      this.subclassOfId = 1034127786;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputStickerSetEmojiDefaultStatuses();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputStickerSetEmojiDefaultStatuses = InputStickerSetEmojiDefaultStatuses;
  class InputStickerSetEmojiDefaultTopicIcons extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputStickerSetEmojiDefaultTopicIcons';
      this.constructorId = 1153562857;
      this.subclassOfId = 1034127786;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputStickerSetEmojiDefaultTopicIcons();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputStickerSetEmojiDefaultTopicIcons = InputStickerSetEmojiDefaultTopicIcons;
  class InputStickerSetEmojiChannelDefaultStatuses extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputStickerSetEmojiChannelDefaultStatuses';
      this.constructorId = 1232373075;
      this.subclassOfId = 1034127786;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputStickerSetEmojiChannelDefaultStatuses();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputStickerSetEmojiChannelDefaultStatuses = InputStickerSetEmojiChannelDefaultStatuses;
  class StickerSet extends TLObject {
    archived;
    official;
    masks;
    emojis;
    textColor;
    channelEmojiStatus;
    creator;
    installedDate;
    id;
    accessHash;
    title;
    shortName;
    thumbs;
    thumbDcId;
    thumbVersion;
    thumbDocumentId;
    count;
    hash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StickerSet';
      this.constructorId = 768691932;
      this.subclassOfId = 3134455697;
      this._slots = [
        'archived',
        'official',
        'masks',
        'emojis',
        'textColor',
        'channelEmojiStatus',
        'creator',
        'installedDate',
        'id',
        'accessHash',
        'title',
        'shortName',
        'thumbs',
        'thumbDcId',
        'thumbVersion',
        'thumbDocumentId',
        'count',
        'hash',
      ];
      this.archived = params.archived;
      this.official = params.official;
      this.masks = params.masks;
      this.emojis = params.emojis;
      this.textColor = params.textColor;
      this.channelEmojiStatus = params.channelEmojiStatus;
      this.creator = params.creator;
      this.installedDate = params.installedDate;
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.title = params.title;
      this.shortName = params.shortName;
      this.thumbs = params.thumbs;
      this.thumbDcId = params.thumbDcId;
      this.thumbVersion = params.thumbVersion;
      this.thumbDocumentId = params.thumbDocumentId;
      this.count = params.count;
      this.hash = params.hash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let archived = flags & (1 << 1) ? true : false;
      let official = flags & (1 << 2) ? true : false;
      let masks = flags & (1 << 3) ? true : false;
      let emojis = flags & (1 << 7) ? true : false;
      let textColor = flags & (1 << 9) ? true : false;
      let channelEmojiStatus = flags & (1 << 10) ? true : false;
      let creator = flags & (1 << 11) ? true : false;
      let installedDate = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let title = await Primitive.String.read(b);
      let shortName = await Primitive.String.read(b);
      let thumbs = flags & (1 << 4) ? await TLObject.read(b) : [];
      let thumbDcId = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
      let thumbVersion = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
      let thumbDocumentId = flags & (1 << 8) ? await Primitive.Long.read(b) : void 0;
      let count = await Primitive.Int.read(b);
      let hash = await Primitive.Int.read(b);
      return new Raw2.StickerSet({
        archived,
        official,
        masks,
        emojis,
        textColor,
        channelEmojiStatus,
        creator,
        installedDate,
        id,
        accessHash,
        title,
        shortName,
        thumbs,
        thumbDcId,
        thumbVersion,
        thumbDocumentId,
        count,
        hash,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.archived ? 1 << 1 : 0;
      flags |= this.official ? 1 << 2 : 0;
      flags |= this.masks ? 1 << 3 : 0;
      flags |= this.emojis ? 1 << 7 : 0;
      flags |= this.textColor ? 1 << 9 : 0;
      flags |= this.channelEmojiStatus ? 1 << 10 : 0;
      flags |= this.creator ? 1 << 11 : 0;
      flags |= this.installedDate !== void 0 ? 1 << 0 : 0;
      flags |= this.thumbs ? 1 << 4 : 0;
      flags |= this.thumbDcId !== void 0 ? 1 << 4 : 0;
      flags |= this.thumbVersion !== void 0 ? 1 << 4 : 0;
      flags |= this.thumbDocumentId !== void 0 ? 1 << 8 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.installedDate !== void 0) {
        b.write(Primitive.Int.write(this.installedDate));
      }
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.shortName !== void 0) {
        b.write(Primitive.String.write(this.shortName));
      }
      if (this.thumbs) {
        b.write(Primitive.Vector.write(this.thumbs));
      }
      if (this.thumbDcId !== void 0) {
        b.write(Primitive.Int.write(this.thumbDcId));
      }
      if (this.thumbVersion !== void 0) {
        b.write(Primitive.Int.write(this.thumbVersion));
      }
      if (this.thumbDocumentId !== void 0) {
        b.write(Primitive.Long.write(this.thumbDocumentId));
      }
      if (this.count !== void 0) {
        b.write(Primitive.Int.write(this.count));
      }
      if (this.hash !== void 0) {
        b.write(Primitive.Int.write(this.hash));
      }
      return b.buffer;
    }
  }
  Raw2.StickerSet = StickerSet;
  class BotCommand extends TLObject {
    command;
    description;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BotCommand';
      this.constructorId = 3262826695;
      this.subclassOfId = 236872386;
      this._slots = ['command', 'description'];
      this.command = params.command;
      this.description = params.description;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let command = await Primitive.String.read(b);
      let description = await Primitive.String.read(b);
      return new Raw2.BotCommand({ command, description });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.command !== void 0) {
        b.write(Primitive.String.write(this.command));
      }
      if (this.description !== void 0) {
        b.write(Primitive.String.write(this.description));
      }
      return b.buffer;
    }
  }
  Raw2.BotCommand = BotCommand;
  class BotInfo extends TLObject {
    userId;
    description;
    descriptionPhoto;
    descriptionDocument;
    commands;
    menuButton;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BotInfo';
      this.constructorId = 2402290519;
      this.subclassOfId = 4059496923;
      this._slots = [
        'userId',
        'description',
        'descriptionPhoto',
        'descriptionDocument',
        'commands',
        'menuButton',
      ];
      this.userId = params.userId;
      this.description = params.description;
      this.descriptionPhoto = params.descriptionPhoto;
      this.descriptionDocument = params.descriptionDocument;
      this.commands = params.commands;
      this.menuButton = params.menuButton;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let userId = flags & (1 << 0) ? await Primitive.Long.read(b) : void 0;
      let description = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let descriptionPhoto = flags & (1 << 4) ? await TLObject.read(b) : void 0;
      let descriptionDocument = flags & (1 << 5) ? await TLObject.read(b) : void 0;
      let commands = flags & (1 << 2) ? await TLObject.read(b) : [];
      let menuButton = flags & (1 << 3) ? await TLObject.read(b) : void 0;
      return new Raw2.BotInfo({
        userId,
        description,
        descriptionPhoto,
        descriptionDocument,
        commands,
        menuButton,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.userId !== void 0 ? 1 << 0 : 0;
      flags |= this.description !== void 0 ? 1 << 1 : 0;
      flags |= this.descriptionPhoto !== void 0 ? 1 << 4 : 0;
      flags |= this.descriptionDocument !== void 0 ? 1 << 5 : 0;
      flags |= this.commands ? 1 << 2 : 0;
      flags |= this.menuButton !== void 0 ? 1 << 3 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.description !== void 0) {
        b.write(Primitive.String.write(this.description));
      }
      if (this.descriptionPhoto !== void 0) {
        b.write(this.descriptionPhoto.write());
      }
      if (this.descriptionDocument !== void 0) {
        b.write(this.descriptionDocument.write());
      }
      if (this.commands) {
        b.write(Primitive.Vector.write(this.commands));
      }
      if (this.menuButton !== void 0) {
        b.write(this.menuButton.write());
      }
      return b.buffer;
    }
  }
  Raw2.BotInfo = BotInfo;
  class KeyboardButton extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'KeyboardButton';
      this.constructorId = 2734311552;
      this.subclassOfId = 195916963;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      return new Raw2.KeyboardButton({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.KeyboardButton = KeyboardButton;
  class KeyboardButtonUrl extends TLObject {
    text;
    url;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'KeyboardButtonUrl';
      this.constructorId = 629866245;
      this.subclassOfId = 195916963;
      this._slots = ['text', 'url'];
      this.text = params.text;
      this.url = params.url;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      let url = await Primitive.String.read(b);
      return new Raw2.KeyboardButtonUrl({ text, url });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      return b.buffer;
    }
  }
  Raw2.KeyboardButtonUrl = KeyboardButtonUrl;
  class KeyboardButtonCallback extends TLObject {
    requiresPassword;
    text;
    data;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'KeyboardButtonCallback';
      this.constructorId = 901503851;
      this.subclassOfId = 195916963;
      this._slots = ['requiresPassword', 'text', 'data'];
      this.requiresPassword = params.requiresPassword;
      this.text = params.text;
      this.data = params.data;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let requiresPassword = flags & (1 << 0) ? true : false;
      let text = await Primitive.String.read(b);
      let data = await Primitive.Bytes.read(b);
      return new Raw2.KeyboardButtonCallback({
        requiresPassword,
        text,
        data,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.requiresPassword ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      if (this.data !== void 0) {
        b.write(Primitive.Bytes.write(this.data));
      }
      return b.buffer;
    }
  }
  Raw2.KeyboardButtonCallback = KeyboardButtonCallback;
  class KeyboardButtonRequestPhone extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'KeyboardButtonRequestPhone';
      this.constructorId = 2976541737;
      this.subclassOfId = 195916963;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      return new Raw2.KeyboardButtonRequestPhone({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.KeyboardButtonRequestPhone = KeyboardButtonRequestPhone;
  class KeyboardButtonRequestGeoLocation extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'KeyboardButtonRequestGeoLocation';
      this.constructorId = 4235815743;
      this.subclassOfId = 195916963;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      return new Raw2.KeyboardButtonRequestGeoLocation({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.KeyboardButtonRequestGeoLocation = KeyboardButtonRequestGeoLocation;
  class KeyboardButtonSwitchInline extends TLObject {
    samePeer;
    text;
    query;
    peerTypes;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'KeyboardButtonSwitchInline';
      this.constructorId = 2478439349;
      this.subclassOfId = 195916963;
      this._slots = ['samePeer', 'text', 'query', 'peerTypes'];
      this.samePeer = params.samePeer;
      this.text = params.text;
      this.query = params.query;
      this.peerTypes = params.peerTypes;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let samePeer = flags & (1 << 0) ? true : false;
      let text = await Primitive.String.read(b);
      let query = await Primitive.String.read(b);
      let peerTypes = flags & (1 << 1) ? await TLObject.read(b) : [];
      return new Raw2.KeyboardButtonSwitchInline({
        samePeer,
        text,
        query,
        peerTypes,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.samePeer ? 1 << 0 : 0;
      flags |= this.peerTypes ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      if (this.query !== void 0) {
        b.write(Primitive.String.write(this.query));
      }
      if (this.peerTypes) {
        b.write(Primitive.Vector.write(this.peerTypes));
      }
      return b.buffer;
    }
  }
  Raw2.KeyboardButtonSwitchInline = KeyboardButtonSwitchInline;
  class KeyboardButtonGame extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'KeyboardButtonGame';
      this.constructorId = 1358175439;
      this.subclassOfId = 195916963;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      return new Raw2.KeyboardButtonGame({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.KeyboardButtonGame = KeyboardButtonGame;
  class KeyboardButtonBuy extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'KeyboardButtonBuy';
      this.constructorId = 2950250427;
      this.subclassOfId = 195916963;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      return new Raw2.KeyboardButtonBuy({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.KeyboardButtonBuy = KeyboardButtonBuy;
  class KeyboardButtonUrlAuth extends TLObject {
    text;
    fwdText;
    url;
    buttonId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'KeyboardButtonUrlAuth';
      this.constructorId = 280464681;
      this.subclassOfId = 195916963;
      this._slots = ['text', 'fwdText', 'url', 'buttonId'];
      this.text = params.text;
      this.fwdText = params.fwdText;
      this.url = params.url;
      this.buttonId = params.buttonId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let text = await Primitive.String.read(b);
      let fwdText = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let url = await Primitive.String.read(b);
      let buttonId = await Primitive.Int.read(b);
      return new Raw2.KeyboardButtonUrlAuth({
        text,
        fwdText,
        url,
        buttonId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.fwdText !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      if (this.fwdText !== void 0) {
        b.write(Primitive.String.write(this.fwdText));
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.buttonId !== void 0) {
        b.write(Primitive.Int.write(this.buttonId));
      }
      return b.buffer;
    }
  }
  Raw2.KeyboardButtonUrlAuth = KeyboardButtonUrlAuth;
  class InputKeyboardButtonUrlAuth extends TLObject {
    requestWriteAccess;
    text;
    fwdText;
    url;
    bot;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputKeyboardButtonUrlAuth';
      this.constructorId = 3492708308;
      this.subclassOfId = 195916963;
      this._slots = ['requestWriteAccess', 'text', 'fwdText', 'url', 'bot'];
      this.requestWriteAccess = params.requestWriteAccess;
      this.text = params.text;
      this.fwdText = params.fwdText;
      this.url = params.url;
      this.bot = params.bot;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let requestWriteAccess = flags & (1 << 0) ? true : false;
      let text = await Primitive.String.read(b);
      let fwdText = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let url = await Primitive.String.read(b);
      let bot = await TLObject.read(b);
      return new Raw2.InputKeyboardButtonUrlAuth({
        requestWriteAccess,
        text,
        fwdText,
        url,
        bot,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.requestWriteAccess ? 1 << 0 : 0;
      flags |= this.fwdText !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      if (this.fwdText !== void 0) {
        b.write(Primitive.String.write(this.fwdText));
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.bot !== void 0) {
        b.write(this.bot.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputKeyboardButtonUrlAuth = InputKeyboardButtonUrlAuth;
  class KeyboardButtonRequestPoll extends TLObject {
    quiz;
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'KeyboardButtonRequestPoll';
      this.constructorId = 3150401885;
      this.subclassOfId = 195916963;
      this._slots = ['quiz', 'text'];
      this.quiz = params.quiz;
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let quiz = flags & (1 << 0) ? await Primitive.Bool.read(b) : void 0;
      let text = await Primitive.String.read(b);
      return new Raw2.KeyboardButtonRequestPoll({ quiz, text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.quiz !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.quiz !== void 0) {
        b.write(Primitive.Bool.write(this.quiz));
      }
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.KeyboardButtonRequestPoll = KeyboardButtonRequestPoll;
  class InputKeyboardButtonUserProfile extends TLObject {
    text;
    userId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputKeyboardButtonUserProfile';
      this.constructorId = 3918005115;
      this.subclassOfId = 195916963;
      this._slots = ['text', 'userId'];
      this.text = params.text;
      this.userId = params.userId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      let userId = await TLObject.read(b);
      return new Raw2.InputKeyboardButtonUserProfile({ text, userId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      if (this.userId !== void 0) {
        b.write(this.userId.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputKeyboardButtonUserProfile = InputKeyboardButtonUserProfile;
  class KeyboardButtonUserProfile extends TLObject {
    text;
    userId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'KeyboardButtonUserProfile';
      this.constructorId = 814112961;
      this.subclassOfId = 195916963;
      this._slots = ['text', 'userId'];
      this.text = params.text;
      this.userId = params.userId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      let userId = await Primitive.Long.read(b);
      return new Raw2.KeyboardButtonUserProfile({ text, userId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      return b.buffer;
    }
  }
  Raw2.KeyboardButtonUserProfile = KeyboardButtonUserProfile;
  class KeyboardButtonWebView extends TLObject {
    text;
    url;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'KeyboardButtonWebView';
      this.constructorId = 326529584;
      this.subclassOfId = 195916963;
      this._slots = ['text', 'url'];
      this.text = params.text;
      this.url = params.url;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      let url = await Primitive.String.read(b);
      return new Raw2.KeyboardButtonWebView({ text, url });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      return b.buffer;
    }
  }
  Raw2.KeyboardButtonWebView = KeyboardButtonWebView;
  class KeyboardButtonSimpleWebView extends TLObject {
    text;
    url;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'KeyboardButtonSimpleWebView';
      this.constructorId = 2696958044;
      this.subclassOfId = 195916963;
      this._slots = ['text', 'url'];
      this.text = params.text;
      this.url = params.url;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      let url = await Primitive.String.read(b);
      return new Raw2.KeyboardButtonSimpleWebView({ text, url });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      return b.buffer;
    }
  }
  Raw2.KeyboardButtonSimpleWebView = KeyboardButtonSimpleWebView;
  class KeyboardButtonRequestPeer extends TLObject {
    text;
    buttonId;
    peerType;
    maxQuantity;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'KeyboardButtonRequestPeer';
      this.constructorId = 1406648280;
      this.subclassOfId = 195916963;
      this._slots = ['text', 'buttonId', 'peerType', 'maxQuantity'];
      this.text = params.text;
      this.buttonId = params.buttonId;
      this.peerType = params.peerType;
      this.maxQuantity = params.maxQuantity;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      let buttonId = await Primitive.Int.read(b);
      let peerType = await TLObject.read(b);
      let maxQuantity = await Primitive.Int.read(b);
      return new Raw2.KeyboardButtonRequestPeer({
        text,
        buttonId,
        peerType,
        maxQuantity,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      if (this.buttonId !== void 0) {
        b.write(Primitive.Int.write(this.buttonId));
      }
      if (this.peerType !== void 0) {
        b.write(this.peerType.write());
      }
      if (this.maxQuantity !== void 0) {
        b.write(Primitive.Int.write(this.maxQuantity));
      }
      return b.buffer;
    }
  }
  Raw2.KeyboardButtonRequestPeer = KeyboardButtonRequestPeer;
  class InputKeyboardButtonRequestPeer extends TLObject {
    nameRequested;
    usernameRequested;
    photoRequested;
    text;
    buttonId;
    peerType;
    maxQuantity;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputKeyboardButtonRequestPeer';
      this.constructorId = 3378916613;
      this.subclassOfId = 195916963;
      this._slots = [
        'nameRequested',
        'usernameRequested',
        'photoRequested',
        'text',
        'buttonId',
        'peerType',
        'maxQuantity',
      ];
      this.nameRequested = params.nameRequested;
      this.usernameRequested = params.usernameRequested;
      this.photoRequested = params.photoRequested;
      this.text = params.text;
      this.buttonId = params.buttonId;
      this.peerType = params.peerType;
      this.maxQuantity = params.maxQuantity;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let nameRequested = flags & (1 << 0) ? true : false;
      let usernameRequested = flags & (1 << 1) ? true : false;
      let photoRequested = flags & (1 << 2) ? true : false;
      let text = await Primitive.String.read(b);
      let buttonId = await Primitive.Int.read(b);
      let peerType = await TLObject.read(b);
      let maxQuantity = await Primitive.Int.read(b);
      return new Raw2.InputKeyboardButtonRequestPeer({
        nameRequested,
        usernameRequested,
        photoRequested,
        text,
        buttonId,
        peerType,
        maxQuantity,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.nameRequested ? 1 << 0 : 0;
      flags |= this.usernameRequested ? 1 << 1 : 0;
      flags |= this.photoRequested ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      if (this.buttonId !== void 0) {
        b.write(Primitive.Int.write(this.buttonId));
      }
      if (this.peerType !== void 0) {
        b.write(this.peerType.write());
      }
      if (this.maxQuantity !== void 0) {
        b.write(Primitive.Int.write(this.maxQuantity));
      }
      return b.buffer;
    }
  }
  Raw2.InputKeyboardButtonRequestPeer = InputKeyboardButtonRequestPeer;
  class KeyboardButtonRow extends TLObject {
    buttons;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'KeyboardButtonRow';
      this.constructorId = 2002815875;
      this.subclassOfId = 2222403758;
      this._slots = ['buttons'];
      this.buttons = params.buttons;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let buttons = await TLObject.read(b);
      return new Raw2.KeyboardButtonRow({ buttons });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.buttons) {
        b.write(Primitive.Vector.write(this.buttons));
      }
      return b.buffer;
    }
  }
  Raw2.KeyboardButtonRow = KeyboardButtonRow;
  class ReplyKeyboardHide extends TLObject {
    selective;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ReplyKeyboardHide';
      this.constructorId = 2688441221;
      this.subclassOfId = 3806400242;
      this._slots = ['selective'];
      this.selective = params.selective;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let selective = flags & (1 << 2) ? true : false;
      return new Raw2.ReplyKeyboardHide({ selective });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.selective ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      return b.buffer;
    }
  }
  Raw2.ReplyKeyboardHide = ReplyKeyboardHide;
  class ReplyKeyboardForceReply extends TLObject {
    singleUse;
    selective;
    placeholder;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ReplyKeyboardForceReply';
      this.constructorId = 2259946248;
      this.subclassOfId = 3806400242;
      this._slots = ['singleUse', 'selective', 'placeholder'];
      this.singleUse = params.singleUse;
      this.selective = params.selective;
      this.placeholder = params.placeholder;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let singleUse = flags & (1 << 1) ? true : false;
      let selective = flags & (1 << 2) ? true : false;
      let placeholder = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
      return new Raw2.ReplyKeyboardForceReply({
        singleUse,
        selective,
        placeholder,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.singleUse ? 1 << 1 : 0;
      flags |= this.selective ? 1 << 2 : 0;
      flags |= this.placeholder !== void 0 ? 1 << 3 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.placeholder !== void 0) {
        b.write(Primitive.String.write(this.placeholder));
      }
      return b.buffer;
    }
  }
  Raw2.ReplyKeyboardForceReply = ReplyKeyboardForceReply;
  class ReplyKeyboardMarkup extends TLObject {
    resize;
    singleUse;
    selective;
    persistent;
    rows;
    placeholder;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ReplyKeyboardMarkup';
      this.constructorId = 2245892561;
      this.subclassOfId = 3806400242;
      this._slots = ['resize', 'singleUse', 'selective', 'persistent', 'rows', 'placeholder'];
      this.resize = params.resize;
      this.singleUse = params.singleUse;
      this.selective = params.selective;
      this.persistent = params.persistent;
      this.rows = params.rows;
      this.placeholder = params.placeholder;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let resize = flags & (1 << 0) ? true : false;
      let singleUse = flags & (1 << 1) ? true : false;
      let selective = flags & (1 << 2) ? true : false;
      let persistent = flags & (1 << 4) ? true : false;
      let rows = await TLObject.read(b);
      let placeholder = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
      return new Raw2.ReplyKeyboardMarkup({
        resize,
        singleUse,
        selective,
        persistent,
        rows,
        placeholder,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.resize ? 1 << 0 : 0;
      flags |= this.singleUse ? 1 << 1 : 0;
      flags |= this.selective ? 1 << 2 : 0;
      flags |= this.persistent ? 1 << 4 : 0;
      flags |= this.placeholder !== void 0 ? 1 << 3 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.rows) {
        b.write(Primitive.Vector.write(this.rows));
      }
      if (this.placeholder !== void 0) {
        b.write(Primitive.String.write(this.placeholder));
      }
      return b.buffer;
    }
  }
  Raw2.ReplyKeyboardMarkup = ReplyKeyboardMarkup;
  class ReplyInlineMarkup extends TLObject {
    rows;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ReplyInlineMarkup';
      this.constructorId = 1218642516;
      this.subclassOfId = 3806400242;
      this._slots = ['rows'];
      this.rows = params.rows;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let rows = await TLObject.read(b);
      return new Raw2.ReplyInlineMarkup({ rows });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.rows) {
        b.write(Primitive.Vector.write(this.rows));
      }
      return b.buffer;
    }
  }
  Raw2.ReplyInlineMarkup = ReplyInlineMarkup;
  class MessageEntityUnknown extends TLObject {
    offset;
    length;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityUnknown';
      this.constructorId = 3146955413;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length'];
      this.offset = params.offset;
      this.length = params.length;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      return new Raw2.MessageEntityUnknown({ offset, length });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityUnknown = MessageEntityUnknown;
  class MessageEntityMention extends TLObject {
    offset;
    length;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityMention';
      this.constructorId = 4194588573;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length'];
      this.offset = params.offset;
      this.length = params.length;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      return new Raw2.MessageEntityMention({ offset, length });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityMention = MessageEntityMention;
  class MessageEntityHashtag extends TLObject {
    offset;
    length;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityHashtag';
      this.constructorId = 1868782349;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length'];
      this.offset = params.offset;
      this.length = params.length;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      return new Raw2.MessageEntityHashtag({ offset, length });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityHashtag = MessageEntityHashtag;
  class MessageEntityBotCommand extends TLObject {
    offset;
    length;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityBotCommand';
      this.constructorId = 1827637959;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length'];
      this.offset = params.offset;
      this.length = params.length;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      return new Raw2.MessageEntityBotCommand({ offset, length });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityBotCommand = MessageEntityBotCommand;
  class MessageEntityUrl extends TLObject {
    offset;
    length;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityUrl';
      this.constructorId = 1859134776;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length'];
      this.offset = params.offset;
      this.length = params.length;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      return new Raw2.MessageEntityUrl({ offset, length });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityUrl = MessageEntityUrl;
  class MessageEntityEmail extends TLObject {
    offset;
    length;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityEmail';
      this.constructorId = 1692693954;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length'];
      this.offset = params.offset;
      this.length = params.length;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      return new Raw2.MessageEntityEmail({ offset, length });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityEmail = MessageEntityEmail;
  class MessageEntityBold extends TLObject {
    offset;
    length;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityBold';
      this.constructorId = 3177253833;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length'];
      this.offset = params.offset;
      this.length = params.length;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      return new Raw2.MessageEntityBold({ offset, length });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityBold = MessageEntityBold;
  class MessageEntityItalic extends TLObject {
    offset;
    length;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityItalic';
      this.constructorId = 2188348256;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length'];
      this.offset = params.offset;
      this.length = params.length;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      return new Raw2.MessageEntityItalic({ offset, length });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityItalic = MessageEntityItalic;
  class MessageEntityCode extends TLObject {
    offset;
    length;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityCode';
      this.constructorId = 681706865;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length'];
      this.offset = params.offset;
      this.length = params.length;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      return new Raw2.MessageEntityCode({ offset, length });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityCode = MessageEntityCode;
  class MessageEntityPre extends TLObject {
    offset;
    length;
    language;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityPre';
      this.constructorId = 1938967520;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length', 'language'];
      this.offset = params.offset;
      this.length = params.length;
      this.language = params.language;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      let language = await Primitive.String.read(b);
      return new Raw2.MessageEntityPre({ offset, length, language });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      if (this.language !== void 0) {
        b.write(Primitive.String.write(this.language));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityPre = MessageEntityPre;
  class MessageEntityTextUrl extends TLObject {
    offset;
    length;
    url;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityTextUrl';
      this.constructorId = 1990644519;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length', 'url'];
      this.offset = params.offset;
      this.length = params.length;
      this.url = params.url;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      let url = await Primitive.String.read(b);
      return new Raw2.MessageEntityTextUrl({ offset, length, url });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityTextUrl = MessageEntityTextUrl;
  class MessageEntityMentionName extends TLObject {
    offset;
    length;
    userId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityMentionName';
      this.constructorId = 3699052864;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length', 'userId'];
      this.offset = params.offset;
      this.length = params.length;
      this.userId = params.userId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      let userId = await Primitive.Long.read(b);
      return new Raw2.MessageEntityMentionName({ offset, length, userId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityMentionName = MessageEntityMentionName;
  class InputMessageEntityMentionName extends TLObject {
    offset;
    length;
    userId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMessageEntityMentionName';
      this.constructorId = 546203849;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length', 'userId'];
      this.offset = params.offset;
      this.length = params.length;
      this.userId = params.userId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      let userId = await TLObject.read(b);
      return new Raw2.InputMessageEntityMentionName({
        offset,
        length,
        userId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      if (this.userId !== void 0) {
        b.write(this.userId.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputMessageEntityMentionName = InputMessageEntityMentionName;
  class MessageEntityPhone extends TLObject {
    offset;
    length;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityPhone';
      this.constructorId = 2607407947;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length'];
      this.offset = params.offset;
      this.length = params.length;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      return new Raw2.MessageEntityPhone({ offset, length });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityPhone = MessageEntityPhone;
  class MessageEntityCashtag extends TLObject {
    offset;
    length;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityCashtag';
      this.constructorId = 1280209983;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length'];
      this.offset = params.offset;
      this.length = params.length;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      return new Raw2.MessageEntityCashtag({ offset, length });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityCashtag = MessageEntityCashtag;
  class MessageEntityUnderline extends TLObject {
    offset;
    length;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityUnderline';
      this.constructorId = 2622389899;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length'];
      this.offset = params.offset;
      this.length = params.length;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      return new Raw2.MessageEntityUnderline({ offset, length });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityUnderline = MessageEntityUnderline;
  class MessageEntityStrike extends TLObject {
    offset;
    length;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityStrike';
      this.constructorId = 3204879316;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length'];
      this.offset = params.offset;
      this.length = params.length;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      return new Raw2.MessageEntityStrike({ offset, length });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityStrike = MessageEntityStrike;
  class MessageEntityBankCard extends TLObject {
    offset;
    length;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityBankCard';
      this.constructorId = 1981704948;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length'];
      this.offset = params.offset;
      this.length = params.length;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      return new Raw2.MessageEntityBankCard({ offset, length });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityBankCard = MessageEntityBankCard;
  class MessageEntitySpoiler extends TLObject {
    offset;
    length;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntitySpoiler';
      this.constructorId = 852137487;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length'];
      this.offset = params.offset;
      this.length = params.length;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      return new Raw2.MessageEntitySpoiler({ offset, length });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntitySpoiler = MessageEntitySpoiler;
  class MessageEntityCustomEmoji extends TLObject {
    offset;
    length;
    documentId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityCustomEmoji';
      this.constructorId = 3369010680;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length', 'documentId'];
      this.offset = params.offset;
      this.length = params.length;
      this.documentId = params.documentId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      let documentId = await Primitive.Long.read(b);
      return new Raw2.MessageEntityCustomEmoji({
        offset,
        length,
        documentId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      if (this.documentId !== void 0) {
        b.write(Primitive.Long.write(this.documentId));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityCustomEmoji = MessageEntityCustomEmoji;
  class MessageEntityBlockquote extends TLObject {
    offset;
    length;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageEntityBlockquote';
      this.constructorId = 34469328;
      this.subclassOfId = 3479443932;
      this._slots = ['offset', 'length'];
      this.offset = params.offset;
      this.length = params.length;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Int.read(b);
      let length = await Primitive.Int.read(b);
      return new Raw2.MessageEntityBlockquote({ offset, length });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      if (this.length !== void 0) {
        b.write(Primitive.Int.write(this.length));
      }
      return b.buffer;
    }
  }
  Raw2.MessageEntityBlockquote = MessageEntityBlockquote;
  class InputChannelEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputChannelEmpty';
      this.constructorId = 4002160262;
      this.subclassOfId = 1089602301;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputChannelEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputChannelEmpty = InputChannelEmpty;
  class InputChannel extends TLObject {
    channelId;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputChannel';
      this.constructorId = 4082822184;
      this.subclassOfId = 1089602301;
      this._slots = ['channelId', 'accessHash'];
      this.channelId = params.channelId;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let channelId = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputChannel({ channelId, accessHash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputChannel = InputChannel;
  class InputChannelFromMessage extends TLObject {
    peer;
    msgId;
    channelId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputChannelFromMessage';
      this.constructorId = 1536380829;
      this.subclassOfId = 1089602301;
      this._slots = ['peer', 'msgId', 'channelId'];
      this.peer = params.peer;
      this.msgId = params.msgId;
      this.channelId = params.channelId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let msgId = await Primitive.Int.read(b);
      let channelId = await Primitive.Long.read(b);
      return new Raw2.InputChannelFromMessage({ peer, msgId, channelId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.msgId !== void 0) {
        b.write(Primitive.Int.write(this.msgId));
      }
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      return b.buffer;
    }
  }
  Raw2.InputChannelFromMessage = InputChannelFromMessage;
  class MessageRange extends TLObject {
    minId;
    maxId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageRange';
      this.constructorId = 182649427;
      this.subclassOfId = 3200730487;
      this._slots = ['minId', 'maxId'];
      this.minId = params.minId;
      this.maxId = params.maxId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let minId = await Primitive.Int.read(b);
      let maxId = await Primitive.Int.read(b);
      return new Raw2.MessageRange({ minId, maxId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.minId !== void 0) {
        b.write(Primitive.Int.write(this.minId));
      }
      if (this.maxId !== void 0) {
        b.write(Primitive.Int.write(this.maxId));
      }
      return b.buffer;
    }
  }
  Raw2.MessageRange = MessageRange;
  class ChannelMessagesFilterEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'ChannelMessagesFilterEmpty';
      this.constructorId = 2496933607;
      this.subclassOfId = 322136662;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.ChannelMessagesFilterEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.ChannelMessagesFilterEmpty = ChannelMessagesFilterEmpty;
  class ChannelMessagesFilter extends TLObject {
    excludeNewMessages;
    ranges;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelMessagesFilter';
      this.constructorId = 3447183703;
      this.subclassOfId = 322136662;
      this._slots = ['excludeNewMessages', 'ranges'];
      this.excludeNewMessages = params.excludeNewMessages;
      this.ranges = params.ranges;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let excludeNewMessages = flags & (1 << 1) ? true : false;
      let ranges = await TLObject.read(b);
      return new Raw2.ChannelMessagesFilter({
        excludeNewMessages,
        ranges,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.excludeNewMessages ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.ranges) {
        b.write(Primitive.Vector.write(this.ranges));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelMessagesFilter = ChannelMessagesFilter;
  class ChannelParticipant extends TLObject {
    userId;
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelParticipant';
      this.constructorId = 3222013888;
      this.subclassOfId = 3653762072;
      this._slots = ['userId', 'date'];
      this.userId = params.userId;
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      return new Raw2.ChannelParticipant({ userId, date });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelParticipant = ChannelParticipant;
  class ChannelParticipantSelf extends TLObject {
    viaRequest;
    userId;
    inviterId;
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelParticipantSelf';
      this.constructorId = 900251559;
      this.subclassOfId = 3653762072;
      this._slots = ['viaRequest', 'userId', 'inviterId', 'date'];
      this.viaRequest = params.viaRequest;
      this.userId = params.userId;
      this.inviterId = params.inviterId;
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let viaRequest = flags & (1 << 0) ? true : false;
      let userId = await Primitive.Long.read(b);
      let inviterId = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      return new Raw2.ChannelParticipantSelf({
        viaRequest,
        userId,
        inviterId,
        date,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.viaRequest ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.inviterId !== void 0) {
        b.write(Primitive.Long.write(this.inviterId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelParticipantSelf = ChannelParticipantSelf;
  class ChannelParticipantCreator extends TLObject {
    userId;
    adminRights;
    rank;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelParticipantCreator';
      this.constructorId = 803602899;
      this.subclassOfId = 3653762072;
      this._slots = ['userId', 'adminRights', 'rank'];
      this.userId = params.userId;
      this.adminRights = params.adminRights;
      this.rank = params.rank;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let userId = await Primitive.Long.read(b);
      let adminRights = await TLObject.read(b);
      let rank = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      return new Raw2.ChannelParticipantCreator({
        userId,
        adminRights,
        rank,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.rank !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.adminRights !== void 0) {
        b.write(this.adminRights.write());
      }
      if (this.rank !== void 0) {
        b.write(Primitive.String.write(this.rank));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelParticipantCreator = ChannelParticipantCreator;
  class ChannelParticipantAdmin extends TLObject {
    canEdit;
    self;
    userId;
    inviterId;
    promotedBy;
    date;
    adminRights;
    rank;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelParticipantAdmin';
      this.constructorId = 885242707;
      this.subclassOfId = 3653762072;
      this._slots = [
        'canEdit',
        'self',
        'userId',
        'inviterId',
        'promotedBy',
        'date',
        'adminRights',
        'rank',
      ];
      this.canEdit = params.canEdit;
      this.self = params.self;
      this.userId = params.userId;
      this.inviterId = params.inviterId;
      this.promotedBy = params.promotedBy;
      this.date = params.date;
      this.adminRights = params.adminRights;
      this.rank = params.rank;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let canEdit = flags & (1 << 0) ? true : false;
      let self = flags & (1 << 1) ? true : false;
      let userId = await Primitive.Long.read(b);
      let inviterId = flags & (1 << 1) ? await Primitive.Long.read(b) : void 0;
      let promotedBy = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let adminRights = await TLObject.read(b);
      let rank = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
      return new Raw2.ChannelParticipantAdmin({
        canEdit,
        self,
        userId,
        inviterId,
        promotedBy,
        date,
        adminRights,
        rank,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.canEdit ? 1 << 0 : 0;
      flags |= this.self ? 1 << 1 : 0;
      flags |= this.inviterId !== void 0 ? 1 << 1 : 0;
      flags |= this.rank !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.inviterId !== void 0) {
        b.write(Primitive.Long.write(this.inviterId));
      }
      if (this.promotedBy !== void 0) {
        b.write(Primitive.Long.write(this.promotedBy));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.adminRights !== void 0) {
        b.write(this.adminRights.write());
      }
      if (this.rank !== void 0) {
        b.write(Primitive.String.write(this.rank));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelParticipantAdmin = ChannelParticipantAdmin;
  class ChannelParticipantBanned extends TLObject {
    left;
    peer;
    kickedBy;
    date;
    bannedRights;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelParticipantBanned';
      this.constructorId = 1844969806;
      this.subclassOfId = 3653762072;
      this._slots = ['left', 'peer', 'kickedBy', 'date', 'bannedRights'];
      this.left = params.left;
      this.peer = params.peer;
      this.kickedBy = params.kickedBy;
      this.date = params.date;
      this.bannedRights = params.bannedRights;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let left = flags & (1 << 0) ? true : false;
      let peer = await TLObject.read(b);
      let kickedBy = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let bannedRights = await TLObject.read(b);
      return new Raw2.ChannelParticipantBanned({
        left,
        peer,
        kickedBy,
        date,
        bannedRights,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.left ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.kickedBy !== void 0) {
        b.write(Primitive.Long.write(this.kickedBy));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.bannedRights !== void 0) {
        b.write(this.bannedRights.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelParticipantBanned = ChannelParticipantBanned;
  class ChannelParticipantLeft extends TLObject {
    peer;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelParticipantLeft';
      this.constructorId = 453242886;
      this.subclassOfId = 3653762072;
      this._slots = ['peer'];
      this.peer = params.peer;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      return new Raw2.ChannelParticipantLeft({ peer });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelParticipantLeft = ChannelParticipantLeft;
  class ChannelParticipantsRecent extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'ChannelParticipantsRecent';
      this.constructorId = 3728686201;
      this.subclassOfId = 3209570131;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.ChannelParticipantsRecent();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.ChannelParticipantsRecent = ChannelParticipantsRecent;
  class ChannelParticipantsAdmins extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'ChannelParticipantsAdmins';
      this.constructorId = 3026225513;
      this.subclassOfId = 3209570131;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.ChannelParticipantsAdmins();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.ChannelParticipantsAdmins = ChannelParticipantsAdmins;
  class ChannelParticipantsKicked extends TLObject {
    q;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelParticipantsKicked';
      this.constructorId = 2746567045;
      this.subclassOfId = 3209570131;
      this._slots = ['q'];
      this.q = params.q;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let q = await Primitive.String.read(b);
      return new Raw2.ChannelParticipantsKicked({ q });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.q !== void 0) {
        b.write(Primitive.String.write(this.q));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelParticipantsKicked = ChannelParticipantsKicked;
  class ChannelParticipantsBots extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'ChannelParticipantsBots';
      this.constructorId = 2966521435;
      this.subclassOfId = 3209570131;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.ChannelParticipantsBots();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.ChannelParticipantsBots = ChannelParticipantsBots;
  class ChannelParticipantsBanned extends TLObject {
    q;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelParticipantsBanned';
      this.constructorId = 338142689;
      this.subclassOfId = 3209570131;
      this._slots = ['q'];
      this.q = params.q;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let q = await Primitive.String.read(b);
      return new Raw2.ChannelParticipantsBanned({ q });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.q !== void 0) {
        b.write(Primitive.String.write(this.q));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelParticipantsBanned = ChannelParticipantsBanned;
  class ChannelParticipantsSearch extends TLObject {
    q;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelParticipantsSearch';
      this.constructorId = 106343499;
      this.subclassOfId = 3209570131;
      this._slots = ['q'];
      this.q = params.q;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let q = await Primitive.String.read(b);
      return new Raw2.ChannelParticipantsSearch({ q });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.q !== void 0) {
        b.write(Primitive.String.write(this.q));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelParticipantsSearch = ChannelParticipantsSearch;
  class ChannelParticipantsContacts extends TLObject {
    q;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelParticipantsContacts';
      this.constructorId = 3144345741;
      this.subclassOfId = 3209570131;
      this._slots = ['q'];
      this.q = params.q;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let q = await Primitive.String.read(b);
      return new Raw2.ChannelParticipantsContacts({ q });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.q !== void 0) {
        b.write(Primitive.String.write(this.q));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelParticipantsContacts = ChannelParticipantsContacts;
  class ChannelParticipantsMentions extends TLObject {
    q;
    topMsgId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelParticipantsMentions';
      this.constructorId = 3763035371;
      this.subclassOfId = 3209570131;
      this._slots = ['q', 'topMsgId'];
      this.q = params.q;
      this.topMsgId = params.topMsgId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let q = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let topMsgId = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.ChannelParticipantsMentions({ q, topMsgId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.q !== void 0 ? 1 << 0 : 0;
      flags |= this.topMsgId !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.q !== void 0) {
        b.write(Primitive.String.write(this.q));
      }
      if (this.topMsgId !== void 0) {
        b.write(Primitive.Int.write(this.topMsgId));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelParticipantsMentions = ChannelParticipantsMentions;
  class InputBotInlineMessageMediaAuto extends TLObject {
    invertMedia;
    message;
    entities;
    replyMarkup;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBotInlineMessageMediaAuto';
      this.constructorId = 864077702;
      this.subclassOfId = 1408974864;
      this._slots = ['invertMedia', 'message', 'entities', 'replyMarkup'];
      this.invertMedia = params.invertMedia;
      this.message = params.message;
      this.entities = params.entities;
      this.replyMarkup = params.replyMarkup;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let invertMedia = flags & (1 << 3) ? true : false;
      let message = await Primitive.String.read(b);
      let entities = flags & (1 << 1) ? await TLObject.read(b) : [];
      let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.InputBotInlineMessageMediaAuto({
        invertMedia,
        message,
        entities,
        replyMarkup,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.invertMedia ? 1 << 3 : 0;
      flags |= this.entities ? 1 << 1 : 0;
      flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      if (this.replyMarkup !== void 0) {
        b.write(this.replyMarkup.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputBotInlineMessageMediaAuto = InputBotInlineMessageMediaAuto;
  class InputBotInlineMessageText extends TLObject {
    noWebpage;
    invertMedia;
    message;
    entities;
    replyMarkup;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBotInlineMessageText';
      this.constructorId = 1036876423;
      this.subclassOfId = 1408974864;
      this._slots = ['noWebpage', 'invertMedia', 'message', 'entities', 'replyMarkup'];
      this.noWebpage = params.noWebpage;
      this.invertMedia = params.invertMedia;
      this.message = params.message;
      this.entities = params.entities;
      this.replyMarkup = params.replyMarkup;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let noWebpage = flags & (1 << 0) ? true : false;
      let invertMedia = flags & (1 << 3) ? true : false;
      let message = await Primitive.String.read(b);
      let entities = flags & (1 << 1) ? await TLObject.read(b) : [];
      let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.InputBotInlineMessageText({
        noWebpage,
        invertMedia,
        message,
        entities,
        replyMarkup,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.noWebpage ? 1 << 0 : 0;
      flags |= this.invertMedia ? 1 << 3 : 0;
      flags |= this.entities ? 1 << 1 : 0;
      flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      if (this.replyMarkup !== void 0) {
        b.write(this.replyMarkup.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputBotInlineMessageText = InputBotInlineMessageText;
  class InputBotInlineMessageMediaGeo extends TLObject {
    geoPoint;
    heading;
    period;
    proximityNotificationRadius;
    replyMarkup;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBotInlineMessageMediaGeo';
      this.constructorId = 2526190213;
      this.subclassOfId = 1408974864;
      this._slots = ['geoPoint', 'heading', 'period', 'proximityNotificationRadius', 'replyMarkup'];
      this.geoPoint = params.geoPoint;
      this.heading = params.heading;
      this.period = params.period;
      this.proximityNotificationRadius = params.proximityNotificationRadius;
      this.replyMarkup = params.replyMarkup;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let geoPoint = await TLObject.read(b);
      let heading = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let period = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      let proximityNotificationRadius = flags & (1 << 3) ? await Primitive.Int.read(b) : void 0;
      let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.InputBotInlineMessageMediaGeo({
        geoPoint,
        heading,
        period,
        proximityNotificationRadius,
        replyMarkup,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.heading !== void 0 ? 1 << 0 : 0;
      flags |= this.period !== void 0 ? 1 << 1 : 0;
      flags |= this.proximityNotificationRadius !== void 0 ? 1 << 3 : 0;
      flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.geoPoint !== void 0) {
        b.write(this.geoPoint.write());
      }
      if (this.heading !== void 0) {
        b.write(Primitive.Int.write(this.heading));
      }
      if (this.period !== void 0) {
        b.write(Primitive.Int.write(this.period));
      }
      if (this.proximityNotificationRadius !== void 0) {
        b.write(Primitive.Int.write(this.proximityNotificationRadius));
      }
      if (this.replyMarkup !== void 0) {
        b.write(this.replyMarkup.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputBotInlineMessageMediaGeo = InputBotInlineMessageMediaGeo;
  class InputBotInlineMessageMediaVenue extends TLObject {
    geoPoint;
    title;
    address;
    provider;
    venueId;
    venueType;
    replyMarkup;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBotInlineMessageMediaVenue';
      this.constructorId = 1098628881;
      this.subclassOfId = 1408974864;
      this._slots = [
        'geoPoint',
        'title',
        'address',
        'provider',
        'venueId',
        'venueType',
        'replyMarkup',
      ];
      this.geoPoint = params.geoPoint;
      this.title = params.title;
      this.address = params.address;
      this.provider = params.provider;
      this.venueId = params.venueId;
      this.venueType = params.venueType;
      this.replyMarkup = params.replyMarkup;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let geoPoint = await TLObject.read(b);
      let title = await Primitive.String.read(b);
      let address = await Primitive.String.read(b);
      let provider = await Primitive.String.read(b);
      let venueId = await Primitive.String.read(b);
      let venueType = await Primitive.String.read(b);
      let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.InputBotInlineMessageMediaVenue({
        geoPoint,
        title,
        address,
        provider,
        venueId,
        venueType,
        replyMarkup,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.geoPoint !== void 0) {
        b.write(this.geoPoint.write());
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.address !== void 0) {
        b.write(Primitive.String.write(this.address));
      }
      if (this.provider !== void 0) {
        b.write(Primitive.String.write(this.provider));
      }
      if (this.venueId !== void 0) {
        b.write(Primitive.String.write(this.venueId));
      }
      if (this.venueType !== void 0) {
        b.write(Primitive.String.write(this.venueType));
      }
      if (this.replyMarkup !== void 0) {
        b.write(this.replyMarkup.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputBotInlineMessageMediaVenue = InputBotInlineMessageMediaVenue;
  class InputBotInlineMessageMediaContact extends TLObject {
    phoneNumber;
    firstName;
    lastName;
    vcard;
    replyMarkup;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBotInlineMessageMediaContact';
      this.constructorId = 2800599037;
      this.subclassOfId = 1408974864;
      this._slots = ['phoneNumber', 'firstName', 'lastName', 'vcard', 'replyMarkup'];
      this.phoneNumber = params.phoneNumber;
      this.firstName = params.firstName;
      this.lastName = params.lastName;
      this.vcard = params.vcard;
      this.replyMarkup = params.replyMarkup;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let phoneNumber = await Primitive.String.read(b);
      let firstName = await Primitive.String.read(b);
      let lastName = await Primitive.String.read(b);
      let vcard = await Primitive.String.read(b);
      let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.InputBotInlineMessageMediaContact({
        phoneNumber,
        firstName,
        lastName,
        vcard,
        replyMarkup,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.phoneNumber !== void 0) {
        b.write(Primitive.String.write(this.phoneNumber));
      }
      if (this.firstName !== void 0) {
        b.write(Primitive.String.write(this.firstName));
      }
      if (this.lastName !== void 0) {
        b.write(Primitive.String.write(this.lastName));
      }
      if (this.vcard !== void 0) {
        b.write(Primitive.String.write(this.vcard));
      }
      if (this.replyMarkup !== void 0) {
        b.write(this.replyMarkup.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputBotInlineMessageMediaContact = InputBotInlineMessageMediaContact;
  class InputBotInlineMessageGame extends TLObject {
    replyMarkup;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBotInlineMessageGame';
      this.constructorId = 1262639204;
      this.subclassOfId = 1408974864;
      this._slots = ['replyMarkup'];
      this.replyMarkup = params.replyMarkup;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.InputBotInlineMessageGame({ replyMarkup });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.replyMarkup !== void 0) {
        b.write(this.replyMarkup.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputBotInlineMessageGame = InputBotInlineMessageGame;
  class InputBotInlineMessageMediaInvoice extends TLObject {
    title;
    description;
    photo;
    invoice;
    payload;
    provider;
    providerData;
    replyMarkup;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBotInlineMessageMediaInvoice';
      this.constructorId = 3622273573;
      this.subclassOfId = 1408974864;
      this._slots = [
        'title',
        'description',
        'photo',
        'invoice',
        'payload',
        'provider',
        'providerData',
        'replyMarkup',
      ];
      this.title = params.title;
      this.description = params.description;
      this.photo = params.photo;
      this.invoice = params.invoice;
      this.payload = params.payload;
      this.provider = params.provider;
      this.providerData = params.providerData;
      this.replyMarkup = params.replyMarkup;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let title = await Primitive.String.read(b);
      let description = await Primitive.String.read(b);
      let photo = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let invoice = await TLObject.read(b);
      let payload = await Primitive.Bytes.read(b);
      let provider = await Primitive.String.read(b);
      let providerData = await TLObject.read(b);
      let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.InputBotInlineMessageMediaInvoice({
        title,
        description,
        photo,
        invoice,
        payload,
        provider,
        providerData,
        replyMarkup,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.photo !== void 0 ? 1 << 0 : 0;
      flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.description !== void 0) {
        b.write(Primitive.String.write(this.description));
      }
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      if (this.invoice !== void 0) {
        b.write(this.invoice.write());
      }
      if (this.payload !== void 0) {
        b.write(Primitive.Bytes.write(this.payload));
      }
      if (this.provider !== void 0) {
        b.write(Primitive.String.write(this.provider));
      }
      if (this.providerData !== void 0) {
        b.write(this.providerData.write());
      }
      if (this.replyMarkup !== void 0) {
        b.write(this.replyMarkup.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputBotInlineMessageMediaInvoice = InputBotInlineMessageMediaInvoice;
  class InputBotInlineMessageMediaWebPage extends TLObject {
    invertMedia;
    forceLargeMedia;
    forceSmallMedia;
    optional;
    message;
    entities;
    url;
    replyMarkup;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBotInlineMessageMediaWebPage';
      this.constructorId = 3185362192;
      this.subclassOfId = 1408974864;
      this._slots = [
        'invertMedia',
        'forceLargeMedia',
        'forceSmallMedia',
        'optional',
        'message',
        'entities',
        'url',
        'replyMarkup',
      ];
      this.invertMedia = params.invertMedia;
      this.forceLargeMedia = params.forceLargeMedia;
      this.forceSmallMedia = params.forceSmallMedia;
      this.optional = params.optional;
      this.message = params.message;
      this.entities = params.entities;
      this.url = params.url;
      this.replyMarkup = params.replyMarkup;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let invertMedia = flags & (1 << 3) ? true : false;
      let forceLargeMedia = flags & (1 << 4) ? true : false;
      let forceSmallMedia = flags & (1 << 5) ? true : false;
      let optional = flags & (1 << 6) ? true : false;
      let message = await Primitive.String.read(b);
      let entities = flags & (1 << 1) ? await TLObject.read(b) : [];
      let url = await Primitive.String.read(b);
      let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.InputBotInlineMessageMediaWebPage({
        invertMedia,
        forceLargeMedia,
        forceSmallMedia,
        optional,
        message,
        entities,
        url,
        replyMarkup,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.invertMedia ? 1 << 3 : 0;
      flags |= this.forceLargeMedia ? 1 << 4 : 0;
      flags |= this.forceSmallMedia ? 1 << 5 : 0;
      flags |= this.optional ? 1 << 6 : 0;
      flags |= this.entities ? 1 << 1 : 0;
      flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.replyMarkup !== void 0) {
        b.write(this.replyMarkup.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputBotInlineMessageMediaWebPage = InputBotInlineMessageMediaWebPage;
  class InputBotInlineResult extends TLObject {
    id;
    type;
    title;
    description;
    url;
    thumb;
    content;
    sendMessage;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBotInlineResult';
      this.constructorId = 2294256409;
      this.subclassOfId = 2158273502;
      this._slots = [
        'id',
        'type',
        'title',
        'description',
        'url',
        'thumb',
        'content',
        'sendMessage',
      ];
      this.id = params.id;
      this.type = params.type;
      this.title = params.title;
      this.description = params.description;
      this.url = params.url;
      this.thumb = params.thumb;
      this.content = params.content;
      this.sendMessage = params.sendMessage;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let id = await Primitive.String.read(b);
      let type = await Primitive.String.read(b);
      let title = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let description = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
      let url = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
      let thumb = flags & (1 << 4) ? await TLObject.read(b) : void 0;
      let content = flags & (1 << 5) ? await TLObject.read(b) : void 0;
      let sendMessage = await TLObject.read(b);
      return new Raw2.InputBotInlineResult({
        id,
        type,
        title,
        description,
        url,
        thumb,
        content,
        sendMessage,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.title !== void 0 ? 1 << 1 : 0;
      flags |= this.description !== void 0 ? 1 << 2 : 0;
      flags |= this.url !== void 0 ? 1 << 3 : 0;
      flags |= this.thumb !== void 0 ? 1 << 4 : 0;
      flags |= this.content !== void 0 ? 1 << 5 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.String.write(this.id));
      }
      if (this.type !== void 0) {
        b.write(Primitive.String.write(this.type));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.description !== void 0) {
        b.write(Primitive.String.write(this.description));
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.thumb !== void 0) {
        b.write(this.thumb.write());
      }
      if (this.content !== void 0) {
        b.write(this.content.write());
      }
      if (this.sendMessage !== void 0) {
        b.write(this.sendMessage.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputBotInlineResult = InputBotInlineResult;
  class InputBotInlineResultPhoto extends TLObject {
    id;
    type;
    photo;
    sendMessage;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBotInlineResultPhoto';
      this.constructorId = 2832753831;
      this.subclassOfId = 2158273502;
      this._slots = ['id', 'type', 'photo', 'sendMessage'];
      this.id = params.id;
      this.type = params.type;
      this.photo = params.photo;
      this.sendMessage = params.sendMessage;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.String.read(b);
      let type = await Primitive.String.read(b);
      let photo = await TLObject.read(b);
      let sendMessage = await TLObject.read(b);
      return new Raw2.InputBotInlineResultPhoto({
        id,
        type,
        photo,
        sendMessage,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.String.write(this.id));
      }
      if (this.type !== void 0) {
        b.write(Primitive.String.write(this.type));
      }
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      if (this.sendMessage !== void 0) {
        b.write(this.sendMessage.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputBotInlineResultPhoto = InputBotInlineResultPhoto;
  class InputBotInlineResultDocument extends TLObject {
    id;
    type;
    title;
    description;
    document;
    sendMessage;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBotInlineResultDocument';
      this.constructorId = 4294507972;
      this.subclassOfId = 2158273502;
      this._slots = ['id', 'type', 'title', 'description', 'document', 'sendMessage'];
      this.id = params.id;
      this.type = params.type;
      this.title = params.title;
      this.description = params.description;
      this.document = params.document;
      this.sendMessage = params.sendMessage;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let id = await Primitive.String.read(b);
      let type = await Primitive.String.read(b);
      let title = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let description = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
      let document = await TLObject.read(b);
      let sendMessage = await TLObject.read(b);
      return new Raw2.InputBotInlineResultDocument({
        id,
        type,
        title,
        description,
        document,
        sendMessage,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.title !== void 0 ? 1 << 1 : 0;
      flags |= this.description !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.String.write(this.id));
      }
      if (this.type !== void 0) {
        b.write(Primitive.String.write(this.type));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.description !== void 0) {
        b.write(Primitive.String.write(this.description));
      }
      if (this.document !== void 0) {
        b.write(this.document.write());
      }
      if (this.sendMessage !== void 0) {
        b.write(this.sendMessage.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputBotInlineResultDocument = InputBotInlineResultDocument;
  class InputBotInlineResultGame extends TLObject {
    id;
    shortName;
    sendMessage;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBotInlineResultGame';
      this.constructorId = 1336154098;
      this.subclassOfId = 2158273502;
      this._slots = ['id', 'shortName', 'sendMessage'];
      this.id = params.id;
      this.shortName = params.shortName;
      this.sendMessage = params.sendMessage;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.String.read(b);
      let shortName = await Primitive.String.read(b);
      let sendMessage = await TLObject.read(b);
      return new Raw2.InputBotInlineResultGame({
        id,
        shortName,
        sendMessage,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.String.write(this.id));
      }
      if (this.shortName !== void 0) {
        b.write(Primitive.String.write(this.shortName));
      }
      if (this.sendMessage !== void 0) {
        b.write(this.sendMessage.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputBotInlineResultGame = InputBotInlineResultGame;
  class BotInlineMessageMediaAuto extends TLObject {
    invertMedia;
    message;
    entities;
    replyMarkup;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BotInlineMessageMediaAuto';
      this.constructorId = 1984755728;
      this.subclassOfId = 3297841032;
      this._slots = ['invertMedia', 'message', 'entities', 'replyMarkup'];
      this.invertMedia = params.invertMedia;
      this.message = params.message;
      this.entities = params.entities;
      this.replyMarkup = params.replyMarkup;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let invertMedia = flags & (1 << 3) ? true : false;
      let message = await Primitive.String.read(b);
      let entities = flags & (1 << 1) ? await TLObject.read(b) : [];
      let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.BotInlineMessageMediaAuto({
        invertMedia,
        message,
        entities,
        replyMarkup,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.invertMedia ? 1 << 3 : 0;
      flags |= this.entities ? 1 << 1 : 0;
      flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      if (this.replyMarkup !== void 0) {
        b.write(this.replyMarkup.write());
      }
      return b.buffer;
    }
  }
  Raw2.BotInlineMessageMediaAuto = BotInlineMessageMediaAuto;
  class BotInlineMessageText extends TLObject {
    noWebpage;
    invertMedia;
    message;
    entities;
    replyMarkup;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BotInlineMessageText';
      this.constructorId = 2357159394;
      this.subclassOfId = 3297841032;
      this._slots = ['noWebpage', 'invertMedia', 'message', 'entities', 'replyMarkup'];
      this.noWebpage = params.noWebpage;
      this.invertMedia = params.invertMedia;
      this.message = params.message;
      this.entities = params.entities;
      this.replyMarkup = params.replyMarkup;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let noWebpage = flags & (1 << 0) ? true : false;
      let invertMedia = flags & (1 << 3) ? true : false;
      let message = await Primitive.String.read(b);
      let entities = flags & (1 << 1) ? await TLObject.read(b) : [];
      let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.BotInlineMessageText({
        noWebpage,
        invertMedia,
        message,
        entities,
        replyMarkup,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.noWebpage ? 1 << 0 : 0;
      flags |= this.invertMedia ? 1 << 3 : 0;
      flags |= this.entities ? 1 << 1 : 0;
      flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      if (this.replyMarkup !== void 0) {
        b.write(this.replyMarkup.write());
      }
      return b.buffer;
    }
  }
  Raw2.BotInlineMessageText = BotInlineMessageText;
  class BotInlineMessageMediaGeo extends TLObject {
    geo;
    heading;
    period;
    proximityNotificationRadius;
    replyMarkup;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BotInlineMessageMediaGeo';
      this.constructorId = 85477117;
      this.subclassOfId = 3297841032;
      this._slots = ['geo', 'heading', 'period', 'proximityNotificationRadius', 'replyMarkup'];
      this.geo = params.geo;
      this.heading = params.heading;
      this.period = params.period;
      this.proximityNotificationRadius = params.proximityNotificationRadius;
      this.replyMarkup = params.replyMarkup;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let geo = await TLObject.read(b);
      let heading = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let period = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      let proximityNotificationRadius = flags & (1 << 3) ? await Primitive.Int.read(b) : void 0;
      let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.BotInlineMessageMediaGeo({
        geo,
        heading,
        period,
        proximityNotificationRadius,
        replyMarkup,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.heading !== void 0 ? 1 << 0 : 0;
      flags |= this.period !== void 0 ? 1 << 1 : 0;
      flags |= this.proximityNotificationRadius !== void 0 ? 1 << 3 : 0;
      flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.geo !== void 0) {
        b.write(this.geo.write());
      }
      if (this.heading !== void 0) {
        b.write(Primitive.Int.write(this.heading));
      }
      if (this.period !== void 0) {
        b.write(Primitive.Int.write(this.period));
      }
      if (this.proximityNotificationRadius !== void 0) {
        b.write(Primitive.Int.write(this.proximityNotificationRadius));
      }
      if (this.replyMarkup !== void 0) {
        b.write(this.replyMarkup.write());
      }
      return b.buffer;
    }
  }
  Raw2.BotInlineMessageMediaGeo = BotInlineMessageMediaGeo;
  class BotInlineMessageMediaVenue extends TLObject {
    geo;
    title;
    address;
    provider;
    venueId;
    venueType;
    replyMarkup;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BotInlineMessageMediaVenue';
      this.constructorId = 2324063644;
      this.subclassOfId = 3297841032;
      this._slots = ['geo', 'title', 'address', 'provider', 'venueId', 'venueType', 'replyMarkup'];
      this.geo = params.geo;
      this.title = params.title;
      this.address = params.address;
      this.provider = params.provider;
      this.venueId = params.venueId;
      this.venueType = params.venueType;
      this.replyMarkup = params.replyMarkup;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let geo = await TLObject.read(b);
      let title = await Primitive.String.read(b);
      let address = await Primitive.String.read(b);
      let provider = await Primitive.String.read(b);
      let venueId = await Primitive.String.read(b);
      let venueType = await Primitive.String.read(b);
      let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.BotInlineMessageMediaVenue({
        geo,
        title,
        address,
        provider,
        venueId,
        venueType,
        replyMarkup,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.geo !== void 0) {
        b.write(this.geo.write());
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.address !== void 0) {
        b.write(Primitive.String.write(this.address));
      }
      if (this.provider !== void 0) {
        b.write(Primitive.String.write(this.provider));
      }
      if (this.venueId !== void 0) {
        b.write(Primitive.String.write(this.venueId));
      }
      if (this.venueType !== void 0) {
        b.write(Primitive.String.write(this.venueType));
      }
      if (this.replyMarkup !== void 0) {
        b.write(this.replyMarkup.write());
      }
      return b.buffer;
    }
  }
  Raw2.BotInlineMessageMediaVenue = BotInlineMessageMediaVenue;
  class BotInlineMessageMediaContact extends TLObject {
    phoneNumber;
    firstName;
    lastName;
    vcard;
    replyMarkup;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BotInlineMessageMediaContact';
      this.constructorId = 416402882;
      this.subclassOfId = 3297841032;
      this._slots = ['phoneNumber', 'firstName', 'lastName', 'vcard', 'replyMarkup'];
      this.phoneNumber = params.phoneNumber;
      this.firstName = params.firstName;
      this.lastName = params.lastName;
      this.vcard = params.vcard;
      this.replyMarkup = params.replyMarkup;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let phoneNumber = await Primitive.String.read(b);
      let firstName = await Primitive.String.read(b);
      let lastName = await Primitive.String.read(b);
      let vcard = await Primitive.String.read(b);
      let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.BotInlineMessageMediaContact({
        phoneNumber,
        firstName,
        lastName,
        vcard,
        replyMarkup,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.phoneNumber !== void 0) {
        b.write(Primitive.String.write(this.phoneNumber));
      }
      if (this.firstName !== void 0) {
        b.write(Primitive.String.write(this.firstName));
      }
      if (this.lastName !== void 0) {
        b.write(Primitive.String.write(this.lastName));
      }
      if (this.vcard !== void 0) {
        b.write(Primitive.String.write(this.vcard));
      }
      if (this.replyMarkup !== void 0) {
        b.write(this.replyMarkup.write());
      }
      return b.buffer;
    }
  }
  Raw2.BotInlineMessageMediaContact = BotInlineMessageMediaContact;
  class BotInlineMessageMediaInvoice extends TLObject {
    shippingAddressRequested;
    test;
    title;
    description;
    photo;
    currency;
    totalAmount;
    replyMarkup;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BotInlineMessageMediaInvoice';
      this.constructorId = 894081801;
      this.subclassOfId = 3297841032;
      this._slots = [
        'shippingAddressRequested',
        'test',
        'title',
        'description',
        'photo',
        'currency',
        'totalAmount',
        'replyMarkup',
      ];
      this.shippingAddressRequested = params.shippingAddressRequested;
      this.test = params.test;
      this.title = params.title;
      this.description = params.description;
      this.photo = params.photo;
      this.currency = params.currency;
      this.totalAmount = params.totalAmount;
      this.replyMarkup = params.replyMarkup;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let shippingAddressRequested = flags & (1 << 1) ? true : false;
      let test = flags & (1 << 3) ? true : false;
      let title = await Primitive.String.read(b);
      let description = await Primitive.String.read(b);
      let photo = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let currency = await Primitive.String.read(b);
      let totalAmount = await Primitive.Long.read(b);
      let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.BotInlineMessageMediaInvoice({
        shippingAddressRequested,
        test,
        title,
        description,
        photo,
        currency,
        totalAmount,
        replyMarkup,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.shippingAddressRequested ? 1 << 1 : 0;
      flags |= this.test ? 1 << 3 : 0;
      flags |= this.photo !== void 0 ? 1 << 0 : 0;
      flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.description !== void 0) {
        b.write(Primitive.String.write(this.description));
      }
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      if (this.currency !== void 0) {
        b.write(Primitive.String.write(this.currency));
      }
      if (this.totalAmount !== void 0) {
        b.write(Primitive.Long.write(this.totalAmount));
      }
      if (this.replyMarkup !== void 0) {
        b.write(this.replyMarkup.write());
      }
      return b.buffer;
    }
  }
  Raw2.BotInlineMessageMediaInvoice = BotInlineMessageMediaInvoice;
  class BotInlineMessageMediaWebPage extends TLObject {
    invertMedia;
    forceLargeMedia;
    forceSmallMedia;
    manual;
    safe;
    message;
    entities;
    url;
    replyMarkup;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BotInlineMessageMediaWebPage';
      this.constructorId = 2157631910;
      this.subclassOfId = 3297841032;
      this._slots = [
        'invertMedia',
        'forceLargeMedia',
        'forceSmallMedia',
        'manual',
        'safe',
        'message',
        'entities',
        'url',
        'replyMarkup',
      ];
      this.invertMedia = params.invertMedia;
      this.forceLargeMedia = params.forceLargeMedia;
      this.forceSmallMedia = params.forceSmallMedia;
      this.manual = params.manual;
      this.safe = params.safe;
      this.message = params.message;
      this.entities = params.entities;
      this.url = params.url;
      this.replyMarkup = params.replyMarkup;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let invertMedia = flags & (1 << 3) ? true : false;
      let forceLargeMedia = flags & (1 << 4) ? true : false;
      let forceSmallMedia = flags & (1 << 5) ? true : false;
      let manual = flags & (1 << 7) ? true : false;
      let safe = flags & (1 << 8) ? true : false;
      let message = await Primitive.String.read(b);
      let entities = flags & (1 << 1) ? await TLObject.read(b) : [];
      let url = await Primitive.String.read(b);
      let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.BotInlineMessageMediaWebPage({
        invertMedia,
        forceLargeMedia,
        forceSmallMedia,
        manual,
        safe,
        message,
        entities,
        url,
        replyMarkup,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.invertMedia ? 1 << 3 : 0;
      flags |= this.forceLargeMedia ? 1 << 4 : 0;
      flags |= this.forceSmallMedia ? 1 << 5 : 0;
      flags |= this.manual ? 1 << 7 : 0;
      flags |= this.safe ? 1 << 8 : 0;
      flags |= this.entities ? 1 << 1 : 0;
      flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.replyMarkup !== void 0) {
        b.write(this.replyMarkup.write());
      }
      return b.buffer;
    }
  }
  Raw2.BotInlineMessageMediaWebPage = BotInlineMessageMediaWebPage;
  class BotInlineResult extends TLObject {
    id;
    type;
    title;
    description;
    url;
    thumb;
    content;
    sendMessage;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BotInlineResult';
      this.constructorId = 295067450;
      this.subclassOfId = 942846933;
      this._slots = [
        'id',
        'type',
        'title',
        'description',
        'url',
        'thumb',
        'content',
        'sendMessage',
      ];
      this.id = params.id;
      this.type = params.type;
      this.title = params.title;
      this.description = params.description;
      this.url = params.url;
      this.thumb = params.thumb;
      this.content = params.content;
      this.sendMessage = params.sendMessage;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let id = await Primitive.String.read(b);
      let type = await Primitive.String.read(b);
      let title = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let description = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
      let url = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
      let thumb = flags & (1 << 4) ? await TLObject.read(b) : void 0;
      let content = flags & (1 << 5) ? await TLObject.read(b) : void 0;
      let sendMessage = await TLObject.read(b);
      return new Raw2.BotInlineResult({
        id,
        type,
        title,
        description,
        url,
        thumb,
        content,
        sendMessage,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.title !== void 0 ? 1 << 1 : 0;
      flags |= this.description !== void 0 ? 1 << 2 : 0;
      flags |= this.url !== void 0 ? 1 << 3 : 0;
      flags |= this.thumb !== void 0 ? 1 << 4 : 0;
      flags |= this.content !== void 0 ? 1 << 5 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.String.write(this.id));
      }
      if (this.type !== void 0) {
        b.write(Primitive.String.write(this.type));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.description !== void 0) {
        b.write(Primitive.String.write(this.description));
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.thumb !== void 0) {
        b.write(this.thumb.write());
      }
      if (this.content !== void 0) {
        b.write(this.content.write());
      }
      if (this.sendMessage !== void 0) {
        b.write(this.sendMessage.write());
      }
      return b.buffer;
    }
  }
  Raw2.BotInlineResult = BotInlineResult;
  class BotInlineMediaResult extends TLObject {
    id;
    type;
    photo;
    document;
    title;
    description;
    sendMessage;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BotInlineMediaResult';
      this.constructorId = 400266251;
      this.subclassOfId = 942846933;
      this._slots = ['id', 'type', 'photo', 'document', 'title', 'description', 'sendMessage'];
      this.id = params.id;
      this.type = params.type;
      this.photo = params.photo;
      this.document = params.document;
      this.title = params.title;
      this.description = params.description;
      this.sendMessage = params.sendMessage;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let id = await Primitive.String.read(b);
      let type = await Primitive.String.read(b);
      let photo = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let document = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      let title = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
      let description = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
      let sendMessage = await TLObject.read(b);
      return new Raw2.BotInlineMediaResult({
        id,
        type,
        photo,
        document,
        title,
        description,
        sendMessage,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.photo !== void 0 ? 1 << 0 : 0;
      flags |= this.document !== void 0 ? 1 << 1 : 0;
      flags |= this.title !== void 0 ? 1 << 2 : 0;
      flags |= this.description !== void 0 ? 1 << 3 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.String.write(this.id));
      }
      if (this.type !== void 0) {
        b.write(Primitive.String.write(this.type));
      }
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      if (this.document !== void 0) {
        b.write(this.document.write());
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.description !== void 0) {
        b.write(Primitive.String.write(this.description));
      }
      if (this.sendMessage !== void 0) {
        b.write(this.sendMessage.write());
      }
      return b.buffer;
    }
  }
  Raw2.BotInlineMediaResult = BotInlineMediaResult;
  class ExportedMessageLink extends TLObject {
    link;
    html;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ExportedMessageLink';
      this.constructorId = 1571494644;
      this.subclassOfId = 3739632844;
      this._slots = ['link', 'html'];
      this.link = params.link;
      this.html = params.html;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let link = await Primitive.String.read(b);
      let html = await Primitive.String.read(b);
      return new Raw2.ExportedMessageLink({ link, html });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.link !== void 0) {
        b.write(Primitive.String.write(this.link));
      }
      if (this.html !== void 0) {
        b.write(Primitive.String.write(this.html));
      }
      return b.buffer;
    }
  }
  Raw2.ExportedMessageLink = ExportedMessageLink;
  class MessageFwdHeader extends TLObject {
    imported;
    savedOut;
    fromId;
    fromName;
    date;
    channelPost;
    postAuthor;
    savedFromPeer;
    savedFromMsgId;
    savedFromId;
    savedFromName;
    savedDate;
    psaType;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageFwdHeader';
      this.constructorId = 1313731771;
      this.subclassOfId = 2049468420;
      this._slots = [
        'imported',
        'savedOut',
        'fromId',
        'fromName',
        'date',
        'channelPost',
        'postAuthor',
        'savedFromPeer',
        'savedFromMsgId',
        'savedFromId',
        'savedFromName',
        'savedDate',
        'psaType',
      ];
      this.imported = params.imported;
      this.savedOut = params.savedOut;
      this.fromId = params.fromId;
      this.fromName = params.fromName;
      this.date = params.date;
      this.channelPost = params.channelPost;
      this.postAuthor = params.postAuthor;
      this.savedFromPeer = params.savedFromPeer;
      this.savedFromMsgId = params.savedFromMsgId;
      this.savedFromId = params.savedFromId;
      this.savedFromName = params.savedFromName;
      this.savedDate = params.savedDate;
      this.psaType = params.psaType;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let imported = flags & (1 << 7) ? true : false;
      let savedOut = flags & (1 << 11) ? true : false;
      let fromId = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let fromName = flags & (1 << 5) ? await Primitive.String.read(b) : void 0;
      let date = await Primitive.Int.read(b);
      let channelPost = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      let postAuthor = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
      let savedFromPeer = flags & (1 << 4) ? await TLObject.read(b) : void 0;
      let savedFromMsgId = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
      let savedFromId = flags & (1 << 8) ? await TLObject.read(b) : void 0;
      let savedFromName = flags & (1 << 9) ? await Primitive.String.read(b) : void 0;
      let savedDate = flags & (1 << 10) ? await Primitive.Int.read(b) : void 0;
      let psaType = flags & (1 << 6) ? await Primitive.String.read(b) : void 0;
      return new Raw2.MessageFwdHeader({
        imported,
        savedOut,
        fromId,
        fromName,
        date,
        channelPost,
        postAuthor,
        savedFromPeer,
        savedFromMsgId,
        savedFromId,
        savedFromName,
        savedDate,
        psaType,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.imported ? 1 << 7 : 0;
      flags |= this.savedOut ? 1 << 11 : 0;
      flags |= this.fromId !== void 0 ? 1 << 0 : 0;
      flags |= this.fromName !== void 0 ? 1 << 5 : 0;
      flags |= this.channelPost !== void 0 ? 1 << 2 : 0;
      flags |= this.postAuthor !== void 0 ? 1 << 3 : 0;
      flags |= this.savedFromPeer !== void 0 ? 1 << 4 : 0;
      flags |= this.savedFromMsgId !== void 0 ? 1 << 4 : 0;
      flags |= this.savedFromId !== void 0 ? 1 << 8 : 0;
      flags |= this.savedFromName !== void 0 ? 1 << 9 : 0;
      flags |= this.savedDate !== void 0 ? 1 << 10 : 0;
      flags |= this.psaType !== void 0 ? 1 << 6 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.fromId !== void 0) {
        b.write(this.fromId.write());
      }
      if (this.fromName !== void 0) {
        b.write(Primitive.String.write(this.fromName));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.channelPost !== void 0) {
        b.write(Primitive.Int.write(this.channelPost));
      }
      if (this.postAuthor !== void 0) {
        b.write(Primitive.String.write(this.postAuthor));
      }
      if (this.savedFromPeer !== void 0) {
        b.write(this.savedFromPeer.write());
      }
      if (this.savedFromMsgId !== void 0) {
        b.write(Primitive.Int.write(this.savedFromMsgId));
      }
      if (this.savedFromId !== void 0) {
        b.write(this.savedFromId.write());
      }
      if (this.savedFromName !== void 0) {
        b.write(Primitive.String.write(this.savedFromName));
      }
      if (this.savedDate !== void 0) {
        b.write(Primitive.Int.write(this.savedDate));
      }
      if (this.psaType !== void 0) {
        b.write(Primitive.String.write(this.psaType));
      }
      return b.buffer;
    }
  }
  Raw2.MessageFwdHeader = MessageFwdHeader;
  class InputBotInlineMessageID extends TLObject {
    dcId;
    id;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBotInlineMessageID';
      this.constructorId = 2299280777;
      this.subclassOfId = 768434944;
      this._slots = ['dcId', 'id', 'accessHash'];
      this.dcId = params.dcId;
      this.id = params.id;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let dcId = await Primitive.Int.read(b);
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputBotInlineMessageID({ dcId, id, accessHash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.dcId !== void 0) {
        b.write(Primitive.Int.write(this.dcId));
      }
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputBotInlineMessageID = InputBotInlineMessageID;
  class InputBotInlineMessageID64 extends TLObject {
    dcId;
    ownerId;
    id;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBotInlineMessageID64';
      this.constructorId = 3067680215;
      this.subclassOfId = 768434944;
      this._slots = ['dcId', 'ownerId', 'id', 'accessHash'];
      this.dcId = params.dcId;
      this.ownerId = params.ownerId;
      this.id = params.id;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let dcId = await Primitive.Int.read(b);
      let ownerId = await Primitive.Long.read(b);
      let id = await Primitive.Int.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputBotInlineMessageID64({
        dcId,
        ownerId,
        id,
        accessHash,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.dcId !== void 0) {
        b.write(Primitive.Int.write(this.dcId));
      }
      if (this.ownerId !== void 0) {
        b.write(Primitive.Long.write(this.ownerId));
      }
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputBotInlineMessageID64 = InputBotInlineMessageID64;
  class InlineBotSwitchPM extends TLObject {
    text;
    startParam;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InlineBotSwitchPM';
      this.constructorId = 1008755359;
      this.subclassOfId = 2192701243;
      this._slots = ['text', 'startParam'];
      this.text = params.text;
      this.startParam = params.startParam;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      let startParam = await Primitive.String.read(b);
      return new Raw2.InlineBotSwitchPM({ text, startParam });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      if (this.startParam !== void 0) {
        b.write(Primitive.String.write(this.startParam));
      }
      return b.buffer;
    }
  }
  Raw2.InlineBotSwitchPM = InlineBotSwitchPM;
  class TopPeer extends TLObject {
    peer;
    rating;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'TopPeer';
      this.constructorId = 3989684315;
      this.subclassOfId = 1763100161;
      this._slots = ['peer', 'rating'];
      this.peer = params.peer;
      this.rating = params.rating;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let rating = await Primitive.Double.read(b);
      return new Raw2.TopPeer({ peer, rating });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.rating !== void 0) {
        b.write(Primitive.Double.write(this.rating));
      }
      return b.buffer;
    }
  }
  Raw2.TopPeer = TopPeer;
  class TopPeerCategoryBotsPM extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'TopPeerCategoryBotsPM';
      this.constructorId = 2875595611;
      this.subclassOfId = 3723502850;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.TopPeerCategoryBotsPM();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.TopPeerCategoryBotsPM = TopPeerCategoryBotsPM;
  class TopPeerCategoryBotsInline extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'TopPeerCategoryBotsInline';
      this.constructorId = 344356834;
      this.subclassOfId = 3723502850;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.TopPeerCategoryBotsInline();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.TopPeerCategoryBotsInline = TopPeerCategoryBotsInline;
  class TopPeerCategoryCorrespondents extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'TopPeerCategoryCorrespondents';
      this.constructorId = 104314861;
      this.subclassOfId = 3723502850;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.TopPeerCategoryCorrespondents();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.TopPeerCategoryCorrespondents = TopPeerCategoryCorrespondents;
  class TopPeerCategoryGroups extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'TopPeerCategoryGroups';
      this.constructorId = 3172442442;
      this.subclassOfId = 3723502850;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.TopPeerCategoryGroups();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.TopPeerCategoryGroups = TopPeerCategoryGroups;
  class TopPeerCategoryChannels extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'TopPeerCategoryChannels';
      this.constructorId = 371037736;
      this.subclassOfId = 3723502850;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.TopPeerCategoryChannels();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.TopPeerCategoryChannels = TopPeerCategoryChannels;
  class TopPeerCategoryPhoneCalls extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'TopPeerCategoryPhoneCalls';
      this.constructorId = 511092620;
      this.subclassOfId = 3723502850;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.TopPeerCategoryPhoneCalls();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.TopPeerCategoryPhoneCalls = TopPeerCategoryPhoneCalls;
  class TopPeerCategoryForwardUsers extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'TopPeerCategoryForwardUsers';
      this.constructorId = 2822794409;
      this.subclassOfId = 3723502850;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.TopPeerCategoryForwardUsers();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.TopPeerCategoryForwardUsers = TopPeerCategoryForwardUsers;
  class TopPeerCategoryForwardChats extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'TopPeerCategoryForwardChats';
      this.constructorId = 4226728176;
      this.subclassOfId = 3723502850;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.TopPeerCategoryForwardChats();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.TopPeerCategoryForwardChats = TopPeerCategoryForwardChats;
  class TopPeerCategoryPeers extends TLObject {
    category;
    count;
    peers;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'TopPeerCategoryPeers';
      this.constructorId = 4219683473;
      this.subclassOfId = 78563632;
      this._slots = ['category', 'count', 'peers'];
      this.category = params.category;
      this.count = params.count;
      this.peers = params.peers;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let category = await TLObject.read(b);
      let count = await Primitive.Int.read(b);
      let peers = await TLObject.read(b);
      return new Raw2.TopPeerCategoryPeers({ category, count, peers });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.category !== void 0) {
        b.write(this.category.write());
      }
      if (this.count !== void 0) {
        b.write(Primitive.Int.write(this.count));
      }
      if (this.peers) {
        b.write(Primitive.Vector.write(this.peers));
      }
      return b.buffer;
    }
  }
  Raw2.TopPeerCategoryPeers = TopPeerCategoryPeers;
  class DraftMessageEmpty extends TLObject {
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DraftMessageEmpty';
      this.constructorId = 453805082;
      this.subclassOfId = 869564229;
      this._slots = ['date'];
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let date = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.DraftMessageEmpty({ date });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.date !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.DraftMessageEmpty = DraftMessageEmpty;
  class DraftMessage extends TLObject {
    noWebpage;
    invertMedia;
    replyTo;
    message;
    entities;
    media;
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DraftMessage';
      this.constructorId = 1070397423;
      this.subclassOfId = 869564229;
      this._slots = ['noWebpage', 'invertMedia', 'replyTo', 'message', 'entities', 'media', 'date'];
      this.noWebpage = params.noWebpage;
      this.invertMedia = params.invertMedia;
      this.replyTo = params.replyTo;
      this.message = params.message;
      this.entities = params.entities;
      this.media = params.media;
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let noWebpage = flags & (1 << 1) ? true : false;
      let invertMedia = flags & (1 << 6) ? true : false;
      let replyTo = flags & (1 << 4) ? await TLObject.read(b) : void 0;
      let message = await Primitive.String.read(b);
      let entities = flags & (1 << 3) ? await TLObject.read(b) : [];
      let media = flags & (1 << 5) ? await TLObject.read(b) : void 0;
      let date = await Primitive.Int.read(b);
      return new Raw2.DraftMessage({
        noWebpage,
        invertMedia,
        replyTo,
        message,
        entities,
        media,
        date,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.noWebpage ? 1 << 1 : 0;
      flags |= this.invertMedia ? 1 << 6 : 0;
      flags |= this.replyTo !== void 0 ? 1 << 4 : 0;
      flags |= this.entities ? 1 << 3 : 0;
      flags |= this.media !== void 0 ? 1 << 5 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.replyTo !== void 0) {
        b.write(this.replyTo.write());
      }
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      if (this.media !== void 0) {
        b.write(this.media.write());
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.DraftMessage = DraftMessage;
  class StickerSetCovered extends TLObject {
    set;
    cover;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StickerSetCovered';
      this.constructorId = 1678812626;
      this.subclassOfId = 2139546853;
      this._slots = ['set', 'cover'];
      this.set = params.set;
      this.cover = params.cover;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let set = await TLObject.read(b);
      let cover = await TLObject.read(b);
      return new Raw2.StickerSetCovered({ set, cover });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.set !== void 0) {
        b.write(this.set.write());
      }
      if (this.cover !== void 0) {
        b.write(this.cover.write());
      }
      return b.buffer;
    }
  }
  Raw2.StickerSetCovered = StickerSetCovered;
  class StickerSetMultiCovered extends TLObject {
    set;
    covers;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StickerSetMultiCovered';
      this.constructorId = 872932635;
      this.subclassOfId = 2139546853;
      this._slots = ['set', 'covers'];
      this.set = params.set;
      this.covers = params.covers;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let set = await TLObject.read(b);
      let covers = await TLObject.read(b);
      return new Raw2.StickerSetMultiCovered({ set, covers });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.set !== void 0) {
        b.write(this.set.write());
      }
      if (this.covers) {
        b.write(Primitive.Vector.write(this.covers));
      }
      return b.buffer;
    }
  }
  Raw2.StickerSetMultiCovered = StickerSetMultiCovered;
  class StickerSetFullCovered extends TLObject {
    set;
    packs;
    keywords;
    documents;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StickerSetFullCovered';
      this.constructorId = 1087454222;
      this.subclassOfId = 2139546853;
      this._slots = ['set', 'packs', 'keywords', 'documents'];
      this.set = params.set;
      this.packs = params.packs;
      this.keywords = params.keywords;
      this.documents = params.documents;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let set = await TLObject.read(b);
      let packs = await TLObject.read(b);
      let keywords = await TLObject.read(b);
      let documents = await TLObject.read(b);
      return new Raw2.StickerSetFullCovered({
        set,
        packs,
        keywords,
        documents,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.set !== void 0) {
        b.write(this.set.write());
      }
      if (this.packs) {
        b.write(Primitive.Vector.write(this.packs));
      }
      if (this.keywords) {
        b.write(Primitive.Vector.write(this.keywords));
      }
      if (this.documents) {
        b.write(Primitive.Vector.write(this.documents));
      }
      return b.buffer;
    }
  }
  Raw2.StickerSetFullCovered = StickerSetFullCovered;
  class StickerSetNoCovered extends TLObject {
    set;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StickerSetNoCovered';
      this.constructorId = 2008112412;
      this.subclassOfId = 2139546853;
      this._slots = ['set'];
      this.set = params.set;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let set = await TLObject.read(b);
      return new Raw2.StickerSetNoCovered({ set });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.set !== void 0) {
        b.write(this.set.write());
      }
      return b.buffer;
    }
  }
  Raw2.StickerSetNoCovered = StickerSetNoCovered;
  class MaskCoords extends TLObject {
    n;
    x;
    y;
    zoom;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MaskCoords';
      this.constructorId = 2933316530;
      this.subclassOfId = 112964349;
      this._slots = ['n', 'x', 'y', 'zoom'];
      this.n = params.n;
      this.x = params.x;
      this.y = params.y;
      this.zoom = params.zoom;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let n = await Primitive.Int.read(b);
      let x = await Primitive.Double.read(b);
      let y = await Primitive.Double.read(b);
      let zoom = await Primitive.Double.read(b);
      return new Raw2.MaskCoords({ n, x, y, zoom });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.n !== void 0) {
        b.write(Primitive.Int.write(this.n));
      }
      if (this.x !== void 0) {
        b.write(Primitive.Double.write(this.x));
      }
      if (this.y !== void 0) {
        b.write(Primitive.Double.write(this.y));
      }
      if (this.zoom !== void 0) {
        b.write(Primitive.Double.write(this.zoom));
      }
      return b.buffer;
    }
  }
  Raw2.MaskCoords = MaskCoords;
  class InputStickeredMediaPhoto extends TLObject {
    id;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputStickeredMediaPhoto';
      this.constructorId = 1251549527;
      this.subclassOfId = 1363597726;
      this._slots = ['id'];
      this.id = params.id;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await TLObject.read(b);
      return new Raw2.InputStickeredMediaPhoto({ id });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(this.id.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputStickeredMediaPhoto = InputStickeredMediaPhoto;
  class InputStickeredMediaDocument extends TLObject {
    id;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputStickeredMediaDocument';
      this.constructorId = 70813275;
      this.subclassOfId = 1363597726;
      this._slots = ['id'];
      this.id = params.id;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await TLObject.read(b);
      return new Raw2.InputStickeredMediaDocument({ id });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(this.id.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputStickeredMediaDocument = InputStickeredMediaDocument;
  class Game extends TLObject {
    id;
    accessHash;
    shortName;
    title;
    description;
    photo;
    document;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Game';
      this.constructorId = 3187238203;
      this.subclassOfId = 2199494322;
      this._slots = ['id', 'accessHash', 'shortName', 'title', 'description', 'photo', 'document'];
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.shortName = params.shortName;
      this.title = params.title;
      this.description = params.description;
      this.photo = params.photo;
      this.document = params.document;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let shortName = await Primitive.String.read(b);
      let title = await Primitive.String.read(b);
      let description = await Primitive.String.read(b);
      let photo = await TLObject.read(b);
      let document = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      return new Raw2.Game({
        id,
        accessHash,
        shortName,
        title,
        description,
        photo,
        document,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.document !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.shortName !== void 0) {
        b.write(Primitive.String.write(this.shortName));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.description !== void 0) {
        b.write(Primitive.String.write(this.description));
      }
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      if (this.document !== void 0) {
        b.write(this.document.write());
      }
      return b.buffer;
    }
  }
  Raw2.Game = Game;
  class InputGameID extends TLObject {
    id;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputGameID';
      this.constructorId = 53231223;
      this.subclassOfId = 1221679235;
      this._slots = ['id', 'accessHash'];
      this.id = params.id;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputGameID({ id, accessHash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputGameID = InputGameID;
  class InputGameShortName extends TLObject {
    botId;
    shortName;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputGameShortName';
      this.constructorId = 3274827786;
      this.subclassOfId = 1221679235;
      this._slots = ['botId', 'shortName'];
      this.botId = params.botId;
      this.shortName = params.shortName;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let botId = await TLObject.read(b);
      let shortName = await Primitive.String.read(b);
      return new Raw2.InputGameShortName({ botId, shortName });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.botId !== void 0) {
        b.write(this.botId.write());
      }
      if (this.shortName !== void 0) {
        b.write(Primitive.String.write(this.shortName));
      }
      return b.buffer;
    }
  }
  Raw2.InputGameShortName = InputGameShortName;
  class HighScore extends TLObject {
    pos;
    userId;
    score;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'HighScore';
      this.constructorId = 1940093419;
      this.subclassOfId = 3542818357;
      this._slots = ['pos', 'userId', 'score'];
      this.pos = params.pos;
      this.userId = params.userId;
      this.score = params.score;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let pos = await Primitive.Int.read(b);
      let userId = await Primitive.Long.read(b);
      let score = await Primitive.Int.read(b);
      return new Raw2.HighScore({ pos, userId, score });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.pos !== void 0) {
        b.write(Primitive.Int.write(this.pos));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.score !== void 0) {
        b.write(Primitive.Int.write(this.score));
      }
      return b.buffer;
    }
  }
  Raw2.HighScore = HighScore;
  class TextEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'TextEmpty';
      this.constructorId = 3695018575;
      this.subclassOfId = 4056986745;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.TextEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.TextEmpty = TextEmpty;
  class TextPlain extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'TextPlain';
      this.constructorId = 1950782688;
      this.subclassOfId = 4056986745;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      return new Raw2.TextPlain({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.TextPlain = TextPlain;
  class TextBold extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'TextBold';
      this.constructorId = 1730456516;
      this.subclassOfId = 4056986745;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      return new Raw2.TextBold({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      return b.buffer;
    }
  }
  Raw2.TextBold = TextBold;
  class TextItalic extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'TextItalic';
      this.constructorId = 3641877916;
      this.subclassOfId = 4056986745;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      return new Raw2.TextItalic({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      return b.buffer;
    }
  }
  Raw2.TextItalic = TextItalic;
  class TextUnderline extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'TextUnderline';
      this.constructorId = 3240501956;
      this.subclassOfId = 4056986745;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      return new Raw2.TextUnderline({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      return b.buffer;
    }
  }
  Raw2.TextUnderline = TextUnderline;
  class TextStrike extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'TextStrike';
      this.constructorId = 2616769429;
      this.subclassOfId = 4056986745;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      return new Raw2.TextStrike({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      return b.buffer;
    }
  }
  Raw2.TextStrike = TextStrike;
  class TextFixed extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'TextFixed';
      this.constructorId = 1816074681;
      this.subclassOfId = 4056986745;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      return new Raw2.TextFixed({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      return b.buffer;
    }
  }
  Raw2.TextFixed = TextFixed;
  class TextUrl extends TLObject {
    text;
    url;
    webpageId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'TextUrl';
      this.constructorId = 1009288385;
      this.subclassOfId = 4056986745;
      this._slots = ['text', 'url', 'webpageId'];
      this.text = params.text;
      this.url = params.url;
      this.webpageId = params.webpageId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      let url = await Primitive.String.read(b);
      let webpageId = await Primitive.Long.read(b);
      return new Raw2.TextUrl({ text, url, webpageId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.webpageId !== void 0) {
        b.write(Primitive.Long.write(this.webpageId));
      }
      return b.buffer;
    }
  }
  Raw2.TextUrl = TextUrl;
  class TextEmail extends TLObject {
    text;
    email;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'TextEmail';
      this.constructorId = 3730443734;
      this.subclassOfId = 4056986745;
      this._slots = ['text', 'email'];
      this.text = params.text;
      this.email = params.email;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      let email = await Primitive.String.read(b);
      return new Raw2.TextEmail({ text, email });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      if (this.email !== void 0) {
        b.write(Primitive.String.write(this.email));
      }
      return b.buffer;
    }
  }
  Raw2.TextEmail = TextEmail;
  class TextConcat extends TLObject {
    texts;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'TextConcat';
      this.constructorId = 2120376535;
      this.subclassOfId = 4056986745;
      this._slots = ['texts'];
      this.texts = params.texts;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let texts = await TLObject.read(b);
      return new Raw2.TextConcat({ texts });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.texts) {
        b.write(Primitive.Vector.write(this.texts));
      }
      return b.buffer;
    }
  }
  Raw2.TextConcat = TextConcat;
  class TextSubscript extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'TextSubscript';
      this.constructorId = 3983181060;
      this.subclassOfId = 4056986745;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      return new Raw2.TextSubscript({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      return b.buffer;
    }
  }
  Raw2.TextSubscript = TextSubscript;
  class TextSuperscript extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'TextSuperscript';
      this.constructorId = 3355139585;
      this.subclassOfId = 4056986745;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      return new Raw2.TextSuperscript({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      return b.buffer;
    }
  }
  Raw2.TextSuperscript = TextSuperscript;
  class TextMarked extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'TextMarked';
      this.constructorId = 55281185;
      this.subclassOfId = 4056986745;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      return new Raw2.TextMarked({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      return b.buffer;
    }
  }
  Raw2.TextMarked = TextMarked;
  class TextPhone extends TLObject {
    text;
    phone;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'TextPhone';
      this.constructorId = 483104362;
      this.subclassOfId = 4056986745;
      this._slots = ['text', 'phone'];
      this.text = params.text;
      this.phone = params.phone;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      let phone2 = await Primitive.String.read(b);
      return new Raw2.TextPhone({ text, phone: phone2 });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      if (this.phone !== void 0) {
        b.write(Primitive.String.write(this.phone));
      }
      return b.buffer;
    }
  }
  Raw2.TextPhone = TextPhone;
  class TextImage extends TLObject {
    documentId;
    w;
    h;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'TextImage';
      this.constructorId = 136105807;
      this.subclassOfId = 4056986745;
      this._slots = ['documentId', 'w', 'h'];
      this.documentId = params.documentId;
      this.w = params.w;
      this.h = params.h;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let documentId = await Primitive.Long.read(b);
      let w = await Primitive.Int.read(b);
      let h = await Primitive.Int.read(b);
      return new Raw2.TextImage({ documentId, w, h });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.documentId !== void 0) {
        b.write(Primitive.Long.write(this.documentId));
      }
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      return b.buffer;
    }
  }
  Raw2.TextImage = TextImage;
  class TextAnchor extends TLObject {
    text;
    name;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'TextAnchor';
      this.constructorId = 894777186;
      this.subclassOfId = 4056986745;
      this._slots = ['text', 'name'];
      this.text = params.text;
      this.name = params.name;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      let name = await Primitive.String.read(b);
      return new Raw2.TextAnchor({ text, name });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      if (this.name !== void 0) {
        b.write(Primitive.String.write(this.name));
      }
      return b.buffer;
    }
  }
  Raw2.TextAnchor = TextAnchor;
  class PageBlockUnsupported extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PageBlockUnsupported';
      this.constructorId = 324435594;
      this.subclassOfId = 449467972;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PageBlockUnsupported();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PageBlockUnsupported = PageBlockUnsupported;
  class PageBlockTitle extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockTitle';
      this.constructorId = 1890305021;
      this.subclassOfId = 449467972;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      return new Raw2.PageBlockTitle({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockTitle = PageBlockTitle;
  class PageBlockSubtitle extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockSubtitle';
      this.constructorId = 2415565343;
      this.subclassOfId = 449467972;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      return new Raw2.PageBlockSubtitle({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockSubtitle = PageBlockSubtitle;
  class PageBlockAuthorDate extends TLObject {
    author;
    publishedDate;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockAuthorDate';
      this.constructorId = 3132089824;
      this.subclassOfId = 449467972;
      this._slots = ['author', 'publishedDate'];
      this.author = params.author;
      this.publishedDate = params.publishedDate;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let author = await TLObject.read(b);
      let publishedDate = await Primitive.Int.read(b);
      return new Raw2.PageBlockAuthorDate({ author, publishedDate });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.author !== void 0) {
        b.write(this.author.write());
      }
      if (this.publishedDate !== void 0) {
        b.write(Primitive.Int.write(this.publishedDate));
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockAuthorDate = PageBlockAuthorDate;
  class PageBlockHeader extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockHeader';
      this.constructorId = 3218105580;
      this.subclassOfId = 449467972;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      return new Raw2.PageBlockHeader({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockHeader = PageBlockHeader;
  class PageBlockSubheader extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockSubheader';
      this.constructorId = 4046173921;
      this.subclassOfId = 449467972;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      return new Raw2.PageBlockSubheader({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockSubheader = PageBlockSubheader;
  class PageBlockParagraph extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockParagraph';
      this.constructorId = 1182402406;
      this.subclassOfId = 449467972;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      return new Raw2.PageBlockParagraph({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockParagraph = PageBlockParagraph;
  class PageBlockPreformatted extends TLObject {
    text;
    language;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockPreformatted';
      this.constructorId = 3228621118;
      this.subclassOfId = 449467972;
      this._slots = ['text', 'language'];
      this.text = params.text;
      this.language = params.language;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      let language = await Primitive.String.read(b);
      return new Raw2.PageBlockPreformatted({ text, language });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      if (this.language !== void 0) {
        b.write(Primitive.String.write(this.language));
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockPreformatted = PageBlockPreformatted;
  class PageBlockFooter extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockFooter';
      this.constructorId = 1216809369;
      this.subclassOfId = 449467972;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      return new Raw2.PageBlockFooter({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockFooter = PageBlockFooter;
  class PageBlockDivider extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PageBlockDivider';
      this.constructorId = 3676352904;
      this.subclassOfId = 449467972;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PageBlockDivider();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PageBlockDivider = PageBlockDivider;
  class PageBlockAnchor extends TLObject {
    name;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockAnchor';
      this.constructorId = 3456972720;
      this.subclassOfId = 449467972;
      this._slots = ['name'];
      this.name = params.name;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let name = await Primitive.String.read(b);
      return new Raw2.PageBlockAnchor({ name });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.name !== void 0) {
        b.write(Primitive.String.write(this.name));
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockAnchor = PageBlockAnchor;
  class PageBlockList extends TLObject {
    items;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockList';
      this.constructorId = 3840442385;
      this.subclassOfId = 449467972;
      this._slots = ['items'];
      this.items = params.items;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let items = await TLObject.read(b);
      return new Raw2.PageBlockList({ items });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.items) {
        b.write(Primitive.Vector.write(this.items));
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockList = PageBlockList;
  class PageBlockBlockquote extends TLObject {
    text;
    caption;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockBlockquote';
      this.constructorId = 641563686;
      this.subclassOfId = 449467972;
      this._slots = ['text', 'caption'];
      this.text = params.text;
      this.caption = params.caption;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      let caption = await TLObject.read(b);
      return new Raw2.PageBlockBlockquote({ text, caption });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      if (this.caption !== void 0) {
        b.write(this.caption.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockBlockquote = PageBlockBlockquote;
  class PageBlockPullquote extends TLObject {
    text;
    caption;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockPullquote';
      this.constructorId = 1329878739;
      this.subclassOfId = 449467972;
      this._slots = ['text', 'caption'];
      this.text = params.text;
      this.caption = params.caption;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      let caption = await TLObject.read(b);
      return new Raw2.PageBlockPullquote({ text, caption });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      if (this.caption !== void 0) {
        b.write(this.caption.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockPullquote = PageBlockPullquote;
  class PageBlockPhoto extends TLObject {
    photoId;
    caption;
    url;
    webpageId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockPhoto';
      this.constructorId = 391759200;
      this.subclassOfId = 449467972;
      this._slots = ['photoId', 'caption', 'url', 'webpageId'];
      this.photoId = params.photoId;
      this.caption = params.caption;
      this.url = params.url;
      this.webpageId = params.webpageId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let photoId = await Primitive.Long.read(b);
      let caption = await TLObject.read(b);
      let url = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let webpageId = flags & (1 << 0) ? await Primitive.Long.read(b) : void 0;
      return new Raw2.PageBlockPhoto({
        photoId,
        caption,
        url,
        webpageId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.url !== void 0 ? 1 << 0 : 0;
      flags |= this.webpageId !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.photoId !== void 0) {
        b.write(Primitive.Long.write(this.photoId));
      }
      if (this.caption !== void 0) {
        b.write(this.caption.write());
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.webpageId !== void 0) {
        b.write(Primitive.Long.write(this.webpageId));
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockPhoto = PageBlockPhoto;
  class PageBlockVideo extends TLObject {
    autoplay;
    loop;
    videoId;
    caption;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockVideo';
      this.constructorId = 2089805750;
      this.subclassOfId = 449467972;
      this._slots = ['autoplay', 'loop', 'videoId', 'caption'];
      this.autoplay = params.autoplay;
      this.loop = params.loop;
      this.videoId = params.videoId;
      this.caption = params.caption;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let autoplay = flags & (1 << 0) ? true : false;
      let loop = flags & (1 << 1) ? true : false;
      let videoId = await Primitive.Long.read(b);
      let caption = await TLObject.read(b);
      return new Raw2.PageBlockVideo({
        autoplay,
        loop,
        videoId,
        caption,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.autoplay ? 1 << 0 : 0;
      flags |= this.loop ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.videoId !== void 0) {
        b.write(Primitive.Long.write(this.videoId));
      }
      if (this.caption !== void 0) {
        b.write(this.caption.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockVideo = PageBlockVideo;
  class PageBlockCover extends TLObject {
    cover;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockCover';
      this.constructorId = 972174080;
      this.subclassOfId = 449467972;
      this._slots = ['cover'];
      this.cover = params.cover;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let cover = await TLObject.read(b);
      return new Raw2.PageBlockCover({ cover });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.cover !== void 0) {
        b.write(this.cover.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockCover = PageBlockCover;
  class PageBlockEmbed extends TLObject {
    fullWidth;
    allowScrolling;
    url;
    html;
    posterPhotoId;
    w;
    h;
    caption;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockEmbed';
      this.constructorId = 2826014149;
      this.subclassOfId = 449467972;
      this._slots = [
        'fullWidth',
        'allowScrolling',
        'url',
        'html',
        'posterPhotoId',
        'w',
        'h',
        'caption',
      ];
      this.fullWidth = params.fullWidth;
      this.allowScrolling = params.allowScrolling;
      this.url = params.url;
      this.html = params.html;
      this.posterPhotoId = params.posterPhotoId;
      this.w = params.w;
      this.h = params.h;
      this.caption = params.caption;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let fullWidth = flags & (1 << 0) ? true : false;
      let allowScrolling = flags & (1 << 3) ? true : false;
      let url = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let html = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
      let posterPhotoId = flags & (1 << 4) ? await Primitive.Long.read(b) : void 0;
      let w = flags & (1 << 5) ? await Primitive.Int.read(b) : void 0;
      let h = flags & (1 << 5) ? await Primitive.Int.read(b) : void 0;
      let caption = await TLObject.read(b);
      return new Raw2.PageBlockEmbed({
        fullWidth,
        allowScrolling,
        url,
        html,
        posterPhotoId,
        w,
        h,
        caption,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.fullWidth ? 1 << 0 : 0;
      flags |= this.allowScrolling ? 1 << 3 : 0;
      flags |= this.url !== void 0 ? 1 << 1 : 0;
      flags |= this.html !== void 0 ? 1 << 2 : 0;
      flags |= this.posterPhotoId !== void 0 ? 1 << 4 : 0;
      flags |= this.w !== void 0 ? 1 << 5 : 0;
      flags |= this.h !== void 0 ? 1 << 5 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.html !== void 0) {
        b.write(Primitive.String.write(this.html));
      }
      if (this.posterPhotoId !== void 0) {
        b.write(Primitive.Long.write(this.posterPhotoId));
      }
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      if (this.caption !== void 0) {
        b.write(this.caption.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockEmbed = PageBlockEmbed;
  class PageBlockEmbedPost extends TLObject {
    url;
    webpageId;
    authorPhotoId;
    author;
    date;
    blocks;
    caption;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockEmbedPost';
      this.constructorId = 4065961995;
      this.subclassOfId = 449467972;
      this._slots = ['url', 'webpageId', 'authorPhotoId', 'author', 'date', 'blocks', 'caption'];
      this.url = params.url;
      this.webpageId = params.webpageId;
      this.authorPhotoId = params.authorPhotoId;
      this.author = params.author;
      this.date = params.date;
      this.blocks = params.blocks;
      this.caption = params.caption;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      let webpageId = await Primitive.Long.read(b);
      let authorPhotoId = await Primitive.Long.read(b);
      let author = await Primitive.String.read(b);
      let date = await Primitive.Int.read(b);
      let blocks = await TLObject.read(b);
      let caption = await TLObject.read(b);
      return new Raw2.PageBlockEmbedPost({
        url,
        webpageId,
        authorPhotoId,
        author,
        date,
        blocks,
        caption,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.webpageId !== void 0) {
        b.write(Primitive.Long.write(this.webpageId));
      }
      if (this.authorPhotoId !== void 0) {
        b.write(Primitive.Long.write(this.authorPhotoId));
      }
      if (this.author !== void 0) {
        b.write(Primitive.String.write(this.author));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.blocks) {
        b.write(Primitive.Vector.write(this.blocks));
      }
      if (this.caption !== void 0) {
        b.write(this.caption.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockEmbedPost = PageBlockEmbedPost;
  class PageBlockCollage extends TLObject {
    items;
    caption;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockCollage';
      this.constructorId = 1705048653;
      this.subclassOfId = 449467972;
      this._slots = ['items', 'caption'];
      this.items = params.items;
      this.caption = params.caption;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let items = await TLObject.read(b);
      let caption = await TLObject.read(b);
      return new Raw2.PageBlockCollage({ items, caption });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.items) {
        b.write(Primitive.Vector.write(this.items));
      }
      if (this.caption !== void 0) {
        b.write(this.caption.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockCollage = PageBlockCollage;
  class PageBlockSlideshow extends TLObject {
    items;
    caption;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockSlideshow';
      this.constructorId = 52401552;
      this.subclassOfId = 449467972;
      this._slots = ['items', 'caption'];
      this.items = params.items;
      this.caption = params.caption;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let items = await TLObject.read(b);
      let caption = await TLObject.read(b);
      return new Raw2.PageBlockSlideshow({ items, caption });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.items) {
        b.write(Primitive.Vector.write(this.items));
      }
      if (this.caption !== void 0) {
        b.write(this.caption.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockSlideshow = PageBlockSlideshow;
  class PageBlockChannel extends TLObject {
    channel;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockChannel';
      this.constructorId = 4011282869;
      this.subclassOfId = 449467972;
      this._slots = ['channel'];
      this.channel = params.channel;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let channel = await TLObject.read(b);
      return new Raw2.PageBlockChannel({ channel });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.channel !== void 0) {
        b.write(this.channel.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockChannel = PageBlockChannel;
  class PageBlockAudio extends TLObject {
    audioId;
    caption;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockAudio';
      this.constructorId = 2151899626;
      this.subclassOfId = 449467972;
      this._slots = ['audioId', 'caption'];
      this.audioId = params.audioId;
      this.caption = params.caption;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let audioId = await Primitive.Long.read(b);
      let caption = await TLObject.read(b);
      return new Raw2.PageBlockAudio({ audioId, caption });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.audioId !== void 0) {
        b.write(Primitive.Long.write(this.audioId));
      }
      if (this.caption !== void 0) {
        b.write(this.caption.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockAudio = PageBlockAudio;
  class PageBlockKicker extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockKicker';
      this.constructorId = 504660880;
      this.subclassOfId = 449467972;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      return new Raw2.PageBlockKicker({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockKicker = PageBlockKicker;
  class PageBlockTable extends TLObject {
    bordered;
    striped;
    title;
    rows;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockTable';
      this.constructorId = 3209554562;
      this.subclassOfId = 449467972;
      this._slots = ['bordered', 'striped', 'title', 'rows'];
      this.bordered = params.bordered;
      this.striped = params.striped;
      this.title = params.title;
      this.rows = params.rows;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let bordered = flags & (1 << 0) ? true : false;
      let striped = flags & (1 << 1) ? true : false;
      let title = await TLObject.read(b);
      let rows = await TLObject.read(b);
      return new Raw2.PageBlockTable({
        bordered,
        striped,
        title,
        rows,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.bordered ? 1 << 0 : 0;
      flags |= this.striped ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.title !== void 0) {
        b.write(this.title.write());
      }
      if (this.rows) {
        b.write(Primitive.Vector.write(this.rows));
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockTable = PageBlockTable;
  class PageBlockOrderedList extends TLObject {
    items;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockOrderedList';
      this.constructorId = 2592793057;
      this.subclassOfId = 449467972;
      this._slots = ['items'];
      this.items = params.items;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let items = await TLObject.read(b);
      return new Raw2.PageBlockOrderedList({ items });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.items) {
        b.write(Primitive.Vector.write(this.items));
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockOrderedList = PageBlockOrderedList;
  class PageBlockDetails extends TLObject {
    open;
    blocks;
    title;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockDetails';
      this.constructorId = 1987480557;
      this.subclassOfId = 449467972;
      this._slots = ['open', 'blocks', 'title'];
      this.open = params.open;
      this.blocks = params.blocks;
      this.title = params.title;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let open = flags & (1 << 0) ? true : false;
      let blocks = await TLObject.read(b);
      let title = await TLObject.read(b);
      return new Raw2.PageBlockDetails({ open, blocks, title });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.open ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.blocks) {
        b.write(Primitive.Vector.write(this.blocks));
      }
      if (this.title !== void 0) {
        b.write(this.title.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockDetails = PageBlockDetails;
  class PageBlockRelatedArticles extends TLObject {
    title;
    articles;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockRelatedArticles';
      this.constructorId = 370236054;
      this.subclassOfId = 449467972;
      this._slots = ['title', 'articles'];
      this.title = params.title;
      this.articles = params.articles;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let title = await TLObject.read(b);
      let articles = await TLObject.read(b);
      return new Raw2.PageBlockRelatedArticles({ title, articles });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.title !== void 0) {
        b.write(this.title.write());
      }
      if (this.articles) {
        b.write(Primitive.Vector.write(this.articles));
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockRelatedArticles = PageBlockRelatedArticles;
  class PageBlockMap extends TLObject {
    geo;
    zoom;
    w;
    h;
    caption;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageBlockMap';
      this.constructorId = 2756656886;
      this.subclassOfId = 449467972;
      this._slots = ['geo', 'zoom', 'w', 'h', 'caption'];
      this.geo = params.geo;
      this.zoom = params.zoom;
      this.w = params.w;
      this.h = params.h;
      this.caption = params.caption;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let geo = await TLObject.read(b);
      let zoom = await Primitive.Int.read(b);
      let w = await Primitive.Int.read(b);
      let h = await Primitive.Int.read(b);
      let caption = await TLObject.read(b);
      return new Raw2.PageBlockMap({ geo, zoom, w, h, caption });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.geo !== void 0) {
        b.write(this.geo.write());
      }
      if (this.zoom !== void 0) {
        b.write(Primitive.Int.write(this.zoom));
      }
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      if (this.caption !== void 0) {
        b.write(this.caption.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageBlockMap = PageBlockMap;
  class PhoneCallDiscardReasonMissed extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PhoneCallDiscardReasonMissed';
      this.constructorId = 2246320897;
      this.subclassOfId = 3634081085;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PhoneCallDiscardReasonMissed();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PhoneCallDiscardReasonMissed = PhoneCallDiscardReasonMissed;
  class PhoneCallDiscardReasonDisconnect extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PhoneCallDiscardReasonDisconnect';
      this.constructorId = 3767910816;
      this.subclassOfId = 3634081085;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PhoneCallDiscardReasonDisconnect();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PhoneCallDiscardReasonDisconnect = PhoneCallDiscardReasonDisconnect;
  class PhoneCallDiscardReasonHangup extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PhoneCallDiscardReasonHangup';
      this.constructorId = 1471006352;
      this.subclassOfId = 3634081085;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PhoneCallDiscardReasonHangup();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PhoneCallDiscardReasonHangup = PhoneCallDiscardReasonHangup;
  class PhoneCallDiscardReasonBusy extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PhoneCallDiscardReasonBusy';
      this.constructorId = 4210550985;
      this.subclassOfId = 3634081085;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PhoneCallDiscardReasonBusy();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PhoneCallDiscardReasonBusy = PhoneCallDiscardReasonBusy;
  class DataJSON extends TLObject {
    data;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DataJSON';
      this.constructorId = 2104790276;
      this.subclassOfId = 2902676200;
      this._slots = ['data'];
      this.data = params.data;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let data = await Primitive.String.read(b);
      return new Raw2.DataJSON({ data });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.data !== void 0) {
        b.write(Primitive.String.write(this.data));
      }
      return b.buffer;
    }
  }
  Raw2.DataJSON = DataJSON;
  class LabeledPrice extends TLObject {
    label;
    amount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'LabeledPrice';
      this.constructorId = 3408489464;
      this.subclassOfId = 478413946;
      this._slots = ['label', 'amount'];
      this.label = params.label;
      this.amount = params.amount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let label = await Primitive.String.read(b);
      let amount = await Primitive.Long.read(b);
      return new Raw2.LabeledPrice({ label, amount });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.label !== void 0) {
        b.write(Primitive.String.write(this.label));
      }
      if (this.amount !== void 0) {
        b.write(Primitive.Long.write(this.amount));
      }
      return b.buffer;
    }
  }
  Raw2.LabeledPrice = LabeledPrice;
  class Invoice extends TLObject {
    test;
    nameRequested;
    phoneRequested;
    emailRequested;
    shippingAddressRequested;
    flexible;
    phoneToProvider;
    emailToProvider;
    recurring;
    currency;
    prices;
    maxTipAmount;
    suggestedTipAmounts;
    termsUrl;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Invoice';
      this.constructorId = 1572428309;
      this.subclassOfId = 1608003288;
      this._slots = [
        'test',
        'nameRequested',
        'phoneRequested',
        'emailRequested',
        'shippingAddressRequested',
        'flexible',
        'phoneToProvider',
        'emailToProvider',
        'recurring',
        'currency',
        'prices',
        'maxTipAmount',
        'suggestedTipAmounts',
        'termsUrl',
      ];
      this.test = params.test;
      this.nameRequested = params.nameRequested;
      this.phoneRequested = params.phoneRequested;
      this.emailRequested = params.emailRequested;
      this.shippingAddressRequested = params.shippingAddressRequested;
      this.flexible = params.flexible;
      this.phoneToProvider = params.phoneToProvider;
      this.emailToProvider = params.emailToProvider;
      this.recurring = params.recurring;
      this.currency = params.currency;
      this.prices = params.prices;
      this.maxTipAmount = params.maxTipAmount;
      this.suggestedTipAmounts = params.suggestedTipAmounts;
      this.termsUrl = params.termsUrl;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let test = flags & (1 << 0) ? true : false;
      let nameRequested = flags & (1 << 1) ? true : false;
      let phoneRequested = flags & (1 << 2) ? true : false;
      let emailRequested = flags & (1 << 3) ? true : false;
      let shippingAddressRequested = flags & (1 << 4) ? true : false;
      let flexible = flags & (1 << 5) ? true : false;
      let phoneToProvider = flags & (1 << 6) ? true : false;
      let emailToProvider = flags & (1 << 7) ? true : false;
      let recurring = flags & (1 << 9) ? true : false;
      let currency = await Primitive.String.read(b);
      let prices = await TLObject.read(b);
      let maxTipAmount = flags & (1 << 8) ? await Primitive.Long.read(b) : void 0;
      let suggestedTipAmounts = flags & (1 << 8) ? await TLObject.read(b, Primitive.Long) : [];
      let termsUrl = flags & (1 << 10) ? await Primitive.String.read(b) : void 0;
      return new Raw2.Invoice({
        test,
        nameRequested,
        phoneRequested,
        emailRequested,
        shippingAddressRequested,
        flexible,
        phoneToProvider,
        emailToProvider,
        recurring,
        currency,
        prices,
        maxTipAmount,
        suggestedTipAmounts,
        termsUrl,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.test ? 1 << 0 : 0;
      flags |= this.nameRequested ? 1 << 1 : 0;
      flags |= this.phoneRequested ? 1 << 2 : 0;
      flags |= this.emailRequested ? 1 << 3 : 0;
      flags |= this.shippingAddressRequested ? 1 << 4 : 0;
      flags |= this.flexible ? 1 << 5 : 0;
      flags |= this.phoneToProvider ? 1 << 6 : 0;
      flags |= this.emailToProvider ? 1 << 7 : 0;
      flags |= this.recurring ? 1 << 9 : 0;
      flags |= this.maxTipAmount !== void 0 ? 1 << 8 : 0;
      flags |= this.suggestedTipAmounts ? 1 << 8 : 0;
      flags |= this.termsUrl !== void 0 ? 1 << 10 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.currency !== void 0) {
        b.write(Primitive.String.write(this.currency));
      }
      if (this.prices) {
        b.write(Primitive.Vector.write(this.prices));
      }
      if (this.maxTipAmount !== void 0) {
        b.write(Primitive.Long.write(this.maxTipAmount));
      }
      if (this.suggestedTipAmounts) {
        b.write(Primitive.Vector.write(this.suggestedTipAmounts, Primitive.Long));
      }
      if (this.termsUrl !== void 0) {
        b.write(Primitive.String.write(this.termsUrl));
      }
      return b.buffer;
    }
  }
  Raw2.Invoice = Invoice;
  class PaymentCharge extends TLObject {
    id;
    providerChargeId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PaymentCharge';
      this.constructorId = 3926049406;
      this.subclassOfId = 1019752665;
      this._slots = ['id', 'providerChargeId'];
      this.id = params.id;
      this.providerChargeId = params.providerChargeId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.String.read(b);
      let providerChargeId = await Primitive.String.read(b);
      return new Raw2.PaymentCharge({ id, providerChargeId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.String.write(this.id));
      }
      if (this.providerChargeId !== void 0) {
        b.write(Primitive.String.write(this.providerChargeId));
      }
      return b.buffer;
    }
  }
  Raw2.PaymentCharge = PaymentCharge;
  class PostAddress extends TLObject {
    streetLine1;
    streetLine2;
    city;
    state;
    countryIso2;
    postCode;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PostAddress';
      this.constructorId = 512535275;
      this.subclassOfId = 2373900844;
      this._slots = ['streetLine1', 'streetLine2', 'city', 'state', 'countryIso2', 'postCode'];
      this.streetLine1 = params.streetLine1;
      this.streetLine2 = params.streetLine2;
      this.city = params.city;
      this.state = params.state;
      this.countryIso2 = params.countryIso2;
      this.postCode = params.postCode;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let streetLine1 = await Primitive.String.read(b);
      let streetLine2 = await Primitive.String.read(b);
      let city = await Primitive.String.read(b);
      let state = await Primitive.String.read(b);
      let countryIso2 = await Primitive.String.read(b);
      let postCode = await Primitive.String.read(b);
      return new Raw2.PostAddress({
        streetLine1,
        streetLine2,
        city,
        state,
        countryIso2,
        postCode,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.streetLine1 !== void 0) {
        b.write(Primitive.String.write(this.streetLine1));
      }
      if (this.streetLine2 !== void 0) {
        b.write(Primitive.String.write(this.streetLine2));
      }
      if (this.city !== void 0) {
        b.write(Primitive.String.write(this.city));
      }
      if (this.state !== void 0) {
        b.write(Primitive.String.write(this.state));
      }
      if (this.countryIso2 !== void 0) {
        b.write(Primitive.String.write(this.countryIso2));
      }
      if (this.postCode !== void 0) {
        b.write(Primitive.String.write(this.postCode));
      }
      return b.buffer;
    }
  }
  Raw2.PostAddress = PostAddress;
  class PaymentRequestedInfo extends TLObject {
    name;
    phone;
    email;
    shippingAddress;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PaymentRequestedInfo';
      this.constructorId = 2426158996;
      this.subclassOfId = 2377134406;
      this._slots = ['name', 'phone', 'email', 'shippingAddress'];
      this.name = params.name;
      this.phone = params.phone;
      this.email = params.email;
      this.shippingAddress = params.shippingAddress;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let name = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let phone2 = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let email = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
      let shippingAddress = flags & (1 << 3) ? await TLObject.read(b) : void 0;
      return new Raw2.PaymentRequestedInfo({
        name,
        phone: phone2,
        email,
        shippingAddress,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.name !== void 0 ? 1 << 0 : 0;
      flags |= this.phone !== void 0 ? 1 << 1 : 0;
      flags |= this.email !== void 0 ? 1 << 2 : 0;
      flags |= this.shippingAddress !== void 0 ? 1 << 3 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.name !== void 0) {
        b.write(Primitive.String.write(this.name));
      }
      if (this.phone !== void 0) {
        b.write(Primitive.String.write(this.phone));
      }
      if (this.email !== void 0) {
        b.write(Primitive.String.write(this.email));
      }
      if (this.shippingAddress !== void 0) {
        b.write(this.shippingAddress.write());
      }
      return b.buffer;
    }
  }
  Raw2.PaymentRequestedInfo = PaymentRequestedInfo;
  class PaymentSavedCredentialsCard extends TLObject {
    id;
    title;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PaymentSavedCredentialsCard';
      this.constructorId = 3452074527;
      this.subclassOfId = 3009576675;
      this._slots = ['id', 'title'];
      this.id = params.id;
      this.title = params.title;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.String.read(b);
      let title = await Primitive.String.read(b);
      return new Raw2.PaymentSavedCredentialsCard({ id, title });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.String.write(this.id));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      return b.buffer;
    }
  }
  Raw2.PaymentSavedCredentialsCard = PaymentSavedCredentialsCard;
  class WebDocument extends TLObject {
    url;
    accessHash;
    size;
    mimeType;
    attributes;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'WebDocument';
      this.constructorId = 475467473;
      this.subclassOfId = 996419604;
      this._slots = ['url', 'accessHash', 'size', 'mimeType', 'attributes'];
      this.url = params.url;
      this.accessHash = params.accessHash;
      this.size = params.size;
      this.mimeType = params.mimeType;
      this.attributes = params.attributes;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      let accessHash = await Primitive.Long.read(b);
      let size = await Primitive.Int.read(b);
      let mimeType = await Primitive.String.read(b);
      let attributes = await TLObject.read(b);
      return new Raw2.WebDocument({
        url,
        accessHash,
        size,
        mimeType,
        attributes,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Int.write(this.size));
      }
      if (this.mimeType !== void 0) {
        b.write(Primitive.String.write(this.mimeType));
      }
      if (this.attributes) {
        b.write(Primitive.Vector.write(this.attributes));
      }
      return b.buffer;
    }
  }
  Raw2.WebDocument = WebDocument;
  class WebDocumentNoProxy extends TLObject {
    url;
    size;
    mimeType;
    attributes;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'WebDocumentNoProxy';
      this.constructorId = 4190682310;
      this.subclassOfId = 996419604;
      this._slots = ['url', 'size', 'mimeType', 'attributes'];
      this.url = params.url;
      this.size = params.size;
      this.mimeType = params.mimeType;
      this.attributes = params.attributes;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      let size = await Primitive.Int.read(b);
      let mimeType = await Primitive.String.read(b);
      let attributes = await TLObject.read(b);
      return new Raw2.WebDocumentNoProxy({
        url,
        size,
        mimeType,
        attributes,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Int.write(this.size));
      }
      if (this.mimeType !== void 0) {
        b.write(Primitive.String.write(this.mimeType));
      }
      if (this.attributes) {
        b.write(Primitive.Vector.write(this.attributes));
      }
      return b.buffer;
    }
  }
  Raw2.WebDocumentNoProxy = WebDocumentNoProxy;
  class InputWebDocument extends TLObject {
    url;
    size;
    mimeType;
    attributes;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputWebDocument';
      this.constructorId = 2616017741;
      this.subclassOfId = 2330505542;
      this._slots = ['url', 'size', 'mimeType', 'attributes'];
      this.url = params.url;
      this.size = params.size;
      this.mimeType = params.mimeType;
      this.attributes = params.attributes;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      let size = await Primitive.Int.read(b);
      let mimeType = await Primitive.String.read(b);
      let attributes = await TLObject.read(b);
      return new Raw2.InputWebDocument({
        url,
        size,
        mimeType,
        attributes,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Int.write(this.size));
      }
      if (this.mimeType !== void 0) {
        b.write(Primitive.String.write(this.mimeType));
      }
      if (this.attributes) {
        b.write(Primitive.Vector.write(this.attributes));
      }
      return b.buffer;
    }
  }
  Raw2.InputWebDocument = InputWebDocument;
  class InputWebFileLocation extends TLObject {
    url;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputWebFileLocation';
      this.constructorId = 3258570374;
      this.subclassOfId = 4147042521;
      this._slots = ['url', 'accessHash'];
      this.url = params.url;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputWebFileLocation({ url, accessHash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputWebFileLocation = InputWebFileLocation;
  class InputWebFileGeoPointLocation extends TLObject {
    geoPoint;
    accessHash;
    w;
    h;
    zoom;
    scale;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputWebFileGeoPointLocation';
      this.constructorId = 2669814217;
      this.subclassOfId = 4147042521;
      this._slots = ['geoPoint', 'accessHash', 'w', 'h', 'zoom', 'scale'];
      this.geoPoint = params.geoPoint;
      this.accessHash = params.accessHash;
      this.w = params.w;
      this.h = params.h;
      this.zoom = params.zoom;
      this.scale = params.scale;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let geoPoint = await TLObject.read(b);
      let accessHash = await Primitive.Long.read(b);
      let w = await Primitive.Int.read(b);
      let h = await Primitive.Int.read(b);
      let zoom = await Primitive.Int.read(b);
      let scale = await Primitive.Int.read(b);
      return new Raw2.InputWebFileGeoPointLocation({
        geoPoint,
        accessHash,
        w,
        h,
        zoom,
        scale,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.geoPoint !== void 0) {
        b.write(this.geoPoint.write());
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      if (this.zoom !== void 0) {
        b.write(Primitive.Int.write(this.zoom));
      }
      if (this.scale !== void 0) {
        b.write(Primitive.Int.write(this.scale));
      }
      return b.buffer;
    }
  }
  Raw2.InputWebFileGeoPointLocation = InputWebFileGeoPointLocation;
  class InputWebFileAudioAlbumThumbLocation extends TLObject {
    small;
    document;
    title;
    performer;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputWebFileAudioAlbumThumbLocation';
      this.constructorId = 4100974884;
      this.subclassOfId = 4147042521;
      this._slots = ['small', 'document', 'title', 'performer'];
      this.small = params.small;
      this.document = params.document;
      this.title = params.title;
      this.performer = params.performer;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let small = flags & (1 << 2) ? true : false;
      let document = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let title = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let performer = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      return new Raw2.InputWebFileAudioAlbumThumbLocation({
        small,
        document,
        title,
        performer,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.small ? 1 << 2 : 0;
      flags |= this.document !== void 0 ? 1 << 0 : 0;
      flags |= this.title !== void 0 ? 1 << 1 : 0;
      flags |= this.performer !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.document !== void 0) {
        b.write(this.document.write());
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.performer !== void 0) {
        b.write(Primitive.String.write(this.performer));
      }
      return b.buffer;
    }
  }
  Raw2.InputWebFileAudioAlbumThumbLocation = InputWebFileAudioAlbumThumbLocation;
  class InputPaymentCredentialsSaved extends TLObject {
    id;
    tmpPassword;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPaymentCredentialsSaved';
      this.constructorId = 3238965967;
      this.subclassOfId = 681157949;
      this._slots = ['id', 'tmpPassword'];
      this.id = params.id;
      this.tmpPassword = params.tmpPassword;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.String.read(b);
      let tmpPassword = await Primitive.Bytes.read(b);
      return new Raw2.InputPaymentCredentialsSaved({ id, tmpPassword });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.String.write(this.id));
      }
      if (this.tmpPassword !== void 0) {
        b.write(Primitive.Bytes.write(this.tmpPassword));
      }
      return b.buffer;
    }
  }
  Raw2.InputPaymentCredentialsSaved = InputPaymentCredentialsSaved;
  class InputPaymentCredentials extends TLObject {
    save;
    data;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPaymentCredentials';
      this.constructorId = 873977640;
      this.subclassOfId = 681157949;
      this._slots = ['save', 'data'];
      this.save = params.save;
      this.data = params.data;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let save = flags & (1 << 0) ? true : false;
      let data = await TLObject.read(b);
      return new Raw2.InputPaymentCredentials({ save, data });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.save ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.data !== void 0) {
        b.write(this.data.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputPaymentCredentials = InputPaymentCredentials;
  class InputPaymentCredentialsApplePay extends TLObject {
    paymentData;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPaymentCredentialsApplePay';
      this.constructorId = 178373535;
      this.subclassOfId = 681157949;
      this._slots = ['paymentData'];
      this.paymentData = params.paymentData;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let paymentData = await TLObject.read(b);
      return new Raw2.InputPaymentCredentialsApplePay({ paymentData });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.paymentData !== void 0) {
        b.write(this.paymentData.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputPaymentCredentialsApplePay = InputPaymentCredentialsApplePay;
  class InputPaymentCredentialsGooglePay extends TLObject {
    paymentToken;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPaymentCredentialsGooglePay';
      this.constructorId = 2328045569;
      this.subclassOfId = 681157949;
      this._slots = ['paymentToken'];
      this.paymentToken = params.paymentToken;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let paymentToken = await TLObject.read(b);
      return new Raw2.InputPaymentCredentialsGooglePay({ paymentToken });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.paymentToken !== void 0) {
        b.write(this.paymentToken.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputPaymentCredentialsGooglePay = InputPaymentCredentialsGooglePay;
  class ShippingOption extends TLObject {
    id;
    title;
    prices;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ShippingOption';
      this.constructorId = 3055631583;
      this.subclassOfId = 4108930168;
      this._slots = ['id', 'title', 'prices'];
      this.id = params.id;
      this.title = params.title;
      this.prices = params.prices;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.String.read(b);
      let title = await Primitive.String.read(b);
      let prices = await TLObject.read(b);
      return new Raw2.ShippingOption({ id, title, prices });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.String.write(this.id));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.prices) {
        b.write(Primitive.Vector.write(this.prices));
      }
      return b.buffer;
    }
  }
  Raw2.ShippingOption = ShippingOption;
  class InputStickerSetItem extends TLObject {
    document;
    emoji;
    maskCoords;
    keywords;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputStickerSetItem';
      this.constructorId = 853188252;
      this.subclassOfId = 2925129845;
      this._slots = ['document', 'emoji', 'maskCoords', 'keywords'];
      this.document = params.document;
      this.emoji = params.emoji;
      this.maskCoords = params.maskCoords;
      this.keywords = params.keywords;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let document = await TLObject.read(b);
      let emoji = await Primitive.String.read(b);
      let maskCoords = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let keywords = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      return new Raw2.InputStickerSetItem({
        document,
        emoji,
        maskCoords,
        keywords,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.maskCoords !== void 0 ? 1 << 0 : 0;
      flags |= this.keywords !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.document !== void 0) {
        b.write(this.document.write());
      }
      if (this.emoji !== void 0) {
        b.write(Primitive.String.write(this.emoji));
      }
      if (this.maskCoords !== void 0) {
        b.write(this.maskCoords.write());
      }
      if (this.keywords !== void 0) {
        b.write(Primitive.String.write(this.keywords));
      }
      return b.buffer;
    }
  }
  Raw2.InputStickerSetItem = InputStickerSetItem;
  class InputPhoneCall extends TLObject {
    id;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputPhoneCall';
      this.constructorId = 506920429;
      this.subclassOfId = 3165319744;
      this._slots = ['id', 'accessHash'];
      this.id = params.id;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputPhoneCall({ id, accessHash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputPhoneCall = InputPhoneCall;
  class PhoneCallEmpty extends TLObject {
    id;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PhoneCallEmpty';
      this.constructorId = 1399245077;
      this.subclassOfId = 3296664529;
      this._slots = ['id'];
      this.id = params.id;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      return new Raw2.PhoneCallEmpty({ id });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      return b.buffer;
    }
  }
  Raw2.PhoneCallEmpty = PhoneCallEmpty;
  class PhoneCallWaiting extends TLObject {
    video;
    id;
    accessHash;
    date;
    adminId;
    participantId;
    protocol;
    receiveDate;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PhoneCallWaiting';
      this.constructorId = 3307368215;
      this.subclassOfId = 3296664529;
      this._slots = [
        'video',
        'id',
        'accessHash',
        'date',
        'adminId',
        'participantId',
        'protocol',
        'receiveDate',
      ];
      this.video = params.video;
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.date = params.date;
      this.adminId = params.adminId;
      this.participantId = params.participantId;
      this.protocol = params.protocol;
      this.receiveDate = params.receiveDate;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let video = flags & (1 << 6) ? true : false;
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let adminId = await Primitive.Long.read(b);
      let participantId = await Primitive.Long.read(b);
      let protocol = await TLObject.read(b);
      let receiveDate = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.PhoneCallWaiting({
        video,
        id,
        accessHash,
        date,
        adminId,
        participantId,
        protocol,
        receiveDate,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.video ? 1 << 6 : 0;
      flags |= this.receiveDate !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.adminId !== void 0) {
        b.write(Primitive.Long.write(this.adminId));
      }
      if (this.participantId !== void 0) {
        b.write(Primitive.Long.write(this.participantId));
      }
      if (this.protocol !== void 0) {
        b.write(this.protocol.write());
      }
      if (this.receiveDate !== void 0) {
        b.write(Primitive.Int.write(this.receiveDate));
      }
      return b.buffer;
    }
  }
  Raw2.PhoneCallWaiting = PhoneCallWaiting;
  class PhoneCallRequested extends TLObject {
    video;
    id;
    accessHash;
    date;
    adminId;
    participantId;
    gAHash;
    protocol;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PhoneCallRequested';
      this.constructorId = 347139340;
      this.subclassOfId = 3296664529;
      this._slots = [
        'video',
        'id',
        'accessHash',
        'date',
        'adminId',
        'participantId',
        'gAHash',
        'protocol',
      ];
      this.video = params.video;
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.date = params.date;
      this.adminId = params.adminId;
      this.participantId = params.participantId;
      this.gAHash = params.gAHash;
      this.protocol = params.protocol;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let video = flags & (1 << 6) ? true : false;
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let adminId = await Primitive.Long.read(b);
      let participantId = await Primitive.Long.read(b);
      let gAHash = await Primitive.Bytes.read(b);
      let protocol = await TLObject.read(b);
      return new Raw2.PhoneCallRequested({
        video,
        id,
        accessHash,
        date,
        adminId,
        participantId,
        gAHash,
        protocol,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.video ? 1 << 6 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.adminId !== void 0) {
        b.write(Primitive.Long.write(this.adminId));
      }
      if (this.participantId !== void 0) {
        b.write(Primitive.Long.write(this.participantId));
      }
      if (this.gAHash !== void 0) {
        b.write(Primitive.Bytes.write(this.gAHash));
      }
      if (this.protocol !== void 0) {
        b.write(this.protocol.write());
      }
      return b.buffer;
    }
  }
  Raw2.PhoneCallRequested = PhoneCallRequested;
  class PhoneCallAccepted extends TLObject {
    video;
    id;
    accessHash;
    date;
    adminId;
    participantId;
    gB;
    protocol;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PhoneCallAccepted';
      this.constructorId = 912311057;
      this.subclassOfId = 3296664529;
      this._slots = [
        'video',
        'id',
        'accessHash',
        'date',
        'adminId',
        'participantId',
        'gB',
        'protocol',
      ];
      this.video = params.video;
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.date = params.date;
      this.adminId = params.adminId;
      this.participantId = params.participantId;
      this.gB = params.gB;
      this.protocol = params.protocol;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let video = flags & (1 << 6) ? true : false;
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let adminId = await Primitive.Long.read(b);
      let participantId = await Primitive.Long.read(b);
      let gB = await Primitive.Bytes.read(b);
      let protocol = await TLObject.read(b);
      return new Raw2.PhoneCallAccepted({
        video,
        id,
        accessHash,
        date,
        adminId,
        participantId,
        gB,
        protocol,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.video ? 1 << 6 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.adminId !== void 0) {
        b.write(Primitive.Long.write(this.adminId));
      }
      if (this.participantId !== void 0) {
        b.write(Primitive.Long.write(this.participantId));
      }
      if (this.gB !== void 0) {
        b.write(Primitive.Bytes.write(this.gB));
      }
      if (this.protocol !== void 0) {
        b.write(this.protocol.write());
      }
      return b.buffer;
    }
  }
  Raw2.PhoneCallAccepted = PhoneCallAccepted;
  class PhoneCall extends TLObject {
    p2pAllowed;
    video;
    id;
    accessHash;
    date;
    adminId;
    participantId;
    gAOrB;
    keyFingerprint;
    protocol;
    connections;
    startDate;
    customParameters;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PhoneCall';
      this.constructorId = 810769141;
      this.subclassOfId = 3296664529;
      this._slots = [
        'p2pAllowed',
        'video',
        'id',
        'accessHash',
        'date',
        'adminId',
        'participantId',
        'gAOrB',
        'keyFingerprint',
        'protocol',
        'connections',
        'startDate',
        'customParameters',
      ];
      this.p2pAllowed = params.p2pAllowed;
      this.video = params.video;
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.date = params.date;
      this.adminId = params.adminId;
      this.participantId = params.participantId;
      this.gAOrB = params.gAOrB;
      this.keyFingerprint = params.keyFingerprint;
      this.protocol = params.protocol;
      this.connections = params.connections;
      this.startDate = params.startDate;
      this.customParameters = params.customParameters;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let p2pAllowed = flags & (1 << 5) ? true : false;
      let video = flags & (1 << 6) ? true : false;
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let adminId = await Primitive.Long.read(b);
      let participantId = await Primitive.Long.read(b);
      let gAOrB = await Primitive.Bytes.read(b);
      let keyFingerprint = await Primitive.Long.read(b);
      let protocol = await TLObject.read(b);
      let connections = await TLObject.read(b);
      let startDate = await Primitive.Int.read(b);
      let customParameters = flags & (1 << 7) ? await TLObject.read(b) : void 0;
      return new Raw2.PhoneCall({
        p2pAllowed,
        video,
        id,
        accessHash,
        date,
        adminId,
        participantId,
        gAOrB,
        keyFingerprint,
        protocol,
        connections,
        startDate,
        customParameters,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.p2pAllowed ? 1 << 5 : 0;
      flags |= this.video ? 1 << 6 : 0;
      flags |= this.customParameters !== void 0 ? 1 << 7 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.adminId !== void 0) {
        b.write(Primitive.Long.write(this.adminId));
      }
      if (this.participantId !== void 0) {
        b.write(Primitive.Long.write(this.participantId));
      }
      if (this.gAOrB !== void 0) {
        b.write(Primitive.Bytes.write(this.gAOrB));
      }
      if (this.keyFingerprint !== void 0) {
        b.write(Primitive.Long.write(this.keyFingerprint));
      }
      if (this.protocol !== void 0) {
        b.write(this.protocol.write());
      }
      if (this.connections) {
        b.write(Primitive.Vector.write(this.connections));
      }
      if (this.startDate !== void 0) {
        b.write(Primitive.Int.write(this.startDate));
      }
      if (this.customParameters !== void 0) {
        b.write(this.customParameters.write());
      }
      return b.buffer;
    }
  }
  Raw2.PhoneCall = PhoneCall;
  class PhoneCallDiscarded extends TLObject {
    needRating;
    needDebug;
    video;
    id;
    reason;
    duration;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PhoneCallDiscarded';
      this.constructorId = 1355435489;
      this.subclassOfId = 3296664529;
      this._slots = ['needRating', 'needDebug', 'video', 'id', 'reason', 'duration'];
      this.needRating = params.needRating;
      this.needDebug = params.needDebug;
      this.video = params.video;
      this.id = params.id;
      this.reason = params.reason;
      this.duration = params.duration;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let needRating = flags & (1 << 2) ? true : false;
      let needDebug = flags & (1 << 3) ? true : false;
      let video = flags & (1 << 6) ? true : false;
      let id = await Primitive.Long.read(b);
      let reason = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let duration = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.PhoneCallDiscarded({
        needRating,
        needDebug,
        video,
        id,
        reason,
        duration,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.needRating ? 1 << 2 : 0;
      flags |= this.needDebug ? 1 << 3 : 0;
      flags |= this.video ? 1 << 6 : 0;
      flags |= this.reason !== void 0 ? 1 << 0 : 0;
      flags |= this.duration !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.reason !== void 0) {
        b.write(this.reason.write());
      }
      if (this.duration !== void 0) {
        b.write(Primitive.Int.write(this.duration));
      }
      return b.buffer;
    }
  }
  Raw2.PhoneCallDiscarded = PhoneCallDiscarded;
  class PhoneConnection extends TLObject {
    tcp;
    id;
    ip;
    ipv6;
    port;
    peerTag;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PhoneConnection';
      this.constructorId = 2629903303;
      this.subclassOfId = 2861425677;
      this._slots = ['tcp', 'id', 'ip', 'ipv6', 'port', 'peerTag'];
      this.tcp = params.tcp;
      this.id = params.id;
      this.ip = params.ip;
      this.ipv6 = params.ipv6;
      this.port = params.port;
      this.peerTag = params.peerTag;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let tcp = flags & (1 << 0) ? true : false;
      let id = await Primitive.Long.read(b);
      let ip = await Primitive.String.read(b);
      let ipv6 = await Primitive.String.read(b);
      let port = await Primitive.Int.read(b);
      let peerTag = await Primitive.Bytes.read(b);
      return new Raw2.PhoneConnection({
        tcp,
        id,
        ip,
        ipv6,
        port,
        peerTag,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.tcp ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.ip !== void 0) {
        b.write(Primitive.String.write(this.ip));
      }
      if (this.ipv6 !== void 0) {
        b.write(Primitive.String.write(this.ipv6));
      }
      if (this.port !== void 0) {
        b.write(Primitive.Int.write(this.port));
      }
      if (this.peerTag !== void 0) {
        b.write(Primitive.Bytes.write(this.peerTag));
      }
      return b.buffer;
    }
  }
  Raw2.PhoneConnection = PhoneConnection;
  class PhoneConnectionWebrtc extends TLObject {
    turn;
    stun;
    id;
    ip;
    ipv6;
    port;
    username;
    password;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PhoneConnectionWebrtc';
      this.constructorId = 1667228533;
      this.subclassOfId = 2861425677;
      this._slots = ['turn', 'stun', 'id', 'ip', 'ipv6', 'port', 'username', 'password'];
      this.turn = params.turn;
      this.stun = params.stun;
      this.id = params.id;
      this.ip = params.ip;
      this.ipv6 = params.ipv6;
      this.port = params.port;
      this.username = params.username;
      this.password = params.password;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let turn = flags & (1 << 0) ? true : false;
      let stun = flags & (1 << 1) ? true : false;
      let id = await Primitive.Long.read(b);
      let ip = await Primitive.String.read(b);
      let ipv6 = await Primitive.String.read(b);
      let port = await Primitive.Int.read(b);
      let username = await Primitive.String.read(b);
      let password = await Primitive.String.read(b);
      return new Raw2.PhoneConnectionWebrtc({
        turn,
        stun,
        id,
        ip,
        ipv6,
        port,
        username,
        password,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.turn ? 1 << 0 : 0;
      flags |= this.stun ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.ip !== void 0) {
        b.write(Primitive.String.write(this.ip));
      }
      if (this.ipv6 !== void 0) {
        b.write(Primitive.String.write(this.ipv6));
      }
      if (this.port !== void 0) {
        b.write(Primitive.Int.write(this.port));
      }
      if (this.username !== void 0) {
        b.write(Primitive.String.write(this.username));
      }
      if (this.password !== void 0) {
        b.write(Primitive.String.write(this.password));
      }
      return b.buffer;
    }
  }
  Raw2.PhoneConnectionWebrtc = PhoneConnectionWebrtc;
  class PhoneCallProtocol extends TLObject {
    udpP2p;
    udpReflector;
    minLayer;
    maxLayer;
    libraryVersions;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PhoneCallProtocol';
      this.constructorId = 4236742600;
      this.subclassOfId = 2017038755;
      this._slots = ['udpP2p', 'udpReflector', 'minLayer', 'maxLayer', 'libraryVersions'];
      this.udpP2p = params.udpP2p;
      this.udpReflector = params.udpReflector;
      this.minLayer = params.minLayer;
      this.maxLayer = params.maxLayer;
      this.libraryVersions = params.libraryVersions;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let udpP2p = flags & (1 << 0) ? true : false;
      let udpReflector = flags & (1 << 1) ? true : false;
      let minLayer = await Primitive.Int.read(b);
      let maxLayer = await Primitive.Int.read(b);
      let libraryVersions = await TLObject.read(b, Primitive.String);
      return new Raw2.PhoneCallProtocol({
        udpP2p,
        udpReflector,
        minLayer,
        maxLayer,
        libraryVersions,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.udpP2p ? 1 << 0 : 0;
      flags |= this.udpReflector ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.minLayer !== void 0) {
        b.write(Primitive.Int.write(this.minLayer));
      }
      if (this.maxLayer !== void 0) {
        b.write(Primitive.Int.write(this.maxLayer));
      }
      if (this.libraryVersions) {
        b.write(Primitive.Vector.write(this.libraryVersions, Primitive.String));
      }
      return b.buffer;
    }
  }
  Raw2.PhoneCallProtocol = PhoneCallProtocol;
  class CdnPublicKey extends TLObject {
    dcId;
    publicKey;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'CdnPublicKey';
      this.constructorId = 3380800186;
      this.subclassOfId = 383469555;
      this._slots = ['dcId', 'publicKey'];
      this.dcId = params.dcId;
      this.publicKey = params.publicKey;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let dcId = await Primitive.Int.read(b);
      let publicKey = await Primitive.String.read(b);
      return new Raw2.CdnPublicKey({ dcId, publicKey });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.dcId !== void 0) {
        b.write(Primitive.Int.write(this.dcId));
      }
      if (this.publicKey !== void 0) {
        b.write(Primitive.String.write(this.publicKey));
      }
      return b.buffer;
    }
  }
  Raw2.CdnPublicKey = CdnPublicKey;
  class CdnConfig extends TLObject {
    publicKeys;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'CdnConfig';
      this.constructorId = 1462101002;
      this.subclassOfId = 3973724540;
      this._slots = ['publicKeys'];
      this.publicKeys = params.publicKeys;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let publicKeys = await TLObject.read(b);
      return new Raw2.CdnConfig({ publicKeys });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.publicKeys) {
        b.write(Primitive.Vector.write(this.publicKeys));
      }
      return b.buffer;
    }
  }
  Raw2.CdnConfig = CdnConfig;
  class LangPackString extends TLObject {
    key;
    value;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'LangPackString';
      this.constructorId = 3402727926;
      this.subclassOfId = 3692534457;
      this._slots = ['key', 'value'];
      this.key = params.key;
      this.value = params.value;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let key = await Primitive.String.read(b);
      let value = await Primitive.String.read(b);
      return new Raw2.LangPackString({ key, value });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.key !== void 0) {
        b.write(Primitive.String.write(this.key));
      }
      if (this.value !== void 0) {
        b.write(Primitive.String.write(this.value));
      }
      return b.buffer;
    }
  }
  Raw2.LangPackString = LangPackString;
  class LangPackStringPluralized extends TLObject {
    key;
    zeroValue;
    oneValue;
    twoValue;
    fewValue;
    manyValue;
    otherValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'LangPackStringPluralized';
      this.constructorId = 1816636575;
      this.subclassOfId = 3692534457;
      this._slots = [
        'key',
        'zeroValue',
        'oneValue',
        'twoValue',
        'fewValue',
        'manyValue',
        'otherValue',
      ];
      this.key = params.key;
      this.zeroValue = params.zeroValue;
      this.oneValue = params.oneValue;
      this.twoValue = params.twoValue;
      this.fewValue = params.fewValue;
      this.manyValue = params.manyValue;
      this.otherValue = params.otherValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let key = await Primitive.String.read(b);
      let zeroValue = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let oneValue = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let twoValue = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
      let fewValue = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
      let manyValue = flags & (1 << 4) ? await Primitive.String.read(b) : void 0;
      let otherValue = await Primitive.String.read(b);
      return new Raw2.LangPackStringPluralized({
        key,
        zeroValue,
        oneValue,
        twoValue,
        fewValue,
        manyValue,
        otherValue,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.zeroValue !== void 0 ? 1 << 0 : 0;
      flags |= this.oneValue !== void 0 ? 1 << 1 : 0;
      flags |= this.twoValue !== void 0 ? 1 << 2 : 0;
      flags |= this.fewValue !== void 0 ? 1 << 3 : 0;
      flags |= this.manyValue !== void 0 ? 1 << 4 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.key !== void 0) {
        b.write(Primitive.String.write(this.key));
      }
      if (this.zeroValue !== void 0) {
        b.write(Primitive.String.write(this.zeroValue));
      }
      if (this.oneValue !== void 0) {
        b.write(Primitive.String.write(this.oneValue));
      }
      if (this.twoValue !== void 0) {
        b.write(Primitive.String.write(this.twoValue));
      }
      if (this.fewValue !== void 0) {
        b.write(Primitive.String.write(this.fewValue));
      }
      if (this.manyValue !== void 0) {
        b.write(Primitive.String.write(this.manyValue));
      }
      if (this.otherValue !== void 0) {
        b.write(Primitive.String.write(this.otherValue));
      }
      return b.buffer;
    }
  }
  Raw2.LangPackStringPluralized = LangPackStringPluralized;
  class LangPackStringDeleted extends TLObject {
    key;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'LangPackStringDeleted';
      this.constructorId = 695856818;
      this.subclassOfId = 3692534457;
      this._slots = ['key'];
      this.key = params.key;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let key = await Primitive.String.read(b);
      return new Raw2.LangPackStringDeleted({ key });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.key !== void 0) {
        b.write(Primitive.String.write(this.key));
      }
      return b.buffer;
    }
  }
  Raw2.LangPackStringDeleted = LangPackStringDeleted;
  class LangPackDifference extends TLObject {
    langCode;
    fromVersion;
    version;
    strings;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'LangPackDifference';
      this.constructorId = 4085629430;
      this.subclassOfId = 1382427989;
      this._slots = ['langCode', 'fromVersion', 'version', 'strings'];
      this.langCode = params.langCode;
      this.fromVersion = params.fromVersion;
      this.version = params.version;
      this.strings = params.strings;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let langCode = await Primitive.String.read(b);
      let fromVersion = await Primitive.Int.read(b);
      let version = await Primitive.Int.read(b);
      let strings = await TLObject.read(b);
      return new Raw2.LangPackDifference({
        langCode,
        fromVersion,
        version,
        strings,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.langCode !== void 0) {
        b.write(Primitive.String.write(this.langCode));
      }
      if (this.fromVersion !== void 0) {
        b.write(Primitive.Int.write(this.fromVersion));
      }
      if (this.version !== void 0) {
        b.write(Primitive.Int.write(this.version));
      }
      if (this.strings) {
        b.write(Primitive.Vector.write(this.strings));
      }
      return b.buffer;
    }
  }
  Raw2.LangPackDifference = LangPackDifference;
  class LangPackLanguage extends TLObject {
    official;
    rtl;
    beta;
    name;
    nativeName;
    langCode;
    baseLangCode;
    pluralCode;
    stringsCount;
    translatedCount;
    translationsUrl;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'LangPackLanguage';
      this.constructorId = 4006239459;
      this.subclassOfId = 2880211383;
      this._slots = [
        'official',
        'rtl',
        'beta',
        'name',
        'nativeName',
        'langCode',
        'baseLangCode',
        'pluralCode',
        'stringsCount',
        'translatedCount',
        'translationsUrl',
      ];
      this.official = params.official;
      this.rtl = params.rtl;
      this.beta = params.beta;
      this.name = params.name;
      this.nativeName = params.nativeName;
      this.langCode = params.langCode;
      this.baseLangCode = params.baseLangCode;
      this.pluralCode = params.pluralCode;
      this.stringsCount = params.stringsCount;
      this.translatedCount = params.translatedCount;
      this.translationsUrl = params.translationsUrl;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let official = flags & (1 << 0) ? true : false;
      let rtl = flags & (1 << 2) ? true : false;
      let beta = flags & (1 << 3) ? true : false;
      let name = await Primitive.String.read(b);
      let nativeName = await Primitive.String.read(b);
      let langCode = await Primitive.String.read(b);
      let baseLangCode = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let pluralCode = await Primitive.String.read(b);
      let stringsCount = await Primitive.Int.read(b);
      let translatedCount = await Primitive.Int.read(b);
      let translationsUrl = await Primitive.String.read(b);
      return new Raw2.LangPackLanguage({
        official,
        rtl,
        beta,
        name,
        nativeName,
        langCode,
        baseLangCode,
        pluralCode,
        stringsCount,
        translatedCount,
        translationsUrl,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.official ? 1 << 0 : 0;
      flags |= this.rtl ? 1 << 2 : 0;
      flags |= this.beta ? 1 << 3 : 0;
      flags |= this.baseLangCode !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.name !== void 0) {
        b.write(Primitive.String.write(this.name));
      }
      if (this.nativeName !== void 0) {
        b.write(Primitive.String.write(this.nativeName));
      }
      if (this.langCode !== void 0) {
        b.write(Primitive.String.write(this.langCode));
      }
      if (this.baseLangCode !== void 0) {
        b.write(Primitive.String.write(this.baseLangCode));
      }
      if (this.pluralCode !== void 0) {
        b.write(Primitive.String.write(this.pluralCode));
      }
      if (this.stringsCount !== void 0) {
        b.write(Primitive.Int.write(this.stringsCount));
      }
      if (this.translatedCount !== void 0) {
        b.write(Primitive.Int.write(this.translatedCount));
      }
      if (this.translationsUrl !== void 0) {
        b.write(Primitive.String.write(this.translationsUrl));
      }
      return b.buffer;
    }
  }
  Raw2.LangPackLanguage = LangPackLanguage;
  class ChannelAdminLogEventActionChangeTitle extends TLObject {
    prevValue;
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionChangeTitle';
      this.constructorId = 3873421349;
      this.subclassOfId = 2998503411;
      this._slots = ['prevValue', 'newValue'];
      this.prevValue = params.prevValue;
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevValue = await Primitive.String.read(b);
      let newValue = await Primitive.String.read(b);
      return new Raw2.ChannelAdminLogEventActionChangeTitle({
        prevValue,
        newValue,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevValue !== void 0) {
        b.write(Primitive.String.write(this.prevValue));
      }
      if (this.newValue !== void 0) {
        b.write(Primitive.String.write(this.newValue));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionChangeTitle = ChannelAdminLogEventActionChangeTitle;
  class ChannelAdminLogEventActionChangeAbout extends TLObject {
    prevValue;
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionChangeAbout';
      this.constructorId = 1427671598;
      this.subclassOfId = 2998503411;
      this._slots = ['prevValue', 'newValue'];
      this.prevValue = params.prevValue;
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevValue = await Primitive.String.read(b);
      let newValue = await Primitive.String.read(b);
      return new Raw2.ChannelAdminLogEventActionChangeAbout({
        prevValue,
        newValue,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevValue !== void 0) {
        b.write(Primitive.String.write(this.prevValue));
      }
      if (this.newValue !== void 0) {
        b.write(Primitive.String.write(this.newValue));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionChangeAbout = ChannelAdminLogEventActionChangeAbout;
  class ChannelAdminLogEventActionChangeUsername extends TLObject {
    prevValue;
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionChangeUsername';
      this.constructorId = 1783299128;
      this.subclassOfId = 2998503411;
      this._slots = ['prevValue', 'newValue'];
      this.prevValue = params.prevValue;
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevValue = await Primitive.String.read(b);
      let newValue = await Primitive.String.read(b);
      return new Raw2.ChannelAdminLogEventActionChangeUsername({
        prevValue,
        newValue,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevValue !== void 0) {
        b.write(Primitive.String.write(this.prevValue));
      }
      if (this.newValue !== void 0) {
        b.write(Primitive.String.write(this.newValue));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionChangeUsername = ChannelAdminLogEventActionChangeUsername;
  class ChannelAdminLogEventActionChangePhoto extends TLObject {
    prevPhoto;
    newPhoto;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionChangePhoto';
      this.constructorId = 1129042607;
      this.subclassOfId = 2998503411;
      this._slots = ['prevPhoto', 'newPhoto'];
      this.prevPhoto = params.prevPhoto;
      this.newPhoto = params.newPhoto;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevPhoto = await TLObject.read(b);
      let newPhoto = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionChangePhoto({
        prevPhoto,
        newPhoto,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevPhoto !== void 0) {
        b.write(this.prevPhoto.write());
      }
      if (this.newPhoto !== void 0) {
        b.write(this.newPhoto.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionChangePhoto = ChannelAdminLogEventActionChangePhoto;
  class ChannelAdminLogEventActionToggleInvites extends TLObject {
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionToggleInvites';
      this.constructorId = 460916654;
      this.subclassOfId = 2998503411;
      this._slots = ['newValue'];
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let newValue = await Primitive.Bool.read(b);
      return new Raw2.ChannelAdminLogEventActionToggleInvites({ newValue });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.newValue !== void 0) {
        b.write(Primitive.Bool.write(this.newValue));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionToggleInvites = ChannelAdminLogEventActionToggleInvites;
  class ChannelAdminLogEventActionToggleSignatures extends TLObject {
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionToggleSignatures';
      this.constructorId = 648939889;
      this.subclassOfId = 2998503411;
      this._slots = ['newValue'];
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let newValue = await Primitive.Bool.read(b);
      return new Raw2.ChannelAdminLogEventActionToggleSignatures({ newValue });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.newValue !== void 0) {
        b.write(Primitive.Bool.write(this.newValue));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionToggleSignatures = ChannelAdminLogEventActionToggleSignatures;
  class ChannelAdminLogEventActionUpdatePinned extends TLObject {
    message;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionUpdatePinned';
      this.constructorId = 3924306968;
      this.subclassOfId = 2998503411;
      this._slots = ['message'];
      this.message = params.message;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let message = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionUpdatePinned({ message });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.message !== void 0) {
        b.write(this.message.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionUpdatePinned = ChannelAdminLogEventActionUpdatePinned;
  class ChannelAdminLogEventActionEditMessage extends TLObject {
    prevMessage;
    newMessage;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionEditMessage';
      this.constructorId = 1889215493;
      this.subclassOfId = 2998503411;
      this._slots = ['prevMessage', 'newMessage'];
      this.prevMessage = params.prevMessage;
      this.newMessage = params.newMessage;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevMessage = await TLObject.read(b);
      let newMessage = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionEditMessage({
        prevMessage,
        newMessage,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevMessage !== void 0) {
        b.write(this.prevMessage.write());
      }
      if (this.newMessage !== void 0) {
        b.write(this.newMessage.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionEditMessage = ChannelAdminLogEventActionEditMessage;
  class ChannelAdminLogEventActionDeleteMessage extends TLObject {
    message;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionDeleteMessage';
      this.constructorId = 1121994683;
      this.subclassOfId = 2998503411;
      this._slots = ['message'];
      this.message = params.message;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let message = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionDeleteMessage({ message });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.message !== void 0) {
        b.write(this.message.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionDeleteMessage = ChannelAdminLogEventActionDeleteMessage;
  class ChannelAdminLogEventActionParticipantJoin extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionParticipantJoin';
      this.constructorId = 405815507;
      this.subclassOfId = 2998503411;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.ChannelAdminLogEventActionParticipantJoin();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionParticipantJoin = ChannelAdminLogEventActionParticipantJoin;
  class ChannelAdminLogEventActionParticipantLeave extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionParticipantLeave';
      this.constructorId = 4170676210;
      this.subclassOfId = 2998503411;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.ChannelAdminLogEventActionParticipantLeave();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionParticipantLeave = ChannelAdminLogEventActionParticipantLeave;
  class ChannelAdminLogEventActionParticipantInvite extends TLObject {
    participant;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionParticipantInvite';
      this.constructorId = 3810276568;
      this.subclassOfId = 2998503411;
      this._slots = ['participant'];
      this.participant = params.participant;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let participant = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionParticipantInvite({ participant });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.participant !== void 0) {
        b.write(this.participant.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionParticipantInvite = ChannelAdminLogEventActionParticipantInvite;
  class ChannelAdminLogEventActionParticipantToggleBan extends TLObject {
    prevParticipant;
    newParticipant;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionParticipantToggleBan';
      this.constructorId = 3872931198;
      this.subclassOfId = 2998503411;
      this._slots = ['prevParticipant', 'newParticipant'];
      this.prevParticipant = params.prevParticipant;
      this.newParticipant = params.newParticipant;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevParticipant = await TLObject.read(b);
      let newParticipant = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionParticipantToggleBan({
        prevParticipant,
        newParticipant,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevParticipant !== void 0) {
        b.write(this.prevParticipant.write());
      }
      if (this.newParticipant !== void 0) {
        b.write(this.newParticipant.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionParticipantToggleBan =
    ChannelAdminLogEventActionParticipantToggleBan;
  class ChannelAdminLogEventActionParticipantToggleAdmin extends TLObject {
    prevParticipant;
    newParticipant;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionParticipantToggleAdmin';
      this.constructorId = 3580323600;
      this.subclassOfId = 2998503411;
      this._slots = ['prevParticipant', 'newParticipant'];
      this.prevParticipant = params.prevParticipant;
      this.newParticipant = params.newParticipant;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevParticipant = await TLObject.read(b);
      let newParticipant = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionParticipantToggleAdmin({
        prevParticipant,
        newParticipant,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevParticipant !== void 0) {
        b.write(this.prevParticipant.write());
      }
      if (this.newParticipant !== void 0) {
        b.write(this.newParticipant.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionParticipantToggleAdmin =
    ChannelAdminLogEventActionParticipantToggleAdmin;
  class ChannelAdminLogEventActionChangeStickerSet extends TLObject {
    prevStickerset;
    newStickerset;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionChangeStickerSet';
      this.constructorId = 2982398631;
      this.subclassOfId = 2998503411;
      this._slots = ['prevStickerset', 'newStickerset'];
      this.prevStickerset = params.prevStickerset;
      this.newStickerset = params.newStickerset;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevStickerset = await TLObject.read(b);
      let newStickerset = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionChangeStickerSet({
        prevStickerset,
        newStickerset,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevStickerset !== void 0) {
        b.write(this.prevStickerset.write());
      }
      if (this.newStickerset !== void 0) {
        b.write(this.newStickerset.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionChangeStickerSet = ChannelAdminLogEventActionChangeStickerSet;
  class ChannelAdminLogEventActionTogglePreHistoryHidden extends TLObject {
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionTogglePreHistoryHidden';
      this.constructorId = 1599903217;
      this.subclassOfId = 2998503411;
      this._slots = ['newValue'];
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let newValue = await Primitive.Bool.read(b);
      return new Raw2.ChannelAdminLogEventActionTogglePreHistoryHidden({ newValue });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.newValue !== void 0) {
        b.write(Primitive.Bool.write(this.newValue));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionTogglePreHistoryHidden =
    ChannelAdminLogEventActionTogglePreHistoryHidden;
  class ChannelAdminLogEventActionDefaultBannedRights extends TLObject {
    prevBannedRights;
    newBannedRights;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionDefaultBannedRights';
      this.constructorId = 771095562;
      this.subclassOfId = 2998503411;
      this._slots = ['prevBannedRights', 'newBannedRights'];
      this.prevBannedRights = params.prevBannedRights;
      this.newBannedRights = params.newBannedRights;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevBannedRights = await TLObject.read(b);
      let newBannedRights = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionDefaultBannedRights({
        prevBannedRights,
        newBannedRights,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevBannedRights !== void 0) {
        b.write(this.prevBannedRights.write());
      }
      if (this.newBannedRights !== void 0) {
        b.write(this.newBannedRights.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionDefaultBannedRights =
    ChannelAdminLogEventActionDefaultBannedRights;
  class ChannelAdminLogEventActionStopPoll extends TLObject {
    message;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionStopPoll';
      this.constructorId = 2399639107;
      this.subclassOfId = 2998503411;
      this._slots = ['message'];
      this.message = params.message;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let message = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionStopPoll({ message });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.message !== void 0) {
        b.write(this.message.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionStopPoll = ChannelAdminLogEventActionStopPoll;
  class ChannelAdminLogEventActionChangeLinkedChat extends TLObject {
    prevValue;
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionChangeLinkedChat';
      this.constructorId = 84703944;
      this.subclassOfId = 2998503411;
      this._slots = ['prevValue', 'newValue'];
      this.prevValue = params.prevValue;
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevValue = await Primitive.Long.read(b);
      let newValue = await Primitive.Long.read(b);
      return new Raw2.ChannelAdminLogEventActionChangeLinkedChat({
        prevValue,
        newValue,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevValue !== void 0) {
        b.write(Primitive.Long.write(this.prevValue));
      }
      if (this.newValue !== void 0) {
        b.write(Primitive.Long.write(this.newValue));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionChangeLinkedChat = ChannelAdminLogEventActionChangeLinkedChat;
  class ChannelAdminLogEventActionChangeLocation extends TLObject {
    prevValue;
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionChangeLocation';
      this.constructorId = 241923758;
      this.subclassOfId = 2998503411;
      this._slots = ['prevValue', 'newValue'];
      this.prevValue = params.prevValue;
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevValue = await TLObject.read(b);
      let newValue = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionChangeLocation({
        prevValue,
        newValue,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevValue !== void 0) {
        b.write(this.prevValue.write());
      }
      if (this.newValue !== void 0) {
        b.write(this.newValue.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionChangeLocation = ChannelAdminLogEventActionChangeLocation;
  class ChannelAdminLogEventActionToggleSlowMode extends TLObject {
    prevValue;
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionToggleSlowMode';
      this.constructorId = 1401984889;
      this.subclassOfId = 2998503411;
      this._slots = ['prevValue', 'newValue'];
      this.prevValue = params.prevValue;
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevValue = await Primitive.Int.read(b);
      let newValue = await Primitive.Int.read(b);
      return new Raw2.ChannelAdminLogEventActionToggleSlowMode({
        prevValue,
        newValue,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevValue !== void 0) {
        b.write(Primitive.Int.write(this.prevValue));
      }
      if (this.newValue !== void 0) {
        b.write(Primitive.Int.write(this.newValue));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionToggleSlowMode = ChannelAdminLogEventActionToggleSlowMode;
  class ChannelAdminLogEventActionStartGroupCall extends TLObject {
    call;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionStartGroupCall';
      this.constructorId = 589338437;
      this.subclassOfId = 2998503411;
      this._slots = ['call'];
      this.call = params.call;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let call = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionStartGroupCall({ call });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.call !== void 0) {
        b.write(this.call.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionStartGroupCall = ChannelAdminLogEventActionStartGroupCall;
  class ChannelAdminLogEventActionDiscardGroupCall extends TLObject {
    call;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionDiscardGroupCall';
      this.constructorId = 3684667712;
      this.subclassOfId = 2998503411;
      this._slots = ['call'];
      this.call = params.call;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let call = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionDiscardGroupCall({ call });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.call !== void 0) {
        b.write(this.call.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionDiscardGroupCall = ChannelAdminLogEventActionDiscardGroupCall;
  class ChannelAdminLogEventActionParticipantMute extends TLObject {
    participant;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionParticipantMute';
      this.constructorId = 4179895506;
      this.subclassOfId = 2998503411;
      this._slots = ['participant'];
      this.participant = params.participant;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let participant = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionParticipantMute({ participant });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.participant !== void 0) {
        b.write(this.participant.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionParticipantMute = ChannelAdminLogEventActionParticipantMute;
  class ChannelAdminLogEventActionParticipantUnmute extends TLObject {
    participant;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionParticipantUnmute';
      this.constructorId = 3863226816;
      this.subclassOfId = 2998503411;
      this._slots = ['participant'];
      this.participant = params.participant;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let participant = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionParticipantUnmute({ participant });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.participant !== void 0) {
        b.write(this.participant.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionParticipantUnmute = ChannelAdminLogEventActionParticipantUnmute;
  class ChannelAdminLogEventActionToggleGroupCallSetting extends TLObject {
    joinMuted;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionToggleGroupCallSetting';
      this.constructorId = 1456906823;
      this.subclassOfId = 2998503411;
      this._slots = ['joinMuted'];
      this.joinMuted = params.joinMuted;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let joinMuted = await Primitive.Bool.read(b);
      return new Raw2.ChannelAdminLogEventActionToggleGroupCallSetting({ joinMuted });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.joinMuted !== void 0) {
        b.write(Primitive.Bool.write(this.joinMuted));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionToggleGroupCallSetting =
    ChannelAdminLogEventActionToggleGroupCallSetting;
  class ChannelAdminLogEventActionParticipantJoinByInvite extends TLObject {
    viaChatlist;
    invite;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionParticipantJoinByInvite';
      this.constructorId = 4271882584;
      this.subclassOfId = 2998503411;
      this._slots = ['viaChatlist', 'invite'];
      this.viaChatlist = params.viaChatlist;
      this.invite = params.invite;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let viaChatlist = flags & (1 << 0) ? true : false;
      let invite = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionParticipantJoinByInvite({
        viaChatlist,
        invite,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.viaChatlist ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.invite !== void 0) {
        b.write(this.invite.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionParticipantJoinByInvite =
    ChannelAdminLogEventActionParticipantJoinByInvite;
  class ChannelAdminLogEventActionExportedInviteDelete extends TLObject {
    invite;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionExportedInviteDelete';
      this.constructorId = 1515256996;
      this.subclassOfId = 2998503411;
      this._slots = ['invite'];
      this.invite = params.invite;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let invite = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionExportedInviteDelete({ invite });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.invite !== void 0) {
        b.write(this.invite.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionExportedInviteDelete =
    ChannelAdminLogEventActionExportedInviteDelete;
  class ChannelAdminLogEventActionExportedInviteRevoke extends TLObject {
    invite;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionExportedInviteRevoke';
      this.constructorId = 1091179342;
      this.subclassOfId = 2998503411;
      this._slots = ['invite'];
      this.invite = params.invite;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let invite = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionExportedInviteRevoke({ invite });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.invite !== void 0) {
        b.write(this.invite.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionExportedInviteRevoke =
    ChannelAdminLogEventActionExportedInviteRevoke;
  class ChannelAdminLogEventActionExportedInviteEdit extends TLObject {
    prevInvite;
    newInvite;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionExportedInviteEdit';
      this.constructorId = 3910056793;
      this.subclassOfId = 2998503411;
      this._slots = ['prevInvite', 'newInvite'];
      this.prevInvite = params.prevInvite;
      this.newInvite = params.newInvite;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevInvite = await TLObject.read(b);
      let newInvite = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionExportedInviteEdit({
        prevInvite,
        newInvite,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevInvite !== void 0) {
        b.write(this.prevInvite.write());
      }
      if (this.newInvite !== void 0) {
        b.write(this.newInvite.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionExportedInviteEdit = ChannelAdminLogEventActionExportedInviteEdit;
  class ChannelAdminLogEventActionParticipantVolume extends TLObject {
    participant;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionParticipantVolume';
      this.constructorId = 1048537159;
      this.subclassOfId = 2998503411;
      this._slots = ['participant'];
      this.participant = params.participant;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let participant = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionParticipantVolume({ participant });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.participant !== void 0) {
        b.write(this.participant.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionParticipantVolume = ChannelAdminLogEventActionParticipantVolume;
  class ChannelAdminLogEventActionChangeHistoryTTL extends TLObject {
    prevValue;
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionChangeHistoryTTL';
      this.constructorId = 1855199800;
      this.subclassOfId = 2998503411;
      this._slots = ['prevValue', 'newValue'];
      this.prevValue = params.prevValue;
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevValue = await Primitive.Int.read(b);
      let newValue = await Primitive.Int.read(b);
      return new Raw2.ChannelAdminLogEventActionChangeHistoryTTL({
        prevValue,
        newValue,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevValue !== void 0) {
        b.write(Primitive.Int.write(this.prevValue));
      }
      if (this.newValue !== void 0) {
        b.write(Primitive.Int.write(this.newValue));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionChangeHistoryTTL = ChannelAdminLogEventActionChangeHistoryTTL;
  class ChannelAdminLogEventActionParticipantJoinByRequest extends TLObject {
    invite;
    approvedBy;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionParticipantJoinByRequest';
      this.constructorId = 2947945546;
      this.subclassOfId = 2998503411;
      this._slots = ['invite', 'approvedBy'];
      this.invite = params.invite;
      this.approvedBy = params.approvedBy;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let invite = await TLObject.read(b);
      let approvedBy = await Primitive.Long.read(b);
      return new Raw2.ChannelAdminLogEventActionParticipantJoinByRequest({
        invite,
        approvedBy,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.invite !== void 0) {
        b.write(this.invite.write());
      }
      if (this.approvedBy !== void 0) {
        b.write(Primitive.Long.write(this.approvedBy));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionParticipantJoinByRequest =
    ChannelAdminLogEventActionParticipantJoinByRequest;
  class ChannelAdminLogEventActionToggleNoForwards extends TLObject {
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionToggleNoForwards';
      this.constructorId = 3408578406;
      this.subclassOfId = 2998503411;
      this._slots = ['newValue'];
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let newValue = await Primitive.Bool.read(b);
      return new Raw2.ChannelAdminLogEventActionToggleNoForwards({ newValue });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.newValue !== void 0) {
        b.write(Primitive.Bool.write(this.newValue));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionToggleNoForwards = ChannelAdminLogEventActionToggleNoForwards;
  class ChannelAdminLogEventActionSendMessage extends TLObject {
    message;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionSendMessage';
      this.constructorId = 663693416;
      this.subclassOfId = 2998503411;
      this._slots = ['message'];
      this.message = params.message;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let message = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionSendMessage({ message });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.message !== void 0) {
        b.write(this.message.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionSendMessage = ChannelAdminLogEventActionSendMessage;
  class ChannelAdminLogEventActionChangeAvailableReactions extends TLObject {
    prevValue;
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionChangeAvailableReactions';
      this.constructorId = 3192786680;
      this.subclassOfId = 2998503411;
      this._slots = ['prevValue', 'newValue'];
      this.prevValue = params.prevValue;
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevValue = await TLObject.read(b);
      let newValue = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionChangeAvailableReactions({
        prevValue,
        newValue,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevValue !== void 0) {
        b.write(this.prevValue.write());
      }
      if (this.newValue !== void 0) {
        b.write(this.newValue.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionChangeAvailableReactions =
    ChannelAdminLogEventActionChangeAvailableReactions;
  class ChannelAdminLogEventActionChangeUsernames extends TLObject {
    prevValue;
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionChangeUsernames';
      this.constructorId = 4031755177;
      this.subclassOfId = 2998503411;
      this._slots = ['prevValue', 'newValue'];
      this.prevValue = params.prevValue;
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevValue = await TLObject.read(b, Primitive.String);
      let newValue = await TLObject.read(b, Primitive.String);
      return new Raw2.ChannelAdminLogEventActionChangeUsernames({
        prevValue,
        newValue,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevValue) {
        b.write(Primitive.Vector.write(this.prevValue, Primitive.String));
      }
      if (this.newValue) {
        b.write(Primitive.Vector.write(this.newValue, Primitive.String));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionChangeUsernames = ChannelAdminLogEventActionChangeUsernames;
  class ChannelAdminLogEventActionToggleForum extends TLObject {
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionToggleForum';
      this.constructorId = 46949251;
      this.subclassOfId = 2998503411;
      this._slots = ['newValue'];
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let newValue = await Primitive.Bool.read(b);
      return new Raw2.ChannelAdminLogEventActionToggleForum({ newValue });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.newValue !== void 0) {
        b.write(Primitive.Bool.write(this.newValue));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionToggleForum = ChannelAdminLogEventActionToggleForum;
  class ChannelAdminLogEventActionCreateTopic extends TLObject {
    topic;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionCreateTopic';
      this.constructorId = 1483767080;
      this.subclassOfId = 2998503411;
      this._slots = ['topic'];
      this.topic = params.topic;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let topic = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionCreateTopic({ topic });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.topic !== void 0) {
        b.write(this.topic.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionCreateTopic = ChannelAdminLogEventActionCreateTopic;
  class ChannelAdminLogEventActionEditTopic extends TLObject {
    prevTopic;
    newTopic;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionEditTopic';
      this.constructorId = 4033864200;
      this.subclassOfId = 2998503411;
      this._slots = ['prevTopic', 'newTopic'];
      this.prevTopic = params.prevTopic;
      this.newTopic = params.newTopic;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevTopic = await TLObject.read(b);
      let newTopic = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionEditTopic({
        prevTopic,
        newTopic,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevTopic !== void 0) {
        b.write(this.prevTopic.write());
      }
      if (this.newTopic !== void 0) {
        b.write(this.newTopic.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionEditTopic = ChannelAdminLogEventActionEditTopic;
  class ChannelAdminLogEventActionDeleteTopic extends TLObject {
    topic;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionDeleteTopic';
      this.constructorId = 2920712457;
      this.subclassOfId = 2998503411;
      this._slots = ['topic'];
      this.topic = params.topic;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let topic = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionDeleteTopic({ topic });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.topic !== void 0) {
        b.write(this.topic.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionDeleteTopic = ChannelAdminLogEventActionDeleteTopic;
  class ChannelAdminLogEventActionPinTopic extends TLObject {
    prevTopic;
    newTopic;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionPinTopic';
      this.constructorId = 1569535291;
      this.subclassOfId = 2998503411;
      this._slots = ['prevTopic', 'newTopic'];
      this.prevTopic = params.prevTopic;
      this.newTopic = params.newTopic;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let prevTopic = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let newTopic = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      return new Raw2.ChannelAdminLogEventActionPinTopic({
        prevTopic,
        newTopic,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.prevTopic !== void 0 ? 1 << 0 : 0;
      flags |= this.newTopic !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.prevTopic !== void 0) {
        b.write(this.prevTopic.write());
      }
      if (this.newTopic !== void 0) {
        b.write(this.newTopic.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionPinTopic = ChannelAdminLogEventActionPinTopic;
  class ChannelAdminLogEventActionToggleAntiSpam extends TLObject {
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionToggleAntiSpam';
      this.constructorId = 1693675004;
      this.subclassOfId = 2998503411;
      this._slots = ['newValue'];
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let newValue = await Primitive.Bool.read(b);
      return new Raw2.ChannelAdminLogEventActionToggleAntiSpam({ newValue });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.newValue !== void 0) {
        b.write(Primitive.Bool.write(this.newValue));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionToggleAntiSpam = ChannelAdminLogEventActionToggleAntiSpam;
  class ChannelAdminLogEventActionChangePeerColor extends TLObject {
    prevValue;
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionChangePeerColor';
      this.constructorId = 1469507456;
      this.subclassOfId = 2998503411;
      this._slots = ['prevValue', 'newValue'];
      this.prevValue = params.prevValue;
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevValue = await TLObject.read(b);
      let newValue = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionChangePeerColor({
        prevValue,
        newValue,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevValue !== void 0) {
        b.write(this.prevValue.write());
      }
      if (this.newValue !== void 0) {
        b.write(this.newValue.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionChangePeerColor = ChannelAdminLogEventActionChangePeerColor;
  class ChannelAdminLogEventActionChangeProfilePeerColor extends TLObject {
    prevValue;
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionChangeProfilePeerColor';
      this.constructorId = 1581742885;
      this.subclassOfId = 2998503411;
      this._slots = ['prevValue', 'newValue'];
      this.prevValue = params.prevValue;
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevValue = await TLObject.read(b);
      let newValue = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionChangeProfilePeerColor({
        prevValue,
        newValue,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevValue !== void 0) {
        b.write(this.prevValue.write());
      }
      if (this.newValue !== void 0) {
        b.write(this.newValue.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionChangeProfilePeerColor =
    ChannelAdminLogEventActionChangeProfilePeerColor;
  class ChannelAdminLogEventActionChangeWallpaper extends TLObject {
    prevValue;
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionChangeWallpaper';
      this.constructorId = 834362706;
      this.subclassOfId = 2998503411;
      this._slots = ['prevValue', 'newValue'];
      this.prevValue = params.prevValue;
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevValue = await TLObject.read(b);
      let newValue = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionChangeWallpaper({
        prevValue,
        newValue,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevValue !== void 0) {
        b.write(this.prevValue.write());
      }
      if (this.newValue !== void 0) {
        b.write(this.newValue.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionChangeWallpaper = ChannelAdminLogEventActionChangeWallpaper;
  class ChannelAdminLogEventActionChangeEmojiStatus extends TLObject {
    prevValue;
    newValue;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionChangeEmojiStatus';
      this.constructorId = 1051328177;
      this.subclassOfId = 2998503411;
      this._slots = ['prevValue', 'newValue'];
      this.prevValue = params.prevValue;
      this.newValue = params.newValue;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevValue = await TLObject.read(b);
      let newValue = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionChangeEmojiStatus({
        prevValue,
        newValue,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevValue !== void 0) {
        b.write(this.prevValue.write());
      }
      if (this.newValue !== void 0) {
        b.write(this.newValue.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionChangeEmojiStatus = ChannelAdminLogEventActionChangeEmojiStatus;
  class ChannelAdminLogEventActionChangeEmojiStickerSet extends TLObject {
    prevStickerset;
    newStickerset;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventActionChangeEmojiStickerSet';
      this.constructorId = 1188577451;
      this.subclassOfId = 2998503411;
      this._slots = ['prevStickerset', 'newStickerset'];
      this.prevStickerset = params.prevStickerset;
      this.newStickerset = params.newStickerset;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let prevStickerset = await TLObject.read(b);
      let newStickerset = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEventActionChangeEmojiStickerSet({
        prevStickerset,
        newStickerset,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.prevStickerset !== void 0) {
        b.write(this.prevStickerset.write());
      }
      if (this.newStickerset !== void 0) {
        b.write(this.newStickerset.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventActionChangeEmojiStickerSet =
    ChannelAdminLogEventActionChangeEmojiStickerSet;
  class ChannelAdminLogEvent extends TLObject {
    id;
    date;
    userId;
    action;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEvent';
      this.constructorId = 531458253;
      this.subclassOfId = 1083115929;
      this._slots = ['id', 'date', 'userId', 'action'];
      this.id = params.id;
      this.date = params.date;
      this.userId = params.userId;
      this.action = params.action;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let userId = await Primitive.Long.read(b);
      let action = await TLObject.read(b);
      return new Raw2.ChannelAdminLogEvent({ id, date, userId, action });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.action !== void 0) {
        b.write(this.action.write());
      }
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEvent = ChannelAdminLogEvent;
  class ChannelAdminLogEventsFilter extends TLObject {
    join;
    leave;
    invite;
    ban;
    unban;
    kick;
    unkick;
    promote;
    demote;
    info;
    settings;
    pinned;
    edit;
    delete;
    groupCall;
    invites;
    send;
    forums;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelAdminLogEventsFilter';
      this.constructorId = 3926948580;
      this.subclassOfId = 2092692249;
      this._slots = [
        'join',
        'leave',
        'invite',
        'ban',
        'unban',
        'kick',
        'unkick',
        'promote',
        'demote',
        'info',
        'settings',
        'pinned',
        'edit',
        'delete',
        'groupCall',
        'invites',
        'send',
        'forums',
      ];
      this.join = params.join;
      this.leave = params.leave;
      this.invite = params.invite;
      this.ban = params.ban;
      this.unban = params.unban;
      this.kick = params.kick;
      this.unkick = params.unkick;
      this.promote = params.promote;
      this.demote = params.demote;
      this.info = params.info;
      this.settings = params.settings;
      this.pinned = params.pinned;
      this.edit = params.edit;
      this.delete = params.delete;
      this.groupCall = params.groupCall;
      this.invites = params.invites;
      this.send = params.send;
      this.forums = params.forums;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let join = flags & (1 << 0) ? true : false;
      let leave = flags & (1 << 1) ? true : false;
      let invite = flags & (1 << 2) ? true : false;
      let ban = flags & (1 << 3) ? true : false;
      let unban = flags & (1 << 4) ? true : false;
      let kick = flags & (1 << 5) ? true : false;
      let unkick = flags & (1 << 6) ? true : false;
      let promote = flags & (1 << 7) ? true : false;
      let demote = flags & (1 << 8) ? true : false;
      let info = flags & (1 << 9) ? true : false;
      let settings = flags & (1 << 10) ? true : false;
      let pinned = flags & (1 << 11) ? true : false;
      let edit = flags & (1 << 12) ? true : false;
      let _delete = flags & (1 << 13) ? true : false;
      let groupCall = flags & (1 << 14) ? true : false;
      let invites = flags & (1 << 15) ? true : false;
      let send = flags & (1 << 16) ? true : false;
      let forums = flags & (1 << 17) ? true : false;
      return new Raw2.ChannelAdminLogEventsFilter({
        join,
        leave,
        invite,
        ban,
        unban,
        kick,
        unkick,
        promote,
        demote,
        info,
        settings,
        pinned,
        edit,
        delete: _delete,
        groupCall,
        invites,
        send,
        forums,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.join ? 1 << 0 : 0;
      flags |= this.leave ? 1 << 1 : 0;
      flags |= this.invite ? 1 << 2 : 0;
      flags |= this.ban ? 1 << 3 : 0;
      flags |= this.unban ? 1 << 4 : 0;
      flags |= this.kick ? 1 << 5 : 0;
      flags |= this.unkick ? 1 << 6 : 0;
      flags |= this.promote ? 1 << 7 : 0;
      flags |= this.demote ? 1 << 8 : 0;
      flags |= this.info ? 1 << 9 : 0;
      flags |= this.settings ? 1 << 10 : 0;
      flags |= this.pinned ? 1 << 11 : 0;
      flags |= this.edit ? 1 << 12 : 0;
      flags |= this.delete ? 1 << 13 : 0;
      flags |= this.groupCall ? 1 << 14 : 0;
      flags |= this.invites ? 1 << 15 : 0;
      flags |= this.send ? 1 << 16 : 0;
      flags |= this.forums ? 1 << 17 : 0;
      b.write(Primitive.Int.write(flags));
      return b.buffer;
    }
  }
  Raw2.ChannelAdminLogEventsFilter = ChannelAdminLogEventsFilter;
  class PopularContact extends TLObject {
    clientId;
    importers;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PopularContact';
      this.constructorId = 1558266229;
      this.subclassOfId = 67708250;
      this._slots = ['clientId', 'importers'];
      this.clientId = params.clientId;
      this.importers = params.importers;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let clientId = await Primitive.Long.read(b);
      let importers = await Primitive.Int.read(b);
      return new Raw2.PopularContact({ clientId, importers });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.clientId !== void 0) {
        b.write(Primitive.Long.write(this.clientId));
      }
      if (this.importers !== void 0) {
        b.write(Primitive.Int.write(this.importers));
      }
      return b.buffer;
    }
  }
  Raw2.PopularContact = PopularContact;
  class RecentMeUrlUnknown extends TLObject {
    url;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'RecentMeUrlUnknown';
      this.constructorId = 1189204285;
      this.subclassOfId = 1436889209;
      this._slots = ['url'];
      this.url = params.url;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      return new Raw2.RecentMeUrlUnknown({ url });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      return b.buffer;
    }
  }
  Raw2.RecentMeUrlUnknown = RecentMeUrlUnknown;
  class RecentMeUrlUser extends TLObject {
    url;
    userId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'RecentMeUrlUser';
      this.constructorId = 3106671074;
      this.subclassOfId = 1436889209;
      this._slots = ['url', 'userId'];
      this.url = params.url;
      this.userId = params.userId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      let userId = await Primitive.Long.read(b);
      return new Raw2.RecentMeUrlUser({ url, userId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      return b.buffer;
    }
  }
  Raw2.RecentMeUrlUser = RecentMeUrlUser;
  class RecentMeUrlChat extends TLObject {
    url;
    chatId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'RecentMeUrlChat';
      this.constructorId = 3000660434;
      this.subclassOfId = 1436889209;
      this._slots = ['url', 'chatId'];
      this.url = params.url;
      this.chatId = params.chatId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      let chatId = await Primitive.Long.read(b);
      return new Raw2.RecentMeUrlChat({ url, chatId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.chatId !== void 0) {
        b.write(Primitive.Long.write(this.chatId));
      }
      return b.buffer;
    }
  }
  Raw2.RecentMeUrlChat = RecentMeUrlChat;
  class RecentMeUrlChatInvite extends TLObject {
    url;
    chatInvite;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'RecentMeUrlChatInvite';
      this.constructorId = 3947431965;
      this.subclassOfId = 1436889209;
      this._slots = ['url', 'chatInvite'];
      this.url = params.url;
      this.chatInvite = params.chatInvite;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      let chatInvite = await TLObject.read(b);
      return new Raw2.RecentMeUrlChatInvite({ url, chatInvite });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.chatInvite !== void 0) {
        b.write(this.chatInvite.write());
      }
      return b.buffer;
    }
  }
  Raw2.RecentMeUrlChatInvite = RecentMeUrlChatInvite;
  class RecentMeUrlStickerSet extends TLObject {
    url;
    set;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'RecentMeUrlStickerSet';
      this.constructorId = 3154794460;
      this.subclassOfId = 1436889209;
      this._slots = ['url', 'set'];
      this.url = params.url;
      this.set = params.set;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      let set = await TLObject.read(b);
      return new Raw2.RecentMeUrlStickerSet({ url, set });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.set !== void 0) {
        b.write(this.set.write());
      }
      return b.buffer;
    }
  }
  Raw2.RecentMeUrlStickerSet = RecentMeUrlStickerSet;
  class InputSingleMedia extends TLObject {
    media;
    randomId;
    message;
    entities;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputSingleMedia';
      this.constructorId = 482797855;
      this.subclassOfId = 566922968;
      this._slots = ['media', 'randomId', 'message', 'entities'];
      this.media = params.media;
      this.randomId = params.randomId;
      this.message = params.message;
      this.entities = params.entities;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let media = await TLObject.read(b);
      let randomId = await Primitive.Long.read(b);
      let message = await Primitive.String.read(b);
      let entities = flags & (1 << 0) ? await TLObject.read(b) : [];
      return new Raw2.InputSingleMedia({
        media,
        randomId,
        message,
        entities,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.entities ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.media !== void 0) {
        b.write(this.media.write());
      }
      if (this.randomId !== void 0) {
        b.write(Primitive.Long.write(this.randomId));
      }
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      return b.buffer;
    }
  }
  Raw2.InputSingleMedia = InputSingleMedia;
  class WebAuthorization extends TLObject {
    hash;
    botId;
    domain;
    browser;
    platform;
    dateCreated;
    dateActive;
    ip;
    region;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'WebAuthorization';
      this.constructorId = 2801333330;
      this.subclassOfId = 58084656;
      this._slots = [
        'hash',
        'botId',
        'domain',
        'browser',
        'platform',
        'dateCreated',
        'dateActive',
        'ip',
        'region',
      ];
      this.hash = params.hash;
      this.botId = params.botId;
      this.domain = params.domain;
      this.browser = params.browser;
      this.platform = params.platform;
      this.dateCreated = params.dateCreated;
      this.dateActive = params.dateActive;
      this.ip = params.ip;
      this.region = params.region;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let hash = await Primitive.Long.read(b);
      let botId = await Primitive.Long.read(b);
      let domain = await Primitive.String.read(b);
      let browser = await Primitive.String.read(b);
      let platform = await Primitive.String.read(b);
      let dateCreated = await Primitive.Int.read(b);
      let dateActive = await Primitive.Int.read(b);
      let ip = await Primitive.String.read(b);
      let region = await Primitive.String.read(b);
      return new Raw2.WebAuthorization({
        hash,
        botId,
        domain,
        browser,
        platform,
        dateCreated,
        dateActive,
        ip,
        region,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.hash !== void 0) {
        b.write(Primitive.Long.write(this.hash));
      }
      if (this.botId !== void 0) {
        b.write(Primitive.Long.write(this.botId));
      }
      if (this.domain !== void 0) {
        b.write(Primitive.String.write(this.domain));
      }
      if (this.browser !== void 0) {
        b.write(Primitive.String.write(this.browser));
      }
      if (this.platform !== void 0) {
        b.write(Primitive.String.write(this.platform));
      }
      if (this.dateCreated !== void 0) {
        b.write(Primitive.Int.write(this.dateCreated));
      }
      if (this.dateActive !== void 0) {
        b.write(Primitive.Int.write(this.dateActive));
      }
      if (this.ip !== void 0) {
        b.write(Primitive.String.write(this.ip));
      }
      if (this.region !== void 0) {
        b.write(Primitive.String.write(this.region));
      }
      return b.buffer;
    }
  }
  Raw2.WebAuthorization = WebAuthorization;
  class InputMessageID extends TLObject {
    id;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMessageID';
      this.constructorId = 2792792866;
      this.subclassOfId = 1421262021;
      this._slots = ['id'];
      this.id = params.id;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Int.read(b);
      return new Raw2.InputMessageID({ id });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      return b.buffer;
    }
  }
  Raw2.InputMessageID = InputMessageID;
  class InputMessageReplyTo extends TLObject {
    id;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMessageReplyTo';
      this.constructorId = 3134751637;
      this.subclassOfId = 1421262021;
      this._slots = ['id'];
      this.id = params.id;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Int.read(b);
      return new Raw2.InputMessageReplyTo({ id });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      return b.buffer;
    }
  }
  Raw2.InputMessageReplyTo = InputMessageReplyTo;
  class InputMessagePinned extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputMessagePinned';
      this.constructorId = 2257003832;
      this.subclassOfId = 1421262021;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputMessagePinned();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputMessagePinned = InputMessagePinned;
  class InputMessageCallbackQuery extends TLObject {
    id;
    queryId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMessageCallbackQuery';
      this.constructorId = 2902071934;
      this.subclassOfId = 1421262021;
      this._slots = ['id', 'queryId'];
      this.id = params.id;
      this.queryId = params.queryId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Int.read(b);
      let queryId = await Primitive.Long.read(b);
      return new Raw2.InputMessageCallbackQuery({ id, queryId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.queryId !== void 0) {
        b.write(Primitive.Long.write(this.queryId));
      }
      return b.buffer;
    }
  }
  Raw2.InputMessageCallbackQuery = InputMessageCallbackQuery;
  class InputDialogPeer extends TLObject {
    peer;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputDialogPeer';
      this.constructorId = 4239064759;
      this.subclassOfId = 2719782805;
      this._slots = ['peer'];
      this.peer = params.peer;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      return new Raw2.InputDialogPeer({ peer });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputDialogPeer = InputDialogPeer;
  class InputDialogPeerFolder extends TLObject {
    folderId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputDialogPeerFolder';
      this.constructorId = 1684014375;
      this.subclassOfId = 2719782805;
      this._slots = ['folderId'];
      this.folderId = params.folderId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let folderId = await Primitive.Int.read(b);
      return new Raw2.InputDialogPeerFolder({ folderId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.folderId !== void 0) {
        b.write(Primitive.Int.write(this.folderId));
      }
      return b.buffer;
    }
  }
  Raw2.InputDialogPeerFolder = InputDialogPeerFolder;
  class DialogPeer extends TLObject {
    peer;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DialogPeer';
      this.constructorId = 3849174789;
      this.subclassOfId = 627892654;
      this._slots = ['peer'];
      this.peer = params.peer;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      return new Raw2.DialogPeer({ peer });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      return b.buffer;
    }
  }
  Raw2.DialogPeer = DialogPeer;
  class DialogPeerFolder extends TLObject {
    folderId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DialogPeerFolder';
      this.constructorId = 1363483106;
      this.subclassOfId = 627892654;
      this._slots = ['folderId'];
      this.folderId = params.folderId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let folderId = await Primitive.Int.read(b);
      return new Raw2.DialogPeerFolder({ folderId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.folderId !== void 0) {
        b.write(Primitive.Int.write(this.folderId));
      }
      return b.buffer;
    }
  }
  Raw2.DialogPeerFolder = DialogPeerFolder;
  class FileHash extends TLObject {
    offset;
    limit;
    hash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'FileHash';
      this.constructorId = 4087022428;
      this.subclassOfId = 3939776691;
      this._slots = ['offset', 'limit', 'hash'];
      this.offset = params.offset;
      this.limit = params.limit;
      this.hash = params.hash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let offset = await Primitive.Long.read(b);
      let limit = await Primitive.Int.read(b);
      let hash = await Primitive.Bytes.read(b);
      return new Raw2.FileHash({ offset, limit, hash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.offset !== void 0) {
        b.write(Primitive.Long.write(this.offset));
      }
      if (this.limit !== void 0) {
        b.write(Primitive.Int.write(this.limit));
      }
      if (this.hash !== void 0) {
        b.write(Primitive.Bytes.write(this.hash));
      }
      return b.buffer;
    }
  }
  Raw2.FileHash = FileHash;
  class InputClientProxy extends TLObject {
    address;
    port;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputClientProxy';
      this.constructorId = 1968737087;
      this.subclassOfId = 152716102;
      this._slots = ['address', 'port'];
      this.address = params.address;
      this.port = params.port;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let address = await Primitive.String.read(b);
      let port = await Primitive.Int.read(b);
      return new Raw2.InputClientProxy({ address, port });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.address !== void 0) {
        b.write(Primitive.String.write(this.address));
      }
      if (this.port !== void 0) {
        b.write(Primitive.Int.write(this.port));
      }
      return b.buffer;
    }
  }
  Raw2.InputClientProxy = InputClientProxy;
  class InputSecureFileUploaded extends TLObject {
    id;
    parts;
    md5Checksum;
    fileHash;
    secret;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputSecureFileUploaded';
      this.constructorId = 859091184;
      this.subclassOfId = 3670584828;
      this._slots = ['id', 'parts', 'md5Checksum', 'fileHash', 'secret'];
      this.id = params.id;
      this.parts = params.parts;
      this.md5Checksum = params.md5Checksum;
      this.fileHash = params.fileHash;
      this.secret = params.secret;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let parts = await Primitive.Int.read(b);
      let md5Checksum = await Primitive.String.read(b);
      let fileHash = await Primitive.Bytes.read(b);
      let secret = await Primitive.Bytes.read(b);
      return new Raw2.InputSecureFileUploaded({
        id,
        parts,
        md5Checksum,
        fileHash,
        secret,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.parts !== void 0) {
        b.write(Primitive.Int.write(this.parts));
      }
      if (this.md5Checksum !== void 0) {
        b.write(Primitive.String.write(this.md5Checksum));
      }
      if (this.fileHash !== void 0) {
        b.write(Primitive.Bytes.write(this.fileHash));
      }
      if (this.secret !== void 0) {
        b.write(Primitive.Bytes.write(this.secret));
      }
      return b.buffer;
    }
  }
  Raw2.InputSecureFileUploaded = InputSecureFileUploaded;
  class InputSecureFile extends TLObject {
    id;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputSecureFile';
      this.constructorId = 1399317950;
      this.subclassOfId = 3670584828;
      this._slots = ['id', 'accessHash'];
      this.id = params.id;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputSecureFile({ id, accessHash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputSecureFile = InputSecureFile;
  class SecureFileEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SecureFileEmpty';
      this.constructorId = 1679398724;
      this.subclassOfId = 1572395975;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SecureFileEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SecureFileEmpty = SecureFileEmpty;
  class SecureFile extends TLObject {
    id;
    accessHash;
    size;
    dcId;
    date;
    fileHash;
    secret;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecureFile';
      this.constructorId = 2097791614;
      this.subclassOfId = 1572395975;
      this._slots = ['id', 'accessHash', 'size', 'dcId', 'date', 'fileHash', 'secret'];
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.size = params.size;
      this.dcId = params.dcId;
      this.date = params.date;
      this.fileHash = params.fileHash;
      this.secret = params.secret;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let size = await Primitive.Long.read(b);
      let dcId = await Primitive.Int.read(b);
      let date = await Primitive.Int.read(b);
      let fileHash = await Primitive.Bytes.read(b);
      let secret = await Primitive.Bytes.read(b);
      return new Raw2.SecureFile({
        id,
        accessHash,
        size,
        dcId,
        date,
        fileHash,
        secret,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Long.write(this.size));
      }
      if (this.dcId !== void 0) {
        b.write(Primitive.Int.write(this.dcId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.fileHash !== void 0) {
        b.write(Primitive.Bytes.write(this.fileHash));
      }
      if (this.secret !== void 0) {
        b.write(Primitive.Bytes.write(this.secret));
      }
      return b.buffer;
    }
  }
  Raw2.SecureFile = SecureFile;
  class SecureData extends TLObject {
    data;
    dataHash;
    secret;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecureData';
      this.constructorId = 2330640067;
      this.subclassOfId = 2094276276;
      this._slots = ['data', 'dataHash', 'secret'];
      this.data = params.data;
      this.dataHash = params.dataHash;
      this.secret = params.secret;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let data = await Primitive.Bytes.read(b);
      let dataHash = await Primitive.Bytes.read(b);
      let secret = await Primitive.Bytes.read(b);
      return new Raw2.SecureData({ data, dataHash, secret });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.data !== void 0) {
        b.write(Primitive.Bytes.write(this.data));
      }
      if (this.dataHash !== void 0) {
        b.write(Primitive.Bytes.write(this.dataHash));
      }
      if (this.secret !== void 0) {
        b.write(Primitive.Bytes.write(this.secret));
      }
      return b.buffer;
    }
  }
  Raw2.SecureData = SecureData;
  class SecurePlainPhone extends TLObject {
    phone;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecurePlainPhone';
      this.constructorId = 2103482845;
      this.subclassOfId = 598912950;
      this._slots = ['phone'];
      this.phone = params.phone;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let phone2 = await Primitive.String.read(b);
      return new Raw2.SecurePlainPhone({ phone: phone2 });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.phone !== void 0) {
        b.write(Primitive.String.write(this.phone));
      }
      return b.buffer;
    }
  }
  Raw2.SecurePlainPhone = SecurePlainPhone;
  class SecurePlainEmail extends TLObject {
    email;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecurePlainEmail';
      this.constructorId = 569137759;
      this.subclassOfId = 598912950;
      this._slots = ['email'];
      this.email = params.email;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let email = await Primitive.String.read(b);
      return new Raw2.SecurePlainEmail({ email });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.email !== void 0) {
        b.write(Primitive.String.write(this.email));
      }
      return b.buffer;
    }
  }
  Raw2.SecurePlainEmail = SecurePlainEmail;
  class SecureValueTypePersonalDetails extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SecureValueTypePersonalDetails';
      this.constructorId = 2636808675;
      this.subclassOfId = 2291398038;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SecureValueTypePersonalDetails();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SecureValueTypePersonalDetails = SecureValueTypePersonalDetails;
  class SecureValueTypePassport extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SecureValueTypePassport';
      this.constructorId = 1034709504;
      this.subclassOfId = 2291398038;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SecureValueTypePassport();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SecureValueTypePassport = SecureValueTypePassport;
  class SecureValueTypeDriverLicense extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SecureValueTypeDriverLicense';
      this.constructorId = 115615172;
      this.subclassOfId = 2291398038;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SecureValueTypeDriverLicense();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SecureValueTypeDriverLicense = SecureValueTypeDriverLicense;
  class SecureValueTypeIdentityCard extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SecureValueTypeIdentityCard';
      this.constructorId = 2698015819;
      this.subclassOfId = 2291398038;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SecureValueTypeIdentityCard();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SecureValueTypeIdentityCard = SecureValueTypeIdentityCard;
  class SecureValueTypeInternalPassport extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SecureValueTypeInternalPassport';
      this.constructorId = 2577698595;
      this.subclassOfId = 2291398038;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SecureValueTypeInternalPassport();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SecureValueTypeInternalPassport = SecureValueTypeInternalPassport;
  class SecureValueTypeAddress extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SecureValueTypeAddress';
      this.constructorId = 3420659238;
      this.subclassOfId = 2291398038;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SecureValueTypeAddress();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SecureValueTypeAddress = SecureValueTypeAddress;
  class SecureValueTypeUtilityBill extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SecureValueTypeUtilityBill';
      this.constructorId = 4231435598;
      this.subclassOfId = 2291398038;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SecureValueTypeUtilityBill();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SecureValueTypeUtilityBill = SecureValueTypeUtilityBill;
  class SecureValueTypeBankStatement extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SecureValueTypeBankStatement';
      this.constructorId = 2299755533;
      this.subclassOfId = 2291398038;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SecureValueTypeBankStatement();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SecureValueTypeBankStatement = SecureValueTypeBankStatement;
  class SecureValueTypeRentalAgreement extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SecureValueTypeRentalAgreement';
      this.constructorId = 2340959368;
      this.subclassOfId = 2291398038;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SecureValueTypeRentalAgreement();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SecureValueTypeRentalAgreement = SecureValueTypeRentalAgreement;
  class SecureValueTypePassportRegistration extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SecureValueTypePassportRegistration';
      this.constructorId = 2581823594;
      this.subclassOfId = 2291398038;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SecureValueTypePassportRegistration();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SecureValueTypePassportRegistration = SecureValueTypePassportRegistration;
  class SecureValueTypeTemporaryRegistration extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SecureValueTypeTemporaryRegistration';
      this.constructorId = 3926060083;
      this.subclassOfId = 2291398038;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SecureValueTypeTemporaryRegistration();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SecureValueTypeTemporaryRegistration = SecureValueTypeTemporaryRegistration;
  class SecureValueTypePhone extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SecureValueTypePhone';
      this.constructorId = 3005262555;
      this.subclassOfId = 2291398038;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SecureValueTypePhone();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SecureValueTypePhone = SecureValueTypePhone;
  class SecureValueTypeEmail extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SecureValueTypeEmail';
      this.constructorId = 2386339822;
      this.subclassOfId = 2291398038;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SecureValueTypeEmail();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SecureValueTypeEmail = SecureValueTypeEmail;
  class SecureValue extends TLObject {
    type;
    data;
    frontSide;
    reverseSide;
    selfie;
    translation;
    files;
    plainData;
    hash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecureValue';
      this.constructorId = 411017418;
      this.subclassOfId = 85014702;
      this._slots = [
        'type',
        'data',
        'frontSide',
        'reverseSide',
        'selfie',
        'translation',
        'files',
        'plainData',
        'hash',
      ];
      this.type = params.type;
      this.data = params.data;
      this.frontSide = params.frontSide;
      this.reverseSide = params.reverseSide;
      this.selfie = params.selfie;
      this.translation = params.translation;
      this.files = params.files;
      this.plainData = params.plainData;
      this.hash = params.hash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let type = await TLObject.read(b);
      let data = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let frontSide = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      let reverseSide = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      let selfie = flags & (1 << 3) ? await TLObject.read(b) : void 0;
      let translation = flags & (1 << 6) ? await TLObject.read(b) : [];
      let files = flags & (1 << 4) ? await TLObject.read(b) : [];
      let plainData = flags & (1 << 5) ? await TLObject.read(b) : void 0;
      let hash = await Primitive.Bytes.read(b);
      return new Raw2.SecureValue({
        type,
        data,
        frontSide,
        reverseSide,
        selfie,
        translation,
        files,
        plainData,
        hash,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.data !== void 0 ? 1 << 0 : 0;
      flags |= this.frontSide !== void 0 ? 1 << 1 : 0;
      flags |= this.reverseSide !== void 0 ? 1 << 2 : 0;
      flags |= this.selfie !== void 0 ? 1 << 3 : 0;
      flags |= this.translation ? 1 << 6 : 0;
      flags |= this.files ? 1 << 4 : 0;
      flags |= this.plainData !== void 0 ? 1 << 5 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.type !== void 0) {
        b.write(this.type.write());
      }
      if (this.data !== void 0) {
        b.write(this.data.write());
      }
      if (this.frontSide !== void 0) {
        b.write(this.frontSide.write());
      }
      if (this.reverseSide !== void 0) {
        b.write(this.reverseSide.write());
      }
      if (this.selfie !== void 0) {
        b.write(this.selfie.write());
      }
      if (this.translation) {
        b.write(Primitive.Vector.write(this.translation));
      }
      if (this.files) {
        b.write(Primitive.Vector.write(this.files));
      }
      if (this.plainData !== void 0) {
        b.write(this.plainData.write());
      }
      if (this.hash !== void 0) {
        b.write(Primitive.Bytes.write(this.hash));
      }
      return b.buffer;
    }
  }
  Raw2.SecureValue = SecureValue;
  class InputSecureValue extends TLObject {
    type;
    data;
    frontSide;
    reverseSide;
    selfie;
    translation;
    files;
    plainData;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputSecureValue';
      this.constructorId = 3676426407;
      this.subclassOfId = 3030229500;
      this._slots = [
        'type',
        'data',
        'frontSide',
        'reverseSide',
        'selfie',
        'translation',
        'files',
        'plainData',
      ];
      this.type = params.type;
      this.data = params.data;
      this.frontSide = params.frontSide;
      this.reverseSide = params.reverseSide;
      this.selfie = params.selfie;
      this.translation = params.translation;
      this.files = params.files;
      this.plainData = params.plainData;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let type = await TLObject.read(b);
      let data = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let frontSide = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      let reverseSide = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      let selfie = flags & (1 << 3) ? await TLObject.read(b) : void 0;
      let translation = flags & (1 << 6) ? await TLObject.read(b) : [];
      let files = flags & (1 << 4) ? await TLObject.read(b) : [];
      let plainData = flags & (1 << 5) ? await TLObject.read(b) : void 0;
      return new Raw2.InputSecureValue({
        type,
        data,
        frontSide,
        reverseSide,
        selfie,
        translation,
        files,
        plainData,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.data !== void 0 ? 1 << 0 : 0;
      flags |= this.frontSide !== void 0 ? 1 << 1 : 0;
      flags |= this.reverseSide !== void 0 ? 1 << 2 : 0;
      flags |= this.selfie !== void 0 ? 1 << 3 : 0;
      flags |= this.translation ? 1 << 6 : 0;
      flags |= this.files ? 1 << 4 : 0;
      flags |= this.plainData !== void 0 ? 1 << 5 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.type !== void 0) {
        b.write(this.type.write());
      }
      if (this.data !== void 0) {
        b.write(this.data.write());
      }
      if (this.frontSide !== void 0) {
        b.write(this.frontSide.write());
      }
      if (this.reverseSide !== void 0) {
        b.write(this.reverseSide.write());
      }
      if (this.selfie !== void 0) {
        b.write(this.selfie.write());
      }
      if (this.translation) {
        b.write(Primitive.Vector.write(this.translation));
      }
      if (this.files) {
        b.write(Primitive.Vector.write(this.files));
      }
      if (this.plainData !== void 0) {
        b.write(this.plainData.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputSecureValue = InputSecureValue;
  class SecureValueHash extends TLObject {
    type;
    hash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecureValueHash';
      this.constructorId = 3978218928;
      this.subclassOfId = 3589652487;
      this._slots = ['type', 'hash'];
      this.type = params.type;
      this.hash = params.hash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let type = await TLObject.read(b);
      let hash = await Primitive.Bytes.read(b);
      return new Raw2.SecureValueHash({ type, hash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.type !== void 0) {
        b.write(this.type.write());
      }
      if (this.hash !== void 0) {
        b.write(Primitive.Bytes.write(this.hash));
      }
      return b.buffer;
    }
  }
  Raw2.SecureValueHash = SecureValueHash;
  class SecureValueErrorData extends TLObject {
    type;
    dataHash;
    field;
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecureValueErrorData';
      this.constructorId = 3903065049;
      this.subclassOfId = 101146574;
      this._slots = ['type', 'dataHash', 'field', 'text'];
      this.type = params.type;
      this.dataHash = params.dataHash;
      this.field = params.field;
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let type = await TLObject.read(b);
      let dataHash = await Primitive.Bytes.read(b);
      let field = await Primitive.String.read(b);
      let text = await Primitive.String.read(b);
      return new Raw2.SecureValueErrorData({
        type,
        dataHash,
        field,
        text,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.type !== void 0) {
        b.write(this.type.write());
      }
      if (this.dataHash !== void 0) {
        b.write(Primitive.Bytes.write(this.dataHash));
      }
      if (this.field !== void 0) {
        b.write(Primitive.String.write(this.field));
      }
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.SecureValueErrorData = SecureValueErrorData;
  class SecureValueErrorFrontSide extends TLObject {
    type;
    fileHash;
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecureValueErrorFrontSide';
      this.constructorId = 12467706;
      this.subclassOfId = 101146574;
      this._slots = ['type', 'fileHash', 'text'];
      this.type = params.type;
      this.fileHash = params.fileHash;
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let type = await TLObject.read(b);
      let fileHash = await Primitive.Bytes.read(b);
      let text = await Primitive.String.read(b);
      return new Raw2.SecureValueErrorFrontSide({ type, fileHash, text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.type !== void 0) {
        b.write(this.type.write());
      }
      if (this.fileHash !== void 0) {
        b.write(Primitive.Bytes.write(this.fileHash));
      }
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.SecureValueErrorFrontSide = SecureValueErrorFrontSide;
  class SecureValueErrorReverseSide extends TLObject {
    type;
    fileHash;
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecureValueErrorReverseSide';
      this.constructorId = 2257201829;
      this.subclassOfId = 101146574;
      this._slots = ['type', 'fileHash', 'text'];
      this.type = params.type;
      this.fileHash = params.fileHash;
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let type = await TLObject.read(b);
      let fileHash = await Primitive.Bytes.read(b);
      let text = await Primitive.String.read(b);
      return new Raw2.SecureValueErrorReverseSide({ type, fileHash, text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.type !== void 0) {
        b.write(this.type.write());
      }
      if (this.fileHash !== void 0) {
        b.write(Primitive.Bytes.write(this.fileHash));
      }
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.SecureValueErrorReverseSide = SecureValueErrorReverseSide;
  class SecureValueErrorSelfie extends TLObject {
    type;
    fileHash;
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecureValueErrorSelfie';
      this.constructorId = 3845639894;
      this.subclassOfId = 101146574;
      this._slots = ['type', 'fileHash', 'text'];
      this.type = params.type;
      this.fileHash = params.fileHash;
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let type = await TLObject.read(b);
      let fileHash = await Primitive.Bytes.read(b);
      let text = await Primitive.String.read(b);
      return new Raw2.SecureValueErrorSelfie({ type, fileHash, text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.type !== void 0) {
        b.write(this.type.write());
      }
      if (this.fileHash !== void 0) {
        b.write(Primitive.Bytes.write(this.fileHash));
      }
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.SecureValueErrorSelfie = SecureValueErrorSelfie;
  class SecureValueErrorFile extends TLObject {
    type;
    fileHash;
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecureValueErrorFile';
      this.constructorId = 2054162547;
      this.subclassOfId = 101146574;
      this._slots = ['type', 'fileHash', 'text'];
      this.type = params.type;
      this.fileHash = params.fileHash;
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let type = await TLObject.read(b);
      let fileHash = await Primitive.Bytes.read(b);
      let text = await Primitive.String.read(b);
      return new Raw2.SecureValueErrorFile({ type, fileHash, text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.type !== void 0) {
        b.write(this.type.write());
      }
      if (this.fileHash !== void 0) {
        b.write(Primitive.Bytes.write(this.fileHash));
      }
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.SecureValueErrorFile = SecureValueErrorFile;
  class SecureValueErrorFiles extends TLObject {
    type;
    fileHash;
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecureValueErrorFiles';
      this.constructorId = 1717706985;
      this.subclassOfId = 101146574;
      this._slots = ['type', 'fileHash', 'text'];
      this.type = params.type;
      this.fileHash = params.fileHash;
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let type = await TLObject.read(b);
      let fileHash = await TLObject.read(b, Primitive.Bytes);
      let text = await Primitive.String.read(b);
      return new Raw2.SecureValueErrorFiles({ type, fileHash, text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.type !== void 0) {
        b.write(this.type.write());
      }
      if (this.fileHash) {
        b.write(Primitive.Vector.write(this.fileHash, Primitive.Bytes));
      }
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.SecureValueErrorFiles = SecureValueErrorFiles;
  class SecureValueError extends TLObject {
    type;
    hash;
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecureValueError';
      this.constructorId = 2258466191;
      this.subclassOfId = 101146574;
      this._slots = ['type', 'hash', 'text'];
      this.type = params.type;
      this.hash = params.hash;
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let type = await TLObject.read(b);
      let hash = await Primitive.Bytes.read(b);
      let text = await Primitive.String.read(b);
      return new Raw2.SecureValueError({ type, hash, text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.type !== void 0) {
        b.write(this.type.write());
      }
      if (this.hash !== void 0) {
        b.write(Primitive.Bytes.write(this.hash));
      }
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.SecureValueError = SecureValueError;
  class SecureValueErrorTranslationFile extends TLObject {
    type;
    fileHash;
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecureValueErrorTranslationFile';
      this.constructorId = 2702460784;
      this.subclassOfId = 101146574;
      this._slots = ['type', 'fileHash', 'text'];
      this.type = params.type;
      this.fileHash = params.fileHash;
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let type = await TLObject.read(b);
      let fileHash = await Primitive.Bytes.read(b);
      let text = await Primitive.String.read(b);
      return new Raw2.SecureValueErrorTranslationFile({
        type,
        fileHash,
        text,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.type !== void 0) {
        b.write(this.type.write());
      }
      if (this.fileHash !== void 0) {
        b.write(Primitive.Bytes.write(this.fileHash));
      }
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.SecureValueErrorTranslationFile = SecureValueErrorTranslationFile;
  class SecureValueErrorTranslationFiles extends TLObject {
    type;
    fileHash;
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecureValueErrorTranslationFiles';
      this.constructorId = 878931416;
      this.subclassOfId = 101146574;
      this._slots = ['type', 'fileHash', 'text'];
      this.type = params.type;
      this.fileHash = params.fileHash;
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let type = await TLObject.read(b);
      let fileHash = await TLObject.read(b, Primitive.Bytes);
      let text = await Primitive.String.read(b);
      return new Raw2.SecureValueErrorTranslationFiles({
        type,
        fileHash,
        text,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.type !== void 0) {
        b.write(this.type.write());
      }
      if (this.fileHash) {
        b.write(Primitive.Vector.write(this.fileHash, Primitive.Bytes));
      }
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.SecureValueErrorTranslationFiles = SecureValueErrorTranslationFiles;
  class SecureCredentialsEncrypted extends TLObject {
    data;
    hash;
    secret;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecureCredentialsEncrypted';
      this.constructorId = 871426631;
      this.subclassOfId = 2497476147;
      this._slots = ['data', 'hash', 'secret'];
      this.data = params.data;
      this.hash = params.hash;
      this.secret = params.secret;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let data = await Primitive.Bytes.read(b);
      let hash = await Primitive.Bytes.read(b);
      let secret = await Primitive.Bytes.read(b);
      return new Raw2.SecureCredentialsEncrypted({ data, hash, secret });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.data !== void 0) {
        b.write(Primitive.Bytes.write(this.data));
      }
      if (this.hash !== void 0) {
        b.write(Primitive.Bytes.write(this.hash));
      }
      if (this.secret !== void 0) {
        b.write(Primitive.Bytes.write(this.secret));
      }
      return b.buffer;
    }
  }
  Raw2.SecureCredentialsEncrypted = SecureCredentialsEncrypted;
  class SavedPhoneContact extends TLObject {
    phone;
    firstName;
    lastName;
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SavedPhoneContact';
      this.constructorId = 289586518;
      this.subclassOfId = 115054788;
      this._slots = ['phone', 'firstName', 'lastName', 'date'];
      this.phone = params.phone;
      this.firstName = params.firstName;
      this.lastName = params.lastName;
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let phone2 = await Primitive.String.read(b);
      let firstName = await Primitive.String.read(b);
      let lastName = await Primitive.String.read(b);
      let date = await Primitive.Int.read(b);
      return new Raw2.SavedPhoneContact({
        phone: phone2,
        firstName,
        lastName,
        date,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.phone !== void 0) {
        b.write(Primitive.String.write(this.phone));
      }
      if (this.firstName !== void 0) {
        b.write(Primitive.String.write(this.firstName));
      }
      if (this.lastName !== void 0) {
        b.write(Primitive.String.write(this.lastName));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.SavedPhoneContact = SavedPhoneContact;
  class PasswordKdfAlgoUnknown extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'PasswordKdfAlgoUnknown';
      this.constructorId = 3562713238;
      this.subclassOfId = 935130572;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.PasswordKdfAlgoUnknown();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.PasswordKdfAlgoUnknown = PasswordKdfAlgoUnknown;
  class PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow extends TLObject {
    salt1;
    salt2;
    g;
    p;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow';
      this.constructorId = 982592842;
      this.subclassOfId = 935130572;
      this._slots = ['salt1', 'salt2', 'g', 'p'];
      this.salt1 = params.salt1;
      this.salt2 = params.salt2;
      this.g = params.g;
      this.p = params.p;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let salt1 = await Primitive.Bytes.read(b);
      let salt2 = await Primitive.Bytes.read(b);
      let g = await Primitive.Int.read(b);
      let p = await Primitive.Bytes.read(b);
      return new Raw2.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow({
        salt1,
        salt2,
        g,
        p,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.salt1 !== void 0) {
        b.write(Primitive.Bytes.write(this.salt1));
      }
      if (this.salt2 !== void 0) {
        b.write(Primitive.Bytes.write(this.salt2));
      }
      if (this.g !== void 0) {
        b.write(Primitive.Int.write(this.g));
      }
      if (this.p !== void 0) {
        b.write(Primitive.Bytes.write(this.p));
      }
      return b.buffer;
    }
  }
  Raw2.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow =
    PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;
  class SecurePasswordKdfAlgoUnknown extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SecurePasswordKdfAlgoUnknown';
      this.constructorId = 4883767;
      this.subclassOfId = 1998989635;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SecurePasswordKdfAlgoUnknown();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SecurePasswordKdfAlgoUnknown = SecurePasswordKdfAlgoUnknown;
  class SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 extends TLObject {
    salt;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000';
      this.constructorId = 3153255840;
      this.subclassOfId = 1998989635;
      this._slots = ['salt'];
      this.salt = params.salt;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let salt = await Primitive.Bytes.read(b);
      return new Raw2.SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000({ salt });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.salt !== void 0) {
        b.write(Primitive.Bytes.write(this.salt));
      }
      return b.buffer;
    }
  }
  Raw2.SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 =
    SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000;
  class SecurePasswordKdfAlgoSHA512 extends TLObject {
    salt;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecurePasswordKdfAlgoSHA512';
      this.constructorId = 2252807570;
      this.subclassOfId = 1998989635;
      this._slots = ['salt'];
      this.salt = params.salt;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let salt = await Primitive.Bytes.read(b);
      return new Raw2.SecurePasswordKdfAlgoSHA512({ salt });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.salt !== void 0) {
        b.write(Primitive.Bytes.write(this.salt));
      }
      return b.buffer;
    }
  }
  Raw2.SecurePasswordKdfAlgoSHA512 = SecurePasswordKdfAlgoSHA512;
  class SecureSecretSettings extends TLObject {
    secureAlgo;
    secureSecret;
    secureSecretId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecureSecretSettings';
      this.constructorId = 354925740;
      this.subclassOfId = 3334996731;
      this._slots = ['secureAlgo', 'secureSecret', 'secureSecretId'];
      this.secureAlgo = params.secureAlgo;
      this.secureSecret = params.secureSecret;
      this.secureSecretId = params.secureSecretId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let secureAlgo = await TLObject.read(b);
      let secureSecret = await Primitive.Bytes.read(b);
      let secureSecretId = await Primitive.Long.read(b);
      return new Raw2.SecureSecretSettings({
        secureAlgo,
        secureSecret,
        secureSecretId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.secureAlgo !== void 0) {
        b.write(this.secureAlgo.write());
      }
      if (this.secureSecret !== void 0) {
        b.write(Primitive.Bytes.write(this.secureSecret));
      }
      if (this.secureSecretId !== void 0) {
        b.write(Primitive.Long.write(this.secureSecretId));
      }
      return b.buffer;
    }
  }
  Raw2.SecureSecretSettings = SecureSecretSettings;
  class InputCheckPasswordEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InputCheckPasswordEmpty';
      this.constructorId = 2558588504;
      this.subclassOfId = 3558536544;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InputCheckPasswordEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InputCheckPasswordEmpty = InputCheckPasswordEmpty;
  class InputCheckPasswordSRP extends TLObject {
    srpId;
    a;
    m1;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputCheckPasswordSRP';
      this.constructorId = 3531600002;
      this.subclassOfId = 3558536544;
      this._slots = ['srpId', 'a', 'm1'];
      this.srpId = params.srpId;
      this.a = params.a;
      this.m1 = params.m1;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let srpId = await Primitive.Long.read(b);
      let a = await Primitive.Bytes.read(b);
      let m1 = await Primitive.Bytes.read(b);
      return new Raw2.InputCheckPasswordSRP({ srpId, a, m1 });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.srpId !== void 0) {
        b.write(Primitive.Long.write(this.srpId));
      }
      if (this.a !== void 0) {
        b.write(Primitive.Bytes.write(this.a));
      }
      if (this.m1 !== void 0) {
        b.write(Primitive.Bytes.write(this.m1));
      }
      return b.buffer;
    }
  }
  Raw2.InputCheckPasswordSRP = InputCheckPasswordSRP;
  class SecureRequiredType extends TLObject {
    nativeNames;
    selfieRequired;
    translationRequired;
    type;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecureRequiredType';
      this.constructorId = 2191366618;
      this.subclassOfId = 2088452618;
      this._slots = ['nativeNames', 'selfieRequired', 'translationRequired', 'type'];
      this.nativeNames = params.nativeNames;
      this.selfieRequired = params.selfieRequired;
      this.translationRequired = params.translationRequired;
      this.type = params.type;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let nativeNames = flags & (1 << 0) ? true : false;
      let selfieRequired = flags & (1 << 1) ? true : false;
      let translationRequired = flags & (1 << 2) ? true : false;
      let type = await TLObject.read(b);
      return new Raw2.SecureRequiredType({
        nativeNames,
        selfieRequired,
        translationRequired,
        type,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.nativeNames ? 1 << 0 : 0;
      flags |= this.selfieRequired ? 1 << 1 : 0;
      flags |= this.translationRequired ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.type !== void 0) {
        b.write(this.type.write());
      }
      return b.buffer;
    }
  }
  Raw2.SecureRequiredType = SecureRequiredType;
  class SecureRequiredTypeOneOf extends TLObject {
    types;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SecureRequiredTypeOneOf';
      this.constructorId = 41187252;
      this.subclassOfId = 2088452618;
      this._slots = ['types'];
      this.types = params.types;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let types = await TLObject.read(b);
      return new Raw2.SecureRequiredTypeOneOf({ types });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.types) {
        b.write(Primitive.Vector.write(this.types));
      }
      return b.buffer;
    }
  }
  Raw2.SecureRequiredTypeOneOf = SecureRequiredTypeOneOf;
  class InputAppEvent extends TLObject {
    time;
    type;
    peer;
    data;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputAppEvent';
      this.constructorId = 488313413;
      this.subclassOfId = 2301763846;
      this._slots = ['time', 'type', 'peer', 'data'];
      this.time = params.time;
      this.type = params.type;
      this.peer = params.peer;
      this.data = params.data;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let time = await Primitive.Double.read(b);
      let type = await Primitive.String.read(b);
      let peer = await Primitive.Long.read(b);
      let data = await TLObject.read(b);
      return new Raw2.InputAppEvent({ time, type, peer, data });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.time !== void 0) {
        b.write(Primitive.Double.write(this.time));
      }
      if (this.type !== void 0) {
        b.write(Primitive.String.write(this.type));
      }
      if (this.peer !== void 0) {
        b.write(Primitive.Long.write(this.peer));
      }
      if (this.data !== void 0) {
        b.write(this.data.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputAppEvent = InputAppEvent;
  class JsonObjectValue extends TLObject {
    key;
    value;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'JsonObjectValue';
      this.constructorId = 3235781593;
      this.subclassOfId = 2474626745;
      this._slots = ['key', 'value'];
      this.key = params.key;
      this.value = params.value;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let key = await Primitive.String.read(b);
      let value = await TLObject.read(b);
      return new Raw2.JsonObjectValue({ key, value });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.key !== void 0) {
        b.write(Primitive.String.write(this.key));
      }
      if (this.value !== void 0) {
        b.write(this.value.write());
      }
      return b.buffer;
    }
  }
  Raw2.JsonObjectValue = JsonObjectValue;
  class JsonNull extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'JsonNull';
      this.constructorId = 1064139624;
      this.subclassOfId = 3952707507;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.JsonNull();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.JsonNull = JsonNull;
  class JsonBool extends TLObject {
    value;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'JsonBool';
      this.constructorId = 3342098026;
      this.subclassOfId = 3952707507;
      this._slots = ['value'];
      this.value = params.value;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let value = await Primitive.Bool.read(b);
      return new Raw2.JsonBool({ value });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.value !== void 0) {
        b.write(Primitive.Bool.write(this.value));
      }
      return b.buffer;
    }
  }
  Raw2.JsonBool = JsonBool;
  class JsonNumber extends TLObject {
    value;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'JsonNumber';
      this.constructorId = 736157604;
      this.subclassOfId = 3952707507;
      this._slots = ['value'];
      this.value = params.value;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let value = await Primitive.Double.read(b);
      return new Raw2.JsonNumber({ value });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.value !== void 0) {
        b.write(Primitive.Double.write(this.value));
      }
      return b.buffer;
    }
  }
  Raw2.JsonNumber = JsonNumber;
  class JsonString extends TLObject {
    value;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'JsonString';
      this.constructorId = 3072226938;
      this.subclassOfId = 3952707507;
      this._slots = ['value'];
      this.value = params.value;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let value = await Primitive.String.read(b);
      return new Raw2.JsonString({ value });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.value !== void 0) {
        b.write(Primitive.String.write(this.value));
      }
      return b.buffer;
    }
  }
  Raw2.JsonString = JsonString;
  class JsonArray extends TLObject {
    value;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'JsonArray';
      this.constructorId = 4148447075;
      this.subclassOfId = 3952707507;
      this._slots = ['value'];
      this.value = params.value;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let value = await TLObject.read(b);
      return new Raw2.JsonArray({ value });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.value) {
        b.write(Primitive.Vector.write(this.value));
      }
      return b.buffer;
    }
  }
  Raw2.JsonArray = JsonArray;
  class JsonObject extends TLObject {
    value;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'JsonObject';
      this.constructorId = 2579616925;
      this.subclassOfId = 3952707507;
      this._slots = ['value'];
      this.value = params.value;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let value = await TLObject.read(b);
      return new Raw2.JsonObject({ value });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.value) {
        b.write(Primitive.Vector.write(this.value));
      }
      return b.buffer;
    }
  }
  Raw2.JsonObject = JsonObject;
  class PageTableCell extends TLObject {
    header;
    alignCenter;
    alignRight;
    valignMiddle;
    valignBottom;
    text;
    colspan;
    rowspan;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageTableCell';
      this.constructorId = 878078826;
      this.subclassOfId = 2968203348;
      this._slots = [
        'header',
        'alignCenter',
        'alignRight',
        'valignMiddle',
        'valignBottom',
        'text',
        'colspan',
        'rowspan',
      ];
      this.header = params.header;
      this.alignCenter = params.alignCenter;
      this.alignRight = params.alignRight;
      this.valignMiddle = params.valignMiddle;
      this.valignBottom = params.valignBottom;
      this.text = params.text;
      this.colspan = params.colspan;
      this.rowspan = params.rowspan;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let header = flags & (1 << 0) ? true : false;
      let alignCenter = flags & (1 << 3) ? true : false;
      let alignRight = flags & (1 << 4) ? true : false;
      let valignMiddle = flags & (1 << 5) ? true : false;
      let valignBottom = flags & (1 << 6) ? true : false;
      let text = flags & (1 << 7) ? await TLObject.read(b) : void 0;
      let colspan = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      let rowspan = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.PageTableCell({
        header,
        alignCenter,
        alignRight,
        valignMiddle,
        valignBottom,
        text,
        colspan,
        rowspan,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.header ? 1 << 0 : 0;
      flags |= this.alignCenter ? 1 << 3 : 0;
      flags |= this.alignRight ? 1 << 4 : 0;
      flags |= this.valignMiddle ? 1 << 5 : 0;
      flags |= this.valignBottom ? 1 << 6 : 0;
      flags |= this.text !== void 0 ? 1 << 7 : 0;
      flags |= this.colspan !== void 0 ? 1 << 1 : 0;
      flags |= this.rowspan !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      if (this.colspan !== void 0) {
        b.write(Primitive.Int.write(this.colspan));
      }
      if (this.rowspan !== void 0) {
        b.write(Primitive.Int.write(this.rowspan));
      }
      return b.buffer;
    }
  }
  Raw2.PageTableCell = PageTableCell;
  class PageTableRow extends TLObject {
    cells;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageTableRow';
      this.constructorId = 3770729957;
      this.subclassOfId = 1504505361;
      this._slots = ['cells'];
      this.cells = params.cells;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let cells = await TLObject.read(b);
      return new Raw2.PageTableRow({ cells });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.cells) {
        b.write(Primitive.Vector.write(this.cells));
      }
      return b.buffer;
    }
  }
  Raw2.PageTableRow = PageTableRow;
  class PageCaption extends TLObject {
    text;
    credit;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageCaption';
      this.constructorId = 1869903447;
      this.subclassOfId = 699985587;
      this._slots = ['text', 'credit'];
      this.text = params.text;
      this.credit = params.credit;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      let credit = await TLObject.read(b);
      return new Raw2.PageCaption({ text, credit });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      if (this.credit !== void 0) {
        b.write(this.credit.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageCaption = PageCaption;
  class PageListItemText extends TLObject {
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageListItemText';
      this.constructorId = 3106911949;
      this.subclassOfId = 2360261809;
      this._slots = ['text'];
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      return new Raw2.PageListItemText({ text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageListItemText = PageListItemText;
  class PageListItemBlocks extends TLObject {
    blocks;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageListItemBlocks';
      this.constructorId = 635466748;
      this.subclassOfId = 2360261809;
      this._slots = ['blocks'];
      this.blocks = params.blocks;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let blocks = await TLObject.read(b);
      return new Raw2.PageListItemBlocks({ blocks });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.blocks) {
        b.write(Primitive.Vector.write(this.blocks));
      }
      return b.buffer;
    }
  }
  Raw2.PageListItemBlocks = PageListItemBlocks;
  class PageListOrderedItemText extends TLObject {
    num;
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageListOrderedItemText';
      this.constructorId = 1577484359;
      this.subclassOfId = 4007268024;
      this._slots = ['num', 'text'];
      this.num = params.num;
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let num = await Primitive.String.read(b);
      let text = await TLObject.read(b);
      return new Raw2.PageListOrderedItemText({ num, text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.num !== void 0) {
        b.write(Primitive.String.write(this.num));
      }
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      return b.buffer;
    }
  }
  Raw2.PageListOrderedItemText = PageListOrderedItemText;
  class PageListOrderedItemBlocks extends TLObject {
    num;
    blocks;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageListOrderedItemBlocks';
      this.constructorId = 2564655414;
      this.subclassOfId = 4007268024;
      this._slots = ['num', 'blocks'];
      this.num = params.num;
      this.blocks = params.blocks;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let num = await Primitive.String.read(b);
      let blocks = await TLObject.read(b);
      return new Raw2.PageListOrderedItemBlocks({ num, blocks });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.num !== void 0) {
        b.write(Primitive.String.write(this.num));
      }
      if (this.blocks) {
        b.write(Primitive.Vector.write(this.blocks));
      }
      return b.buffer;
    }
  }
  Raw2.PageListOrderedItemBlocks = PageListOrderedItemBlocks;
  class PageRelatedArticle extends TLObject {
    url;
    webpageId;
    title;
    description;
    photoId;
    author;
    publishedDate;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PageRelatedArticle';
      this.constructorId = 3012615176;
      this.subclassOfId = 919623714;
      this._slots = [
        'url',
        'webpageId',
        'title',
        'description',
        'photoId',
        'author',
        'publishedDate',
      ];
      this.url = params.url;
      this.webpageId = params.webpageId;
      this.title = params.title;
      this.description = params.description;
      this.photoId = params.photoId;
      this.author = params.author;
      this.publishedDate = params.publishedDate;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let url = await Primitive.String.read(b);
      let webpageId = await Primitive.Long.read(b);
      let title = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let description = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let photoId = flags & (1 << 2) ? await Primitive.Long.read(b) : void 0;
      let author = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
      let publishedDate = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.PageRelatedArticle({
        url,
        webpageId,
        title,
        description,
        photoId,
        author,
        publishedDate,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.title !== void 0 ? 1 << 0 : 0;
      flags |= this.description !== void 0 ? 1 << 1 : 0;
      flags |= this.photoId !== void 0 ? 1 << 2 : 0;
      flags |= this.author !== void 0 ? 1 << 3 : 0;
      flags |= this.publishedDate !== void 0 ? 1 << 4 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.webpageId !== void 0) {
        b.write(Primitive.Long.write(this.webpageId));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.description !== void 0) {
        b.write(Primitive.String.write(this.description));
      }
      if (this.photoId !== void 0) {
        b.write(Primitive.Long.write(this.photoId));
      }
      if (this.author !== void 0) {
        b.write(Primitive.String.write(this.author));
      }
      if (this.publishedDate !== void 0) {
        b.write(Primitive.Int.write(this.publishedDate));
      }
      return b.buffer;
    }
  }
  Raw2.PageRelatedArticle = PageRelatedArticle;
  class Page extends TLObject {
    part;
    rtl;
    v2;
    url;
    blocks;
    photos;
    documents;
    views;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Page';
      this.constructorId = 2556788493;
      this.subclassOfId = 3023575326;
      this._slots = ['part', 'rtl', 'v2', 'url', 'blocks', 'photos', 'documents', 'views'];
      this.part = params.part;
      this.rtl = params.rtl;
      this.v2 = params.v2;
      this.url = params.url;
      this.blocks = params.blocks;
      this.photos = params.photos;
      this.documents = params.documents;
      this.views = params.views;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let part = flags & (1 << 0) ? true : false;
      let rtl = flags & (1 << 1) ? true : false;
      let v2 = flags & (1 << 2) ? true : false;
      let url = await Primitive.String.read(b);
      let blocks = await TLObject.read(b);
      let photos2 = await TLObject.read(b);
      let documents = await TLObject.read(b);
      let views = flags & (1 << 3) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.Page({
        part,
        rtl,
        v2,
        url,
        blocks,
        photos: photos2,
        documents,
        views,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.part ? 1 << 0 : 0;
      flags |= this.rtl ? 1 << 1 : 0;
      flags |= this.v2 ? 1 << 2 : 0;
      flags |= this.views !== void 0 ? 1 << 3 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.blocks) {
        b.write(Primitive.Vector.write(this.blocks));
      }
      if (this.photos) {
        b.write(Primitive.Vector.write(this.photos));
      }
      if (this.documents) {
        b.write(Primitive.Vector.write(this.documents));
      }
      if (this.views !== void 0) {
        b.write(Primitive.Int.write(this.views));
      }
      return b.buffer;
    }
  }
  Raw2.Page = Page;
  class PollAnswer extends TLObject {
    text;
    option;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PollAnswer';
      this.constructorId = 4279689930;
      this.subclassOfId = 2124799390;
      this._slots = ['text', 'option'];
      this.text = params.text;
      this.option = params.option;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await TLObject.read(b);
      let option = await Primitive.Bytes.read(b);
      return new Raw2.PollAnswer({ text, option });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(this.text.write());
      }
      if (this.option !== void 0) {
        b.write(Primitive.Bytes.write(this.option));
      }
      return b.buffer;
    }
  }
  Raw2.PollAnswer = PollAnswer;
  class Poll extends TLObject {
    id;
    closed;
    publicVoters;
    multipleChoice;
    quiz;
    question;
    answers;
    closePeriod;
    closeDate;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Poll';
      this.constructorId = 1484026161;
      this.subclassOfId = 613307771;
      this._slots = [
        'id',
        'closed',
        'publicVoters',
        'multipleChoice',
        'quiz',
        'question',
        'answers',
        'closePeriod',
        'closeDate',
      ];
      this.id = params.id;
      this.closed = params.closed;
      this.publicVoters = params.publicVoters;
      this.multipleChoice = params.multipleChoice;
      this.quiz = params.quiz;
      this.question = params.question;
      this.answers = params.answers;
      this.closePeriod = params.closePeriod;
      this.closeDate = params.closeDate;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let flags = await Primitive.Int.read(b);
      let closed = flags & (1 << 0) ? true : false;
      let publicVoters = flags & (1 << 1) ? true : false;
      let multipleChoice = flags & (1 << 2) ? true : false;
      let quiz = flags & (1 << 3) ? true : false;
      let question = await TLObject.read(b);
      let answers = await TLObject.read(b);
      let closePeriod = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
      let closeDate = flags & (1 << 5) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.Poll({
        id,
        closed,
        publicVoters,
        multipleChoice,
        quiz,
        question,
        answers,
        closePeriod,
        closeDate,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      let flags = 0;
      flags |= this.closed ? 1 << 0 : 0;
      flags |= this.publicVoters ? 1 << 1 : 0;
      flags |= this.multipleChoice ? 1 << 2 : 0;
      flags |= this.quiz ? 1 << 3 : 0;
      flags |= this.closePeriod !== void 0 ? 1 << 4 : 0;
      flags |= this.closeDate !== void 0 ? 1 << 5 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.question !== void 0) {
        b.write(this.question.write());
      }
      if (this.answers) {
        b.write(Primitive.Vector.write(this.answers));
      }
      if (this.closePeriod !== void 0) {
        b.write(Primitive.Int.write(this.closePeriod));
      }
      if (this.closeDate !== void 0) {
        b.write(Primitive.Int.write(this.closeDate));
      }
      return b.buffer;
    }
  }
  Raw2.Poll = Poll;
  class PollAnswerVoters extends TLObject {
    chosen;
    correct;
    option;
    voters;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PollAnswerVoters';
      this.constructorId = 997055186;
      this.subclassOfId = 2095107985;
      this._slots = ['chosen', 'correct', 'option', 'voters'];
      this.chosen = params.chosen;
      this.correct = params.correct;
      this.option = params.option;
      this.voters = params.voters;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let chosen = flags & (1 << 0) ? true : false;
      let correct = flags & (1 << 1) ? true : false;
      let option = await Primitive.Bytes.read(b);
      let voters = await Primitive.Int.read(b);
      return new Raw2.PollAnswerVoters({
        chosen,
        correct,
        option,
        voters,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.chosen ? 1 << 0 : 0;
      flags |= this.correct ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.option !== void 0) {
        b.write(Primitive.Bytes.write(this.option));
      }
      if (this.voters !== void 0) {
        b.write(Primitive.Int.write(this.voters));
      }
      return b.buffer;
    }
  }
  Raw2.PollAnswerVoters = PollAnswerVoters;
  class PollResults extends TLObject {
    min;
    results;
    totalVoters;
    recentVoters;
    solution;
    solutionEntities;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PollResults';
      this.constructorId = 2061444128;
      this.subclassOfId = 3283416711;
      this._slots = [
        'min',
        'results',
        'totalVoters',
        'recentVoters',
        'solution',
        'solutionEntities',
      ];
      this.min = params.min;
      this.results = params.results;
      this.totalVoters = params.totalVoters;
      this.recentVoters = params.recentVoters;
      this.solution = params.solution;
      this.solutionEntities = params.solutionEntities;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let min = flags & (1 << 0) ? true : false;
      let results = flags & (1 << 1) ? await TLObject.read(b) : [];
      let totalVoters = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      let recentVoters = flags & (1 << 3) ? await TLObject.read(b) : [];
      let solution = flags & (1 << 4) ? await Primitive.String.read(b) : void 0;
      let solutionEntities = flags & (1 << 4) ? await TLObject.read(b) : [];
      return new Raw2.PollResults({
        min,
        results,
        totalVoters,
        recentVoters,
        solution,
        solutionEntities,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.min ? 1 << 0 : 0;
      flags |= this.results ? 1 << 1 : 0;
      flags |= this.totalVoters !== void 0 ? 1 << 2 : 0;
      flags |= this.recentVoters ? 1 << 3 : 0;
      flags |= this.solution !== void 0 ? 1 << 4 : 0;
      flags |= this.solutionEntities ? 1 << 4 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.results) {
        b.write(Primitive.Vector.write(this.results));
      }
      if (this.totalVoters !== void 0) {
        b.write(Primitive.Int.write(this.totalVoters));
      }
      if (this.recentVoters) {
        b.write(Primitive.Vector.write(this.recentVoters));
      }
      if (this.solution !== void 0) {
        b.write(Primitive.String.write(this.solution));
      }
      if (this.solutionEntities) {
        b.write(Primitive.Vector.write(this.solutionEntities));
      }
      return b.buffer;
    }
  }
  Raw2.PollResults = PollResults;
  class ChatOnlines extends TLObject {
    onlines;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatOnlines';
      this.constructorId = 4030849616;
      this.subclassOfId = 2357301306;
      this._slots = ['onlines'];
      this.onlines = params.onlines;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let onlines = await Primitive.Int.read(b);
      return new Raw2.ChatOnlines({ onlines });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.onlines !== void 0) {
        b.write(Primitive.Int.write(this.onlines));
      }
      return b.buffer;
    }
  }
  Raw2.ChatOnlines = ChatOnlines;
  class StatsURL extends TLObject {
    url;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StatsURL';
      this.constructorId = 1202287072;
      this.subclassOfId = 2370606272;
      this._slots = ['url'];
      this.url = params.url;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      return new Raw2.StatsURL({ url });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      return b.buffer;
    }
  }
  Raw2.StatsURL = StatsURL;
  class ChatAdminRights extends TLObject {
    changeInfo;
    postMessages;
    editMessages;
    deleteMessages;
    banUsers;
    inviteUsers;
    pinMessages;
    addAdmins;
    anonymous;
    manageCall;
    other;
    manageTopics;
    postStories;
    editStories;
    deleteStories;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatAdminRights';
      this.constructorId = 1605510357;
      this.subclassOfId = 2252195780;
      this._slots = [
        'changeInfo',
        'postMessages',
        'editMessages',
        'deleteMessages',
        'banUsers',
        'inviteUsers',
        'pinMessages',
        'addAdmins',
        'anonymous',
        'manageCall',
        'other',
        'manageTopics',
        'postStories',
        'editStories',
        'deleteStories',
      ];
      this.changeInfo = params.changeInfo;
      this.postMessages = params.postMessages;
      this.editMessages = params.editMessages;
      this.deleteMessages = params.deleteMessages;
      this.banUsers = params.banUsers;
      this.inviteUsers = params.inviteUsers;
      this.pinMessages = params.pinMessages;
      this.addAdmins = params.addAdmins;
      this.anonymous = params.anonymous;
      this.manageCall = params.manageCall;
      this.other = params.other;
      this.manageTopics = params.manageTopics;
      this.postStories = params.postStories;
      this.editStories = params.editStories;
      this.deleteStories = params.deleteStories;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let changeInfo = flags & (1 << 0) ? true : false;
      let postMessages = flags & (1 << 1) ? true : false;
      let editMessages = flags & (1 << 2) ? true : false;
      let deleteMessages = flags & (1 << 3) ? true : false;
      let banUsers = flags & (1 << 4) ? true : false;
      let inviteUsers = flags & (1 << 5) ? true : false;
      let pinMessages = flags & (1 << 7) ? true : false;
      let addAdmins = flags & (1 << 9) ? true : false;
      let anonymous = flags & (1 << 10) ? true : false;
      let manageCall = flags & (1 << 11) ? true : false;
      let other = flags & (1 << 12) ? true : false;
      let manageTopics = flags & (1 << 13) ? true : false;
      let postStories = flags & (1 << 14) ? true : false;
      let editStories = flags & (1 << 15) ? true : false;
      let deleteStories = flags & (1 << 16) ? true : false;
      return new Raw2.ChatAdminRights({
        changeInfo,
        postMessages,
        editMessages,
        deleteMessages,
        banUsers,
        inviteUsers,
        pinMessages,
        addAdmins,
        anonymous,
        manageCall,
        other,
        manageTopics,
        postStories,
        editStories,
        deleteStories,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.changeInfo ? 1 << 0 : 0;
      flags |= this.postMessages ? 1 << 1 : 0;
      flags |= this.editMessages ? 1 << 2 : 0;
      flags |= this.deleteMessages ? 1 << 3 : 0;
      flags |= this.banUsers ? 1 << 4 : 0;
      flags |= this.inviteUsers ? 1 << 5 : 0;
      flags |= this.pinMessages ? 1 << 7 : 0;
      flags |= this.addAdmins ? 1 << 9 : 0;
      flags |= this.anonymous ? 1 << 10 : 0;
      flags |= this.manageCall ? 1 << 11 : 0;
      flags |= this.other ? 1 << 12 : 0;
      flags |= this.manageTopics ? 1 << 13 : 0;
      flags |= this.postStories ? 1 << 14 : 0;
      flags |= this.editStories ? 1 << 15 : 0;
      flags |= this.deleteStories ? 1 << 16 : 0;
      b.write(Primitive.Int.write(flags));
      return b.buffer;
    }
  }
  Raw2.ChatAdminRights = ChatAdminRights;
  class ChatBannedRights extends TLObject {
    viewMessages;
    sendMessages;
    sendMedia;
    sendStickers;
    sendGifs;
    sendGames;
    sendInline;
    embedLinks;
    sendPolls;
    changeInfo;
    inviteUsers;
    pinMessages;
    manageTopics;
    sendPhotos;
    sendVideos;
    sendRoundvideos;
    sendAudios;
    sendVoices;
    sendDocs;
    sendPlain;
    untilDate;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatBannedRights';
      this.constructorId = 2668758040;
      this.subclassOfId = 1263814057;
      this._slots = [
        'viewMessages',
        'sendMessages',
        'sendMedia',
        'sendStickers',
        'sendGifs',
        'sendGames',
        'sendInline',
        'embedLinks',
        'sendPolls',
        'changeInfo',
        'inviteUsers',
        'pinMessages',
        'manageTopics',
        'sendPhotos',
        'sendVideos',
        'sendRoundvideos',
        'sendAudios',
        'sendVoices',
        'sendDocs',
        'sendPlain',
        'untilDate',
      ];
      this.viewMessages = params.viewMessages;
      this.sendMessages = params.sendMessages;
      this.sendMedia = params.sendMedia;
      this.sendStickers = params.sendStickers;
      this.sendGifs = params.sendGifs;
      this.sendGames = params.sendGames;
      this.sendInline = params.sendInline;
      this.embedLinks = params.embedLinks;
      this.sendPolls = params.sendPolls;
      this.changeInfo = params.changeInfo;
      this.inviteUsers = params.inviteUsers;
      this.pinMessages = params.pinMessages;
      this.manageTopics = params.manageTopics;
      this.sendPhotos = params.sendPhotos;
      this.sendVideos = params.sendVideos;
      this.sendRoundvideos = params.sendRoundvideos;
      this.sendAudios = params.sendAudios;
      this.sendVoices = params.sendVoices;
      this.sendDocs = params.sendDocs;
      this.sendPlain = params.sendPlain;
      this.untilDate = params.untilDate;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let viewMessages = flags & (1 << 0) ? true : false;
      let sendMessages = flags & (1 << 1) ? true : false;
      let sendMedia = flags & (1 << 2) ? true : false;
      let sendStickers = flags & (1 << 3) ? true : false;
      let sendGifs = flags & (1 << 4) ? true : false;
      let sendGames = flags & (1 << 5) ? true : false;
      let sendInline = flags & (1 << 6) ? true : false;
      let embedLinks = flags & (1 << 7) ? true : false;
      let sendPolls = flags & (1 << 8) ? true : false;
      let changeInfo = flags & (1 << 10) ? true : false;
      let inviteUsers = flags & (1 << 15) ? true : false;
      let pinMessages = flags & (1 << 17) ? true : false;
      let manageTopics = flags & (1 << 18) ? true : false;
      let sendPhotos = flags & (1 << 19) ? true : false;
      let sendVideos = flags & (1 << 20) ? true : false;
      let sendRoundvideos = flags & (1 << 21) ? true : false;
      let sendAudios = flags & (1 << 22) ? true : false;
      let sendVoices = flags & (1 << 23) ? true : false;
      let sendDocs = flags & (1 << 24) ? true : false;
      let sendPlain = flags & (1 << 25) ? true : false;
      let untilDate = await Primitive.Int.read(b);
      return new Raw2.ChatBannedRights({
        viewMessages,
        sendMessages,
        sendMedia,
        sendStickers,
        sendGifs,
        sendGames,
        sendInline,
        embedLinks,
        sendPolls,
        changeInfo,
        inviteUsers,
        pinMessages,
        manageTopics,
        sendPhotos,
        sendVideos,
        sendRoundvideos,
        sendAudios,
        sendVoices,
        sendDocs,
        sendPlain,
        untilDate,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.viewMessages ? 1 << 0 : 0;
      flags |= this.sendMessages ? 1 << 1 : 0;
      flags |= this.sendMedia ? 1 << 2 : 0;
      flags |= this.sendStickers ? 1 << 3 : 0;
      flags |= this.sendGifs ? 1 << 4 : 0;
      flags |= this.sendGames ? 1 << 5 : 0;
      flags |= this.sendInline ? 1 << 6 : 0;
      flags |= this.embedLinks ? 1 << 7 : 0;
      flags |= this.sendPolls ? 1 << 8 : 0;
      flags |= this.changeInfo ? 1 << 10 : 0;
      flags |= this.inviteUsers ? 1 << 15 : 0;
      flags |= this.pinMessages ? 1 << 17 : 0;
      flags |= this.manageTopics ? 1 << 18 : 0;
      flags |= this.sendPhotos ? 1 << 19 : 0;
      flags |= this.sendVideos ? 1 << 20 : 0;
      flags |= this.sendRoundvideos ? 1 << 21 : 0;
      flags |= this.sendAudios ? 1 << 22 : 0;
      flags |= this.sendVoices ? 1 << 23 : 0;
      flags |= this.sendDocs ? 1 << 24 : 0;
      flags |= this.sendPlain ? 1 << 25 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.untilDate !== void 0) {
        b.write(Primitive.Int.write(this.untilDate));
      }
      return b.buffer;
    }
  }
  Raw2.ChatBannedRights = ChatBannedRights;
  class InputWallPaper extends TLObject {
    id;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputWallPaper';
      this.constructorId = 3861952889;
      this.subclassOfId = 4000784410;
      this._slots = ['id', 'accessHash'];
      this.id = params.id;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputWallPaper({ id, accessHash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputWallPaper = InputWallPaper;
  class InputWallPaperSlug extends TLObject {
    slug;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputWallPaperSlug';
      this.constructorId = 1913199744;
      this.subclassOfId = 4000784410;
      this._slots = ['slug'];
      this.slug = params.slug;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let slug = await Primitive.String.read(b);
      return new Raw2.InputWallPaperSlug({ slug });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.slug !== void 0) {
        b.write(Primitive.String.write(this.slug));
      }
      return b.buffer;
    }
  }
  Raw2.InputWallPaperSlug = InputWallPaperSlug;
  class InputWallPaperNoFile extends TLObject {
    id;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputWallPaperNoFile';
      this.constructorId = 2524595758;
      this.subclassOfId = 4000784410;
      this._slots = ['id'];
      this.id = params.id;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      return new Raw2.InputWallPaperNoFile({ id });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      return b.buffer;
    }
  }
  Raw2.InputWallPaperNoFile = InputWallPaperNoFile;
  class CodeSettings extends TLObject {
    allowFlashcall;
    currentNumber;
    allowAppHash;
    allowMissedCall;
    allowFirebase;
    unknownNumber;
    logoutTokens;
    token;
    appSandbox;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'CodeSettings';
      this.constructorId = 2904898936;
      this.subclassOfId = 1223539850;
      this._slots = [
        'allowFlashcall',
        'currentNumber',
        'allowAppHash',
        'allowMissedCall',
        'allowFirebase',
        'unknownNumber',
        'logoutTokens',
        'token',
        'appSandbox',
      ];
      this.allowFlashcall = params.allowFlashcall;
      this.currentNumber = params.currentNumber;
      this.allowAppHash = params.allowAppHash;
      this.allowMissedCall = params.allowMissedCall;
      this.allowFirebase = params.allowFirebase;
      this.unknownNumber = params.unknownNumber;
      this.logoutTokens = params.logoutTokens;
      this.token = params.token;
      this.appSandbox = params.appSandbox;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let allowFlashcall = flags & (1 << 0) ? true : false;
      let currentNumber = flags & (1 << 1) ? true : false;
      let allowAppHash = flags & (1 << 4) ? true : false;
      let allowMissedCall = flags & (1 << 5) ? true : false;
      let allowFirebase = flags & (1 << 7) ? true : false;
      let unknownNumber = flags & (1 << 9) ? true : false;
      let logoutTokens = flags & (1 << 6) ? await TLObject.read(b, Primitive.Bytes) : [];
      let token = flags & (1 << 8) ? await Primitive.String.read(b) : void 0;
      let appSandbox = flags & (1 << 8) ? await Primitive.Bool.read(b) : void 0;
      return new Raw2.CodeSettings({
        allowFlashcall,
        currentNumber,
        allowAppHash,
        allowMissedCall,
        allowFirebase,
        unknownNumber,
        logoutTokens,
        token,
        appSandbox,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.allowFlashcall ? 1 << 0 : 0;
      flags |= this.currentNumber ? 1 << 1 : 0;
      flags |= this.allowAppHash ? 1 << 4 : 0;
      flags |= this.allowMissedCall ? 1 << 5 : 0;
      flags |= this.allowFirebase ? 1 << 7 : 0;
      flags |= this.unknownNumber ? 1 << 9 : 0;
      flags |= this.logoutTokens ? 1 << 6 : 0;
      flags |= this.token !== void 0 ? 1 << 8 : 0;
      flags |= this.appSandbox !== void 0 ? 1 << 8 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.logoutTokens) {
        b.write(Primitive.Vector.write(this.logoutTokens, Primitive.Bytes));
      }
      if (this.token !== void 0) {
        b.write(Primitive.String.write(this.token));
      }
      if (this.appSandbox !== void 0) {
        b.write(Primitive.Bool.write(this.appSandbox));
      }
      return b.buffer;
    }
  }
  Raw2.CodeSettings = CodeSettings;
  class WallPaperSettings extends TLObject {
    blur;
    motion;
    backgroundColor;
    secondBackgroundColor;
    thirdBackgroundColor;
    fourthBackgroundColor;
    intensity;
    rotation;
    emoticon;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'WallPaperSettings';
      this.constructorId = 925826256;
      this.subclassOfId = 1098244882;
      this._slots = [
        'blur',
        'motion',
        'backgroundColor',
        'secondBackgroundColor',
        'thirdBackgroundColor',
        'fourthBackgroundColor',
        'intensity',
        'rotation',
        'emoticon',
      ];
      this.blur = params.blur;
      this.motion = params.motion;
      this.backgroundColor = params.backgroundColor;
      this.secondBackgroundColor = params.secondBackgroundColor;
      this.thirdBackgroundColor = params.thirdBackgroundColor;
      this.fourthBackgroundColor = params.fourthBackgroundColor;
      this.intensity = params.intensity;
      this.rotation = params.rotation;
      this.emoticon = params.emoticon;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let blur = flags & (1 << 1) ? true : false;
      let motion = flags & (1 << 2) ? true : false;
      let backgroundColor = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let secondBackgroundColor = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
      let thirdBackgroundColor = flags & (1 << 5) ? await Primitive.Int.read(b) : void 0;
      let fourthBackgroundColor = flags & (1 << 6) ? await Primitive.Int.read(b) : void 0;
      let intensity = flags & (1 << 3) ? await Primitive.Int.read(b) : void 0;
      let rotation = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
      let emoticon = flags & (1 << 7) ? await Primitive.String.read(b) : void 0;
      return new Raw2.WallPaperSettings({
        blur,
        motion,
        backgroundColor,
        secondBackgroundColor,
        thirdBackgroundColor,
        fourthBackgroundColor,
        intensity,
        rotation,
        emoticon,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.blur ? 1 << 1 : 0;
      flags |= this.motion ? 1 << 2 : 0;
      flags |= this.backgroundColor !== void 0 ? 1 << 0 : 0;
      flags |= this.secondBackgroundColor !== void 0 ? 1 << 4 : 0;
      flags |= this.thirdBackgroundColor !== void 0 ? 1 << 5 : 0;
      flags |= this.fourthBackgroundColor !== void 0 ? 1 << 6 : 0;
      flags |= this.intensity !== void 0 ? 1 << 3 : 0;
      flags |= this.rotation !== void 0 ? 1 << 4 : 0;
      flags |= this.emoticon !== void 0 ? 1 << 7 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.backgroundColor !== void 0) {
        b.write(Primitive.Int.write(this.backgroundColor));
      }
      if (this.secondBackgroundColor !== void 0) {
        b.write(Primitive.Int.write(this.secondBackgroundColor));
      }
      if (this.thirdBackgroundColor !== void 0) {
        b.write(Primitive.Int.write(this.thirdBackgroundColor));
      }
      if (this.fourthBackgroundColor !== void 0) {
        b.write(Primitive.Int.write(this.fourthBackgroundColor));
      }
      if (this.intensity !== void 0) {
        b.write(Primitive.Int.write(this.intensity));
      }
      if (this.rotation !== void 0) {
        b.write(Primitive.Int.write(this.rotation));
      }
      if (this.emoticon !== void 0) {
        b.write(Primitive.String.write(this.emoticon));
      }
      return b.buffer;
    }
  }
  Raw2.WallPaperSettings = WallPaperSettings;
  class AutoDownloadSettings extends TLObject {
    disabled;
    videoPreloadLarge;
    audioPreloadNext;
    phonecallsLessData;
    storiesPreload;
    photoSizeMax;
    videoSizeMax;
    fileSizeMax;
    videoUploadMaxbitrate;
    smallQueueActiveOperationsMax;
    largeQueueActiveOperationsMax;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'AutoDownloadSettings';
      this.constructorId = 3131405864;
      this.subclassOfId = 1361582535;
      this._slots = [
        'disabled',
        'videoPreloadLarge',
        'audioPreloadNext',
        'phonecallsLessData',
        'storiesPreload',
        'photoSizeMax',
        'videoSizeMax',
        'fileSizeMax',
        'videoUploadMaxbitrate',
        'smallQueueActiveOperationsMax',
        'largeQueueActiveOperationsMax',
      ];
      this.disabled = params.disabled;
      this.videoPreloadLarge = params.videoPreloadLarge;
      this.audioPreloadNext = params.audioPreloadNext;
      this.phonecallsLessData = params.phonecallsLessData;
      this.storiesPreload = params.storiesPreload;
      this.photoSizeMax = params.photoSizeMax;
      this.videoSizeMax = params.videoSizeMax;
      this.fileSizeMax = params.fileSizeMax;
      this.videoUploadMaxbitrate = params.videoUploadMaxbitrate;
      this.smallQueueActiveOperationsMax = params.smallQueueActiveOperationsMax;
      this.largeQueueActiveOperationsMax = params.largeQueueActiveOperationsMax;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let disabled = flags & (1 << 0) ? true : false;
      let videoPreloadLarge = flags & (1 << 1) ? true : false;
      let audioPreloadNext = flags & (1 << 2) ? true : false;
      let phonecallsLessData = flags & (1 << 3) ? true : false;
      let storiesPreload = flags & (1 << 4) ? true : false;
      let photoSizeMax = await Primitive.Int.read(b);
      let videoSizeMax = await Primitive.Long.read(b);
      let fileSizeMax = await Primitive.Long.read(b);
      let videoUploadMaxbitrate = await Primitive.Int.read(b);
      let smallQueueActiveOperationsMax = await Primitive.Int.read(b);
      let largeQueueActiveOperationsMax = await Primitive.Int.read(b);
      return new Raw2.AutoDownloadSettings({
        disabled,
        videoPreloadLarge,
        audioPreloadNext,
        phonecallsLessData,
        storiesPreload,
        photoSizeMax,
        videoSizeMax,
        fileSizeMax,
        videoUploadMaxbitrate,
        smallQueueActiveOperationsMax,
        largeQueueActiveOperationsMax,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.disabled ? 1 << 0 : 0;
      flags |= this.videoPreloadLarge ? 1 << 1 : 0;
      flags |= this.audioPreloadNext ? 1 << 2 : 0;
      flags |= this.phonecallsLessData ? 1 << 3 : 0;
      flags |= this.storiesPreload ? 1 << 4 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.photoSizeMax !== void 0) {
        b.write(Primitive.Int.write(this.photoSizeMax));
      }
      if (this.videoSizeMax !== void 0) {
        b.write(Primitive.Long.write(this.videoSizeMax));
      }
      if (this.fileSizeMax !== void 0) {
        b.write(Primitive.Long.write(this.fileSizeMax));
      }
      if (this.videoUploadMaxbitrate !== void 0) {
        b.write(Primitive.Int.write(this.videoUploadMaxbitrate));
      }
      if (this.smallQueueActiveOperationsMax !== void 0) {
        b.write(Primitive.Int.write(this.smallQueueActiveOperationsMax));
      }
      if (this.largeQueueActiveOperationsMax !== void 0) {
        b.write(Primitive.Int.write(this.largeQueueActiveOperationsMax));
      }
      return b.buffer;
    }
  }
  Raw2.AutoDownloadSettings = AutoDownloadSettings;
  class EmojiKeyword extends TLObject {
    keyword;
    emoticons;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EmojiKeyword';
      this.constructorId = 3585325561;
      this.subclassOfId = 1712497982;
      this._slots = ['keyword', 'emoticons'];
      this.keyword = params.keyword;
      this.emoticons = params.emoticons;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let keyword = await Primitive.String.read(b);
      let emoticons = await TLObject.read(b, Primitive.String);
      return new Raw2.EmojiKeyword({ keyword, emoticons });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.keyword !== void 0) {
        b.write(Primitive.String.write(this.keyword));
      }
      if (this.emoticons) {
        b.write(Primitive.Vector.write(this.emoticons, Primitive.String));
      }
      return b.buffer;
    }
  }
  Raw2.EmojiKeyword = EmojiKeyword;
  class EmojiKeywordDeleted extends TLObject {
    keyword;
    emoticons;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EmojiKeywordDeleted';
      this.constructorId = 594408994;
      this.subclassOfId = 1712497982;
      this._slots = ['keyword', 'emoticons'];
      this.keyword = params.keyword;
      this.emoticons = params.emoticons;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let keyword = await Primitive.String.read(b);
      let emoticons = await TLObject.read(b, Primitive.String);
      return new Raw2.EmojiKeywordDeleted({ keyword, emoticons });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.keyword !== void 0) {
        b.write(Primitive.String.write(this.keyword));
      }
      if (this.emoticons) {
        b.write(Primitive.Vector.write(this.emoticons, Primitive.String));
      }
      return b.buffer;
    }
  }
  Raw2.EmojiKeywordDeleted = EmojiKeywordDeleted;
  class EmojiKeywordsDifference extends TLObject {
    langCode;
    fromVersion;
    version;
    keywords;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EmojiKeywordsDifference';
      this.constructorId = 1556570557;
      this.subclassOfId = 3531196018;
      this._slots = ['langCode', 'fromVersion', 'version', 'keywords'];
      this.langCode = params.langCode;
      this.fromVersion = params.fromVersion;
      this.version = params.version;
      this.keywords = params.keywords;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let langCode = await Primitive.String.read(b);
      let fromVersion = await Primitive.Int.read(b);
      let version = await Primitive.Int.read(b);
      let keywords = await TLObject.read(b);
      return new Raw2.EmojiKeywordsDifference({
        langCode,
        fromVersion,
        version,
        keywords,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.langCode !== void 0) {
        b.write(Primitive.String.write(this.langCode));
      }
      if (this.fromVersion !== void 0) {
        b.write(Primitive.Int.write(this.fromVersion));
      }
      if (this.version !== void 0) {
        b.write(Primitive.Int.write(this.version));
      }
      if (this.keywords) {
        b.write(Primitive.Vector.write(this.keywords));
      }
      return b.buffer;
    }
  }
  Raw2.EmojiKeywordsDifference = EmojiKeywordsDifference;
  class EmojiURL extends TLObject {
    url;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EmojiURL';
      this.constructorId = 2775937949;
      this.subclassOfId = 530614809;
      this._slots = ['url'];
      this.url = params.url;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      return new Raw2.EmojiURL({ url });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      return b.buffer;
    }
  }
  Raw2.EmojiURL = EmojiURL;
  class EmojiLanguage extends TLObject {
    langCode;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EmojiLanguage';
      this.constructorId = 3019592545;
      this.subclassOfId = 2760705262;
      this._slots = ['langCode'];
      this.langCode = params.langCode;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let langCode = await Primitive.String.read(b);
      return new Raw2.EmojiLanguage({ langCode });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.langCode !== void 0) {
        b.write(Primitive.String.write(this.langCode));
      }
      return b.buffer;
    }
  }
  Raw2.EmojiLanguage = EmojiLanguage;
  class Folder extends TLObject {
    autofillNewBroadcasts;
    autofillPublicGroups;
    autofillNewCorrespondents;
    id;
    title;
    photo;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Folder';
      this.constructorId = 4283715173;
      this.subclassOfId = 3943566587;
      this._slots = [
        'autofillNewBroadcasts',
        'autofillPublicGroups',
        'autofillNewCorrespondents',
        'id',
        'title',
        'photo',
      ];
      this.autofillNewBroadcasts = params.autofillNewBroadcasts;
      this.autofillPublicGroups = params.autofillPublicGroups;
      this.autofillNewCorrespondents = params.autofillNewCorrespondents;
      this.id = params.id;
      this.title = params.title;
      this.photo = params.photo;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let autofillNewBroadcasts = flags & (1 << 0) ? true : false;
      let autofillPublicGroups = flags & (1 << 1) ? true : false;
      let autofillNewCorrespondents = flags & (1 << 2) ? true : false;
      let id = await Primitive.Int.read(b);
      let title = await Primitive.String.read(b);
      let photo = flags & (1 << 3) ? await TLObject.read(b) : void 0;
      return new Raw2.Folder({
        autofillNewBroadcasts,
        autofillPublicGroups,
        autofillNewCorrespondents,
        id,
        title,
        photo,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.autofillNewBroadcasts ? 1 << 0 : 0;
      flags |= this.autofillPublicGroups ? 1 << 1 : 0;
      flags |= this.autofillNewCorrespondents ? 1 << 2 : 0;
      flags |= this.photo !== void 0 ? 1 << 3 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      return b.buffer;
    }
  }
  Raw2.Folder = Folder;
  class InputFolderPeer extends TLObject {
    peer;
    folderId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputFolderPeer';
      this.constructorId = 4224893590;
      this.subclassOfId = 1954700800;
      this._slots = ['peer', 'folderId'];
      this.peer = params.peer;
      this.folderId = params.folderId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let folderId = await Primitive.Int.read(b);
      return new Raw2.InputFolderPeer({ peer, folderId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.folderId !== void 0) {
        b.write(Primitive.Int.write(this.folderId));
      }
      return b.buffer;
    }
  }
  Raw2.InputFolderPeer = InputFolderPeer;
  class FolderPeer extends TLObject {
    peer;
    folderId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'FolderPeer';
      this.constructorId = 3921323624;
      this.subclassOfId = 4092733499;
      this._slots = ['peer', 'folderId'];
      this.peer = params.peer;
      this.folderId = params.folderId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let folderId = await Primitive.Int.read(b);
      return new Raw2.FolderPeer({ peer, folderId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.folderId !== void 0) {
        b.write(Primitive.Int.write(this.folderId));
      }
      return b.buffer;
    }
  }
  Raw2.FolderPeer = FolderPeer;
  class UrlAuthResultRequest extends TLObject {
    requestWriteAccess;
    bot;
    domain;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UrlAuthResultRequest';
      this.constructorId = 2463316494;
      this.subclassOfId = 2003159838;
      this._slots = ['requestWriteAccess', 'bot', 'domain'];
      this.requestWriteAccess = params.requestWriteAccess;
      this.bot = params.bot;
      this.domain = params.domain;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let requestWriteAccess = flags & (1 << 0) ? true : false;
      let bot = await TLObject.read(b);
      let domain = await Primitive.String.read(b);
      return new Raw2.UrlAuthResultRequest({
        requestWriteAccess,
        bot,
        domain,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.requestWriteAccess ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.bot !== void 0) {
        b.write(this.bot.write());
      }
      if (this.domain !== void 0) {
        b.write(Primitive.String.write(this.domain));
      }
      return b.buffer;
    }
  }
  Raw2.UrlAuthResultRequest = UrlAuthResultRequest;
  class UrlAuthResultAccepted extends TLObject {
    url;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'UrlAuthResultAccepted';
      this.constructorId = 2408320590;
      this.subclassOfId = 2003159838;
      this._slots = ['url'];
      this.url = params.url;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      return new Raw2.UrlAuthResultAccepted({ url });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      return b.buffer;
    }
  }
  Raw2.UrlAuthResultAccepted = UrlAuthResultAccepted;
  class UrlAuthResultDefault extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'UrlAuthResultDefault';
      this.constructorId = 2849430303;
      this.subclassOfId = 2003159838;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.UrlAuthResultDefault();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.UrlAuthResultDefault = UrlAuthResultDefault;
  class ChannelLocationEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'ChannelLocationEmpty';
      this.constructorId = 3216354699;
      this.subclassOfId = 3961916287;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.ChannelLocationEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.ChannelLocationEmpty = ChannelLocationEmpty;
  class ChannelLocation extends TLObject {
    geoPoint;
    address;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChannelLocation';
      this.constructorId = 547062491;
      this.subclassOfId = 3961916287;
      this._slots = ['geoPoint', 'address'];
      this.geoPoint = params.geoPoint;
      this.address = params.address;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let geoPoint = await TLObject.read(b);
      let address = await Primitive.String.read(b);
      return new Raw2.ChannelLocation({ geoPoint, address });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.geoPoint !== void 0) {
        b.write(this.geoPoint.write());
      }
      if (this.address !== void 0) {
        b.write(Primitive.String.write(this.address));
      }
      return b.buffer;
    }
  }
  Raw2.ChannelLocation = ChannelLocation;
  class PeerLocated extends TLObject {
    peer;
    expires;
    distance;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PeerLocated';
      this.constructorId = 3393592157;
      this.subclassOfId = 4208604332;
      this._slots = ['peer', 'expires', 'distance'];
      this.peer = params.peer;
      this.expires = params.expires;
      this.distance = params.distance;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let expires = await Primitive.Int.read(b);
      let distance = await Primitive.Int.read(b);
      return new Raw2.PeerLocated({ peer, expires, distance });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.expires !== void 0) {
        b.write(Primitive.Int.write(this.expires));
      }
      if (this.distance !== void 0) {
        b.write(Primitive.Int.write(this.distance));
      }
      return b.buffer;
    }
  }
  Raw2.PeerLocated = PeerLocated;
  class PeerSelfLocated extends TLObject {
    expires;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PeerSelfLocated';
      this.constructorId = 4176226379;
      this.subclassOfId = 4208604332;
      this._slots = ['expires'];
      this.expires = params.expires;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let expires = await Primitive.Int.read(b);
      return new Raw2.PeerSelfLocated({ expires });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.expires !== void 0) {
        b.write(Primitive.Int.write(this.expires));
      }
      return b.buffer;
    }
  }
  Raw2.PeerSelfLocated = PeerSelfLocated;
  class RestrictionReason extends TLObject {
    platform;
    reason;
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'RestrictionReason';
      this.constructorId = 3497176244;
      this.subclassOfId = 112039341;
      this._slots = ['platform', 'reason', 'text'];
      this.platform = params.platform;
      this.reason = params.reason;
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let platform = await Primitive.String.read(b);
      let reason = await Primitive.String.read(b);
      let text = await Primitive.String.read(b);
      return new Raw2.RestrictionReason({ platform, reason, text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.platform !== void 0) {
        b.write(Primitive.String.write(this.platform));
      }
      if (this.reason !== void 0) {
        b.write(Primitive.String.write(this.reason));
      }
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.RestrictionReason = RestrictionReason;
  class InputTheme extends TLObject {
    id;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputTheme';
      this.constructorId = 1012306921;
      this.subclassOfId = 127992048;
      this._slots = ['id', 'accessHash'];
      this.id = params.id;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputTheme({ id, accessHash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputTheme = InputTheme;
  class InputThemeSlug extends TLObject {
    slug;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputThemeSlug';
      this.constructorId = 4119399921;
      this.subclassOfId = 127992048;
      this._slots = ['slug'];
      this.slug = params.slug;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let slug = await Primitive.String.read(b);
      return new Raw2.InputThemeSlug({ slug });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.slug !== void 0) {
        b.write(Primitive.String.write(this.slug));
      }
      return b.buffer;
    }
  }
  Raw2.InputThemeSlug = InputThemeSlug;
  class Theme extends TLObject {
    creator;
    default;
    forChat;
    id;
    accessHash;
    slug;
    title;
    document;
    settings;
    emoticon;
    installsCount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Theme';
      this.constructorId = 2685298646;
      this.subclassOfId = 1454688268;
      this._slots = [
        'creator',
        'default',
        'forChat',
        'id',
        'accessHash',
        'slug',
        'title',
        'document',
        'settings',
        'emoticon',
        'installsCount',
      ];
      this.creator = params.creator;
      this.default = params.default;
      this.forChat = params.forChat;
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.slug = params.slug;
      this.title = params.title;
      this.document = params.document;
      this.settings = params.settings;
      this.emoticon = params.emoticon;
      this.installsCount = params.installsCount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let creator = flags & (1 << 0) ? true : false;
      let _default = flags & (1 << 1) ? true : false;
      let forChat = flags & (1 << 5) ? true : false;
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let slug = await Primitive.String.read(b);
      let title = await Primitive.String.read(b);
      let document = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      let settings = flags & (1 << 3) ? await TLObject.read(b) : [];
      let emoticon = flags & (1 << 6) ? await Primitive.String.read(b) : void 0;
      let installsCount = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.Theme({
        creator,
        default: _default,
        forChat,
        id,
        accessHash,
        slug,
        title,
        document,
        settings,
        emoticon,
        installsCount,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.creator ? 1 << 0 : 0;
      flags |= this.default ? 1 << 1 : 0;
      flags |= this.forChat ? 1 << 5 : 0;
      flags |= this.document !== void 0 ? 1 << 2 : 0;
      flags |= this.settings ? 1 << 3 : 0;
      flags |= this.emoticon !== void 0 ? 1 << 6 : 0;
      flags |= this.installsCount !== void 0 ? 1 << 4 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.slug !== void 0) {
        b.write(Primitive.String.write(this.slug));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.document !== void 0) {
        b.write(this.document.write());
      }
      if (this.settings) {
        b.write(Primitive.Vector.write(this.settings));
      }
      if (this.emoticon !== void 0) {
        b.write(Primitive.String.write(this.emoticon));
      }
      if (this.installsCount !== void 0) {
        b.write(Primitive.Int.write(this.installsCount));
      }
      return b.buffer;
    }
  }
  Raw2.Theme = Theme;
  class BaseThemeClassic extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'BaseThemeClassic';
      this.constructorId = 3282117730;
      this.subclassOfId = 520352836;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.BaseThemeClassic();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.BaseThemeClassic = BaseThemeClassic;
  class BaseThemeDay extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'BaseThemeDay';
      this.constructorId = 4225242760;
      this.subclassOfId = 520352836;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.BaseThemeDay();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.BaseThemeDay = BaseThemeDay;
  class BaseThemeNight extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'BaseThemeNight';
      this.constructorId = 3081969320;
      this.subclassOfId = 520352836;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.BaseThemeNight();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.BaseThemeNight = BaseThemeNight;
  class BaseThemeTinted extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'BaseThemeTinted';
      this.constructorId = 1834973166;
      this.subclassOfId = 520352836;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.BaseThemeTinted();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.BaseThemeTinted = BaseThemeTinted;
  class BaseThemeArctic extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'BaseThemeArctic';
      this.constructorId = 1527845466;
      this.subclassOfId = 520352836;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.BaseThemeArctic();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.BaseThemeArctic = BaseThemeArctic;
  class InputThemeSettings extends TLObject {
    messageColorsAnimated;
    baseTheme;
    accentColor;
    outboxAccentColor;
    messageColors;
    wallpaper;
    wallpaperSettings;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputThemeSettings';
      this.constructorId = 2413711439;
      this.subclassOfId = 2201536642;
      this._slots = [
        'messageColorsAnimated',
        'baseTheme',
        'accentColor',
        'outboxAccentColor',
        'messageColors',
        'wallpaper',
        'wallpaperSettings',
      ];
      this.messageColorsAnimated = params.messageColorsAnimated;
      this.baseTheme = params.baseTheme;
      this.accentColor = params.accentColor;
      this.outboxAccentColor = params.outboxAccentColor;
      this.messageColors = params.messageColors;
      this.wallpaper = params.wallpaper;
      this.wallpaperSettings = params.wallpaperSettings;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let messageColorsAnimated = flags & (1 << 2) ? true : false;
      let baseTheme = await TLObject.read(b);
      let accentColor = await Primitive.Int.read(b);
      let outboxAccentColor = flags & (1 << 3) ? await Primitive.Int.read(b) : void 0;
      let messageColors = flags & (1 << 0) ? await TLObject.read(b, Primitive.Int) : [];
      let wallpaper = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      let wallpaperSettings = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      return new Raw2.InputThemeSettings({
        messageColorsAnimated,
        baseTheme,
        accentColor,
        outboxAccentColor,
        messageColors,
        wallpaper,
        wallpaperSettings,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.messageColorsAnimated ? 1 << 2 : 0;
      flags |= this.outboxAccentColor !== void 0 ? 1 << 3 : 0;
      flags |= this.messageColors ? 1 << 0 : 0;
      flags |= this.wallpaper !== void 0 ? 1 << 1 : 0;
      flags |= this.wallpaperSettings !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.baseTheme !== void 0) {
        b.write(this.baseTheme.write());
      }
      if (this.accentColor !== void 0) {
        b.write(Primitive.Int.write(this.accentColor));
      }
      if (this.outboxAccentColor !== void 0) {
        b.write(Primitive.Int.write(this.outboxAccentColor));
      }
      if (this.messageColors) {
        b.write(Primitive.Vector.write(this.messageColors, Primitive.Int));
      }
      if (this.wallpaper !== void 0) {
        b.write(this.wallpaper.write());
      }
      if (this.wallpaperSettings !== void 0) {
        b.write(this.wallpaperSettings.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputThemeSettings = InputThemeSettings;
  class ThemeSettings extends TLObject {
    messageColorsAnimated;
    baseTheme;
    accentColor;
    outboxAccentColor;
    messageColors;
    wallpaper;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ThemeSettings';
      this.constructorId = 4200117972;
      this.subclassOfId = 2187750712;
      this._slots = [
        'messageColorsAnimated',
        'baseTheme',
        'accentColor',
        'outboxAccentColor',
        'messageColors',
        'wallpaper',
      ];
      this.messageColorsAnimated = params.messageColorsAnimated;
      this.baseTheme = params.baseTheme;
      this.accentColor = params.accentColor;
      this.outboxAccentColor = params.outboxAccentColor;
      this.messageColors = params.messageColors;
      this.wallpaper = params.wallpaper;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let messageColorsAnimated = flags & (1 << 2) ? true : false;
      let baseTheme = await TLObject.read(b);
      let accentColor = await Primitive.Int.read(b);
      let outboxAccentColor = flags & (1 << 3) ? await Primitive.Int.read(b) : void 0;
      let messageColors = flags & (1 << 0) ? await TLObject.read(b, Primitive.Int) : [];
      let wallpaper = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      return new Raw2.ThemeSettings({
        messageColorsAnimated,
        baseTheme,
        accentColor,
        outboxAccentColor,
        messageColors,
        wallpaper,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.messageColorsAnimated ? 1 << 2 : 0;
      flags |= this.outboxAccentColor !== void 0 ? 1 << 3 : 0;
      flags |= this.messageColors ? 1 << 0 : 0;
      flags |= this.wallpaper !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.baseTheme !== void 0) {
        b.write(this.baseTheme.write());
      }
      if (this.accentColor !== void 0) {
        b.write(Primitive.Int.write(this.accentColor));
      }
      if (this.outboxAccentColor !== void 0) {
        b.write(Primitive.Int.write(this.outboxAccentColor));
      }
      if (this.messageColors) {
        b.write(Primitive.Vector.write(this.messageColors, Primitive.Int));
      }
      if (this.wallpaper !== void 0) {
        b.write(this.wallpaper.write());
      }
      return b.buffer;
    }
  }
  Raw2.ThemeSettings = ThemeSettings;
  class WebPageAttributeTheme extends TLObject {
    documents;
    settings;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'WebPageAttributeTheme';
      this.constructorId = 1421174295;
      this.subclassOfId = 2949638599;
      this._slots = ['documents', 'settings'];
      this.documents = params.documents;
      this.settings = params.settings;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let documents = flags & (1 << 0) ? await TLObject.read(b) : [];
      let settings = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      return new Raw2.WebPageAttributeTheme({ documents, settings });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.documents ? 1 << 0 : 0;
      flags |= this.settings !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.documents) {
        b.write(Primitive.Vector.write(this.documents));
      }
      if (this.settings !== void 0) {
        b.write(this.settings.write());
      }
      return b.buffer;
    }
  }
  Raw2.WebPageAttributeTheme = WebPageAttributeTheme;
  class WebPageAttributeStory extends TLObject {
    peer;
    id;
    story;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'WebPageAttributeStory';
      this.constructorId = 781501415;
      this.subclassOfId = 2949638599;
      this._slots = ['peer', 'id', 'story'];
      this.peer = params.peer;
      this.id = params.id;
      this.story = params.story;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let peer = await TLObject.read(b);
      let id = await Primitive.Int.read(b);
      let story = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      return new Raw2.WebPageAttributeStory({ peer, id, story });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.story !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.story !== void 0) {
        b.write(this.story.write());
      }
      return b.buffer;
    }
  }
  Raw2.WebPageAttributeStory = WebPageAttributeStory;
  class WebPageAttributeStickerSet extends TLObject {
    emojis;
    textColor;
    stickers;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'WebPageAttributeStickerSet';
      this.constructorId = 1355547603;
      this.subclassOfId = 2949638599;
      this._slots = ['emojis', 'textColor', 'stickers'];
      this.emojis = params.emojis;
      this.textColor = params.textColor;
      this.stickers = params.stickers;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let emojis = flags & (1 << 0) ? true : false;
      let textColor = flags & (1 << 1) ? true : false;
      let stickers2 = await TLObject.read(b);
      return new Raw2.WebPageAttributeStickerSet({
        emojis,
        textColor,
        stickers: stickers2,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.emojis ? 1 << 0 : 0;
      flags |= this.textColor ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.stickers) {
        b.write(Primitive.Vector.write(this.stickers));
      }
      return b.buffer;
    }
  }
  Raw2.WebPageAttributeStickerSet = WebPageAttributeStickerSet;
  class BankCardOpenUrl extends TLObject {
    url;
    name;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BankCardOpenUrl';
      this.constructorId = 4117234314;
      this.subclassOfId = 4074915342;
      this._slots = ['url', 'name'];
      this.url = params.url;
      this.name = params.name;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      let name = await Primitive.String.read(b);
      return new Raw2.BankCardOpenUrl({ url, name });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.name !== void 0) {
        b.write(Primitive.String.write(this.name));
      }
      return b.buffer;
    }
  }
  Raw2.BankCardOpenUrl = BankCardOpenUrl;
  class DialogFilter extends TLObject {
    contacts;
    nonContacts;
    groups;
    broadcasts;
    bots;
    excludeMuted;
    excludeRead;
    excludeArchived;
    id;
    title;
    emoticon;
    color;
    pinnedPeers;
    includePeers;
    excludePeers;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DialogFilter';
      this.constructorId = 1605718587;
      this.subclassOfId = 1764475991;
      this._slots = [
        'contacts',
        'nonContacts',
        'groups',
        'broadcasts',
        'bots',
        'excludeMuted',
        'excludeRead',
        'excludeArchived',
        'id',
        'title',
        'emoticon',
        'color',
        'pinnedPeers',
        'includePeers',
        'excludePeers',
      ];
      this.contacts = params.contacts;
      this.nonContacts = params.nonContacts;
      this.groups = params.groups;
      this.broadcasts = params.broadcasts;
      this.bots = params.bots;
      this.excludeMuted = params.excludeMuted;
      this.excludeRead = params.excludeRead;
      this.excludeArchived = params.excludeArchived;
      this.id = params.id;
      this.title = params.title;
      this.emoticon = params.emoticon;
      this.color = params.color;
      this.pinnedPeers = params.pinnedPeers;
      this.includePeers = params.includePeers;
      this.excludePeers = params.excludePeers;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let contacts2 = flags & (1 << 0) ? true : false;
      let nonContacts = flags & (1 << 1) ? true : false;
      let groups = flags & (1 << 2) ? true : false;
      let broadcasts = flags & (1 << 3) ? true : false;
      let bots2 = flags & (1 << 4) ? true : false;
      let excludeMuted = flags & (1 << 11) ? true : false;
      let excludeRead = flags & (1 << 12) ? true : false;
      let excludeArchived = flags & (1 << 13) ? true : false;
      let id = await Primitive.Int.read(b);
      let title = await Primitive.String.read(b);
      let emoticon = flags & (1 << 25) ? await Primitive.String.read(b) : void 0;
      let color = flags & (1 << 27) ? await Primitive.Int.read(b) : void 0;
      let pinnedPeers = await TLObject.read(b);
      let includePeers = await TLObject.read(b);
      let excludePeers = await TLObject.read(b);
      return new Raw2.DialogFilter({
        contacts: contacts2,
        nonContacts,
        groups,
        broadcasts,
        bots: bots2,
        excludeMuted,
        excludeRead,
        excludeArchived,
        id,
        title,
        emoticon,
        color,
        pinnedPeers,
        includePeers,
        excludePeers,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.contacts ? 1 << 0 : 0;
      flags |= this.nonContacts ? 1 << 1 : 0;
      flags |= this.groups ? 1 << 2 : 0;
      flags |= this.broadcasts ? 1 << 3 : 0;
      flags |= this.bots ? 1 << 4 : 0;
      flags |= this.excludeMuted ? 1 << 11 : 0;
      flags |= this.excludeRead ? 1 << 12 : 0;
      flags |= this.excludeArchived ? 1 << 13 : 0;
      flags |= this.emoticon !== void 0 ? 1 << 25 : 0;
      flags |= this.color !== void 0 ? 1 << 27 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.emoticon !== void 0) {
        b.write(Primitive.String.write(this.emoticon));
      }
      if (this.color !== void 0) {
        b.write(Primitive.Int.write(this.color));
      }
      if (this.pinnedPeers) {
        b.write(Primitive.Vector.write(this.pinnedPeers));
      }
      if (this.includePeers) {
        b.write(Primitive.Vector.write(this.includePeers));
      }
      if (this.excludePeers) {
        b.write(Primitive.Vector.write(this.excludePeers));
      }
      return b.buffer;
    }
  }
  Raw2.DialogFilter = DialogFilter;
  class DialogFilterDefault extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'DialogFilterDefault';
      this.constructorId = 909284270;
      this.subclassOfId = 1764475991;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.DialogFilterDefault();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.DialogFilterDefault = DialogFilterDefault;
  class DialogFilterChatlist extends TLObject {
    hasMyInvites;
    id;
    title;
    emoticon;
    color;
    pinnedPeers;
    includePeers;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DialogFilterChatlist';
      this.constructorId = 2682424996;
      this.subclassOfId = 1764475991;
      this._slots = [
        'hasMyInvites',
        'id',
        'title',
        'emoticon',
        'color',
        'pinnedPeers',
        'includePeers',
      ];
      this.hasMyInvites = params.hasMyInvites;
      this.id = params.id;
      this.title = params.title;
      this.emoticon = params.emoticon;
      this.color = params.color;
      this.pinnedPeers = params.pinnedPeers;
      this.includePeers = params.includePeers;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let hasMyInvites = flags & (1 << 26) ? true : false;
      let id = await Primitive.Int.read(b);
      let title = await Primitive.String.read(b);
      let emoticon = flags & (1 << 25) ? await Primitive.String.read(b) : void 0;
      let color = flags & (1 << 27) ? await Primitive.Int.read(b) : void 0;
      let pinnedPeers = await TLObject.read(b);
      let includePeers = await TLObject.read(b);
      return new Raw2.DialogFilterChatlist({
        hasMyInvites,
        id,
        title,
        emoticon,
        color,
        pinnedPeers,
        includePeers,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.hasMyInvites ? 1 << 26 : 0;
      flags |= this.emoticon !== void 0 ? 1 << 25 : 0;
      flags |= this.color !== void 0 ? 1 << 27 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.emoticon !== void 0) {
        b.write(Primitive.String.write(this.emoticon));
      }
      if (this.color !== void 0) {
        b.write(Primitive.Int.write(this.color));
      }
      if (this.pinnedPeers) {
        b.write(Primitive.Vector.write(this.pinnedPeers));
      }
      if (this.includePeers) {
        b.write(Primitive.Vector.write(this.includePeers));
      }
      return b.buffer;
    }
  }
  Raw2.DialogFilterChatlist = DialogFilterChatlist;
  class DialogFilterSuggested extends TLObject {
    filter;
    description;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DialogFilterSuggested';
      this.constructorId = 2004110666;
      this.subclassOfId = 837673094;
      this._slots = ['filter', 'description'];
      this.filter = params.filter;
      this.description = params.description;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let filter = await TLObject.read(b);
      let description = await Primitive.String.read(b);
      return new Raw2.DialogFilterSuggested({ filter, description });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.filter !== void 0) {
        b.write(this.filter.write());
      }
      if (this.description !== void 0) {
        b.write(Primitive.String.write(this.description));
      }
      return b.buffer;
    }
  }
  Raw2.DialogFilterSuggested = DialogFilterSuggested;
  class StatsDateRangeDays extends TLObject {
    minDate;
    maxDate;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StatsDateRangeDays';
      this.constructorId = 3057118639;
      this.subclassOfId = 2166579781;
      this._slots = ['minDate', 'maxDate'];
      this.minDate = params.minDate;
      this.maxDate = params.maxDate;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let minDate = await Primitive.Int.read(b);
      let maxDate = await Primitive.Int.read(b);
      return new Raw2.StatsDateRangeDays({ minDate, maxDate });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.minDate !== void 0) {
        b.write(Primitive.Int.write(this.minDate));
      }
      if (this.maxDate !== void 0) {
        b.write(Primitive.Int.write(this.maxDate));
      }
      return b.buffer;
    }
  }
  Raw2.StatsDateRangeDays = StatsDateRangeDays;
  class StatsAbsValueAndPrev extends TLObject {
    current;
    previous;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StatsAbsValueAndPrev';
      this.constructorId = 3410210014;
      this.subclassOfId = 1052662191;
      this._slots = ['current', 'previous'];
      this.current = params.current;
      this.previous = params.previous;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let current = await Primitive.Double.read(b);
      let previous = await Primitive.Double.read(b);
      return new Raw2.StatsAbsValueAndPrev({ current, previous });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.current !== void 0) {
        b.write(Primitive.Double.write(this.current));
      }
      if (this.previous !== void 0) {
        b.write(Primitive.Double.write(this.previous));
      }
      return b.buffer;
    }
  }
  Raw2.StatsAbsValueAndPrev = StatsAbsValueAndPrev;
  class StatsPercentValue extends TLObject {
    part;
    total;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StatsPercentValue';
      this.constructorId = 3419287520;
      this.subclassOfId = 2533541150;
      this._slots = ['part', 'total'];
      this.part = params.part;
      this.total = params.total;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let part = await Primitive.Double.read(b);
      let total = await Primitive.Double.read(b);
      return new Raw2.StatsPercentValue({ part, total });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.part !== void 0) {
        b.write(Primitive.Double.write(this.part));
      }
      if (this.total !== void 0) {
        b.write(Primitive.Double.write(this.total));
      }
      return b.buffer;
    }
  }
  Raw2.StatsPercentValue = StatsPercentValue;
  class StatsGraphAsync extends TLObject {
    token;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StatsGraphAsync';
      this.constructorId = 1244130093;
      this.subclassOfId = 2609918291;
      this._slots = ['token'];
      this.token = params.token;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let token = await Primitive.String.read(b);
      return new Raw2.StatsGraphAsync({ token });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.token !== void 0) {
        b.write(Primitive.String.write(this.token));
      }
      return b.buffer;
    }
  }
  Raw2.StatsGraphAsync = StatsGraphAsync;
  class StatsGraphError extends TLObject {
    error;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StatsGraphError';
      this.constructorId = 3202127906;
      this.subclassOfId = 2609918291;
      this._slots = ['error'];
      this.error = params.error;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let error = await Primitive.String.read(b);
      return new Raw2.StatsGraphError({ error });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.error !== void 0) {
        b.write(Primitive.String.write(this.error));
      }
      return b.buffer;
    }
  }
  Raw2.StatsGraphError = StatsGraphError;
  class StatsGraph extends TLObject {
    json;
    zoomToken;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StatsGraph';
      this.constructorId = 2393138358;
      this.subclassOfId = 2609918291;
      this._slots = ['json', 'zoomToken'];
      this.json = params.json;
      this.zoomToken = params.zoomToken;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let json = await TLObject.read(b);
      let zoomToken = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      return new Raw2.StatsGraph({ json, zoomToken });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.zoomToken !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.json !== void 0) {
        b.write(this.json.write());
      }
      if (this.zoomToken !== void 0) {
        b.write(Primitive.String.write(this.zoomToken));
      }
      return b.buffer;
    }
  }
  Raw2.StatsGraph = StatsGraph;
  class VideoSize extends TLObject {
    type;
    w;
    h;
    size;
    videoStartTs;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'VideoSize';
      this.constructorId = 3727929492;
      this.subclassOfId = 1660015881;
      this._slots = ['type', 'w', 'h', 'size', 'videoStartTs'];
      this.type = params.type;
      this.w = params.w;
      this.h = params.h;
      this.size = params.size;
      this.videoStartTs = params.videoStartTs;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let type = await Primitive.String.read(b);
      let w = await Primitive.Int.read(b);
      let h = await Primitive.Int.read(b);
      let size = await Primitive.Int.read(b);
      let videoStartTs = flags & (1 << 0) ? await Primitive.Double.read(b) : void 0;
      return new Raw2.VideoSize({ type, w, h, size, videoStartTs });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.videoStartTs !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.type !== void 0) {
        b.write(Primitive.String.write(this.type));
      }
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Int.write(this.size));
      }
      if (this.videoStartTs !== void 0) {
        b.write(Primitive.Double.write(this.videoStartTs));
      }
      return b.buffer;
    }
  }
  Raw2.VideoSize = VideoSize;
  class VideoSizeEmojiMarkup extends TLObject {
    emojiId;
    backgroundColors;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'VideoSizeEmojiMarkup';
      this.constructorId = 4166795580;
      this.subclassOfId = 1660015881;
      this._slots = ['emojiId', 'backgroundColors'];
      this.emojiId = params.emojiId;
      this.backgroundColors = params.backgroundColors;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let emojiId = await Primitive.Long.read(b);
      let backgroundColors = await TLObject.read(b, Primitive.Int);
      return new Raw2.VideoSizeEmojiMarkup({ emojiId, backgroundColors });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.emojiId !== void 0) {
        b.write(Primitive.Long.write(this.emojiId));
      }
      if (this.backgroundColors) {
        b.write(Primitive.Vector.write(this.backgroundColors, Primitive.Int));
      }
      return b.buffer;
    }
  }
  Raw2.VideoSizeEmojiMarkup = VideoSizeEmojiMarkup;
  class VideoSizeStickerMarkup extends TLObject {
    stickerset;
    stickerId;
    backgroundColors;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'VideoSizeStickerMarkup';
      this.constructorId = 228623102;
      this.subclassOfId = 1660015881;
      this._slots = ['stickerset', 'stickerId', 'backgroundColors'];
      this.stickerset = params.stickerset;
      this.stickerId = params.stickerId;
      this.backgroundColors = params.backgroundColors;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let stickerset = await TLObject.read(b);
      let stickerId = await Primitive.Long.read(b);
      let backgroundColors = await TLObject.read(b, Primitive.Int);
      return new Raw2.VideoSizeStickerMarkup({
        stickerset,
        stickerId,
        backgroundColors,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.stickerset !== void 0) {
        b.write(this.stickerset.write());
      }
      if (this.stickerId !== void 0) {
        b.write(Primitive.Long.write(this.stickerId));
      }
      if (this.backgroundColors) {
        b.write(Primitive.Vector.write(this.backgroundColors, Primitive.Int));
      }
      return b.buffer;
    }
  }
  Raw2.VideoSizeStickerMarkup = VideoSizeStickerMarkup;
  class StatsGroupTopPoster extends TLObject {
    userId;
    messages;
    avgChars;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StatsGroupTopPoster';
      this.constructorId = 2634330011;
      this.subclassOfId = 2177224227;
      this._slots = ['userId', 'messages', 'avgChars'];
      this.userId = params.userId;
      this.messages = params.messages;
      this.avgChars = params.avgChars;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      let messages2 = await Primitive.Int.read(b);
      let avgChars = await Primitive.Int.read(b);
      return new Raw2.StatsGroupTopPoster({
        userId,
        messages: messages2,
        avgChars,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.messages !== void 0) {
        b.write(Primitive.Int.write(this.messages));
      }
      if (this.avgChars !== void 0) {
        b.write(Primitive.Int.write(this.avgChars));
      }
      return b.buffer;
    }
  }
  Raw2.StatsGroupTopPoster = StatsGroupTopPoster;
  class StatsGroupTopAdmin extends TLObject {
    userId;
    deleted;
    kicked;
    banned;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StatsGroupTopAdmin';
      this.constructorId = 3612888199;
      this.subclassOfId = 2150997085;
      this._slots = ['userId', 'deleted', 'kicked', 'banned'];
      this.userId = params.userId;
      this.deleted = params.deleted;
      this.kicked = params.kicked;
      this.banned = params.banned;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      let deleted = await Primitive.Int.read(b);
      let kicked = await Primitive.Int.read(b);
      let banned = await Primitive.Int.read(b);
      return new Raw2.StatsGroupTopAdmin({
        userId,
        deleted,
        kicked,
        banned,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.deleted !== void 0) {
        b.write(Primitive.Int.write(this.deleted));
      }
      if (this.kicked !== void 0) {
        b.write(Primitive.Int.write(this.kicked));
      }
      if (this.banned !== void 0) {
        b.write(Primitive.Int.write(this.banned));
      }
      return b.buffer;
    }
  }
  Raw2.StatsGroupTopAdmin = StatsGroupTopAdmin;
  class StatsGroupTopInviter extends TLObject {
    userId;
    invitations;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StatsGroupTopInviter';
      this.constructorId = 1398765469;
      this.subclassOfId = 2231438458;
      this._slots = ['userId', 'invitations'];
      this.userId = params.userId;
      this.invitations = params.invitations;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      let invitations = await Primitive.Int.read(b);
      return new Raw2.StatsGroupTopInviter({ userId, invitations });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.invitations !== void 0) {
        b.write(Primitive.Int.write(this.invitations));
      }
      return b.buffer;
    }
  }
  Raw2.StatsGroupTopInviter = StatsGroupTopInviter;
  class GlobalPrivacySettings extends TLObject {
    archiveAndMuteNewNoncontactPeers;
    keepArchivedUnmuted;
    keepArchivedFolders;
    hideReadMarks;
    newNoncontactPeersRequirePremium;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'GlobalPrivacySettings';
      this.constructorId = 1934380235;
      this.subclassOfId = 3373160304;
      this._slots = [
        'archiveAndMuteNewNoncontactPeers',
        'keepArchivedUnmuted',
        'keepArchivedFolders',
        'hideReadMarks',
        'newNoncontactPeersRequirePremium',
      ];
      this.archiveAndMuteNewNoncontactPeers = params.archiveAndMuteNewNoncontactPeers;
      this.keepArchivedUnmuted = params.keepArchivedUnmuted;
      this.keepArchivedFolders = params.keepArchivedFolders;
      this.hideReadMarks = params.hideReadMarks;
      this.newNoncontactPeersRequirePremium = params.newNoncontactPeersRequirePremium;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let archiveAndMuteNewNoncontactPeers = flags & (1 << 0) ? true : false;
      let keepArchivedUnmuted = flags & (1 << 1) ? true : false;
      let keepArchivedFolders = flags & (1 << 2) ? true : false;
      let hideReadMarks = flags & (1 << 3) ? true : false;
      let newNoncontactPeersRequirePremium = flags & (1 << 4) ? true : false;
      return new Raw2.GlobalPrivacySettings({
        archiveAndMuteNewNoncontactPeers,
        keepArchivedUnmuted,
        keepArchivedFolders,
        hideReadMarks,
        newNoncontactPeersRequirePremium,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.archiveAndMuteNewNoncontactPeers ? 1 << 0 : 0;
      flags |= this.keepArchivedUnmuted ? 1 << 1 : 0;
      flags |= this.keepArchivedFolders ? 1 << 2 : 0;
      flags |= this.hideReadMarks ? 1 << 3 : 0;
      flags |= this.newNoncontactPeersRequirePremium ? 1 << 4 : 0;
      b.write(Primitive.Int.write(flags));
      return b.buffer;
    }
  }
  Raw2.GlobalPrivacySettings = GlobalPrivacySettings;
  class MessageViews extends TLObject {
    views;
    forwards;
    replies;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageViews';
      this.constructorId = 1163625789;
      this.subclassOfId = 1018201017;
      this._slots = ['views', 'forwards', 'replies'];
      this.views = params.views;
      this.forwards = params.forwards;
      this.replies = params.replies;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let views = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let forwards = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      let replies = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.MessageViews({ views, forwards, replies });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.views !== void 0 ? 1 << 0 : 0;
      flags |= this.forwards !== void 0 ? 1 << 1 : 0;
      flags |= this.replies !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.views !== void 0) {
        b.write(Primitive.Int.write(this.views));
      }
      if (this.forwards !== void 0) {
        b.write(Primitive.Int.write(this.forwards));
      }
      if (this.replies !== void 0) {
        b.write(this.replies.write());
      }
      return b.buffer;
    }
  }
  Raw2.MessageViews = MessageViews;
  class MessageReplyHeader extends TLObject {
    replyToScheduled;
    forumTopic;
    quote;
    replyToMsgId;
    replyToPeerId;
    replyFrom;
    replyMedia;
    replyToTopId;
    quoteText;
    quoteEntities;
    quoteOffset;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageReplyHeader';
      this.constructorId = 2948336091;
      this.subclassOfId = 1531810151;
      this._slots = [
        'replyToScheduled',
        'forumTopic',
        'quote',
        'replyToMsgId',
        'replyToPeerId',
        'replyFrom',
        'replyMedia',
        'replyToTopId',
        'quoteText',
        'quoteEntities',
        'quoteOffset',
      ];
      this.replyToScheduled = params.replyToScheduled;
      this.forumTopic = params.forumTopic;
      this.quote = params.quote;
      this.replyToMsgId = params.replyToMsgId;
      this.replyToPeerId = params.replyToPeerId;
      this.replyFrom = params.replyFrom;
      this.replyMedia = params.replyMedia;
      this.replyToTopId = params.replyToTopId;
      this.quoteText = params.quoteText;
      this.quoteEntities = params.quoteEntities;
      this.quoteOffset = params.quoteOffset;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let replyToScheduled = flags & (1 << 2) ? true : false;
      let forumTopic = flags & (1 << 3) ? true : false;
      let quote = flags & (1 << 9) ? true : false;
      let replyToMsgId = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
      let replyToPeerId = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let replyFrom = flags & (1 << 5) ? await TLObject.read(b) : void 0;
      let replyMedia = flags & (1 << 8) ? await TLObject.read(b) : void 0;
      let replyToTopId = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      let quoteText = flags & (1 << 6) ? await Primitive.String.read(b) : void 0;
      let quoteEntities = flags & (1 << 7) ? await TLObject.read(b) : [];
      let quoteOffset = flags & (1 << 10) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.MessageReplyHeader({
        replyToScheduled,
        forumTopic,
        quote,
        replyToMsgId,
        replyToPeerId,
        replyFrom,
        replyMedia,
        replyToTopId,
        quoteText,
        quoteEntities,
        quoteOffset,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.replyToScheduled ? 1 << 2 : 0;
      flags |= this.forumTopic ? 1 << 3 : 0;
      flags |= this.quote ? 1 << 9 : 0;
      flags |= this.replyToMsgId !== void 0 ? 1 << 4 : 0;
      flags |= this.replyToPeerId !== void 0 ? 1 << 0 : 0;
      flags |= this.replyFrom !== void 0 ? 1 << 5 : 0;
      flags |= this.replyMedia !== void 0 ? 1 << 8 : 0;
      flags |= this.replyToTopId !== void 0 ? 1 << 1 : 0;
      flags |= this.quoteText !== void 0 ? 1 << 6 : 0;
      flags |= this.quoteEntities ? 1 << 7 : 0;
      flags |= this.quoteOffset !== void 0 ? 1 << 10 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.replyToMsgId !== void 0) {
        b.write(Primitive.Int.write(this.replyToMsgId));
      }
      if (this.replyToPeerId !== void 0) {
        b.write(this.replyToPeerId.write());
      }
      if (this.replyFrom !== void 0) {
        b.write(this.replyFrom.write());
      }
      if (this.replyMedia !== void 0) {
        b.write(this.replyMedia.write());
      }
      if (this.replyToTopId !== void 0) {
        b.write(Primitive.Int.write(this.replyToTopId));
      }
      if (this.quoteText !== void 0) {
        b.write(Primitive.String.write(this.quoteText));
      }
      if (this.quoteEntities) {
        b.write(Primitive.Vector.write(this.quoteEntities));
      }
      if (this.quoteOffset !== void 0) {
        b.write(Primitive.Int.write(this.quoteOffset));
      }
      return b.buffer;
    }
  }
  Raw2.MessageReplyHeader = MessageReplyHeader;
  class MessageReplyStoryHeader extends TLObject {
    peer;
    storyId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageReplyStoryHeader';
      this.constructorId = 240843065;
      this.subclassOfId = 1531810151;
      this._slots = ['peer', 'storyId'];
      this.peer = params.peer;
      this.storyId = params.storyId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let storyId = await Primitive.Int.read(b);
      return new Raw2.MessageReplyStoryHeader({ peer, storyId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.storyId !== void 0) {
        b.write(Primitive.Int.write(this.storyId));
      }
      return b.buffer;
    }
  }
  Raw2.MessageReplyStoryHeader = MessageReplyStoryHeader;
  class MessageReplies extends TLObject {
    comments;
    replies;
    repliesPts;
    recentRepliers;
    channelId;
    maxId;
    readMaxId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageReplies';
      this.constructorId = 2211844034;
      this.subclassOfId = 1825397986;
      this._slots = [
        'comments',
        'replies',
        'repliesPts',
        'recentRepliers',
        'channelId',
        'maxId',
        'readMaxId',
      ];
      this.comments = params.comments;
      this.replies = params.replies;
      this.repliesPts = params.repliesPts;
      this.recentRepliers = params.recentRepliers;
      this.channelId = params.channelId;
      this.maxId = params.maxId;
      this.readMaxId = params.readMaxId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let comments = flags & (1 << 0) ? true : false;
      let replies = await Primitive.Int.read(b);
      let repliesPts = await Primitive.Int.read(b);
      let recentRepliers = flags & (1 << 1) ? await TLObject.read(b) : [];
      let channelId = flags & (1 << 0) ? await Primitive.Long.read(b) : void 0;
      let maxId = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      let readMaxId = flags & (1 << 3) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.MessageReplies({
        comments,
        replies,
        repliesPts,
        recentRepliers,
        channelId,
        maxId,
        readMaxId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.comments ? 1 << 0 : 0;
      flags |= this.recentRepliers ? 1 << 1 : 0;
      flags |= this.channelId !== void 0 ? 1 << 0 : 0;
      flags |= this.maxId !== void 0 ? 1 << 2 : 0;
      flags |= this.readMaxId !== void 0 ? 1 << 3 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.replies !== void 0) {
        b.write(Primitive.Int.write(this.replies));
      }
      if (this.repliesPts !== void 0) {
        b.write(Primitive.Int.write(this.repliesPts));
      }
      if (this.recentRepliers) {
        b.write(Primitive.Vector.write(this.recentRepliers));
      }
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.maxId !== void 0) {
        b.write(Primitive.Int.write(this.maxId));
      }
      if (this.readMaxId !== void 0) {
        b.write(Primitive.Int.write(this.readMaxId));
      }
      return b.buffer;
    }
  }
  Raw2.MessageReplies = MessageReplies;
  class PeerBlocked extends TLObject {
    peerId;
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PeerBlocked';
      this.constructorId = 3908927508;
      this.subclassOfId = 1425210520;
      this._slots = ['peerId', 'date'];
      this.peerId = params.peerId;
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peerId = await TLObject.read(b);
      let date = await Primitive.Int.read(b);
      return new Raw2.PeerBlocked({ peerId, date });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peerId !== void 0) {
        b.write(this.peerId.write());
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.PeerBlocked = PeerBlocked;
  class GroupCallDiscarded extends TLObject {
    id;
    accessHash;
    duration;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'GroupCallDiscarded';
      this.constructorId = 2004925620;
      this.subclassOfId = 548729632;
      this._slots = ['id', 'accessHash', 'duration'];
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.duration = params.duration;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let duration = await Primitive.Int.read(b);
      return new Raw2.GroupCallDiscarded({ id, accessHash, duration });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.duration !== void 0) {
        b.write(Primitive.Int.write(this.duration));
      }
      return b.buffer;
    }
  }
  Raw2.GroupCallDiscarded = GroupCallDiscarded;
  class GroupCall extends TLObject {
    joinMuted;
    canChangeJoinMuted;
    joinDateAsc;
    scheduleStartSubscribed;
    canStartVideo;
    recordVideoActive;
    rtmpStream;
    listenersHidden;
    id;
    accessHash;
    participantsCount;
    title;
    streamDcId;
    recordStartDate;
    scheduleDate;
    unmutedVideoCount;
    unmutedVideoLimit;
    version;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'GroupCall';
      this.constructorId = 3583468812;
      this.subclassOfId = 548729632;
      this._slots = [
        'joinMuted',
        'canChangeJoinMuted',
        'joinDateAsc',
        'scheduleStartSubscribed',
        'canStartVideo',
        'recordVideoActive',
        'rtmpStream',
        'listenersHidden',
        'id',
        'accessHash',
        'participantsCount',
        'title',
        'streamDcId',
        'recordStartDate',
        'scheduleDate',
        'unmutedVideoCount',
        'unmutedVideoLimit',
        'version',
      ];
      this.joinMuted = params.joinMuted;
      this.canChangeJoinMuted = params.canChangeJoinMuted;
      this.joinDateAsc = params.joinDateAsc;
      this.scheduleStartSubscribed = params.scheduleStartSubscribed;
      this.canStartVideo = params.canStartVideo;
      this.recordVideoActive = params.recordVideoActive;
      this.rtmpStream = params.rtmpStream;
      this.listenersHidden = params.listenersHidden;
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.participantsCount = params.participantsCount;
      this.title = params.title;
      this.streamDcId = params.streamDcId;
      this.recordStartDate = params.recordStartDate;
      this.scheduleDate = params.scheduleDate;
      this.unmutedVideoCount = params.unmutedVideoCount;
      this.unmutedVideoLimit = params.unmutedVideoLimit;
      this.version = params.version;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let joinMuted = flags & (1 << 1) ? true : false;
      let canChangeJoinMuted = flags & (1 << 2) ? true : false;
      let joinDateAsc = flags & (1 << 6) ? true : false;
      let scheduleStartSubscribed = flags & (1 << 8) ? true : false;
      let canStartVideo = flags & (1 << 9) ? true : false;
      let recordVideoActive = flags & (1 << 11) ? true : false;
      let rtmpStream = flags & (1 << 12) ? true : false;
      let listenersHidden = flags & (1 << 13) ? true : false;
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let participantsCount = await Primitive.Int.read(b);
      let title = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
      let streamDcId = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
      let recordStartDate = flags & (1 << 5) ? await Primitive.Int.read(b) : void 0;
      let scheduleDate = flags & (1 << 7) ? await Primitive.Int.read(b) : void 0;
      let unmutedVideoCount = flags & (1 << 10) ? await Primitive.Int.read(b) : void 0;
      let unmutedVideoLimit = await Primitive.Int.read(b);
      let version = await Primitive.Int.read(b);
      return new Raw2.GroupCall({
        joinMuted,
        canChangeJoinMuted,
        joinDateAsc,
        scheduleStartSubscribed,
        canStartVideo,
        recordVideoActive,
        rtmpStream,
        listenersHidden,
        id,
        accessHash,
        participantsCount,
        title,
        streamDcId,
        recordStartDate,
        scheduleDate,
        unmutedVideoCount,
        unmutedVideoLimit,
        version,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.joinMuted ? 1 << 1 : 0;
      flags |= this.canChangeJoinMuted ? 1 << 2 : 0;
      flags |= this.joinDateAsc ? 1 << 6 : 0;
      flags |= this.scheduleStartSubscribed ? 1 << 8 : 0;
      flags |= this.canStartVideo ? 1 << 9 : 0;
      flags |= this.recordVideoActive ? 1 << 11 : 0;
      flags |= this.rtmpStream ? 1 << 12 : 0;
      flags |= this.listenersHidden ? 1 << 13 : 0;
      flags |= this.title !== void 0 ? 1 << 3 : 0;
      flags |= this.streamDcId !== void 0 ? 1 << 4 : 0;
      flags |= this.recordStartDate !== void 0 ? 1 << 5 : 0;
      flags |= this.scheduleDate !== void 0 ? 1 << 7 : 0;
      flags |= this.unmutedVideoCount !== void 0 ? 1 << 10 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.participantsCount !== void 0) {
        b.write(Primitive.Int.write(this.participantsCount));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.streamDcId !== void 0) {
        b.write(Primitive.Int.write(this.streamDcId));
      }
      if (this.recordStartDate !== void 0) {
        b.write(Primitive.Int.write(this.recordStartDate));
      }
      if (this.scheduleDate !== void 0) {
        b.write(Primitive.Int.write(this.scheduleDate));
      }
      if (this.unmutedVideoCount !== void 0) {
        b.write(Primitive.Int.write(this.unmutedVideoCount));
      }
      if (this.unmutedVideoLimit !== void 0) {
        b.write(Primitive.Int.write(this.unmutedVideoLimit));
      }
      if (this.version !== void 0) {
        b.write(Primitive.Int.write(this.version));
      }
      return b.buffer;
    }
  }
  Raw2.GroupCall = GroupCall;
  class InputGroupCall extends TLObject {
    id;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputGroupCall';
      this.constructorId = 3635053583;
      this.subclassOfId = 1482758833;
      this._slots = ['id', 'accessHash'];
      this.id = params.id;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputGroupCall({ id, accessHash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputGroupCall = InputGroupCall;
  class GroupCallParticipant extends TLObject {
    muted;
    left;
    canSelfUnmute;
    justJoined;
    versioned;
    min;
    mutedByYou;
    volumeByAdmin;
    self;
    videoJoined;
    peer;
    date;
    activeDate;
    source;
    volume;
    about;
    raiseHandRating;
    video;
    presentation;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'GroupCallParticipant';
      this.constructorId = 3953538814;
      this.subclassOfId = 3222974284;
      this._slots = [
        'muted',
        'left',
        'canSelfUnmute',
        'justJoined',
        'versioned',
        'min',
        'mutedByYou',
        'volumeByAdmin',
        'self',
        'videoJoined',
        'peer',
        'date',
        'activeDate',
        'source',
        'volume',
        'about',
        'raiseHandRating',
        'video',
        'presentation',
      ];
      this.muted = params.muted;
      this.left = params.left;
      this.canSelfUnmute = params.canSelfUnmute;
      this.justJoined = params.justJoined;
      this.versioned = params.versioned;
      this.min = params.min;
      this.mutedByYou = params.mutedByYou;
      this.volumeByAdmin = params.volumeByAdmin;
      this.self = params.self;
      this.videoJoined = params.videoJoined;
      this.peer = params.peer;
      this.date = params.date;
      this.activeDate = params.activeDate;
      this.source = params.source;
      this.volume = params.volume;
      this.about = params.about;
      this.raiseHandRating = params.raiseHandRating;
      this.video = params.video;
      this.presentation = params.presentation;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let muted = flags & (1 << 0) ? true : false;
      let left = flags & (1 << 1) ? true : false;
      let canSelfUnmute = flags & (1 << 2) ? true : false;
      let justJoined = flags & (1 << 4) ? true : false;
      let versioned = flags & (1 << 5) ? true : false;
      let min = flags & (1 << 8) ? true : false;
      let mutedByYou = flags & (1 << 9) ? true : false;
      let volumeByAdmin = flags & (1 << 10) ? true : false;
      let self = flags & (1 << 12) ? true : false;
      let videoJoined = flags & (1 << 15) ? true : false;
      let peer = await TLObject.read(b);
      let date = await Primitive.Int.read(b);
      let activeDate = flags & (1 << 3) ? await Primitive.Int.read(b) : void 0;
      let source = await Primitive.Int.read(b);
      let volume = flags & (1 << 7) ? await Primitive.Int.read(b) : void 0;
      let about = flags & (1 << 11) ? await Primitive.String.read(b) : void 0;
      let raiseHandRating = flags & (1 << 13) ? await Primitive.Long.read(b) : void 0;
      let video = flags & (1 << 6) ? await TLObject.read(b) : void 0;
      let presentation = flags & (1 << 14) ? await TLObject.read(b) : void 0;
      return new Raw2.GroupCallParticipant({
        muted,
        left,
        canSelfUnmute,
        justJoined,
        versioned,
        min,
        mutedByYou,
        volumeByAdmin,
        self,
        videoJoined,
        peer,
        date,
        activeDate,
        source,
        volume,
        about,
        raiseHandRating,
        video,
        presentation,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.muted ? 1 << 0 : 0;
      flags |= this.left ? 1 << 1 : 0;
      flags |= this.canSelfUnmute ? 1 << 2 : 0;
      flags |= this.justJoined ? 1 << 4 : 0;
      flags |= this.versioned ? 1 << 5 : 0;
      flags |= this.min ? 1 << 8 : 0;
      flags |= this.mutedByYou ? 1 << 9 : 0;
      flags |= this.volumeByAdmin ? 1 << 10 : 0;
      flags |= this.self ? 1 << 12 : 0;
      flags |= this.videoJoined ? 1 << 15 : 0;
      flags |= this.activeDate !== void 0 ? 1 << 3 : 0;
      flags |= this.volume !== void 0 ? 1 << 7 : 0;
      flags |= this.about !== void 0 ? 1 << 11 : 0;
      flags |= this.raiseHandRating !== void 0 ? 1 << 13 : 0;
      flags |= this.video !== void 0 ? 1 << 6 : 0;
      flags |= this.presentation !== void 0 ? 1 << 14 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.activeDate !== void 0) {
        b.write(Primitive.Int.write(this.activeDate));
      }
      if (this.source !== void 0) {
        b.write(Primitive.Int.write(this.source));
      }
      if (this.volume !== void 0) {
        b.write(Primitive.Int.write(this.volume));
      }
      if (this.about !== void 0) {
        b.write(Primitive.String.write(this.about));
      }
      if (this.raiseHandRating !== void 0) {
        b.write(Primitive.Long.write(this.raiseHandRating));
      }
      if (this.video !== void 0) {
        b.write(this.video.write());
      }
      if (this.presentation !== void 0) {
        b.write(this.presentation.write());
      }
      return b.buffer;
    }
  }
  Raw2.GroupCallParticipant = GroupCallParticipant;
  class InlineQueryPeerTypeSameBotPM extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InlineQueryPeerTypeSameBotPM';
      this.constructorId = 813821341;
      this.subclassOfId = 2947611167;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InlineQueryPeerTypeSameBotPM();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InlineQueryPeerTypeSameBotPM = InlineQueryPeerTypeSameBotPM;
  class InlineQueryPeerTypePM extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InlineQueryPeerTypePM';
      this.constructorId = 2201751468;
      this.subclassOfId = 2947611167;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InlineQueryPeerTypePM();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InlineQueryPeerTypePM = InlineQueryPeerTypePM;
  class InlineQueryPeerTypeChat extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InlineQueryPeerTypeChat';
      this.constructorId = 3613836554;
      this.subclassOfId = 2947611167;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InlineQueryPeerTypeChat();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InlineQueryPeerTypeChat = InlineQueryPeerTypeChat;
  class InlineQueryPeerTypeMegagroup extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InlineQueryPeerTypeMegagroup';
      this.constructorId = 1589952067;
      this.subclassOfId = 2947611167;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InlineQueryPeerTypeMegagroup();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InlineQueryPeerTypeMegagroup = InlineQueryPeerTypeMegagroup;
  class InlineQueryPeerTypeBroadcast extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InlineQueryPeerTypeBroadcast';
      this.constructorId = 1664413338;
      this.subclassOfId = 2947611167;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InlineQueryPeerTypeBroadcast();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InlineQueryPeerTypeBroadcast = InlineQueryPeerTypeBroadcast;
  class InlineQueryPeerTypeBotPM extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'InlineQueryPeerTypeBotPM';
      this.constructorId = 238759180;
      this.subclassOfId = 2947611167;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.InlineQueryPeerTypeBotPM();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.InlineQueryPeerTypeBotPM = InlineQueryPeerTypeBotPM;
  class ChatInviteImporter extends TLObject {
    requested;
    viaChatlist;
    userId;
    date;
    about;
    approvedBy;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatInviteImporter';
      this.constructorId = 2354765785;
      this.subclassOfId = 1393710126;
      this._slots = ['requested', 'viaChatlist', 'userId', 'date', 'about', 'approvedBy'];
      this.requested = params.requested;
      this.viaChatlist = params.viaChatlist;
      this.userId = params.userId;
      this.date = params.date;
      this.about = params.about;
      this.approvedBy = params.approvedBy;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let requested = flags & (1 << 0) ? true : false;
      let viaChatlist = flags & (1 << 3) ? true : false;
      let userId = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let about = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
      let approvedBy = flags & (1 << 1) ? await Primitive.Long.read(b) : void 0;
      return new Raw2.ChatInviteImporter({
        requested,
        viaChatlist,
        userId,
        date,
        about,
        approvedBy,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.requested ? 1 << 0 : 0;
      flags |= this.viaChatlist ? 1 << 3 : 0;
      flags |= this.about !== void 0 ? 1 << 2 : 0;
      flags |= this.approvedBy !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.about !== void 0) {
        b.write(Primitive.String.write(this.about));
      }
      if (this.approvedBy !== void 0) {
        b.write(Primitive.Long.write(this.approvedBy));
      }
      return b.buffer;
    }
  }
  Raw2.ChatInviteImporter = ChatInviteImporter;
  class ChatAdminWithInvites extends TLObject {
    adminId;
    invitesCount;
    revokedInvitesCount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatAdminWithInvites';
      this.constructorId = 4075613987;
      this.subclassOfId = 1348727704;
      this._slots = ['adminId', 'invitesCount', 'revokedInvitesCount'];
      this.adminId = params.adminId;
      this.invitesCount = params.invitesCount;
      this.revokedInvitesCount = params.revokedInvitesCount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let adminId = await Primitive.Long.read(b);
      let invitesCount = await Primitive.Int.read(b);
      let revokedInvitesCount = await Primitive.Int.read(b);
      return new Raw2.ChatAdminWithInvites({
        adminId,
        invitesCount,
        revokedInvitesCount,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.adminId !== void 0) {
        b.write(Primitive.Long.write(this.adminId));
      }
      if (this.invitesCount !== void 0) {
        b.write(Primitive.Int.write(this.invitesCount));
      }
      if (this.revokedInvitesCount !== void 0) {
        b.write(Primitive.Int.write(this.revokedInvitesCount));
      }
      return b.buffer;
    }
  }
  Raw2.ChatAdminWithInvites = ChatAdminWithInvites;
  class GroupCallParticipantVideoSourceGroup extends TLObject {
    semantics;
    sources;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'GroupCallParticipantVideoSourceGroup';
      this.constructorId = 3702593719;
      this.subclassOfId = 806746236;
      this._slots = ['semantics', 'sources'];
      this.semantics = params.semantics;
      this.sources = params.sources;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let semantics = await Primitive.String.read(b);
      let sources = await TLObject.read(b, Primitive.Int);
      return new Raw2.GroupCallParticipantVideoSourceGroup({
        semantics,
        sources,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.semantics !== void 0) {
        b.write(Primitive.String.write(this.semantics));
      }
      if (this.sources) {
        b.write(Primitive.Vector.write(this.sources, Primitive.Int));
      }
      return b.buffer;
    }
  }
  Raw2.GroupCallParticipantVideoSourceGroup = GroupCallParticipantVideoSourceGroup;
  class GroupCallParticipantVideo extends TLObject {
    paused;
    endpoint;
    sourceGroups;
    audioSource;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'GroupCallParticipantVideo';
      this.constructorId = 1735736008;
      this.subclassOfId = 4014389467;
      this._slots = ['paused', 'endpoint', 'sourceGroups', 'audioSource'];
      this.paused = params.paused;
      this.endpoint = params.endpoint;
      this.sourceGroups = params.sourceGroups;
      this.audioSource = params.audioSource;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let paused = flags & (1 << 0) ? true : false;
      let endpoint = await Primitive.String.read(b);
      let sourceGroups = await TLObject.read(b);
      let audioSource = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.GroupCallParticipantVideo({
        paused,
        endpoint,
        sourceGroups,
        audioSource,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.paused ? 1 << 0 : 0;
      flags |= this.audioSource !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.endpoint !== void 0) {
        b.write(Primitive.String.write(this.endpoint));
      }
      if (this.sourceGroups) {
        b.write(Primitive.Vector.write(this.sourceGroups));
      }
      if (this.audioSource !== void 0) {
        b.write(Primitive.Int.write(this.audioSource));
      }
      return b.buffer;
    }
  }
  Raw2.GroupCallParticipantVideo = GroupCallParticipantVideo;
  class BotCommandScopeDefault extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'BotCommandScopeDefault';
      this.constructorId = 795652779;
      this.subclassOfId = 1269783824;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.BotCommandScopeDefault();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.BotCommandScopeDefault = BotCommandScopeDefault;
  class BotCommandScopeUsers extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'BotCommandScopeUsers';
      this.constructorId = 1011811544;
      this.subclassOfId = 1269783824;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.BotCommandScopeUsers();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.BotCommandScopeUsers = BotCommandScopeUsers;
  class BotCommandScopeChats extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'BotCommandScopeChats';
      this.constructorId = 1877059713;
      this.subclassOfId = 1269783824;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.BotCommandScopeChats();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.BotCommandScopeChats = BotCommandScopeChats;
  class BotCommandScopeChatAdmins extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'BotCommandScopeChatAdmins';
      this.constructorId = 3114950762;
      this.subclassOfId = 1269783824;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.BotCommandScopeChatAdmins();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.BotCommandScopeChatAdmins = BotCommandScopeChatAdmins;
  class BotCommandScopePeer extends TLObject {
    peer;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BotCommandScopePeer';
      this.constructorId = 3684534653;
      this.subclassOfId = 1269783824;
      this._slots = ['peer'];
      this.peer = params.peer;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      return new Raw2.BotCommandScopePeer({ peer });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      return b.buffer;
    }
  }
  Raw2.BotCommandScopePeer = BotCommandScopePeer;
  class BotCommandScopePeerAdmins extends TLObject {
    peer;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BotCommandScopePeerAdmins';
      this.constructorId = 1071145937;
      this.subclassOfId = 1269783824;
      this._slots = ['peer'];
      this.peer = params.peer;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      return new Raw2.BotCommandScopePeerAdmins({ peer });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      return b.buffer;
    }
  }
  Raw2.BotCommandScopePeerAdmins = BotCommandScopePeerAdmins;
  class BotCommandScopePeerUser extends TLObject {
    peer;
    userId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BotCommandScopePeerUser';
      this.constructorId = 169026035;
      this.subclassOfId = 1269783824;
      this._slots = ['peer', 'userId'];
      this.peer = params.peer;
      this.userId = params.userId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let userId = await TLObject.read(b);
      return new Raw2.BotCommandScopePeerUser({ peer, userId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.userId !== void 0) {
        b.write(this.userId.write());
      }
      return b.buffer;
    }
  }
  Raw2.BotCommandScopePeerUser = BotCommandScopePeerUser;
  class SponsoredMessage extends TLObject {
    recommended;
    canReport;
    randomId;
    url;
    title;
    message;
    entities;
    photo;
    color;
    buttonText;
    sponsorInfo;
    additionalInfo;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SponsoredMessage';
      this.constructorId = 3186488678;
      this.subclassOfId = 3780630582;
      this._slots = [
        'recommended',
        'canReport',
        'randomId',
        'url',
        'title',
        'message',
        'entities',
        'photo',
        'color',
        'buttonText',
        'sponsorInfo',
        'additionalInfo',
      ];
      this.recommended = params.recommended;
      this.canReport = params.canReport;
      this.randomId = params.randomId;
      this.url = params.url;
      this.title = params.title;
      this.message = params.message;
      this.entities = params.entities;
      this.photo = params.photo;
      this.color = params.color;
      this.buttonText = params.buttonText;
      this.sponsorInfo = params.sponsorInfo;
      this.additionalInfo = params.additionalInfo;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let recommended = flags & (1 << 5) ? true : false;
      let canReport = flags & (1 << 12) ? true : false;
      let randomId = await Primitive.Bytes.read(b);
      let url = await Primitive.String.read(b);
      let title = await Primitive.String.read(b);
      let message = await Primitive.String.read(b);
      let entities = flags & (1 << 1) ? await TLObject.read(b) : [];
      let photo = flags & (1 << 6) ? await TLObject.read(b) : void 0;
      let color = flags & (1 << 13) ? await TLObject.read(b) : void 0;
      let buttonText = await Primitive.String.read(b);
      let sponsorInfo = flags & (1 << 7) ? await Primitive.String.read(b) : void 0;
      let additionalInfo = flags & (1 << 8) ? await Primitive.String.read(b) : void 0;
      return new Raw2.SponsoredMessage({
        recommended,
        canReport,
        randomId,
        url,
        title,
        message,
        entities,
        photo,
        color,
        buttonText,
        sponsorInfo,
        additionalInfo,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.recommended ? 1 << 5 : 0;
      flags |= this.canReport ? 1 << 12 : 0;
      flags |= this.entities ? 1 << 1 : 0;
      flags |= this.photo !== void 0 ? 1 << 6 : 0;
      flags |= this.color !== void 0 ? 1 << 13 : 0;
      flags |= this.sponsorInfo !== void 0 ? 1 << 7 : 0;
      flags |= this.additionalInfo !== void 0 ? 1 << 8 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.randomId !== void 0) {
        b.write(Primitive.Bytes.write(this.randomId));
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      if (this.color !== void 0) {
        b.write(this.color.write());
      }
      if (this.buttonText !== void 0) {
        b.write(Primitive.String.write(this.buttonText));
      }
      if (this.sponsorInfo !== void 0) {
        b.write(Primitive.String.write(this.sponsorInfo));
      }
      if (this.additionalInfo !== void 0) {
        b.write(Primitive.String.write(this.additionalInfo));
      }
      return b.buffer;
    }
  }
  Raw2.SponsoredMessage = SponsoredMessage;
  class SearchResultsCalendarPeriod extends TLObject {
    date;
    minMsgId;
    maxMsgId;
    count;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SearchResultsCalendarPeriod';
      this.constructorId = 3383776159;
      this.subclassOfId = 3797743871;
      this._slots = ['date', 'minMsgId', 'maxMsgId', 'count'];
      this.date = params.date;
      this.minMsgId = params.minMsgId;
      this.maxMsgId = params.maxMsgId;
      this.count = params.count;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let date = await Primitive.Int.read(b);
      let minMsgId = await Primitive.Int.read(b);
      let maxMsgId = await Primitive.Int.read(b);
      let count = await Primitive.Int.read(b);
      return new Raw2.SearchResultsCalendarPeriod({
        date,
        minMsgId,
        maxMsgId,
        count,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.minMsgId !== void 0) {
        b.write(Primitive.Int.write(this.minMsgId));
      }
      if (this.maxMsgId !== void 0) {
        b.write(Primitive.Int.write(this.maxMsgId));
      }
      if (this.count !== void 0) {
        b.write(Primitive.Int.write(this.count));
      }
      return b.buffer;
    }
  }
  Raw2.SearchResultsCalendarPeriod = SearchResultsCalendarPeriod;
  class SearchResultPosition extends TLObject {
    msgId;
    date;
    offset;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SearchResultPosition';
      this.constructorId = 2137295719;
      this.subclassOfId = 3101824532;
      this._slots = ['msgId', 'date', 'offset'];
      this.msgId = params.msgId;
      this.date = params.date;
      this.offset = params.offset;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let msgId = await Primitive.Int.read(b);
      let date = await Primitive.Int.read(b);
      let offset = await Primitive.Int.read(b);
      return new Raw2.SearchResultPosition({ msgId, date, offset });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.msgId !== void 0) {
        b.write(Primitive.Int.write(this.msgId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.offset !== void 0) {
        b.write(Primitive.Int.write(this.offset));
      }
      return b.buffer;
    }
  }
  Raw2.SearchResultPosition = SearchResultPosition;
  class ReactionCount extends TLObject {
    chosenOrder;
    reaction;
    count;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ReactionCount';
      this.constructorId = 2748435328;
      this.subclassOfId = 3523792447;
      this._slots = ['chosenOrder', 'reaction', 'count'];
      this.chosenOrder = params.chosenOrder;
      this.reaction = params.reaction;
      this.count = params.count;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let chosenOrder = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let reaction = await TLObject.read(b);
      let count = await Primitive.Int.read(b);
      return new Raw2.ReactionCount({ chosenOrder, reaction, count });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.chosenOrder !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.chosenOrder !== void 0) {
        b.write(Primitive.Int.write(this.chosenOrder));
      }
      if (this.reaction !== void 0) {
        b.write(this.reaction.write());
      }
      if (this.count !== void 0) {
        b.write(Primitive.Int.write(this.count));
      }
      return b.buffer;
    }
  }
  Raw2.ReactionCount = ReactionCount;
  class MessageReactions extends TLObject {
    min;
    canSeeList;
    reactionsAsTags;
    results;
    recentReactions;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageReactions';
      this.constructorId = 1328256121;
      this.subclassOfId = 2321221404;
      this._slots = ['min', 'canSeeList', 'reactionsAsTags', 'results', 'recentReactions'];
      this.min = params.min;
      this.canSeeList = params.canSeeList;
      this.reactionsAsTags = params.reactionsAsTags;
      this.results = params.results;
      this.recentReactions = params.recentReactions;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let min = flags & (1 << 0) ? true : false;
      let canSeeList = flags & (1 << 2) ? true : false;
      let reactionsAsTags = flags & (1 << 3) ? true : false;
      let results = await TLObject.read(b);
      let recentReactions = flags & (1 << 1) ? await TLObject.read(b) : [];
      return new Raw2.MessageReactions({
        min,
        canSeeList,
        reactionsAsTags,
        results,
        recentReactions,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.min ? 1 << 0 : 0;
      flags |= this.canSeeList ? 1 << 2 : 0;
      flags |= this.reactionsAsTags ? 1 << 3 : 0;
      flags |= this.recentReactions ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.results) {
        b.write(Primitive.Vector.write(this.results));
      }
      if (this.recentReactions) {
        b.write(Primitive.Vector.write(this.recentReactions));
      }
      return b.buffer;
    }
  }
  Raw2.MessageReactions = MessageReactions;
  class AvailableReaction extends TLObject {
    inactive;
    premium;
    reaction;
    title;
    staticIcon;
    appearAnimation;
    selectAnimation;
    activateAnimation;
    effectAnimation;
    aroundAnimation;
    centerIcon;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'AvailableReaction';
      this.constructorId = 3229084673;
      this.subclassOfId = 2350685555;
      this._slots = [
        'inactive',
        'premium',
        'reaction',
        'title',
        'staticIcon',
        'appearAnimation',
        'selectAnimation',
        'activateAnimation',
        'effectAnimation',
        'aroundAnimation',
        'centerIcon',
      ];
      this.inactive = params.inactive;
      this.premium = params.premium;
      this.reaction = params.reaction;
      this.title = params.title;
      this.staticIcon = params.staticIcon;
      this.appearAnimation = params.appearAnimation;
      this.selectAnimation = params.selectAnimation;
      this.activateAnimation = params.activateAnimation;
      this.effectAnimation = params.effectAnimation;
      this.aroundAnimation = params.aroundAnimation;
      this.centerIcon = params.centerIcon;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let inactive = flags & (1 << 0) ? true : false;
      let premium2 = flags & (1 << 2) ? true : false;
      let reaction = await Primitive.String.read(b);
      let title = await Primitive.String.read(b);
      let staticIcon = await TLObject.read(b);
      let appearAnimation = await TLObject.read(b);
      let selectAnimation = await TLObject.read(b);
      let activateAnimation = await TLObject.read(b);
      let effectAnimation = await TLObject.read(b);
      let aroundAnimation = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      let centerIcon = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      return new Raw2.AvailableReaction({
        inactive,
        premium: premium2,
        reaction,
        title,
        staticIcon,
        appearAnimation,
        selectAnimation,
        activateAnimation,
        effectAnimation,
        aroundAnimation,
        centerIcon,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.inactive ? 1 << 0 : 0;
      flags |= this.premium ? 1 << 2 : 0;
      flags |= this.aroundAnimation !== void 0 ? 1 << 1 : 0;
      flags |= this.centerIcon !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.reaction !== void 0) {
        b.write(Primitive.String.write(this.reaction));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.staticIcon !== void 0) {
        b.write(this.staticIcon.write());
      }
      if (this.appearAnimation !== void 0) {
        b.write(this.appearAnimation.write());
      }
      if (this.selectAnimation !== void 0) {
        b.write(this.selectAnimation.write());
      }
      if (this.activateAnimation !== void 0) {
        b.write(this.activateAnimation.write());
      }
      if (this.effectAnimation !== void 0) {
        b.write(this.effectAnimation.write());
      }
      if (this.aroundAnimation !== void 0) {
        b.write(this.aroundAnimation.write());
      }
      if (this.centerIcon !== void 0) {
        b.write(this.centerIcon.write());
      }
      return b.buffer;
    }
  }
  Raw2.AvailableReaction = AvailableReaction;
  class MessagePeerReaction extends TLObject {
    big;
    unread;
    my;
    peerId;
    date;
    reaction;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessagePeerReaction';
      this.constructorId = 2356786748;
      this.subclassOfId = 2943591077;
      this._slots = ['big', 'unread', 'my', 'peerId', 'date', 'reaction'];
      this.big = params.big;
      this.unread = params.unread;
      this.my = params.my;
      this.peerId = params.peerId;
      this.date = params.date;
      this.reaction = params.reaction;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let big = flags & (1 << 0) ? true : false;
      let unread = flags & (1 << 1) ? true : false;
      let my = flags & (1 << 2) ? true : false;
      let peerId = await TLObject.read(b);
      let date = await Primitive.Int.read(b);
      let reaction = await TLObject.read(b);
      return new Raw2.MessagePeerReaction({
        big,
        unread,
        my,
        peerId,
        date,
        reaction,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.big ? 1 << 0 : 0;
      flags |= this.unread ? 1 << 1 : 0;
      flags |= this.my ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peerId !== void 0) {
        b.write(this.peerId.write());
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.reaction !== void 0) {
        b.write(this.reaction.write());
      }
      return b.buffer;
    }
  }
  Raw2.MessagePeerReaction = MessagePeerReaction;
  class GroupCallStreamChannel extends TLObject {
    channel;
    scale;
    lastTimestampMs;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'GroupCallStreamChannel';
      this.constructorId = 2162903215;
      this.subclassOfId = 3712266840;
      this._slots = ['channel', 'scale', 'lastTimestampMs'];
      this.channel = params.channel;
      this.scale = params.scale;
      this.lastTimestampMs = params.lastTimestampMs;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let channel = await Primitive.Int.read(b);
      let scale = await Primitive.Int.read(b);
      let lastTimestampMs = await Primitive.Long.read(b);
      return new Raw2.GroupCallStreamChannel({
        channel,
        scale,
        lastTimestampMs,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.channel !== void 0) {
        b.write(Primitive.Int.write(this.channel));
      }
      if (this.scale !== void 0) {
        b.write(Primitive.Int.write(this.scale));
      }
      if (this.lastTimestampMs !== void 0) {
        b.write(Primitive.Long.write(this.lastTimestampMs));
      }
      return b.buffer;
    }
  }
  Raw2.GroupCallStreamChannel = GroupCallStreamChannel;
  class AttachMenuBotIconColor extends TLObject {
    name;
    color;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'AttachMenuBotIconColor';
      this.constructorId = 1165423600;
      this.subclassOfId = 3198471018;
      this._slots = ['name', 'color'];
      this.name = params.name;
      this.color = params.color;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let name = await Primitive.String.read(b);
      let color = await Primitive.Int.read(b);
      return new Raw2.AttachMenuBotIconColor({ name, color });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.name !== void 0) {
        b.write(Primitive.String.write(this.name));
      }
      if (this.color !== void 0) {
        b.write(Primitive.Int.write(this.color));
      }
      return b.buffer;
    }
  }
  Raw2.AttachMenuBotIconColor = AttachMenuBotIconColor;
  class AttachMenuBotIcon extends TLObject {
    name;
    icon;
    colors;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'AttachMenuBotIcon';
      this.constructorId = 2997303403;
      this.subclassOfId = 2152219989;
      this._slots = ['name', 'icon', 'colors'];
      this.name = params.name;
      this.icon = params.icon;
      this.colors = params.colors;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let name = await Primitive.String.read(b);
      let icon = await TLObject.read(b);
      let colors = flags & (1 << 0) ? await TLObject.read(b) : [];
      return new Raw2.AttachMenuBotIcon({ name, icon, colors });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.colors ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.name !== void 0) {
        b.write(Primitive.String.write(this.name));
      }
      if (this.icon !== void 0) {
        b.write(this.icon.write());
      }
      if (this.colors) {
        b.write(Primitive.Vector.write(this.colors));
      }
      return b.buffer;
    }
  }
  Raw2.AttachMenuBotIcon = AttachMenuBotIcon;
  class AttachMenuBot extends TLObject {
    inactive;
    hasSettings;
    requestWriteAccess;
    showInAttachMenu;
    showInSideMenu;
    sideMenuDisclaimerNeeded;
    botId;
    shortName;
    peerTypes;
    icons;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'AttachMenuBot';
      this.constructorId = 3641544190;
      this.subclassOfId = 2668131398;
      this._slots = [
        'inactive',
        'hasSettings',
        'requestWriteAccess',
        'showInAttachMenu',
        'showInSideMenu',
        'sideMenuDisclaimerNeeded',
        'botId',
        'shortName',
        'peerTypes',
        'icons',
      ];
      this.inactive = params.inactive;
      this.hasSettings = params.hasSettings;
      this.requestWriteAccess = params.requestWriteAccess;
      this.showInAttachMenu = params.showInAttachMenu;
      this.showInSideMenu = params.showInSideMenu;
      this.sideMenuDisclaimerNeeded = params.sideMenuDisclaimerNeeded;
      this.botId = params.botId;
      this.shortName = params.shortName;
      this.peerTypes = params.peerTypes;
      this.icons = params.icons;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let inactive = flags & (1 << 0) ? true : false;
      let hasSettings = flags & (1 << 1) ? true : false;
      let requestWriteAccess = flags & (1 << 2) ? true : false;
      let showInAttachMenu = flags & (1 << 3) ? true : false;
      let showInSideMenu = flags & (1 << 4) ? true : false;
      let sideMenuDisclaimerNeeded = flags & (1 << 5) ? true : false;
      let botId = await Primitive.Long.read(b);
      let shortName = await Primitive.String.read(b);
      let peerTypes = flags & (1 << 3) ? await TLObject.read(b) : [];
      let icons = await TLObject.read(b);
      return new Raw2.AttachMenuBot({
        inactive,
        hasSettings,
        requestWriteAccess,
        showInAttachMenu,
        showInSideMenu,
        sideMenuDisclaimerNeeded,
        botId,
        shortName,
        peerTypes,
        icons,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.inactive ? 1 << 0 : 0;
      flags |= this.hasSettings ? 1 << 1 : 0;
      flags |= this.requestWriteAccess ? 1 << 2 : 0;
      flags |= this.showInAttachMenu ? 1 << 3 : 0;
      flags |= this.showInSideMenu ? 1 << 4 : 0;
      flags |= this.sideMenuDisclaimerNeeded ? 1 << 5 : 0;
      flags |= this.peerTypes ? 1 << 3 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.botId !== void 0) {
        b.write(Primitive.Long.write(this.botId));
      }
      if (this.shortName !== void 0) {
        b.write(Primitive.String.write(this.shortName));
      }
      if (this.peerTypes) {
        b.write(Primitive.Vector.write(this.peerTypes));
      }
      if (this.icons) {
        b.write(Primitive.Vector.write(this.icons));
      }
      return b.buffer;
    }
  }
  Raw2.AttachMenuBot = AttachMenuBot;
  class AttachMenuBotsNotModified extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'AttachMenuBotsNotModified';
      this.constructorId = 4057500252;
      this.subclassOfId = 2217616346;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.AttachMenuBotsNotModified();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.AttachMenuBotsNotModified = AttachMenuBotsNotModified;
  class AttachMenuBots extends TLObject {
    hash;
    bots;
    users;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'AttachMenuBots';
      this.constructorId = 1011024320;
      this.subclassOfId = 2217616346;
      this._slots = ['hash', 'bots', 'users'];
      this.hash = params.hash;
      this.bots = params.bots;
      this.users = params.users;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let hash = await Primitive.Long.read(b);
      let bots2 = await TLObject.read(b);
      let users2 = await TLObject.read(b);
      return new Raw2.AttachMenuBots({ hash, bots: bots2, users: users2 });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.hash !== void 0) {
        b.write(Primitive.Long.write(this.hash));
      }
      if (this.bots) {
        b.write(Primitive.Vector.write(this.bots));
      }
      if (this.users) {
        b.write(Primitive.Vector.write(this.users));
      }
      return b.buffer;
    }
  }
  Raw2.AttachMenuBots = AttachMenuBots;
  class AttachMenuBotsBot extends TLObject {
    bot;
    users;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'AttachMenuBotsBot';
      this.constructorId = 2478794367;
      this.subclassOfId = 3677587517;
      this._slots = ['bot', 'users'];
      this.bot = params.bot;
      this.users = params.users;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let bot = await TLObject.read(b);
      let users2 = await TLObject.read(b);
      return new Raw2.AttachMenuBotsBot({ bot, users: users2 });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.bot !== void 0) {
        b.write(this.bot.write());
      }
      if (this.users) {
        b.write(Primitive.Vector.write(this.users));
      }
      return b.buffer;
    }
  }
  Raw2.AttachMenuBotsBot = AttachMenuBotsBot;
  class WebViewResultUrl extends TLObject {
    queryId;
    url;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'WebViewResultUrl';
      this.constructorId = 202659196;
      this.subclassOfId = 2479793990;
      this._slots = ['queryId', 'url'];
      this.queryId = params.queryId;
      this.url = params.url;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let queryId = await Primitive.Long.read(b);
      let url = await Primitive.String.read(b);
      return new Raw2.WebViewResultUrl({ queryId, url });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.queryId !== void 0) {
        b.write(Primitive.Long.write(this.queryId));
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      return b.buffer;
    }
  }
  Raw2.WebViewResultUrl = WebViewResultUrl;
  class SimpleWebViewResultUrl extends TLObject {
    url;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SimpleWebViewResultUrl';
      this.constructorId = 2284811963;
      this.subclassOfId = 367977435;
      this._slots = ['url'];
      this.url = params.url;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      return new Raw2.SimpleWebViewResultUrl({ url });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      return b.buffer;
    }
  }
  Raw2.SimpleWebViewResultUrl = SimpleWebViewResultUrl;
  class WebViewMessageSent extends TLObject {
    msgId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'WebViewMessageSent';
      this.constructorId = 211046684;
      this.subclassOfId = 1977914130;
      this._slots = ['msgId'];
      this.msgId = params.msgId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let msgId = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      return new Raw2.WebViewMessageSent({ msgId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.msgId !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.msgId !== void 0) {
        b.write(this.msgId.write());
      }
      return b.buffer;
    }
  }
  Raw2.WebViewMessageSent = WebViewMessageSent;
  class BotMenuButtonDefault extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'BotMenuButtonDefault';
      this.constructorId = 1966318984;
      this.subclassOfId = 1282522428;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.BotMenuButtonDefault();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.BotMenuButtonDefault = BotMenuButtonDefault;
  class BotMenuButtonCommands extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'BotMenuButtonCommands';
      this.constructorId = 1113113093;
      this.subclassOfId = 1282522428;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.BotMenuButtonCommands();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.BotMenuButtonCommands = BotMenuButtonCommands;
  class BotMenuButton extends TLObject {
    text;
    url;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BotMenuButton';
      this.constructorId = 3350559974;
      this.subclassOfId = 1282522428;
      this._slots = ['text', 'url'];
      this.text = params.text;
      this.url = params.url;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      let url = await Primitive.String.read(b);
      return new Raw2.BotMenuButton({ text, url });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      return b.buffer;
    }
  }
  Raw2.BotMenuButton = BotMenuButton;
  class NotificationSoundDefault extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'NotificationSoundDefault';
      this.constructorId = 2548612798;
      this.subclassOfId = 4076201307;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.NotificationSoundDefault();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.NotificationSoundDefault = NotificationSoundDefault;
  class NotificationSoundNone extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'NotificationSoundNone';
      this.constructorId = 1863070943;
      this.subclassOfId = 4076201307;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.NotificationSoundNone();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.NotificationSoundNone = NotificationSoundNone;
  class NotificationSoundLocal extends TLObject {
    title;
    data;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'NotificationSoundLocal';
      this.constructorId = 2198575844;
      this.subclassOfId = 4076201307;
      this._slots = ['title', 'data'];
      this.title = params.title;
      this.data = params.data;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let title = await Primitive.String.read(b);
      let data = await Primitive.String.read(b);
      return new Raw2.NotificationSoundLocal({ title, data });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.data !== void 0) {
        b.write(Primitive.String.write(this.data));
      }
      return b.buffer;
    }
  }
  Raw2.NotificationSoundLocal = NotificationSoundLocal;
  class NotificationSoundRingtone extends TLObject {
    id;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'NotificationSoundRingtone';
      this.constructorId = 4285300809;
      this.subclassOfId = 4076201307;
      this._slots = ['id'];
      this.id = params.id;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      return new Raw2.NotificationSoundRingtone({ id });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      return b.buffer;
    }
  }
  Raw2.NotificationSoundRingtone = NotificationSoundRingtone;
  class AttachMenuPeerTypeSameBotPM extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'AttachMenuPeerTypeSameBotPM';
      this.constructorId = 2104224014;
      this.subclassOfId = 3520628432;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.AttachMenuPeerTypeSameBotPM();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.AttachMenuPeerTypeSameBotPM = AttachMenuPeerTypeSameBotPM;
  class AttachMenuPeerTypeBotPM extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'AttachMenuPeerTypeBotPM';
      this.constructorId = 3274439194;
      this.subclassOfId = 3520628432;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.AttachMenuPeerTypeBotPM();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.AttachMenuPeerTypeBotPM = AttachMenuPeerTypeBotPM;
  class AttachMenuPeerTypePM extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'AttachMenuPeerTypePM';
      this.constructorId = 4047950623;
      this.subclassOfId = 3520628432;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.AttachMenuPeerTypePM();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.AttachMenuPeerTypePM = AttachMenuPeerTypePM;
  class AttachMenuPeerTypeChat extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'AttachMenuPeerTypeChat';
      this.constructorId = 84480319;
      this.subclassOfId = 3520628432;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.AttachMenuPeerTypeChat();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.AttachMenuPeerTypeChat = AttachMenuPeerTypeChat;
  class AttachMenuPeerTypeBroadcast extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'AttachMenuPeerTypeBroadcast';
      this.constructorId = 2080104188;
      this.subclassOfId = 3520628432;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.AttachMenuPeerTypeBroadcast();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.AttachMenuPeerTypeBroadcast = AttachMenuPeerTypeBroadcast;
  class InputInvoiceMessage extends TLObject {
    peer;
    msgId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputInvoiceMessage';
      this.constructorId = 3317000281;
      this.subclassOfId = 1919851518;
      this._slots = ['peer', 'msgId'];
      this.peer = params.peer;
      this.msgId = params.msgId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let msgId = await Primitive.Int.read(b);
      return new Raw2.InputInvoiceMessage({ peer, msgId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.msgId !== void 0) {
        b.write(Primitive.Int.write(this.msgId));
      }
      return b.buffer;
    }
  }
  Raw2.InputInvoiceMessage = InputInvoiceMessage;
  class InputInvoiceSlug extends TLObject {
    slug;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputInvoiceSlug';
      this.constructorId = 3274099439;
      this.subclassOfId = 1919851518;
      this._slots = ['slug'];
      this.slug = params.slug;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let slug = await Primitive.String.read(b);
      return new Raw2.InputInvoiceSlug({ slug });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.slug !== void 0) {
        b.write(Primitive.String.write(this.slug));
      }
      return b.buffer;
    }
  }
  Raw2.InputInvoiceSlug = InputInvoiceSlug;
  class InputInvoicePremiumGiftCode extends TLObject {
    purpose;
    option;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputInvoicePremiumGiftCode';
      this.constructorId = 2560125965;
      this.subclassOfId = 1919851518;
      this._slots = ['purpose', 'option'];
      this.purpose = params.purpose;
      this.option = params.option;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let purpose = await TLObject.read(b);
      let option = await TLObject.read(b);
      return new Raw2.InputInvoicePremiumGiftCode({ purpose, option });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.purpose !== void 0) {
        b.write(this.purpose.write());
      }
      if (this.option !== void 0) {
        b.write(this.option.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputInvoicePremiumGiftCode = InputInvoicePremiumGiftCode;
  class InputStorePaymentPremiumSubscription extends TLObject {
    restore;
    upgrade;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputStorePaymentPremiumSubscription';
      this.constructorId = 2792693350;
      this.subclassOfId = 3886290765;
      this._slots = ['restore', 'upgrade'];
      this.restore = params.restore;
      this.upgrade = params.upgrade;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let restore = flags & (1 << 0) ? true : false;
      let upgrade = flags & (1 << 1) ? true : false;
      return new Raw2.InputStorePaymentPremiumSubscription({ restore, upgrade });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.restore ? 1 << 0 : 0;
      flags |= this.upgrade ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      return b.buffer;
    }
  }
  Raw2.InputStorePaymentPremiumSubscription = InputStorePaymentPremiumSubscription;
  class InputStorePaymentGiftPremium extends TLObject {
    userId;
    currency;
    amount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputStorePaymentGiftPremium';
      this.constructorId = 1634697192;
      this.subclassOfId = 3886290765;
      this._slots = ['userId', 'currency', 'amount'];
      this.userId = params.userId;
      this.currency = params.currency;
      this.amount = params.amount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await TLObject.read(b);
      let currency = await Primitive.String.read(b);
      let amount = await Primitive.Long.read(b);
      return new Raw2.InputStorePaymentGiftPremium({
        userId,
        currency,
        amount,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(this.userId.write());
      }
      if (this.currency !== void 0) {
        b.write(Primitive.String.write(this.currency));
      }
      if (this.amount !== void 0) {
        b.write(Primitive.Long.write(this.amount));
      }
      return b.buffer;
    }
  }
  Raw2.InputStorePaymentGiftPremium = InputStorePaymentGiftPremium;
  class InputStorePaymentPremiumGiftCode extends TLObject {
    users;
    boostPeer;
    currency;
    amount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputStorePaymentPremiumGiftCode';
      this.constructorId = 2743099199;
      this.subclassOfId = 3886290765;
      this._slots = ['users', 'boostPeer', 'currency', 'amount'];
      this.users = params.users;
      this.boostPeer = params.boostPeer;
      this.currency = params.currency;
      this.amount = params.amount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let users2 = await TLObject.read(b);
      let boostPeer = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let currency = await Primitive.String.read(b);
      let amount = await Primitive.Long.read(b);
      return new Raw2.InputStorePaymentPremiumGiftCode({
        users: users2,
        boostPeer,
        currency,
        amount,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.boostPeer !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.users) {
        b.write(Primitive.Vector.write(this.users));
      }
      if (this.boostPeer !== void 0) {
        b.write(this.boostPeer.write());
      }
      if (this.currency !== void 0) {
        b.write(Primitive.String.write(this.currency));
      }
      if (this.amount !== void 0) {
        b.write(Primitive.Long.write(this.amount));
      }
      return b.buffer;
    }
  }
  Raw2.InputStorePaymentPremiumGiftCode = InputStorePaymentPremiumGiftCode;
  class InputStorePaymentPremiumGiveaway extends TLObject {
    onlyNewSubscribers;
    winnersAreVisible;
    boostPeer;
    additionalPeers;
    countriesIso2;
    prizeDescription;
    randomId;
    untilDate;
    currency;
    amount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputStorePaymentPremiumGiveaway';
      this.constructorId = 369444042;
      this.subclassOfId = 3886290765;
      this._slots = [
        'onlyNewSubscribers',
        'winnersAreVisible',
        'boostPeer',
        'additionalPeers',
        'countriesIso2',
        'prizeDescription',
        'randomId',
        'untilDate',
        'currency',
        'amount',
      ];
      this.onlyNewSubscribers = params.onlyNewSubscribers;
      this.winnersAreVisible = params.winnersAreVisible;
      this.boostPeer = params.boostPeer;
      this.additionalPeers = params.additionalPeers;
      this.countriesIso2 = params.countriesIso2;
      this.prizeDescription = params.prizeDescription;
      this.randomId = params.randomId;
      this.untilDate = params.untilDate;
      this.currency = params.currency;
      this.amount = params.amount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let onlyNewSubscribers = flags & (1 << 0) ? true : false;
      let winnersAreVisible = flags & (1 << 3) ? true : false;
      let boostPeer = await TLObject.read(b);
      let additionalPeers = flags & (1 << 1) ? await TLObject.read(b) : [];
      let countriesIso2 = flags & (1 << 2) ? await TLObject.read(b, Primitive.String) : [];
      let prizeDescription = flags & (1 << 4) ? await Primitive.String.read(b) : void 0;
      let randomId = await Primitive.Long.read(b);
      let untilDate = await Primitive.Int.read(b);
      let currency = await Primitive.String.read(b);
      let amount = await Primitive.Long.read(b);
      return new Raw2.InputStorePaymentPremiumGiveaway({
        onlyNewSubscribers,
        winnersAreVisible,
        boostPeer,
        additionalPeers,
        countriesIso2,
        prizeDescription,
        randomId,
        untilDate,
        currency,
        amount,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.onlyNewSubscribers ? 1 << 0 : 0;
      flags |= this.winnersAreVisible ? 1 << 3 : 0;
      flags |= this.additionalPeers ? 1 << 1 : 0;
      flags |= this.countriesIso2 ? 1 << 2 : 0;
      flags |= this.prizeDescription !== void 0 ? 1 << 4 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.boostPeer !== void 0) {
        b.write(this.boostPeer.write());
      }
      if (this.additionalPeers) {
        b.write(Primitive.Vector.write(this.additionalPeers));
      }
      if (this.countriesIso2) {
        b.write(Primitive.Vector.write(this.countriesIso2, Primitive.String));
      }
      if (this.prizeDescription !== void 0) {
        b.write(Primitive.String.write(this.prizeDescription));
      }
      if (this.randomId !== void 0) {
        b.write(Primitive.Long.write(this.randomId));
      }
      if (this.untilDate !== void 0) {
        b.write(Primitive.Int.write(this.untilDate));
      }
      if (this.currency !== void 0) {
        b.write(Primitive.String.write(this.currency));
      }
      if (this.amount !== void 0) {
        b.write(Primitive.Long.write(this.amount));
      }
      return b.buffer;
    }
  }
  Raw2.InputStorePaymentPremiumGiveaway = InputStorePaymentPremiumGiveaway;
  class PremiumGiftOption extends TLObject {
    months;
    currency;
    amount;
    botUrl;
    storeProduct;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PremiumGiftOption';
      this.constructorId = 1958953753;
      this.subclassOfId = 1367519294;
      this._slots = ['months', 'currency', 'amount', 'botUrl', 'storeProduct'];
      this.months = params.months;
      this.currency = params.currency;
      this.amount = params.amount;
      this.botUrl = params.botUrl;
      this.storeProduct = params.storeProduct;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let months = await Primitive.Int.read(b);
      let currency = await Primitive.String.read(b);
      let amount = await Primitive.Long.read(b);
      let botUrl = await Primitive.String.read(b);
      let storeProduct = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      return new Raw2.PremiumGiftOption({
        months,
        currency,
        amount,
        botUrl,
        storeProduct,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.storeProduct !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.months !== void 0) {
        b.write(Primitive.Int.write(this.months));
      }
      if (this.currency !== void 0) {
        b.write(Primitive.String.write(this.currency));
      }
      if (this.amount !== void 0) {
        b.write(Primitive.Long.write(this.amount));
      }
      if (this.botUrl !== void 0) {
        b.write(Primitive.String.write(this.botUrl));
      }
      if (this.storeProduct !== void 0) {
        b.write(Primitive.String.write(this.storeProduct));
      }
      return b.buffer;
    }
  }
  Raw2.PremiumGiftOption = PremiumGiftOption;
  class PaymentFormMethod extends TLObject {
    url;
    title;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PaymentFormMethod';
      this.constructorId = 2298016283;
      this.subclassOfId = 1069664278;
      this._slots = ['url', 'title'];
      this.url = params.url;
      this.title = params.title;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      let title = await Primitive.String.read(b);
      return new Raw2.PaymentFormMethod({ url, title });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      return b.buffer;
    }
  }
  Raw2.PaymentFormMethod = PaymentFormMethod;
  class EmojiStatusEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'EmojiStatusEmpty';
      this.constructorId = 769727150;
      this.subclassOfId = 4180717880;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.EmojiStatusEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.EmojiStatusEmpty = EmojiStatusEmpty;
  class EmojiStatus extends TLObject {
    documentId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EmojiStatus';
      this.constructorId = 2459656605;
      this.subclassOfId = 4180717880;
      this._slots = ['documentId'];
      this.documentId = params.documentId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let documentId = await Primitive.Long.read(b);
      return new Raw2.EmojiStatus({ documentId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.documentId !== void 0) {
        b.write(Primitive.Long.write(this.documentId));
      }
      return b.buffer;
    }
  }
  Raw2.EmojiStatus = EmojiStatus;
  class EmojiStatusUntil extends TLObject {
    documentId;
    until;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EmojiStatusUntil';
      this.constructorId = 4197492935;
      this.subclassOfId = 4180717880;
      this._slots = ['documentId', 'until'];
      this.documentId = params.documentId;
      this.until = params.until;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let documentId = await Primitive.Long.read(b);
      let until = await Primitive.Int.read(b);
      return new Raw2.EmojiStatusUntil({ documentId, until });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.documentId !== void 0) {
        b.write(Primitive.Long.write(this.documentId));
      }
      if (this.until !== void 0) {
        b.write(Primitive.Int.write(this.until));
      }
      return b.buffer;
    }
  }
  Raw2.EmojiStatusUntil = EmojiStatusUntil;
  class ReactionEmpty extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'ReactionEmpty';
      this.constructorId = 2046153753;
      this.subclassOfId = 1570858401;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.ReactionEmpty();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.ReactionEmpty = ReactionEmpty;
  class ReactionEmoji extends TLObject {
    emoticon;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ReactionEmoji';
      this.constructorId = 455247544;
      this.subclassOfId = 1570858401;
      this._slots = ['emoticon'];
      this.emoticon = params.emoticon;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let emoticon = await Primitive.String.read(b);
      return new Raw2.ReactionEmoji({ emoticon });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.emoticon !== void 0) {
        b.write(Primitive.String.write(this.emoticon));
      }
      return b.buffer;
    }
  }
  Raw2.ReactionEmoji = ReactionEmoji;
  class ReactionCustomEmoji extends TLObject {
    documentId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ReactionCustomEmoji';
      this.constructorId = 2302016627;
      this.subclassOfId = 1570858401;
      this._slots = ['documentId'];
      this.documentId = params.documentId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let documentId = await Primitive.Long.read(b);
      return new Raw2.ReactionCustomEmoji({ documentId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.documentId !== void 0) {
        b.write(Primitive.Long.write(this.documentId));
      }
      return b.buffer;
    }
  }
  Raw2.ReactionCustomEmoji = ReactionCustomEmoji;
  class ChatReactionsNone extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'ChatReactionsNone';
      this.constructorId = 3942396604;
      this.subclassOfId = 320742581;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.ChatReactionsNone();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.ChatReactionsNone = ChatReactionsNone;
  class ChatReactionsAll extends TLObject {
    allowCustom;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatReactionsAll';
      this.constructorId = 1385335754;
      this.subclassOfId = 320742581;
      this._slots = ['allowCustom'];
      this.allowCustom = params.allowCustom;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let allowCustom = flags & (1 << 0) ? true : false;
      return new Raw2.ChatReactionsAll({ allowCustom });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.allowCustom ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      return b.buffer;
    }
  }
  Raw2.ChatReactionsAll = ChatReactionsAll;
  class ChatReactionsSome extends TLObject {
    reactions;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ChatReactionsSome';
      this.constructorId = 1713193015;
      this.subclassOfId = 320742581;
      this._slots = ['reactions'];
      this.reactions = params.reactions;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let reactions = await TLObject.read(b);
      return new Raw2.ChatReactionsSome({ reactions });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.reactions) {
        b.write(Primitive.Vector.write(this.reactions));
      }
      return b.buffer;
    }
  }
  Raw2.ChatReactionsSome = ChatReactionsSome;
  class EmailVerifyPurposeLoginSetup extends TLObject {
    phoneNumber;
    phoneCodeHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EmailVerifyPurposeLoginSetup';
      this.constructorId = 1128644211;
      this.subclassOfId = 3110628072;
      this._slots = ['phoneNumber', 'phoneCodeHash'];
      this.phoneNumber = params.phoneNumber;
      this.phoneCodeHash = params.phoneCodeHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let phoneNumber = await Primitive.String.read(b);
      let phoneCodeHash = await Primitive.String.read(b);
      return new Raw2.EmailVerifyPurposeLoginSetup({
        phoneNumber,
        phoneCodeHash,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.phoneNumber !== void 0) {
        b.write(Primitive.String.write(this.phoneNumber));
      }
      if (this.phoneCodeHash !== void 0) {
        b.write(Primitive.String.write(this.phoneCodeHash));
      }
      return b.buffer;
    }
  }
  Raw2.EmailVerifyPurposeLoginSetup = EmailVerifyPurposeLoginSetup;
  class EmailVerifyPurposeLoginChange extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'EmailVerifyPurposeLoginChange';
      this.constructorId = 1383932651;
      this.subclassOfId = 3110628072;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.EmailVerifyPurposeLoginChange();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.EmailVerifyPurposeLoginChange = EmailVerifyPurposeLoginChange;
  class EmailVerifyPurposePassport extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'EmailVerifyPurposePassport';
      this.constructorId = 3153401477;
      this.subclassOfId = 3110628072;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.EmailVerifyPurposePassport();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.EmailVerifyPurposePassport = EmailVerifyPurposePassport;
  class EmailVerificationCode extends TLObject {
    code;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EmailVerificationCode';
      this.constructorId = 2452510121;
      this.subclassOfId = 606003776;
      this._slots = ['code'];
      this.code = params.code;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let code = await Primitive.String.read(b);
      return new Raw2.EmailVerificationCode({ code });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.code !== void 0) {
        b.write(Primitive.String.write(this.code));
      }
      return b.buffer;
    }
  }
  Raw2.EmailVerificationCode = EmailVerificationCode;
  class EmailVerificationGoogle extends TLObject {
    token;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EmailVerificationGoogle';
      this.constructorId = 3683688130;
      this.subclassOfId = 606003776;
      this._slots = ['token'];
      this.token = params.token;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let token = await Primitive.String.read(b);
      return new Raw2.EmailVerificationGoogle({ token });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.token !== void 0) {
        b.write(Primitive.String.write(this.token));
      }
      return b.buffer;
    }
  }
  Raw2.EmailVerificationGoogle = EmailVerificationGoogle;
  class EmailVerificationApple extends TLObject {
    token;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EmailVerificationApple';
      this.constructorId = 2530243837;
      this.subclassOfId = 606003776;
      this._slots = ['token'];
      this.token = params.token;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let token = await Primitive.String.read(b);
      return new Raw2.EmailVerificationApple({ token });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.token !== void 0) {
        b.write(Primitive.String.write(this.token));
      }
      return b.buffer;
    }
  }
  Raw2.EmailVerificationApple = EmailVerificationApple;
  class PremiumSubscriptionOption extends TLObject {
    current;
    canPurchaseUpgrade;
    transaction;
    months;
    currency;
    amount;
    botUrl;
    storeProduct;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PremiumSubscriptionOption';
      this.constructorId = 1596792306;
      this.subclassOfId = 774752063;
      this._slots = [
        'current',
        'canPurchaseUpgrade',
        'transaction',
        'months',
        'currency',
        'amount',
        'botUrl',
        'storeProduct',
      ];
      this.current = params.current;
      this.canPurchaseUpgrade = params.canPurchaseUpgrade;
      this.transaction = params.transaction;
      this.months = params.months;
      this.currency = params.currency;
      this.amount = params.amount;
      this.botUrl = params.botUrl;
      this.storeProduct = params.storeProduct;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let current = flags & (1 << 1) ? true : false;
      let canPurchaseUpgrade = flags & (1 << 2) ? true : false;
      let transaction = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
      let months = await Primitive.Int.read(b);
      let currency = await Primitive.String.read(b);
      let amount = await Primitive.Long.read(b);
      let botUrl = await Primitive.String.read(b);
      let storeProduct = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      return new Raw2.PremiumSubscriptionOption({
        current,
        canPurchaseUpgrade,
        transaction,
        months,
        currency,
        amount,
        botUrl,
        storeProduct,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.current ? 1 << 1 : 0;
      flags |= this.canPurchaseUpgrade ? 1 << 2 : 0;
      flags |= this.transaction !== void 0 ? 1 << 3 : 0;
      flags |= this.storeProduct !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.transaction !== void 0) {
        b.write(Primitive.String.write(this.transaction));
      }
      if (this.months !== void 0) {
        b.write(Primitive.Int.write(this.months));
      }
      if (this.currency !== void 0) {
        b.write(Primitive.String.write(this.currency));
      }
      if (this.amount !== void 0) {
        b.write(Primitive.Long.write(this.amount));
      }
      if (this.botUrl !== void 0) {
        b.write(Primitive.String.write(this.botUrl));
      }
      if (this.storeProduct !== void 0) {
        b.write(Primitive.String.write(this.storeProduct));
      }
      return b.buffer;
    }
  }
  Raw2.PremiumSubscriptionOption = PremiumSubscriptionOption;
  class SendAsPeer extends TLObject {
    premiumRequired;
    peer;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SendAsPeer';
      this.constructorId = 3088871476;
      this.subclassOfId = 1143177700;
      this._slots = ['premiumRequired', 'peer'];
      this.premiumRequired = params.premiumRequired;
      this.peer = params.peer;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let premiumRequired = flags & (1 << 0) ? true : false;
      let peer = await TLObject.read(b);
      return new Raw2.SendAsPeer({ premiumRequired, peer });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.premiumRequired ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      return b.buffer;
    }
  }
  Raw2.SendAsPeer = SendAsPeer;
  class MessageExtendedMediaPreview extends TLObject {
    w;
    h;
    thumb;
    videoDuration;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageExtendedMediaPreview';
      this.constructorId = 2908916936;
      this.subclassOfId = 2535971165;
      this._slots = ['w', 'h', 'thumb', 'videoDuration'];
      this.w = params.w;
      this.h = params.h;
      this.thumb = params.thumb;
      this.videoDuration = params.videoDuration;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let w = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let h = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let thumb = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      let videoDuration = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.MessageExtendedMediaPreview({
        w,
        h,
        thumb,
        videoDuration,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.w !== void 0 ? 1 << 0 : 0;
      flags |= this.h !== void 0 ? 1 << 0 : 0;
      flags |= this.thumb !== void 0 ? 1 << 1 : 0;
      flags |= this.videoDuration !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      if (this.thumb !== void 0) {
        b.write(this.thumb.write());
      }
      if (this.videoDuration !== void 0) {
        b.write(Primitive.Int.write(this.videoDuration));
      }
      return b.buffer;
    }
  }
  Raw2.MessageExtendedMediaPreview = MessageExtendedMediaPreview;
  class MessageExtendedMedia extends TLObject {
    media;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessageExtendedMedia';
      this.constructorId = 3997670500;
      this.subclassOfId = 2535971165;
      this._slots = ['media'];
      this.media = params.media;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let media = await TLObject.read(b);
      return new Raw2.MessageExtendedMedia({ media });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.media !== void 0) {
        b.write(this.media.write());
      }
      return b.buffer;
    }
  }
  Raw2.MessageExtendedMedia = MessageExtendedMedia;
  class StickerKeyword extends TLObject {
    documentId;
    keyword;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StickerKeyword';
      this.constructorId = 4244550300;
      this.subclassOfId = 1435835755;
      this._slots = ['documentId', 'keyword'];
      this.documentId = params.documentId;
      this.keyword = params.keyword;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let documentId = await Primitive.Long.read(b);
      let keyword = await TLObject.read(b, Primitive.String);
      return new Raw2.StickerKeyword({ documentId, keyword });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.documentId !== void 0) {
        b.write(Primitive.Long.write(this.documentId));
      }
      if (this.keyword) {
        b.write(Primitive.Vector.write(this.keyword, Primitive.String));
      }
      return b.buffer;
    }
  }
  Raw2.StickerKeyword = StickerKeyword;
  class Username extends TLObject {
    editable;
    active;
    username;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Username';
      this.constructorId = 3020371527;
      this.subclassOfId = 19424289;
      this._slots = ['editable', 'active', 'username'];
      this.editable = params.editable;
      this.active = params.active;
      this.username = params.username;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let editable = flags & (1 << 0) ? true : false;
      let active = flags & (1 << 1) ? true : false;
      let username = await Primitive.String.read(b);
      return new Raw2.Username({ editable, active, username });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.editable ? 1 << 0 : 0;
      flags |= this.active ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.username !== void 0) {
        b.write(Primitive.String.write(this.username));
      }
      return b.buffer;
    }
  }
  Raw2.Username = Username;
  class ForumTopicDeleted extends TLObject {
    id;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ForumTopicDeleted';
      this.constructorId = 37687451;
      this.subclassOfId = 2367169027;
      this._slots = ['id'];
      this.id = params.id;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Int.read(b);
      return new Raw2.ForumTopicDeleted({ id });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      return b.buffer;
    }
  }
  Raw2.ForumTopicDeleted = ForumTopicDeleted;
  class ForumTopic extends TLObject {
    my;
    closed;
    pinned;
    short;
    hidden;
    id;
    date;
    title;
    iconColor;
    iconEmojiId;
    topMessage;
    readInboxMaxId;
    readOutboxMaxId;
    unreadCount;
    unreadMentionsCount;
    unreadReactionsCount;
    fromId;
    notifySettings;
    draft;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ForumTopic';
      this.constructorId = 1903173033;
      this.subclassOfId = 2367169027;
      this._slots = [
        'my',
        'closed',
        'pinned',
        'short',
        'hidden',
        'id',
        'date',
        'title',
        'iconColor',
        'iconEmojiId',
        'topMessage',
        'readInboxMaxId',
        'readOutboxMaxId',
        'unreadCount',
        'unreadMentionsCount',
        'unreadReactionsCount',
        'fromId',
        'notifySettings',
        'draft',
      ];
      this.my = params.my;
      this.closed = params.closed;
      this.pinned = params.pinned;
      this.short = params.short;
      this.hidden = params.hidden;
      this.id = params.id;
      this.date = params.date;
      this.title = params.title;
      this.iconColor = params.iconColor;
      this.iconEmojiId = params.iconEmojiId;
      this.topMessage = params.topMessage;
      this.readInboxMaxId = params.readInboxMaxId;
      this.readOutboxMaxId = params.readOutboxMaxId;
      this.unreadCount = params.unreadCount;
      this.unreadMentionsCount = params.unreadMentionsCount;
      this.unreadReactionsCount = params.unreadReactionsCount;
      this.fromId = params.fromId;
      this.notifySettings = params.notifySettings;
      this.draft = params.draft;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let my = flags & (1 << 1) ? true : false;
      let closed = flags & (1 << 2) ? true : false;
      let pinned = flags & (1 << 3) ? true : false;
      let short = flags & (1 << 5) ? true : false;
      let hidden = flags & (1 << 6) ? true : false;
      let id = await Primitive.Int.read(b);
      let date = await Primitive.Int.read(b);
      let title = await Primitive.String.read(b);
      let iconColor = await Primitive.Int.read(b);
      let iconEmojiId = flags & (1 << 0) ? await Primitive.Long.read(b) : void 0;
      let topMessage = await Primitive.Int.read(b);
      let readInboxMaxId = await Primitive.Int.read(b);
      let readOutboxMaxId = await Primitive.Int.read(b);
      let unreadCount = await Primitive.Int.read(b);
      let unreadMentionsCount = await Primitive.Int.read(b);
      let unreadReactionsCount = await Primitive.Int.read(b);
      let fromId = await TLObject.read(b);
      let notifySettings = await TLObject.read(b);
      let draft = flags & (1 << 4) ? await TLObject.read(b) : void 0;
      return new Raw2.ForumTopic({
        my,
        closed,
        pinned,
        short,
        hidden,
        id,
        date,
        title,
        iconColor,
        iconEmojiId,
        topMessage,
        readInboxMaxId,
        readOutboxMaxId,
        unreadCount,
        unreadMentionsCount,
        unreadReactionsCount,
        fromId,
        notifySettings,
        draft,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.my ? 1 << 1 : 0;
      flags |= this.closed ? 1 << 2 : 0;
      flags |= this.pinned ? 1 << 3 : 0;
      flags |= this.short ? 1 << 5 : 0;
      flags |= this.hidden ? 1 << 6 : 0;
      flags |= this.iconEmojiId !== void 0 ? 1 << 0 : 0;
      flags |= this.draft !== void 0 ? 1 << 4 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.iconColor !== void 0) {
        b.write(Primitive.Int.write(this.iconColor));
      }
      if (this.iconEmojiId !== void 0) {
        b.write(Primitive.Long.write(this.iconEmojiId));
      }
      if (this.topMessage !== void 0) {
        b.write(Primitive.Int.write(this.topMessage));
      }
      if (this.readInboxMaxId !== void 0) {
        b.write(Primitive.Int.write(this.readInboxMaxId));
      }
      if (this.readOutboxMaxId !== void 0) {
        b.write(Primitive.Int.write(this.readOutboxMaxId));
      }
      if (this.unreadCount !== void 0) {
        b.write(Primitive.Int.write(this.unreadCount));
      }
      if (this.unreadMentionsCount !== void 0) {
        b.write(Primitive.Int.write(this.unreadMentionsCount));
      }
      if (this.unreadReactionsCount !== void 0) {
        b.write(Primitive.Int.write(this.unreadReactionsCount));
      }
      if (this.fromId !== void 0) {
        b.write(this.fromId.write());
      }
      if (this.notifySettings !== void 0) {
        b.write(this.notifySettings.write());
      }
      if (this.draft !== void 0) {
        b.write(this.draft.write());
      }
      return b.buffer;
    }
  }
  Raw2.ForumTopic = ForumTopic;
  class DefaultHistoryTTL extends TLObject {
    period;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DefaultHistoryTTL';
      this.constructorId = 1135897376;
      this.subclassOfId = 4027396967;
      this._slots = ['period'];
      this.period = params.period;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let period = await Primitive.Int.read(b);
      return new Raw2.DefaultHistoryTTL({ period });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.period !== void 0) {
        b.write(Primitive.Int.write(this.period));
      }
      return b.buffer;
    }
  }
  Raw2.DefaultHistoryTTL = DefaultHistoryTTL;
  class ExportedContactToken extends TLObject {
    url;
    expires;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ExportedContactToken';
      this.constructorId = 1103040667;
      this.subclassOfId = 2262679249;
      this._slots = ['url', 'expires'];
      this.url = params.url;
      this.expires = params.expires;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      let expires = await Primitive.Int.read(b);
      return new Raw2.ExportedContactToken({ url, expires });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.expires !== void 0) {
        b.write(Primitive.Int.write(this.expires));
      }
      return b.buffer;
    }
  }
  Raw2.ExportedContactToken = ExportedContactToken;
  class RequestPeerTypeUser extends TLObject {
    bot;
    premium;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'RequestPeerTypeUser';
      this.constructorId = 1597737472;
      this.subclassOfId = 3919636500;
      this._slots = ['bot', 'premium'];
      this.bot = params.bot;
      this.premium = params.premium;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let bot = flags & (1 << 0) ? await Primitive.Bool.read(b) : void 0;
      let premium2 = flags & (1 << 1) ? await Primitive.Bool.read(b) : void 0;
      return new Raw2.RequestPeerTypeUser({ bot, premium: premium2 });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.bot !== void 0 ? 1 << 0 : 0;
      flags |= this.premium !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.bot !== void 0) {
        b.write(Primitive.Bool.write(this.bot));
      }
      if (this.premium !== void 0) {
        b.write(Primitive.Bool.write(this.premium));
      }
      return b.buffer;
    }
  }
  Raw2.RequestPeerTypeUser = RequestPeerTypeUser;
  class RequestPeerTypeChat extends TLObject {
    creator;
    botParticipant;
    hasUsername;
    forum;
    userAdminRights;
    botAdminRights;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'RequestPeerTypeChat';
      this.constructorId = 3387977243;
      this.subclassOfId = 3919636500;
      this._slots = [
        'creator',
        'botParticipant',
        'hasUsername',
        'forum',
        'userAdminRights',
        'botAdminRights',
      ];
      this.creator = params.creator;
      this.botParticipant = params.botParticipant;
      this.hasUsername = params.hasUsername;
      this.forum = params.forum;
      this.userAdminRights = params.userAdminRights;
      this.botAdminRights = params.botAdminRights;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let creator = flags & (1 << 0) ? true : false;
      let botParticipant = flags & (1 << 5) ? true : false;
      let hasUsername = flags & (1 << 3) ? await Primitive.Bool.read(b) : void 0;
      let forum = flags & (1 << 4) ? await Primitive.Bool.read(b) : void 0;
      let userAdminRights = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      let botAdminRights = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.RequestPeerTypeChat({
        creator,
        botParticipant,
        hasUsername,
        forum,
        userAdminRights,
        botAdminRights,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.creator ? 1 << 0 : 0;
      flags |= this.botParticipant ? 1 << 5 : 0;
      flags |= this.hasUsername !== void 0 ? 1 << 3 : 0;
      flags |= this.forum !== void 0 ? 1 << 4 : 0;
      flags |= this.userAdminRights !== void 0 ? 1 << 1 : 0;
      flags |= this.botAdminRights !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.hasUsername !== void 0) {
        b.write(Primitive.Bool.write(this.hasUsername));
      }
      if (this.forum !== void 0) {
        b.write(Primitive.Bool.write(this.forum));
      }
      if (this.userAdminRights !== void 0) {
        b.write(this.userAdminRights.write());
      }
      if (this.botAdminRights !== void 0) {
        b.write(this.botAdminRights.write());
      }
      return b.buffer;
    }
  }
  Raw2.RequestPeerTypeChat = RequestPeerTypeChat;
  class RequestPeerTypeBroadcast extends TLObject {
    creator;
    hasUsername;
    userAdminRights;
    botAdminRights;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'RequestPeerTypeBroadcast';
      this.constructorId = 865857388;
      this.subclassOfId = 3919636500;
      this._slots = ['creator', 'hasUsername', 'userAdminRights', 'botAdminRights'];
      this.creator = params.creator;
      this.hasUsername = params.hasUsername;
      this.userAdminRights = params.userAdminRights;
      this.botAdminRights = params.botAdminRights;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let creator = flags & (1 << 0) ? true : false;
      let hasUsername = flags & (1 << 3) ? await Primitive.Bool.read(b) : void 0;
      let userAdminRights = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      let botAdminRights = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.RequestPeerTypeBroadcast({
        creator,
        hasUsername,
        userAdminRights,
        botAdminRights,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.creator ? 1 << 0 : 0;
      flags |= this.hasUsername !== void 0 ? 1 << 3 : 0;
      flags |= this.userAdminRights !== void 0 ? 1 << 1 : 0;
      flags |= this.botAdminRights !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.hasUsername !== void 0) {
        b.write(Primitive.Bool.write(this.hasUsername));
      }
      if (this.userAdminRights !== void 0) {
        b.write(this.userAdminRights.write());
      }
      if (this.botAdminRights !== void 0) {
        b.write(this.botAdminRights.write());
      }
      return b.buffer;
    }
  }
  Raw2.RequestPeerTypeBroadcast = RequestPeerTypeBroadcast;
  class EmojiListNotModified extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'EmojiListNotModified';
      this.constructorId = 1209970170;
      this.subclassOfId = 3169807034;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.EmojiListNotModified();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.EmojiListNotModified = EmojiListNotModified;
  class EmojiList extends TLObject {
    hash;
    documentId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EmojiList';
      this.constructorId = 2048790993;
      this.subclassOfId = 3169807034;
      this._slots = ['hash', 'documentId'];
      this.hash = params.hash;
      this.documentId = params.documentId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let hash = await Primitive.Long.read(b);
      let documentId = await TLObject.read(b, Primitive.Long);
      return new Raw2.EmojiList({ hash, documentId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.hash !== void 0) {
        b.write(Primitive.Long.write(this.hash));
      }
      if (this.documentId) {
        b.write(Primitive.Vector.write(this.documentId, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.EmojiList = EmojiList;
  class EmojiGroup extends TLObject {
    title;
    iconEmojiId;
    emoticons;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'EmojiGroup';
      this.constructorId = 2056961449;
      this.subclassOfId = 1440784787;
      this._slots = ['title', 'iconEmojiId', 'emoticons'];
      this.title = params.title;
      this.iconEmojiId = params.iconEmojiId;
      this.emoticons = params.emoticons;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let title = await Primitive.String.read(b);
      let iconEmojiId = await Primitive.Long.read(b);
      let emoticons = await TLObject.read(b, Primitive.String);
      return new Raw2.EmojiGroup({ title, iconEmojiId, emoticons });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.iconEmojiId !== void 0) {
        b.write(Primitive.Long.write(this.iconEmojiId));
      }
      if (this.emoticons) {
        b.write(Primitive.Vector.write(this.emoticons, Primitive.String));
      }
      return b.buffer;
    }
  }
  Raw2.EmojiGroup = EmojiGroup;
  class TextWithEntities extends TLObject {
    text;
    entities;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'TextWithEntities';
      this.constructorId = 1964978502;
      this.subclassOfId = 2513062661;
      this._slots = ['text', 'entities'];
      this.text = params.text;
      this.entities = params.entities;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      let entities = await TLObject.read(b);
      return new Raw2.TextWithEntities({ text, entities });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      return b.buffer;
    }
  }
  Raw2.TextWithEntities = TextWithEntities;
  class AutoSaveSettings extends TLObject {
    photos;
    videos;
    videoMaxSize;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'AutoSaveSettings';
      this.constructorId = 3360175310;
      this.subclassOfId = 3443234534;
      this._slots = ['photos', 'videos', 'videoMaxSize'];
      this.photos = params.photos;
      this.videos = params.videos;
      this.videoMaxSize = params.videoMaxSize;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let photos2 = flags & (1 << 0) ? true : false;
      let videos = flags & (1 << 1) ? true : false;
      let videoMaxSize = flags & (1 << 2) ? await Primitive.Long.read(b) : void 0;
      return new Raw2.AutoSaveSettings({
        photos: photos2,
        videos,
        videoMaxSize,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.photos ? 1 << 0 : 0;
      flags |= this.videos ? 1 << 1 : 0;
      flags |= this.videoMaxSize !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.videoMaxSize !== void 0) {
        b.write(Primitive.Long.write(this.videoMaxSize));
      }
      return b.buffer;
    }
  }
  Raw2.AutoSaveSettings = AutoSaveSettings;
  class AutoSaveException extends TLObject {
    peer;
    settings;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'AutoSaveException';
      this.constructorId = 2170563911;
      this.subclassOfId = 3716579625;
      this._slots = ['peer', 'settings'];
      this.peer = params.peer;
      this.settings = params.settings;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let settings = await TLObject.read(b);
      return new Raw2.AutoSaveException({ peer, settings });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.settings !== void 0) {
        b.write(this.settings.write());
      }
      return b.buffer;
    }
  }
  Raw2.AutoSaveException = AutoSaveException;
  class InputBotAppID extends TLObject {
    id;
    accessHash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBotAppID';
      this.constructorId = 2837495162;
      this.subclassOfId = 3059063121;
      this._slots = ['id', 'accessHash'];
      this.id = params.id;
      this.accessHash = params.accessHash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      return new Raw2.InputBotAppID({ id, accessHash });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      return b.buffer;
    }
  }
  Raw2.InputBotAppID = InputBotAppID;
  class InputBotAppShortName extends TLObject {
    botId;
    shortName;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBotAppShortName';
      this.constructorId = 2425095175;
      this.subclassOfId = 3059063121;
      this._slots = ['botId', 'shortName'];
      this.botId = params.botId;
      this.shortName = params.shortName;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let botId = await TLObject.read(b);
      let shortName = await Primitive.String.read(b);
      return new Raw2.InputBotAppShortName({ botId, shortName });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.botId !== void 0) {
        b.write(this.botId.write());
      }
      if (this.shortName !== void 0) {
        b.write(Primitive.String.write(this.shortName));
      }
      return b.buffer;
    }
  }
  Raw2.InputBotAppShortName = InputBotAppShortName;
  class BotAppNotModified extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'BotAppNotModified';
      this.constructorId = 1571189943;
      this.subclassOfId = 34550446;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.BotAppNotModified();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.BotAppNotModified = BotAppNotModified;
  class BotApp extends TLObject {
    id;
    accessHash;
    shortName;
    title;
    description;
    photo;
    document;
    hash;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BotApp';
      this.constructorId = 2516373974;
      this.subclassOfId = 34550446;
      this._slots = [
        'id',
        'accessHash',
        'shortName',
        'title',
        'description',
        'photo',
        'document',
        'hash',
      ];
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.shortName = params.shortName;
      this.title = params.title;
      this.description = params.description;
      this.photo = params.photo;
      this.document = params.document;
      this.hash = params.hash;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let shortName = await Primitive.String.read(b);
      let title = await Primitive.String.read(b);
      let description = await Primitive.String.read(b);
      let photo = await TLObject.read(b);
      let document = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let hash = await Primitive.Long.read(b);
      return new Raw2.BotApp({
        id,
        accessHash,
        shortName,
        title,
        description,
        photo,
        document,
        hash,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.document !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.shortName !== void 0) {
        b.write(Primitive.String.write(this.shortName));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.description !== void 0) {
        b.write(Primitive.String.write(this.description));
      }
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      if (this.document !== void 0) {
        b.write(this.document.write());
      }
      if (this.hash !== void 0) {
        b.write(Primitive.Long.write(this.hash));
      }
      return b.buffer;
    }
  }
  Raw2.BotApp = BotApp;
  class AppWebViewResultUrl extends TLObject {
    url;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'AppWebViewResultUrl';
      this.constructorId = 1008422669;
      this.subclassOfId = 472163347;
      this._slots = ['url'];
      this.url = params.url;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      return new Raw2.AppWebViewResultUrl({ url });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      return b.buffer;
    }
  }
  Raw2.AppWebViewResultUrl = AppWebViewResultUrl;
  class InlineBotWebView extends TLObject {
    text;
    url;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InlineBotWebView';
      this.constructorId = 3044185557;
      this.subclassOfId = 1826625002;
      this._slots = ['text', 'url'];
      this.text = params.text;
      this.url = params.url;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      let url = await Primitive.String.read(b);
      return new Raw2.InlineBotWebView({ text, url });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      return b.buffer;
    }
  }
  Raw2.InlineBotWebView = InlineBotWebView;
  class ReadParticipantDate extends TLObject {
    userId;
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ReadParticipantDate';
      this.constructorId = 1246753138;
      this.subclassOfId = 4245130466;
      this._slots = ['userId', 'date'];
      this.userId = params.userId;
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let userId = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      return new Raw2.ReadParticipantDate({ userId, date });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.ReadParticipantDate = ReadParticipantDate;
  class InputChatlistDialogFilter extends TLObject {
    filterId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputChatlistDialogFilter';
      this.constructorId = 4091599411;
      this.subclassOfId = 37721689;
      this._slots = ['filterId'];
      this.filterId = params.filterId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let filterId = await Primitive.Int.read(b);
      return new Raw2.InputChatlistDialogFilter({ filterId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.filterId !== void 0) {
        b.write(Primitive.Int.write(this.filterId));
      }
      return b.buffer;
    }
  }
  Raw2.InputChatlistDialogFilter = InputChatlistDialogFilter;
  class ExportedChatlistInvite extends TLObject {
    title;
    url;
    peers;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ExportedChatlistInvite';
      this.constructorId = 206668204;
      this.subclassOfId = 1997666559;
      this._slots = ['title', 'url', 'peers'];
      this.title = params.title;
      this.url = params.url;
      this.peers = params.peers;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let title = await Primitive.String.read(b);
      let url = await Primitive.String.read(b);
      let peers = await TLObject.read(b);
      return new Raw2.ExportedChatlistInvite({ title, url, peers });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      b.write(Primitive.Int.write(flags));
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      if (this.peers) {
        b.write(Primitive.Vector.write(this.peers));
      }
      return b.buffer;
    }
  }
  Raw2.ExportedChatlistInvite = ExportedChatlistInvite;
  class MessagePeerVote extends TLObject {
    peer;
    option;
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessagePeerVote';
      this.constructorId = 3066834268;
      this.subclassOfId = 2244112898;
      this._slots = ['peer', 'option', 'date'];
      this.peer = params.peer;
      this.option = params.option;
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let option = await Primitive.Bytes.read(b);
      let date = await Primitive.Int.read(b);
      return new Raw2.MessagePeerVote({ peer, option, date });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.option !== void 0) {
        b.write(Primitive.Bytes.write(this.option));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.MessagePeerVote = MessagePeerVote;
  class MessagePeerVoteInputOption extends TLObject {
    peer;
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessagePeerVoteInputOption';
      this.constructorId = 1959634180;
      this.subclassOfId = 2244112898;
      this._slots = ['peer', 'date'];
      this.peer = params.peer;
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let date = await Primitive.Int.read(b);
      return new Raw2.MessagePeerVoteInputOption({ peer, date });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.MessagePeerVoteInputOption = MessagePeerVoteInputOption;
  class MessagePeerVoteMultiple extends TLObject {
    peer;
    options;
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MessagePeerVoteMultiple';
      this.constructorId = 1177089766;
      this.subclassOfId = 2244112898;
      this._slots = ['peer', 'options', 'date'];
      this.peer = params.peer;
      this.options = params.options;
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let options = await TLObject.read(b, Primitive.Bytes);
      let date = await Primitive.Int.read(b);
      return new Raw2.MessagePeerVoteMultiple({ peer, options, date });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.options) {
        b.write(Primitive.Vector.write(this.options, Primitive.Bytes));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.MessagePeerVoteMultiple = MessagePeerVoteMultiple;
  class StoryViews extends TLObject {
    hasViewers;
    viewsCount;
    forwardsCount;
    reactions;
    reactionsCount;
    recentViewers;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StoryViews';
      this.constructorId = 2371443926;
      this.subclassOfId = 1424272486;
      this._slots = [
        'hasViewers',
        'viewsCount',
        'forwardsCount',
        'reactions',
        'reactionsCount',
        'recentViewers',
      ];
      this.hasViewers = params.hasViewers;
      this.viewsCount = params.viewsCount;
      this.forwardsCount = params.forwardsCount;
      this.reactions = params.reactions;
      this.reactionsCount = params.reactionsCount;
      this.recentViewers = params.recentViewers;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let hasViewers = flags & (1 << 1) ? true : false;
      let viewsCount = await Primitive.Int.read(b);
      let forwardsCount = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      let reactions = flags & (1 << 3) ? await TLObject.read(b) : [];
      let reactionsCount = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
      let recentViewers = flags & (1 << 0) ? await TLObject.read(b, Primitive.Long) : [];
      return new Raw2.StoryViews({
        hasViewers,
        viewsCount,
        forwardsCount,
        reactions,
        reactionsCount,
        recentViewers,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.hasViewers ? 1 << 1 : 0;
      flags |= this.forwardsCount !== void 0 ? 1 << 2 : 0;
      flags |= this.reactions ? 1 << 3 : 0;
      flags |= this.reactionsCount !== void 0 ? 1 << 4 : 0;
      flags |= this.recentViewers ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.viewsCount !== void 0) {
        b.write(Primitive.Int.write(this.viewsCount));
      }
      if (this.forwardsCount !== void 0) {
        b.write(Primitive.Int.write(this.forwardsCount));
      }
      if (this.reactions) {
        b.write(Primitive.Vector.write(this.reactions));
      }
      if (this.reactionsCount !== void 0) {
        b.write(Primitive.Int.write(this.reactionsCount));
      }
      if (this.recentViewers) {
        b.write(Primitive.Vector.write(this.recentViewers, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.StoryViews = StoryViews;
  class StoryItemDeleted extends TLObject {
    id;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StoryItemDeleted';
      this.constructorId = 1374088783;
      this.subclassOfId = 3564613939;
      this._slots = ['id'];
      this.id = params.id;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Int.read(b);
      return new Raw2.StoryItemDeleted({ id });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      return b.buffer;
    }
  }
  Raw2.StoryItemDeleted = StoryItemDeleted;
  class StoryItemSkipped extends TLObject {
    closeFriends;
    id;
    date;
    expireDate;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StoryItemSkipped';
      this.constructorId = 4289579283;
      this.subclassOfId = 3564613939;
      this._slots = ['closeFriends', 'id', 'date', 'expireDate'];
      this.closeFriends = params.closeFriends;
      this.id = params.id;
      this.date = params.date;
      this.expireDate = params.expireDate;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let closeFriends = flags & (1 << 8) ? true : false;
      let id = await Primitive.Int.read(b);
      let date = await Primitive.Int.read(b);
      let expireDate = await Primitive.Int.read(b);
      return new Raw2.StoryItemSkipped({
        closeFriends,
        id,
        date,
        expireDate,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.closeFriends ? 1 << 8 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.expireDate !== void 0) {
        b.write(Primitive.Int.write(this.expireDate));
      }
      return b.buffer;
    }
  }
  Raw2.StoryItemSkipped = StoryItemSkipped;
  class StoryItem extends TLObject {
    pinned;
    public;
    closeFriends;
    min;
    noforwards;
    edited;
    contacts;
    selectedContacts;
    out;
    id;
    date;
    fromId;
    fwdFrom;
    expireDate;
    caption;
    entities;
    media;
    mediaAreas;
    privacy;
    views;
    sentReaction;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StoryItem';
      this.constructorId = 2041735716;
      this.subclassOfId = 3564613939;
      this._slots = [
        'pinned',
        'public',
        'closeFriends',
        'min',
        'noforwards',
        'edited',
        'contacts',
        'selectedContacts',
        'out',
        'id',
        'date',
        'fromId',
        'fwdFrom',
        'expireDate',
        'caption',
        'entities',
        'media',
        'mediaAreas',
        'privacy',
        'views',
        'sentReaction',
      ];
      this.pinned = params.pinned;
      this.public = params.public;
      this.closeFriends = params.closeFriends;
      this.min = params.min;
      this.noforwards = params.noforwards;
      this.edited = params.edited;
      this.contacts = params.contacts;
      this.selectedContacts = params.selectedContacts;
      this.out = params.out;
      this.id = params.id;
      this.date = params.date;
      this.fromId = params.fromId;
      this.fwdFrom = params.fwdFrom;
      this.expireDate = params.expireDate;
      this.caption = params.caption;
      this.entities = params.entities;
      this.media = params.media;
      this.mediaAreas = params.mediaAreas;
      this.privacy = params.privacy;
      this.views = params.views;
      this.sentReaction = params.sentReaction;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let pinned = flags & (1 << 5) ? true : false;
      let _public = flags & (1 << 7) ? true : false;
      let closeFriends = flags & (1 << 8) ? true : false;
      let min = flags & (1 << 9) ? true : false;
      let noforwards = flags & (1 << 10) ? true : false;
      let edited = flags & (1 << 11) ? true : false;
      let contacts2 = flags & (1 << 12) ? true : false;
      let selectedContacts = flags & (1 << 13) ? true : false;
      let out = flags & (1 << 16) ? true : false;
      let id = await Primitive.Int.read(b);
      let date = await Primitive.Int.read(b);
      let fromId = flags & (1 << 18) ? await TLObject.read(b) : void 0;
      let fwdFrom = flags & (1 << 17) ? await TLObject.read(b) : void 0;
      let expireDate = await Primitive.Int.read(b);
      let caption = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let entities = flags & (1 << 1) ? await TLObject.read(b) : [];
      let media = await TLObject.read(b);
      let mediaAreas = flags & (1 << 14) ? await TLObject.read(b) : [];
      let privacy = flags & (1 << 2) ? await TLObject.read(b) : [];
      let views = flags & (1 << 3) ? await TLObject.read(b) : void 0;
      let sentReaction = flags & (1 << 15) ? await TLObject.read(b) : void 0;
      return new Raw2.StoryItem({
        pinned,
        public: _public,
        closeFriends,
        min,
        noforwards,
        edited,
        contacts: contacts2,
        selectedContacts,
        out,
        id,
        date,
        fromId,
        fwdFrom,
        expireDate,
        caption,
        entities,
        media,
        mediaAreas,
        privacy,
        views,
        sentReaction,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.pinned ? 1 << 5 : 0;
      flags |= this.public ? 1 << 7 : 0;
      flags |= this.closeFriends ? 1 << 8 : 0;
      flags |= this.min ? 1 << 9 : 0;
      flags |= this.noforwards ? 1 << 10 : 0;
      flags |= this.edited ? 1 << 11 : 0;
      flags |= this.contacts ? 1 << 12 : 0;
      flags |= this.selectedContacts ? 1 << 13 : 0;
      flags |= this.out ? 1 << 16 : 0;
      flags |= this.fromId !== void 0 ? 1 << 18 : 0;
      flags |= this.fwdFrom !== void 0 ? 1 << 17 : 0;
      flags |= this.caption !== void 0 ? 1 << 0 : 0;
      flags |= this.entities ? 1 << 1 : 0;
      flags |= this.mediaAreas ? 1 << 14 : 0;
      flags |= this.privacy ? 1 << 2 : 0;
      flags |= this.views !== void 0 ? 1 << 3 : 0;
      flags |= this.sentReaction !== void 0 ? 1 << 15 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.Int.write(this.id));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.fromId !== void 0) {
        b.write(this.fromId.write());
      }
      if (this.fwdFrom !== void 0) {
        b.write(this.fwdFrom.write());
      }
      if (this.expireDate !== void 0) {
        b.write(Primitive.Int.write(this.expireDate));
      }
      if (this.caption !== void 0) {
        b.write(Primitive.String.write(this.caption));
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      if (this.media !== void 0) {
        b.write(this.media.write());
      }
      if (this.mediaAreas) {
        b.write(Primitive.Vector.write(this.mediaAreas));
      }
      if (this.privacy) {
        b.write(Primitive.Vector.write(this.privacy));
      }
      if (this.views !== void 0) {
        b.write(this.views.write());
      }
      if (this.sentReaction !== void 0) {
        b.write(this.sentReaction.write());
      }
      return b.buffer;
    }
  }
  Raw2.StoryItem = StoryItem;
  class StoryView extends TLObject {
    blocked;
    blockedMyStoriesFrom;
    userId;
    date;
    reaction;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StoryView';
      this.constructorId = 2965236421;
      this.subclassOfId = 898711459;
      this._slots = ['blocked', 'blockedMyStoriesFrom', 'userId', 'date', 'reaction'];
      this.blocked = params.blocked;
      this.blockedMyStoriesFrom = params.blockedMyStoriesFrom;
      this.userId = params.userId;
      this.date = params.date;
      this.reaction = params.reaction;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let blocked = flags & (1 << 0) ? true : false;
      let blockedMyStoriesFrom = flags & (1 << 1) ? true : false;
      let userId = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let reaction = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.StoryView({
        blocked,
        blockedMyStoriesFrom,
        userId,
        date,
        reaction,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.blocked ? 1 << 0 : 0;
      flags |= this.blockedMyStoriesFrom ? 1 << 1 : 0;
      flags |= this.reaction !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.reaction !== void 0) {
        b.write(this.reaction.write());
      }
      return b.buffer;
    }
  }
  Raw2.StoryView = StoryView;
  class StoryViewPublicForward extends TLObject {
    blocked;
    blockedMyStoriesFrom;
    message;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StoryViewPublicForward';
      this.constructorId = 2424530699;
      this.subclassOfId = 898711459;
      this._slots = ['blocked', 'blockedMyStoriesFrom', 'message'];
      this.blocked = params.blocked;
      this.blockedMyStoriesFrom = params.blockedMyStoriesFrom;
      this.message = params.message;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let blocked = flags & (1 << 0) ? true : false;
      let blockedMyStoriesFrom = flags & (1 << 1) ? true : false;
      let message = await TLObject.read(b);
      return new Raw2.StoryViewPublicForward({
        blocked,
        blockedMyStoriesFrom,
        message,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.blocked ? 1 << 0 : 0;
      flags |= this.blockedMyStoriesFrom ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.message !== void 0) {
        b.write(this.message.write());
      }
      return b.buffer;
    }
  }
  Raw2.StoryViewPublicForward = StoryViewPublicForward;
  class StoryViewPublicRepost extends TLObject {
    blocked;
    blockedMyStoriesFrom;
    peerId;
    story;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StoryViewPublicRepost';
      this.constructorId = 3178549065;
      this.subclassOfId = 898711459;
      this._slots = ['blocked', 'blockedMyStoriesFrom', 'peerId', 'story'];
      this.blocked = params.blocked;
      this.blockedMyStoriesFrom = params.blockedMyStoriesFrom;
      this.peerId = params.peerId;
      this.story = params.story;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let blocked = flags & (1 << 0) ? true : false;
      let blockedMyStoriesFrom = flags & (1 << 1) ? true : false;
      let peerId = await TLObject.read(b);
      let story = await TLObject.read(b);
      return new Raw2.StoryViewPublicRepost({
        blocked,
        blockedMyStoriesFrom,
        peerId,
        story,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.blocked ? 1 << 0 : 0;
      flags |= this.blockedMyStoriesFrom ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peerId !== void 0) {
        b.write(this.peerId.write());
      }
      if (this.story !== void 0) {
        b.write(this.story.write());
      }
      return b.buffer;
    }
  }
  Raw2.StoryViewPublicRepost = StoryViewPublicRepost;
  class InputReplyToMessage extends TLObject {
    replyToMsgId;
    topMsgId;
    replyToPeerId;
    quoteText;
    quoteEntities;
    quoteOffset;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputReplyToMessage';
      this.constructorId = 583071445;
      this.subclassOfId = 2356220701;
      this._slots = [
        'replyToMsgId',
        'topMsgId',
        'replyToPeerId',
        'quoteText',
        'quoteEntities',
        'quoteOffset',
      ];
      this.replyToMsgId = params.replyToMsgId;
      this.topMsgId = params.topMsgId;
      this.replyToPeerId = params.replyToPeerId;
      this.quoteText = params.quoteText;
      this.quoteEntities = params.quoteEntities;
      this.quoteOffset = params.quoteOffset;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let replyToMsgId = await Primitive.Int.read(b);
      let topMsgId = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let replyToPeerId = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      let quoteText = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
      let quoteEntities = flags & (1 << 3) ? await TLObject.read(b) : [];
      let quoteOffset = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.InputReplyToMessage({
        replyToMsgId,
        topMsgId,
        replyToPeerId,
        quoteText,
        quoteEntities,
        quoteOffset,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.topMsgId !== void 0 ? 1 << 0 : 0;
      flags |= this.replyToPeerId !== void 0 ? 1 << 1 : 0;
      flags |= this.quoteText !== void 0 ? 1 << 2 : 0;
      flags |= this.quoteEntities ? 1 << 3 : 0;
      flags |= this.quoteOffset !== void 0 ? 1 << 4 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.replyToMsgId !== void 0) {
        b.write(Primitive.Int.write(this.replyToMsgId));
      }
      if (this.topMsgId !== void 0) {
        b.write(Primitive.Int.write(this.topMsgId));
      }
      if (this.replyToPeerId !== void 0) {
        b.write(this.replyToPeerId.write());
      }
      if (this.quoteText !== void 0) {
        b.write(Primitive.String.write(this.quoteText));
      }
      if (this.quoteEntities) {
        b.write(Primitive.Vector.write(this.quoteEntities));
      }
      if (this.quoteOffset !== void 0) {
        b.write(Primitive.Int.write(this.quoteOffset));
      }
      return b.buffer;
    }
  }
  Raw2.InputReplyToMessage = InputReplyToMessage;
  class InputReplyToStory extends TLObject {
    peer;
    storyId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputReplyToStory';
      this.constructorId = 1484862010;
      this.subclassOfId = 2356220701;
      this._slots = ['peer', 'storyId'];
      this.peer = params.peer;
      this.storyId = params.storyId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let storyId = await Primitive.Int.read(b);
      return new Raw2.InputReplyToStory({ peer, storyId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.storyId !== void 0) {
        b.write(Primitive.Int.write(this.storyId));
      }
      return b.buffer;
    }
  }
  Raw2.InputReplyToStory = InputReplyToStory;
  class ExportedStoryLink extends TLObject {
    link;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ExportedStoryLink';
      this.constructorId = 1070138683;
      this.subclassOfId = 264585638;
      this._slots = ['link'];
      this.link = params.link;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let link = await Primitive.String.read(b);
      return new Raw2.ExportedStoryLink({ link });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.link !== void 0) {
        b.write(Primitive.String.write(this.link));
      }
      return b.buffer;
    }
  }
  Raw2.ExportedStoryLink = ExportedStoryLink;
  class StoriesStealthMode extends TLObject {
    activeUntilDate;
    cooldownUntilDate;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StoriesStealthMode';
      this.constructorId = 1898850301;
      this.subclassOfId = 49120257;
      this._slots = ['activeUntilDate', 'cooldownUntilDate'];
      this.activeUntilDate = params.activeUntilDate;
      this.cooldownUntilDate = params.cooldownUntilDate;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let activeUntilDate = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let cooldownUntilDate = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.StoriesStealthMode({
        activeUntilDate,
        cooldownUntilDate,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.activeUntilDate !== void 0 ? 1 << 0 : 0;
      flags |= this.cooldownUntilDate !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.activeUntilDate !== void 0) {
        b.write(Primitive.Int.write(this.activeUntilDate));
      }
      if (this.cooldownUntilDate !== void 0) {
        b.write(Primitive.Int.write(this.cooldownUntilDate));
      }
      return b.buffer;
    }
  }
  Raw2.StoriesStealthMode = StoriesStealthMode;
  class MediaAreaCoordinates extends TLObject {
    x;
    y;
    w;
    h;
    rotation;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MediaAreaCoordinates';
      this.constructorId = 64088654;
      this.subclassOfId = 491031609;
      this._slots = ['x', 'y', 'w', 'h', 'rotation'];
      this.x = params.x;
      this.y = params.y;
      this.w = params.w;
      this.h = params.h;
      this.rotation = params.rotation;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let x = await Primitive.Double.read(b);
      let y = await Primitive.Double.read(b);
      let w = await Primitive.Double.read(b);
      let h = await Primitive.Double.read(b);
      let rotation = await Primitive.Double.read(b);
      return new Raw2.MediaAreaCoordinates({ x, y, w, h, rotation });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.x !== void 0) {
        b.write(Primitive.Double.write(this.x));
      }
      if (this.y !== void 0) {
        b.write(Primitive.Double.write(this.y));
      }
      if (this.w !== void 0) {
        b.write(Primitive.Double.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Double.write(this.h));
      }
      if (this.rotation !== void 0) {
        b.write(Primitive.Double.write(this.rotation));
      }
      return b.buffer;
    }
  }
  Raw2.MediaAreaCoordinates = MediaAreaCoordinates;
  class MediaAreaVenue extends TLObject {
    coordinates;
    geo;
    title;
    address;
    provider;
    venueId;
    venueType;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MediaAreaVenue';
      this.constructorId = 3196246940;
      this.subclassOfId = 4084038642;
      this._slots = ['coordinates', 'geo', 'title', 'address', 'provider', 'venueId', 'venueType'];
      this.coordinates = params.coordinates;
      this.geo = params.geo;
      this.title = params.title;
      this.address = params.address;
      this.provider = params.provider;
      this.venueId = params.venueId;
      this.venueType = params.venueType;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let coordinates = await TLObject.read(b);
      let geo = await TLObject.read(b);
      let title = await Primitive.String.read(b);
      let address = await Primitive.String.read(b);
      let provider = await Primitive.String.read(b);
      let venueId = await Primitive.String.read(b);
      let venueType = await Primitive.String.read(b);
      return new Raw2.MediaAreaVenue({
        coordinates,
        geo,
        title,
        address,
        provider,
        venueId,
        venueType,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.coordinates !== void 0) {
        b.write(this.coordinates.write());
      }
      if (this.geo !== void 0) {
        b.write(this.geo.write());
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.address !== void 0) {
        b.write(Primitive.String.write(this.address));
      }
      if (this.provider !== void 0) {
        b.write(Primitive.String.write(this.provider));
      }
      if (this.venueId !== void 0) {
        b.write(Primitive.String.write(this.venueId));
      }
      if (this.venueType !== void 0) {
        b.write(Primitive.String.write(this.venueType));
      }
      return b.buffer;
    }
  }
  Raw2.MediaAreaVenue = MediaAreaVenue;
  class InputMediaAreaVenue extends TLObject {
    coordinates;
    queryId;
    resultId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMediaAreaVenue';
      this.constructorId = 2994872703;
      this.subclassOfId = 4084038642;
      this._slots = ['coordinates', 'queryId', 'resultId'];
      this.coordinates = params.coordinates;
      this.queryId = params.queryId;
      this.resultId = params.resultId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let coordinates = await TLObject.read(b);
      let queryId = await Primitive.Long.read(b);
      let resultId = await Primitive.String.read(b);
      return new Raw2.InputMediaAreaVenue({
        coordinates,
        queryId,
        resultId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.coordinates !== void 0) {
        b.write(this.coordinates.write());
      }
      if (this.queryId !== void 0) {
        b.write(Primitive.Long.write(this.queryId));
      }
      if (this.resultId !== void 0) {
        b.write(Primitive.String.write(this.resultId));
      }
      return b.buffer;
    }
  }
  Raw2.InputMediaAreaVenue = InputMediaAreaVenue;
  class MediaAreaGeoPoint extends TLObject {
    coordinates;
    geo;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MediaAreaGeoPoint';
      this.constructorId = 3750443810;
      this.subclassOfId = 4084038642;
      this._slots = ['coordinates', 'geo'];
      this.coordinates = params.coordinates;
      this.geo = params.geo;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let coordinates = await TLObject.read(b);
      let geo = await TLObject.read(b);
      return new Raw2.MediaAreaGeoPoint({ coordinates, geo });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.coordinates !== void 0) {
        b.write(this.coordinates.write());
      }
      if (this.geo !== void 0) {
        b.write(this.geo.write());
      }
      return b.buffer;
    }
  }
  Raw2.MediaAreaGeoPoint = MediaAreaGeoPoint;
  class MediaAreaSuggestedReaction extends TLObject {
    dark;
    flipped;
    coordinates;
    reaction;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MediaAreaSuggestedReaction';
      this.constructorId = 340088945;
      this.subclassOfId = 4084038642;
      this._slots = ['dark', 'flipped', 'coordinates', 'reaction'];
      this.dark = params.dark;
      this.flipped = params.flipped;
      this.coordinates = params.coordinates;
      this.reaction = params.reaction;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let dark = flags & (1 << 0) ? true : false;
      let flipped = flags & (1 << 1) ? true : false;
      let coordinates = await TLObject.read(b);
      let reaction = await TLObject.read(b);
      return new Raw2.MediaAreaSuggestedReaction({
        dark,
        flipped,
        coordinates,
        reaction,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.dark ? 1 << 0 : 0;
      flags |= this.flipped ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.coordinates !== void 0) {
        b.write(this.coordinates.write());
      }
      if (this.reaction !== void 0) {
        b.write(this.reaction.write());
      }
      return b.buffer;
    }
  }
  Raw2.MediaAreaSuggestedReaction = MediaAreaSuggestedReaction;
  class MediaAreaChannelPost extends TLObject {
    coordinates;
    channelId;
    msgId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MediaAreaChannelPost';
      this.constructorId = 1996756655;
      this.subclassOfId = 4084038642;
      this._slots = ['coordinates', 'channelId', 'msgId'];
      this.coordinates = params.coordinates;
      this.channelId = params.channelId;
      this.msgId = params.msgId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let coordinates = await TLObject.read(b);
      let channelId = await Primitive.Long.read(b);
      let msgId = await Primitive.Int.read(b);
      return new Raw2.MediaAreaChannelPost({
        coordinates,
        channelId,
        msgId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.coordinates !== void 0) {
        b.write(this.coordinates.write());
      }
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.msgId !== void 0) {
        b.write(Primitive.Int.write(this.msgId));
      }
      return b.buffer;
    }
  }
  Raw2.MediaAreaChannelPost = MediaAreaChannelPost;
  class InputMediaAreaChannelPost extends TLObject {
    coordinates;
    channel;
    msgId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputMediaAreaChannelPost';
      this.constructorId = 577893055;
      this.subclassOfId = 4084038642;
      this._slots = ['coordinates', 'channel', 'msgId'];
      this.coordinates = params.coordinates;
      this.channel = params.channel;
      this.msgId = params.msgId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let coordinates = await TLObject.read(b);
      let channel = await TLObject.read(b);
      let msgId = await Primitive.Int.read(b);
      return new Raw2.InputMediaAreaChannelPost({
        coordinates,
        channel,
        msgId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.coordinates !== void 0) {
        b.write(this.coordinates.write());
      }
      if (this.channel !== void 0) {
        b.write(this.channel.write());
      }
      if (this.msgId !== void 0) {
        b.write(Primitive.Int.write(this.msgId));
      }
      return b.buffer;
    }
  }
  Raw2.InputMediaAreaChannelPost = InputMediaAreaChannelPost;
  class PeerStories extends TLObject {
    peer;
    maxReadId;
    stories;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PeerStories';
      this.constructorId = 2587224473;
      this.subclassOfId = 304908871;
      this._slots = ['peer', 'maxReadId', 'stories'];
      this.peer = params.peer;
      this.maxReadId = params.maxReadId;
      this.stories = params.stories;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let peer = await TLObject.read(b);
      let maxReadId = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let stories2 = await TLObject.read(b);
      return new Raw2.PeerStories({ peer, maxReadId, stories: stories2 });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.maxReadId !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.maxReadId !== void 0) {
        b.write(Primitive.Int.write(this.maxReadId));
      }
      if (this.stories) {
        b.write(Primitive.Vector.write(this.stories));
      }
      return b.buffer;
    }
  }
  Raw2.PeerStories = PeerStories;
  class PremiumGiftCodeOption extends TLObject {
    users;
    months;
    storeProduct;
    storeQuantity;
    currency;
    amount;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PremiumGiftCodeOption';
      this.constructorId = 629052971;
      this.subclassOfId = 2216898;
      this._slots = ['users', 'months', 'storeProduct', 'storeQuantity', 'currency', 'amount'];
      this.users = params.users;
      this.months = params.months;
      this.storeProduct = params.storeProduct;
      this.storeQuantity = params.storeQuantity;
      this.currency = params.currency;
      this.amount = params.amount;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let users2 = await Primitive.Int.read(b);
      let months = await Primitive.Int.read(b);
      let storeProduct = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let storeQuantity = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      let currency = await Primitive.String.read(b);
      let amount = await Primitive.Long.read(b);
      return new Raw2.PremiumGiftCodeOption({
        users: users2,
        months,
        storeProduct,
        storeQuantity,
        currency,
        amount,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.storeProduct !== void 0 ? 1 << 0 : 0;
      flags |= this.storeQuantity !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.users !== void 0) {
        b.write(Primitive.Int.write(this.users));
      }
      if (this.months !== void 0) {
        b.write(Primitive.Int.write(this.months));
      }
      if (this.storeProduct !== void 0) {
        b.write(Primitive.String.write(this.storeProduct));
      }
      if (this.storeQuantity !== void 0) {
        b.write(Primitive.Int.write(this.storeQuantity));
      }
      if (this.currency !== void 0) {
        b.write(Primitive.String.write(this.currency));
      }
      if (this.amount !== void 0) {
        b.write(Primitive.Long.write(this.amount));
      }
      return b.buffer;
    }
  }
  Raw2.PremiumGiftCodeOption = PremiumGiftCodeOption;
  class PrepaidGiveaway extends TLObject {
    id;
    months;
    quantity;
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PrepaidGiveaway';
      this.constructorId = 2991824212;
      this.subclassOfId = 3997067136;
      this._slots = ['id', 'months', 'quantity', 'date'];
      this.id = params.id;
      this.months = params.months;
      this.quantity = params.quantity;
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let months = await Primitive.Int.read(b);
      let quantity = await Primitive.Int.read(b);
      let date = await Primitive.Int.read(b);
      return new Raw2.PrepaidGiveaway({ id, months, quantity, date });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.months !== void 0) {
        b.write(Primitive.Int.write(this.months));
      }
      if (this.quantity !== void 0) {
        b.write(Primitive.Int.write(this.quantity));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.PrepaidGiveaway = PrepaidGiveaway;
  class Boost extends TLObject {
    gift;
    giveaway;
    unclaimed;
    id;
    userId;
    giveawayMsgId;
    date;
    expires;
    usedGiftSlug;
    multiplier;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Boost';
      this.constructorId = 706514033;
      this.subclassOfId = 2544175212;
      this._slots = [
        'gift',
        'giveaway',
        'unclaimed',
        'id',
        'userId',
        'giveawayMsgId',
        'date',
        'expires',
        'usedGiftSlug',
        'multiplier',
      ];
      this.gift = params.gift;
      this.giveaway = params.giveaway;
      this.unclaimed = params.unclaimed;
      this.id = params.id;
      this.userId = params.userId;
      this.giveawayMsgId = params.giveawayMsgId;
      this.date = params.date;
      this.expires = params.expires;
      this.usedGiftSlug = params.usedGiftSlug;
      this.multiplier = params.multiplier;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let gift = flags & (1 << 1) ? true : false;
      let giveaway = flags & (1 << 2) ? true : false;
      let unclaimed = flags & (1 << 3) ? true : false;
      let id = await Primitive.String.read(b);
      let userId = flags & (1 << 0) ? await Primitive.Long.read(b) : void 0;
      let giveawayMsgId = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      let date = await Primitive.Int.read(b);
      let expires = await Primitive.Int.read(b);
      let usedGiftSlug = flags & (1 << 4) ? await Primitive.String.read(b) : void 0;
      let multiplier = flags & (1 << 5) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.Boost({
        gift,
        giveaway,
        unclaimed,
        id,
        userId,
        giveawayMsgId,
        date,
        expires,
        usedGiftSlug,
        multiplier,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.gift ? 1 << 1 : 0;
      flags |= this.giveaway ? 1 << 2 : 0;
      flags |= this.unclaimed ? 1 << 3 : 0;
      flags |= this.userId !== void 0 ? 1 << 0 : 0;
      flags |= this.giveawayMsgId !== void 0 ? 1 << 2 : 0;
      flags |= this.usedGiftSlug !== void 0 ? 1 << 4 : 0;
      flags |= this.multiplier !== void 0 ? 1 << 5 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.id !== void 0) {
        b.write(Primitive.String.write(this.id));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.giveawayMsgId !== void 0) {
        b.write(Primitive.Int.write(this.giveawayMsgId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.expires !== void 0) {
        b.write(Primitive.Int.write(this.expires));
      }
      if (this.usedGiftSlug !== void 0) {
        b.write(Primitive.String.write(this.usedGiftSlug));
      }
      if (this.multiplier !== void 0) {
        b.write(Primitive.Int.write(this.multiplier));
      }
      return b.buffer;
    }
  }
  Raw2.Boost = Boost;
  class MyBoost extends TLObject {
    slot;
    peer;
    date;
    expires;
    cooldownUntilDate;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MyBoost';
      this.constructorId = 3293069660;
      this.subclassOfId = 3306842303;
      this._slots = ['slot', 'peer', 'date', 'expires', 'cooldownUntilDate'];
      this.slot = params.slot;
      this.peer = params.peer;
      this.date = params.date;
      this.expires = params.expires;
      this.cooldownUntilDate = params.cooldownUntilDate;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let slot = await Primitive.Int.read(b);
      let peer = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let date = await Primitive.Int.read(b);
      let expires = await Primitive.Int.read(b);
      let cooldownUntilDate = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.MyBoost({
        slot,
        peer,
        date,
        expires,
        cooldownUntilDate,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.peer !== void 0 ? 1 << 0 : 0;
      flags |= this.cooldownUntilDate !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.slot !== void 0) {
        b.write(Primitive.Int.write(this.slot));
      }
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.expires !== void 0) {
        b.write(Primitive.Int.write(this.expires));
      }
      if (this.cooldownUntilDate !== void 0) {
        b.write(Primitive.Int.write(this.cooldownUntilDate));
      }
      return b.buffer;
    }
  }
  Raw2.MyBoost = MyBoost;
  class StoryFwdHeader extends TLObject {
    modified;
    from;
    fromName;
    storyId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StoryFwdHeader';
      this.constructorId = 3089555792;
      this.subclassOfId = 2863706412;
      this._slots = ['modified', 'from', 'fromName', 'storyId'];
      this.modified = params.modified;
      this.from = params.from;
      this.fromName = params.fromName;
      this.storyId = params.storyId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let modified = flags & (1 << 3) ? true : false;
      let from = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let fromName = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let storyId = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.StoryFwdHeader({
        modified,
        from,
        fromName,
        storyId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.modified ? 1 << 3 : 0;
      flags |= this.from !== void 0 ? 1 << 0 : 0;
      flags |= this.fromName !== void 0 ? 1 << 1 : 0;
      flags |= this.storyId !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.from !== void 0) {
        b.write(this.from.write());
      }
      if (this.fromName !== void 0) {
        b.write(Primitive.String.write(this.fromName));
      }
      if (this.storyId !== void 0) {
        b.write(Primitive.Int.write(this.storyId));
      }
      return b.buffer;
    }
  }
  Raw2.StoryFwdHeader = StoryFwdHeader;
  class PostInteractionCountersMessage extends TLObject {
    msgId;
    views;
    forwards;
    reactions;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PostInteractionCountersMessage';
      this.constructorId = 3875901055;
      this.subclassOfId = 1850361243;
      this._slots = ['msgId', 'views', 'forwards', 'reactions'];
      this.msgId = params.msgId;
      this.views = params.views;
      this.forwards = params.forwards;
      this.reactions = params.reactions;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let msgId = await Primitive.Int.read(b);
      let views = await Primitive.Int.read(b);
      let forwards = await Primitive.Int.read(b);
      let reactions = await Primitive.Int.read(b);
      return new Raw2.PostInteractionCountersMessage({
        msgId,
        views,
        forwards,
        reactions,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.msgId !== void 0) {
        b.write(Primitive.Int.write(this.msgId));
      }
      if (this.views !== void 0) {
        b.write(Primitive.Int.write(this.views));
      }
      if (this.forwards !== void 0) {
        b.write(Primitive.Int.write(this.forwards));
      }
      if (this.reactions !== void 0) {
        b.write(Primitive.Int.write(this.reactions));
      }
      return b.buffer;
    }
  }
  Raw2.PostInteractionCountersMessage = PostInteractionCountersMessage;
  class PostInteractionCountersStory extends TLObject {
    storyId;
    views;
    forwards;
    reactions;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PostInteractionCountersStory';
      this.constructorId = 2319978023;
      this.subclassOfId = 1850361243;
      this._slots = ['storyId', 'views', 'forwards', 'reactions'];
      this.storyId = params.storyId;
      this.views = params.views;
      this.forwards = params.forwards;
      this.reactions = params.reactions;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let storyId = await Primitive.Int.read(b);
      let views = await Primitive.Int.read(b);
      let forwards = await Primitive.Int.read(b);
      let reactions = await Primitive.Int.read(b);
      return new Raw2.PostInteractionCountersStory({
        storyId,
        views,
        forwards,
        reactions,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.storyId !== void 0) {
        b.write(Primitive.Int.write(this.storyId));
      }
      if (this.views !== void 0) {
        b.write(Primitive.Int.write(this.views));
      }
      if (this.forwards !== void 0) {
        b.write(Primitive.Int.write(this.forwards));
      }
      if (this.reactions !== void 0) {
        b.write(Primitive.Int.write(this.reactions));
      }
      return b.buffer;
    }
  }
  Raw2.PostInteractionCountersStory = PostInteractionCountersStory;
  class PublicForwardMessage extends TLObject {
    message;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PublicForwardMessage';
      this.constructorId = 32685898;
      this.subclassOfId = 1653609939;
      this._slots = ['message'];
      this.message = params.message;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let message = await TLObject.read(b);
      return new Raw2.PublicForwardMessage({ message });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.message !== void 0) {
        b.write(this.message.write());
      }
      return b.buffer;
    }
  }
  Raw2.PublicForwardMessage = PublicForwardMessage;
  class PublicForwardStory extends TLObject {
    peer;
    story;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PublicForwardStory';
      this.constructorId = 3992169936;
      this.subclassOfId = 1653609939;
      this._slots = ['peer', 'story'];
      this.peer = params.peer;
      this.story = params.story;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peer = await TLObject.read(b);
      let story = await TLObject.read(b);
      return new Raw2.PublicForwardStory({ peer, story });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.story !== void 0) {
        b.write(this.story.write());
      }
      return b.buffer;
    }
  }
  Raw2.PublicForwardStory = PublicForwardStory;
  class PeerColor extends TLObject {
    color;
    backgroundEmojiId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PeerColor';
      this.constructorId = 3041614543;
      this.subclassOfId = 4068582527;
      this._slots = ['color', 'backgroundEmojiId'];
      this.color = params.color;
      this.backgroundEmojiId = params.backgroundEmojiId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let color = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      let backgroundEmojiId = flags & (1 << 1) ? await Primitive.Long.read(b) : void 0;
      return new Raw2.PeerColor({ color, backgroundEmojiId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.color !== void 0 ? 1 << 0 : 0;
      flags |= this.backgroundEmojiId !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.color !== void 0) {
        b.write(Primitive.Int.write(this.color));
      }
      if (this.backgroundEmojiId !== void 0) {
        b.write(Primitive.Long.write(this.backgroundEmojiId));
      }
      return b.buffer;
    }
  }
  Raw2.PeerColor = PeerColor;
  class StoryReaction extends TLObject {
    peerId;
    date;
    reaction;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StoryReaction';
      this.constructorId = 1620104917;
      this.subclassOfId = 3379257259;
      this._slots = ['peerId', 'date', 'reaction'];
      this.peerId = params.peerId;
      this.date = params.date;
      this.reaction = params.reaction;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peerId = await TLObject.read(b);
      let date = await Primitive.Int.read(b);
      let reaction = await TLObject.read(b);
      return new Raw2.StoryReaction({ peerId, date, reaction });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peerId !== void 0) {
        b.write(this.peerId.write());
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.reaction !== void 0) {
        b.write(this.reaction.write());
      }
      return b.buffer;
    }
  }
  Raw2.StoryReaction = StoryReaction;
  class StoryReactionPublicForward extends TLObject {
    message;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StoryReactionPublicForward';
      this.constructorId = 3148555843;
      this.subclassOfId = 3379257259;
      this._slots = ['message'];
      this.message = params.message;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let message = await TLObject.read(b);
      return new Raw2.StoryReactionPublicForward({ message });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.message !== void 0) {
        b.write(this.message.write());
      }
      return b.buffer;
    }
  }
  Raw2.StoryReactionPublicForward = StoryReactionPublicForward;
  class StoryReactionPublicRepost extends TLObject {
    peerId;
    story;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'StoryReactionPublicRepost';
      this.constructorId = 3486322451;
      this.subclassOfId = 3379257259;
      this._slots = ['peerId', 'story'];
      this.peerId = params.peerId;
      this.story = params.story;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let peerId = await TLObject.read(b);
      let story = await TLObject.read(b);
      return new Raw2.StoryReactionPublicRepost({ peerId, story });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.peerId !== void 0) {
        b.write(this.peerId.write());
      }
      if (this.story !== void 0) {
        b.write(this.story.write());
      }
      return b.buffer;
    }
  }
  Raw2.StoryReactionPublicRepost = StoryReactionPublicRepost;
  class SavedDialog extends TLObject {
    pinned;
    peer;
    topMessage;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SavedDialog';
      this.constructorId = 3179793260;
      this.subclassOfId = 599418118;
      this._slots = ['pinned', 'peer', 'topMessage'];
      this.pinned = params.pinned;
      this.peer = params.peer;
      this.topMessage = params.topMessage;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let pinned = flags & (1 << 2) ? true : false;
      let peer = await TLObject.read(b);
      let topMessage = await Primitive.Int.read(b);
      return new Raw2.SavedDialog({ pinned, peer, topMessage });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.pinned ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.peer !== void 0) {
        b.write(this.peer.write());
      }
      if (this.topMessage !== void 0) {
        b.write(Primitive.Int.write(this.topMessage));
      }
      return b.buffer;
    }
  }
  Raw2.SavedDialog = SavedDialog;
  class SavedReactionTag extends TLObject {
    reaction;
    title;
    count;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SavedReactionTag';
      this.constructorId = 3413112872;
      this.subclassOfId = 3983021080;
      this._slots = ['reaction', 'title', 'count'];
      this.reaction = params.reaction;
      this.title = params.title;
      this.count = params.count;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let reaction = await TLObject.read(b);
      let title = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let count = await Primitive.Int.read(b);
      return new Raw2.SavedReactionTag({ reaction, title, count });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.title !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.reaction !== void 0) {
        b.write(this.reaction.write());
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.count !== void 0) {
        b.write(Primitive.Int.write(this.count));
      }
      return b.buffer;
    }
  }
  Raw2.SavedReactionTag = SavedReactionTag;
  class OutboxReadDate extends TLObject {
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'OutboxReadDate';
      this.constructorId = 1001931436;
      this.subclassOfId = 1867613126;
      this._slots = ['date'];
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let date = await Primitive.Int.read(b);
      return new Raw2.OutboxReadDate({ date });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.OutboxReadDate = OutboxReadDate;
  class SmsJob extends TLObject {
    jobId;
    phoneNumber;
    text;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SmsJob';
      this.constructorId = 3869372088;
      this.subclassOfId = 522459262;
      this._slots = ['jobId', 'phoneNumber', 'text'];
      this.jobId = params.jobId;
      this.phoneNumber = params.phoneNumber;
      this.text = params.text;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let jobId = await Primitive.String.read(b);
      let phoneNumber = await Primitive.String.read(b);
      let text = await Primitive.String.read(b);
      return new Raw2.SmsJob({ jobId, phoneNumber, text });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.jobId !== void 0) {
        b.write(Primitive.String.write(this.jobId));
      }
      if (this.phoneNumber !== void 0) {
        b.write(Primitive.String.write(this.phoneNumber));
      }
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      return b.buffer;
    }
  }
  Raw2.SmsJob = SmsJob;
  class BusinessWeeklyOpen extends TLObject {
    startMinute;
    endMinute;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BusinessWeeklyOpen';
      this.constructorId = 302717625;
      this.subclassOfId = 406857255;
      this._slots = ['startMinute', 'endMinute'];
      this.startMinute = params.startMinute;
      this.endMinute = params.endMinute;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let startMinute = await Primitive.Int.read(b);
      let endMinute = await Primitive.Int.read(b);
      return new Raw2.BusinessWeeklyOpen({ startMinute, endMinute });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.startMinute !== void 0) {
        b.write(Primitive.Int.write(this.startMinute));
      }
      if (this.endMinute !== void 0) {
        b.write(Primitive.Int.write(this.endMinute));
      }
      return b.buffer;
    }
  }
  Raw2.BusinessWeeklyOpen = BusinessWeeklyOpen;
  class BusinessWorkHours extends TLObject {
    openNow;
    timezoneId;
    weeklyOpen;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BusinessWorkHours';
      this.constructorId = 2358423704;
      this.subclassOfId = 1704962053;
      this._slots = ['openNow', 'timezoneId', 'weeklyOpen'];
      this.openNow = params.openNow;
      this.timezoneId = params.timezoneId;
      this.weeklyOpen = params.weeklyOpen;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let openNow = flags & (1 << 0) ? true : false;
      let timezoneId = await Primitive.String.read(b);
      let weeklyOpen = await TLObject.read(b);
      return new Raw2.BusinessWorkHours({
        openNow,
        timezoneId,
        weeklyOpen,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.openNow ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.timezoneId !== void 0) {
        b.write(Primitive.String.write(this.timezoneId));
      }
      if (this.weeklyOpen) {
        b.write(Primitive.Vector.write(this.weeklyOpen));
      }
      return b.buffer;
    }
  }
  Raw2.BusinessWorkHours = BusinessWorkHours;
  class BusinessLocation extends TLObject {
    geoPoint;
    address;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BusinessLocation';
      this.constructorId = 2891717367;
      this.subclassOfId = 2578238160;
      this._slots = ['geoPoint', 'address'];
      this.geoPoint = params.geoPoint;
      this.address = params.address;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let geoPoint = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let address = await Primitive.String.read(b);
      return new Raw2.BusinessLocation({ geoPoint, address });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.geoPoint !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.geoPoint !== void 0) {
        b.write(this.geoPoint.write());
      }
      if (this.address !== void 0) {
        b.write(Primitive.String.write(this.address));
      }
      return b.buffer;
    }
  }
  Raw2.BusinessLocation = BusinessLocation;
  class InputBusinessRecipients extends TLObject {
    existingChats;
    newChats;
    contacts;
    nonContacts;
    excludeSelected;
    users;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBusinessRecipients';
      this.constructorId = 1871393450;
      this.subclassOfId = 226420031;
      this._slots = [
        'existingChats',
        'newChats',
        'contacts',
        'nonContacts',
        'excludeSelected',
        'users',
      ];
      this.existingChats = params.existingChats;
      this.newChats = params.newChats;
      this.contacts = params.contacts;
      this.nonContacts = params.nonContacts;
      this.excludeSelected = params.excludeSelected;
      this.users = params.users;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let existingChats = flags & (1 << 0) ? true : false;
      let newChats = flags & (1 << 1) ? true : false;
      let contacts2 = flags & (1 << 2) ? true : false;
      let nonContacts = flags & (1 << 3) ? true : false;
      let excludeSelected = flags & (1 << 5) ? true : false;
      let users2 = flags & (1 << 4) ? await TLObject.read(b) : [];
      return new Raw2.InputBusinessRecipients({
        existingChats,
        newChats,
        contacts: contacts2,
        nonContacts,
        excludeSelected,
        users: users2,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.existingChats ? 1 << 0 : 0;
      flags |= this.newChats ? 1 << 1 : 0;
      flags |= this.contacts ? 1 << 2 : 0;
      flags |= this.nonContacts ? 1 << 3 : 0;
      flags |= this.excludeSelected ? 1 << 5 : 0;
      flags |= this.users ? 1 << 4 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.users) {
        b.write(Primitive.Vector.write(this.users));
      }
      return b.buffer;
    }
  }
  Raw2.InputBusinessRecipients = InputBusinessRecipients;
  class BusinessRecipients extends TLObject {
    existingChats;
    newChats;
    contacts;
    nonContacts;
    excludeSelected;
    users;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BusinessRecipients';
      this.constructorId = 554733559;
      this.subclassOfId = 1384459846;
      this._slots = [
        'existingChats',
        'newChats',
        'contacts',
        'nonContacts',
        'excludeSelected',
        'users',
      ];
      this.existingChats = params.existingChats;
      this.newChats = params.newChats;
      this.contacts = params.contacts;
      this.nonContacts = params.nonContacts;
      this.excludeSelected = params.excludeSelected;
      this.users = params.users;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let existingChats = flags & (1 << 0) ? true : false;
      let newChats = flags & (1 << 1) ? true : false;
      let contacts2 = flags & (1 << 2) ? true : false;
      let nonContacts = flags & (1 << 3) ? true : false;
      let excludeSelected = flags & (1 << 5) ? true : false;
      let users2 = flags & (1 << 4) ? await TLObject.read(b, Primitive.Long) : [];
      return new Raw2.BusinessRecipients({
        existingChats,
        newChats,
        contacts: contacts2,
        nonContacts,
        excludeSelected,
        users: users2,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.existingChats ? 1 << 0 : 0;
      flags |= this.newChats ? 1 << 1 : 0;
      flags |= this.contacts ? 1 << 2 : 0;
      flags |= this.nonContacts ? 1 << 3 : 0;
      flags |= this.excludeSelected ? 1 << 5 : 0;
      flags |= this.users ? 1 << 4 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.users) {
        b.write(Primitive.Vector.write(this.users, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.BusinessRecipients = BusinessRecipients;
  class BusinessAwayMessageScheduleAlways extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'BusinessAwayMessageScheduleAlways';
      this.constructorId = 3384402617;
      this.subclassOfId = 672702558;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.BusinessAwayMessageScheduleAlways();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.BusinessAwayMessageScheduleAlways = BusinessAwayMessageScheduleAlways;
  class BusinessAwayMessageScheduleOutsideWorkHours extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'BusinessAwayMessageScheduleOutsideWorkHours';
      this.constructorId = 3287479553;
      this.subclassOfId = 672702558;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.BusinessAwayMessageScheduleOutsideWorkHours();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.BusinessAwayMessageScheduleOutsideWorkHours = BusinessAwayMessageScheduleOutsideWorkHours;
  class BusinessAwayMessageScheduleCustom extends TLObject {
    startDate;
    endDate;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BusinessAwayMessageScheduleCustom';
      this.constructorId = 3427638988;
      this.subclassOfId = 672702558;
      this._slots = ['startDate', 'endDate'];
      this.startDate = params.startDate;
      this.endDate = params.endDate;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let startDate = await Primitive.Int.read(b);
      let endDate = await Primitive.Int.read(b);
      return new Raw2.BusinessAwayMessageScheduleCustom({ startDate, endDate });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.startDate !== void 0) {
        b.write(Primitive.Int.write(this.startDate));
      }
      if (this.endDate !== void 0) {
        b.write(Primitive.Int.write(this.endDate));
      }
      return b.buffer;
    }
  }
  Raw2.BusinessAwayMessageScheduleCustom = BusinessAwayMessageScheduleCustom;
  class InputBusinessGreetingMessage extends TLObject {
    shortcutId;
    recipients;
    noActivityDays;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBusinessGreetingMessage';
      this.constructorId = 26528571;
      this.subclassOfId = 1652088029;
      this._slots = ['shortcutId', 'recipients', 'noActivityDays'];
      this.shortcutId = params.shortcutId;
      this.recipients = params.recipients;
      this.noActivityDays = params.noActivityDays;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let shortcutId = await Primitive.Int.read(b);
      let recipients = await TLObject.read(b);
      let noActivityDays = await Primitive.Int.read(b);
      return new Raw2.InputBusinessGreetingMessage({
        shortcutId,
        recipients,
        noActivityDays,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.shortcutId !== void 0) {
        b.write(Primitive.Int.write(this.shortcutId));
      }
      if (this.recipients !== void 0) {
        b.write(this.recipients.write());
      }
      if (this.noActivityDays !== void 0) {
        b.write(Primitive.Int.write(this.noActivityDays));
      }
      return b.buffer;
    }
  }
  Raw2.InputBusinessGreetingMessage = InputBusinessGreetingMessage;
  class BusinessGreetingMessage extends TLObject {
    shortcutId;
    recipients;
    noActivityDays;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BusinessGreetingMessage';
      this.constructorId = 3843664811;
      this.subclassOfId = 3007638222;
      this._slots = ['shortcutId', 'recipients', 'noActivityDays'];
      this.shortcutId = params.shortcutId;
      this.recipients = params.recipients;
      this.noActivityDays = params.noActivityDays;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let shortcutId = await Primitive.Int.read(b);
      let recipients = await TLObject.read(b);
      let noActivityDays = await Primitive.Int.read(b);
      return new Raw2.BusinessGreetingMessage({
        shortcutId,
        recipients,
        noActivityDays,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.shortcutId !== void 0) {
        b.write(Primitive.Int.write(this.shortcutId));
      }
      if (this.recipients !== void 0) {
        b.write(this.recipients.write());
      }
      if (this.noActivityDays !== void 0) {
        b.write(Primitive.Int.write(this.noActivityDays));
      }
      return b.buffer;
    }
  }
  Raw2.BusinessGreetingMessage = BusinessGreetingMessage;
  class InputBusinessAwayMessage extends TLObject {
    offlineOnly;
    shortcutId;
    schedule;
    recipients;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBusinessAwayMessage';
      this.constructorId = 2200008160;
      this.subclassOfId = 3629489271;
      this._slots = ['offlineOnly', 'shortcutId', 'schedule', 'recipients'];
      this.offlineOnly = params.offlineOnly;
      this.shortcutId = params.shortcutId;
      this.schedule = params.schedule;
      this.recipients = params.recipients;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let offlineOnly = flags & (1 << 0) ? true : false;
      let shortcutId = await Primitive.Int.read(b);
      let schedule = await TLObject.read(b);
      let recipients = await TLObject.read(b);
      return new Raw2.InputBusinessAwayMessage({
        offlineOnly,
        shortcutId,
        schedule,
        recipients,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.offlineOnly ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.shortcutId !== void 0) {
        b.write(Primitive.Int.write(this.shortcutId));
      }
      if (this.schedule !== void 0) {
        b.write(this.schedule.write());
      }
      if (this.recipients !== void 0) {
        b.write(this.recipients.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputBusinessAwayMessage = InputBusinessAwayMessage;
  class BusinessAwayMessage extends TLObject {
    offlineOnly;
    shortcutId;
    schedule;
    recipients;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BusinessAwayMessage';
      this.constructorId = 4011158108;
      this.subclassOfId = 4057181732;
      this._slots = ['offlineOnly', 'shortcutId', 'schedule', 'recipients'];
      this.offlineOnly = params.offlineOnly;
      this.shortcutId = params.shortcutId;
      this.schedule = params.schedule;
      this.recipients = params.recipients;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let offlineOnly = flags & (1 << 0) ? true : false;
      let shortcutId = await Primitive.Int.read(b);
      let schedule = await TLObject.read(b);
      let recipients = await TLObject.read(b);
      return new Raw2.BusinessAwayMessage({
        offlineOnly,
        shortcutId,
        schedule,
        recipients,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.offlineOnly ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.shortcutId !== void 0) {
        b.write(Primitive.Int.write(this.shortcutId));
      }
      if (this.schedule !== void 0) {
        b.write(this.schedule.write());
      }
      if (this.recipients !== void 0) {
        b.write(this.recipients.write());
      }
      return b.buffer;
    }
  }
  Raw2.BusinessAwayMessage = BusinessAwayMessage;
  class Timezone extends TLObject {
    id;
    name;
    utcOffset;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Timezone';
      this.constructorId = 4287793653;
      this.subclassOfId = 3463958721;
      this._slots = ['id', 'name', 'utcOffset'];
      this.id = params.id;
      this.name = params.name;
      this.utcOffset = params.utcOffset;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.String.read(b);
      let name = await Primitive.String.read(b);
      let utcOffset = await Primitive.Int.read(b);
      return new Raw2.Timezone({ id, name, utcOffset });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.String.write(this.id));
      }
      if (this.name !== void 0) {
        b.write(Primitive.String.write(this.name));
      }
      if (this.utcOffset !== void 0) {
        b.write(Primitive.Int.write(this.utcOffset));
      }
      return b.buffer;
    }
  }
  Raw2.Timezone = Timezone;
  class QuickReply extends TLObject {
    shortcutId;
    shortcut;
    topMessage;
    count;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'QuickReply';
      this.constructorId = 110563371;
      this.subclassOfId = 3806990098;
      this._slots = ['shortcutId', 'shortcut', 'topMessage', 'count'];
      this.shortcutId = params.shortcutId;
      this.shortcut = params.shortcut;
      this.topMessage = params.topMessage;
      this.count = params.count;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let shortcutId = await Primitive.Int.read(b);
      let shortcut = await Primitive.String.read(b);
      let topMessage = await Primitive.Int.read(b);
      let count = await Primitive.Int.read(b);
      return new Raw2.QuickReply({
        shortcutId,
        shortcut,
        topMessage,
        count,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.shortcutId !== void 0) {
        b.write(Primitive.Int.write(this.shortcutId));
      }
      if (this.shortcut !== void 0) {
        b.write(Primitive.String.write(this.shortcut));
      }
      if (this.topMessage !== void 0) {
        b.write(Primitive.Int.write(this.topMessage));
      }
      if (this.count !== void 0) {
        b.write(Primitive.Int.write(this.count));
      }
      return b.buffer;
    }
  }
  Raw2.QuickReply = QuickReply;
  class InputQuickReplyShortcut extends TLObject {
    shortcut;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputQuickReplyShortcut';
      this.constructorId = 609840449;
      this.subclassOfId = 2775088215;
      this._slots = ['shortcut'];
      this.shortcut = params.shortcut;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let shortcut = await Primitive.String.read(b);
      return new Raw2.InputQuickReplyShortcut({ shortcut });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.shortcut !== void 0) {
        b.write(Primitive.String.write(this.shortcut));
      }
      return b.buffer;
    }
  }
  Raw2.InputQuickReplyShortcut = InputQuickReplyShortcut;
  class InputQuickReplyShortcutId extends TLObject {
    shortcutId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputQuickReplyShortcutId';
      this.constructorId = 18418929;
      this.subclassOfId = 2775088215;
      this._slots = ['shortcutId'];
      this.shortcutId = params.shortcutId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let shortcutId = await Primitive.Int.read(b);
      return new Raw2.InputQuickReplyShortcutId({ shortcutId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.shortcutId !== void 0) {
        b.write(Primitive.Int.write(this.shortcutId));
      }
      return b.buffer;
    }
  }
  Raw2.InputQuickReplyShortcutId = InputQuickReplyShortcutId;
  class ConnectedBot extends TLObject {
    canReply;
    botId;
    recipients;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ConnectedBot';
      this.constructorId = 3171321345;
      this.subclassOfId = 904403870;
      this._slots = ['canReply', 'botId', 'recipients'];
      this.canReply = params.canReply;
      this.botId = params.botId;
      this.recipients = params.recipients;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let canReply = flags & (1 << 0) ? true : false;
      let botId = await Primitive.Long.read(b);
      let recipients = await TLObject.read(b);
      return new Raw2.ConnectedBot({ canReply, botId, recipients });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.canReply ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.botId !== void 0) {
        b.write(Primitive.Long.write(this.botId));
      }
      if (this.recipients !== void 0) {
        b.write(this.recipients.write());
      }
      return b.buffer;
    }
  }
  Raw2.ConnectedBot = ConnectedBot;
  class Birthday extends TLObject {
    day;
    month;
    year;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'Birthday';
      this.constructorId = 1821253126;
      this.subclassOfId = 3196048996;
      this._slots = ['day', 'month', 'year'];
      this.day = params.day;
      this.month = params.month;
      this.year = params.year;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let day = await Primitive.Int.read(b);
      let month = await Primitive.Int.read(b);
      let year = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
      return new Raw2.Birthday({ day, month, year });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.year !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.day !== void 0) {
        b.write(Primitive.Int.write(this.day));
      }
      if (this.month !== void 0) {
        b.write(Primitive.Int.write(this.month));
      }
      if (this.year !== void 0) {
        b.write(Primitive.Int.write(this.year));
      }
      return b.buffer;
    }
  }
  Raw2.Birthday = Birthday;
  class BotBusinessConnection extends TLObject {
    canReply;
    disabled;
    connectionId;
    userId;
    dcId;
    date;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BotBusinessConnection';
      this.constructorId = 2305045428;
      this.subclassOfId = 2601715014;
      this._slots = ['canReply', 'disabled', 'connectionId', 'userId', 'dcId', 'date'];
      this.canReply = params.canReply;
      this.disabled = params.disabled;
      this.connectionId = params.connectionId;
      this.userId = params.userId;
      this.dcId = params.dcId;
      this.date = params.date;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let canReply = flags & (1 << 0) ? true : false;
      let disabled = flags & (1 << 1) ? true : false;
      let connectionId = await Primitive.String.read(b);
      let userId = await Primitive.Long.read(b);
      let dcId = await Primitive.Int.read(b);
      let date = await Primitive.Int.read(b);
      return new Raw2.BotBusinessConnection({
        canReply,
        disabled,
        connectionId,
        userId,
        dcId,
        date,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.canReply ? 1 << 0 : 0;
      flags |= this.disabled ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.connectionId !== void 0) {
        b.write(Primitive.String.write(this.connectionId));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.dcId !== void 0) {
        b.write(Primitive.Int.write(this.dcId));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      return b.buffer;
    }
  }
  Raw2.BotBusinessConnection = BotBusinessConnection;
  class InputBusinessIntro extends TLObject {
    title;
    description;
    sticker;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBusinessIntro';
      this.constructorId = 163867085;
      this.subclassOfId = 1683650173;
      this._slots = ['title', 'description', 'sticker'];
      this.title = params.title;
      this.description = params.description;
      this.sticker = params.sticker;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let title = await Primitive.String.read(b);
      let description = await Primitive.String.read(b);
      let sticker = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      return new Raw2.InputBusinessIntro({
        title,
        description,
        sticker,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.sticker !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.description !== void 0) {
        b.write(Primitive.String.write(this.description));
      }
      if (this.sticker !== void 0) {
        b.write(this.sticker.write());
      }
      return b.buffer;
    }
  }
  Raw2.InputBusinessIntro = InputBusinessIntro;
  class BusinessIntro extends TLObject {
    title;
    description;
    sticker;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BusinessIntro';
      this.constructorId = 1510606445;
      this.subclassOfId = 1694815175;
      this._slots = ['title', 'description', 'sticker'];
      this.title = params.title;
      this.description = params.description;
      this.sticker = params.sticker;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let title = await Primitive.String.read(b);
      let description = await Primitive.String.read(b);
      let sticker = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      return new Raw2.BusinessIntro({ title, description, sticker });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.sticker !== void 0 ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.description !== void 0) {
        b.write(Primitive.String.write(this.description));
      }
      if (this.sticker !== void 0) {
        b.write(this.sticker.write());
      }
      return b.buffer;
    }
  }
  Raw2.BusinessIntro = BusinessIntro;
  class InputCollectibleUsername extends TLObject {
    username;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputCollectibleUsername';
      this.constructorId = 3818152105;
      this.subclassOfId = 705659371;
      this._slots = ['username'];
      this.username = params.username;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let username = await Primitive.String.read(b);
      return new Raw2.InputCollectibleUsername({ username });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.username !== void 0) {
        b.write(Primitive.String.write(this.username));
      }
      return b.buffer;
    }
  }
  Raw2.InputCollectibleUsername = InputCollectibleUsername;
  class InputCollectiblePhone extends TLObject {
    phone;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputCollectiblePhone';
      this.constructorId = 2732725412;
      this.subclassOfId = 705659371;
      this._slots = ['phone'];
      this.phone = params.phone;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let phone2 = await Primitive.String.read(b);
      return new Raw2.InputCollectiblePhone({ phone: phone2 });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.phone !== void 0) {
        b.write(Primitive.String.write(this.phone));
      }
      return b.buffer;
    }
  }
  Raw2.InputCollectiblePhone = InputCollectiblePhone;
  class InputBusinessBotRecipients extends TLObject {
    existingChats;
    newChats;
    contacts;
    nonContacts;
    excludeSelected;
    users;
    excludeUsers;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBusinessBotRecipients';
      this.constructorId = 3303379486;
      this.subclassOfId = 2849240411;
      this._slots = [
        'existingChats',
        'newChats',
        'contacts',
        'nonContacts',
        'excludeSelected',
        'users',
        'excludeUsers',
      ];
      this.existingChats = params.existingChats;
      this.newChats = params.newChats;
      this.contacts = params.contacts;
      this.nonContacts = params.nonContacts;
      this.excludeSelected = params.excludeSelected;
      this.users = params.users;
      this.excludeUsers = params.excludeUsers;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let existingChats = flags & (1 << 0) ? true : false;
      let newChats = flags & (1 << 1) ? true : false;
      let contacts2 = flags & (1 << 2) ? true : false;
      let nonContacts = flags & (1 << 3) ? true : false;
      let excludeSelected = flags & (1 << 5) ? true : false;
      let users2 = flags & (1 << 4) ? await TLObject.read(b) : [];
      let excludeUsers = flags & (1 << 6) ? await TLObject.read(b) : [];
      return new Raw2.InputBusinessBotRecipients({
        existingChats,
        newChats,
        contacts: contacts2,
        nonContacts,
        excludeSelected,
        users: users2,
        excludeUsers,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.existingChats ? 1 << 0 : 0;
      flags |= this.newChats ? 1 << 1 : 0;
      flags |= this.contacts ? 1 << 2 : 0;
      flags |= this.nonContacts ? 1 << 3 : 0;
      flags |= this.excludeSelected ? 1 << 5 : 0;
      flags |= this.users ? 1 << 4 : 0;
      flags |= this.excludeUsers ? 1 << 6 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.users) {
        b.write(Primitive.Vector.write(this.users));
      }
      if (this.excludeUsers) {
        b.write(Primitive.Vector.write(this.excludeUsers));
      }
      return b.buffer;
    }
  }
  Raw2.InputBusinessBotRecipients = InputBusinessBotRecipients;
  class BusinessBotRecipients extends TLObject {
    existingChats;
    newChats;
    contacts;
    nonContacts;
    excludeSelected;
    users;
    excludeUsers;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BusinessBotRecipients';
      this.constructorId = 3096245107;
      this.subclassOfId = 4036133834;
      this._slots = [
        'existingChats',
        'newChats',
        'contacts',
        'nonContacts',
        'excludeSelected',
        'users',
        'excludeUsers',
      ];
      this.existingChats = params.existingChats;
      this.newChats = params.newChats;
      this.contacts = params.contacts;
      this.nonContacts = params.nonContacts;
      this.excludeSelected = params.excludeSelected;
      this.users = params.users;
      this.excludeUsers = params.excludeUsers;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let existingChats = flags & (1 << 0) ? true : false;
      let newChats = flags & (1 << 1) ? true : false;
      let contacts2 = flags & (1 << 2) ? true : false;
      let nonContacts = flags & (1 << 3) ? true : false;
      let excludeSelected = flags & (1 << 5) ? true : false;
      let users2 = flags & (1 << 4) ? await TLObject.read(b, Primitive.Long) : [];
      let excludeUsers = flags & (1 << 6) ? await TLObject.read(b, Primitive.Long) : [];
      return new Raw2.BusinessBotRecipients({
        existingChats,
        newChats,
        contacts: contacts2,
        nonContacts,
        excludeSelected,
        users: users2,
        excludeUsers,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.existingChats ? 1 << 0 : 0;
      flags |= this.newChats ? 1 << 1 : 0;
      flags |= this.contacts ? 1 << 2 : 0;
      flags |= this.nonContacts ? 1 << 3 : 0;
      flags |= this.excludeSelected ? 1 << 5 : 0;
      flags |= this.users ? 1 << 4 : 0;
      flags |= this.excludeUsers ? 1 << 6 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.users) {
        b.write(Primitive.Vector.write(this.users, Primitive.Long));
      }
      if (this.excludeUsers) {
        b.write(Primitive.Vector.write(this.excludeUsers, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.BusinessBotRecipients = BusinessBotRecipients;
  class ContactBirthday extends TLObject {
    contactId;
    birthday;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ContactBirthday';
      this.constructorId = 496600883;
      this.subclassOfId = 3638372358;
      this._slots = ['contactId', 'birthday'];
      this.contactId = params.contactId;
      this.birthday = params.birthday;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let contactId = await Primitive.Long.read(b);
      let birthday = await TLObject.read(b);
      return new Raw2.ContactBirthday({ contactId, birthday });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.contactId !== void 0) {
        b.write(Primitive.Long.write(this.contactId));
      }
      if (this.birthday !== void 0) {
        b.write(this.birthday.write());
      }
      return b.buffer;
    }
  }
  Raw2.ContactBirthday = ContactBirthday;
  class MissingInvitee extends TLObject {
    premiumWouldAllowInvite;
    premiumRequiredForPm;
    userId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'MissingInvitee';
      this.constructorId = 1653379620;
      this.subclassOfId = 1552723164;
      this._slots = ['premiumWouldAllowInvite', 'premiumRequiredForPm', 'userId'];
      this.premiumWouldAllowInvite = params.premiumWouldAllowInvite;
      this.premiumRequiredForPm = params.premiumRequiredForPm;
      this.userId = params.userId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let premiumWouldAllowInvite = flags & (1 << 0) ? true : false;
      let premiumRequiredForPm = flags & (1 << 1) ? true : false;
      let userId = await Primitive.Long.read(b);
      return new Raw2.MissingInvitee({
        premiumWouldAllowInvite,
        premiumRequiredForPm,
        userId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.premiumWouldAllowInvite ? 1 << 0 : 0;
      flags |= this.premiumRequiredForPm ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      return b.buffer;
    }
  }
  Raw2.MissingInvitee = MissingInvitee;
  class InputBusinessChatLink extends TLObject {
    message;
    entities;
    title;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'InputBusinessChatLink';
      this.constructorId = 292003751;
      this.subclassOfId = 2875655443;
      this._slots = ['message', 'entities', 'title'];
      this.message = params.message;
      this.entities = params.entities;
      this.title = params.title;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let message = await Primitive.String.read(b);
      let entities = flags & (1 << 0) ? await TLObject.read(b) : [];
      let title = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      return new Raw2.InputBusinessChatLink({ message, entities, title });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.entities ? 1 << 0 : 0;
      flags |= this.title !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      return b.buffer;
    }
  }
  Raw2.InputBusinessChatLink = InputBusinessChatLink;
  class BusinessChatLink extends TLObject {
    link;
    message;
    entities;
    title;
    views;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BusinessChatLink';
      this.constructorId = 3031328367;
      this.subclassOfId = 1007504011;
      this._slots = ['link', 'message', 'entities', 'title', 'views'];
      this.link = params.link;
      this.message = params.message;
      this.entities = params.entities;
      this.title = params.title;
      this.views = params.views;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let link = await Primitive.String.read(b);
      let message = await Primitive.String.read(b);
      let entities = flags & (1 << 0) ? await TLObject.read(b) : [];
      let title = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let views = await Primitive.Int.read(b);
      return new Raw2.BusinessChatLink({
        link,
        message,
        entities,
        title,
        views,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.entities ? 1 << 0 : 0;
      flags |= this.title !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.link !== void 0) {
        b.write(Primitive.String.write(this.link));
      }
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.views !== void 0) {
        b.write(Primitive.Int.write(this.views));
      }
      return b.buffer;
    }
  }
  Raw2.BusinessChatLink = BusinessChatLink;
  class RequestedPeerUser extends TLObject {
    userId;
    firstName;
    lastName;
    username;
    photo;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'RequestedPeerUser';
      this.constructorId = 3593466986;
      this.subclassOfId = 3263724560;
      this._slots = ['userId', 'firstName', 'lastName', 'username', 'photo'];
      this.userId = params.userId;
      this.firstName = params.firstName;
      this.lastName = params.lastName;
      this.username = params.username;
      this.photo = params.photo;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let userId = await Primitive.Long.read(b);
      let firstName = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let lastName = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let username = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let photo = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.RequestedPeerUser({
        userId,
        firstName,
        lastName,
        username,
        photo,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.firstName !== void 0 ? 1 << 0 : 0;
      flags |= this.lastName !== void 0 ? 1 << 0 : 0;
      flags |= this.username !== void 0 ? 1 << 1 : 0;
      flags |= this.photo !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.userId !== void 0) {
        b.write(Primitive.Long.write(this.userId));
      }
      if (this.firstName !== void 0) {
        b.write(Primitive.String.write(this.firstName));
      }
      if (this.lastName !== void 0) {
        b.write(Primitive.String.write(this.lastName));
      }
      if (this.username !== void 0) {
        b.write(Primitive.String.write(this.username));
      }
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      return b.buffer;
    }
  }
  Raw2.RequestedPeerUser = RequestedPeerUser;
  class RequestedPeerChat extends TLObject {
    chatId;
    title;
    photo;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'RequestedPeerChat';
      this.constructorId = 1929860175;
      this.subclassOfId = 3263724560;
      this._slots = ['chatId', 'title', 'photo'];
      this.chatId = params.chatId;
      this.title = params.title;
      this.photo = params.photo;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let chatId = await Primitive.Long.read(b);
      let title = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let photo = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.RequestedPeerChat({ chatId, title, photo });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.title !== void 0 ? 1 << 0 : 0;
      flags |= this.photo !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.chatId !== void 0) {
        b.write(Primitive.Long.write(this.chatId));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      return b.buffer;
    }
  }
  Raw2.RequestedPeerChat = RequestedPeerChat;
  class RequestedPeerChannel extends TLObject {
    channelId;
    title;
    username;
    photo;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'RequestedPeerChannel';
      this.constructorId = 2342781924;
      this.subclassOfId = 3263724560;
      this._slots = ['channelId', 'title', 'username', 'photo'];
      this.channelId = params.channelId;
      this.title = params.title;
      this.username = params.username;
      this.photo = params.photo;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let channelId = await Primitive.Long.read(b);
      let title = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
      let username = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      let photo = flags & (1 << 2) ? await TLObject.read(b) : void 0;
      return new Raw2.RequestedPeerChannel({
        channelId,
        title,
        username,
        photo,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.title !== void 0 ? 1 << 0 : 0;
      flags |= this.username !== void 0 ? 1 << 1 : 0;
      flags |= this.photo !== void 0 ? 1 << 2 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.channelId !== void 0) {
        b.write(Primitive.Long.write(this.channelId));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.username !== void 0) {
        b.write(Primitive.String.write(this.username));
      }
      if (this.photo !== void 0) {
        b.write(this.photo.write());
      }
      return b.buffer;
    }
  }
  Raw2.RequestedPeerChannel = RequestedPeerChannel;
  class SponsoredMessageReportOption extends TLObject {
    text;
    option;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'SponsoredMessageReportOption';
      this.constructorId = 1124938064;
      this.subclassOfId = 3711084312;
      this._slots = ['text', 'option'];
      this.text = params.text;
      this.option = params.option;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let text = await Primitive.String.read(b);
      let option = await Primitive.Bytes.read(b);
      return new Raw2.SponsoredMessageReportOption({ text, option });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.text !== void 0) {
        b.write(Primitive.String.write(this.text));
      }
      if (this.option !== void 0) {
        b.write(Primitive.Bytes.write(this.option));
      }
      return b.buffer;
    }
  }
  Raw2.SponsoredMessageReportOption = SponsoredMessageReportOption;
  class BroadcastRevenueTransactionProceeds extends TLObject {
    amount;
    fromDate;
    toDate;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BroadcastRevenueTransactionProceeds';
      this.constructorId = 1434332356;
      this.subclassOfId = 1962590909;
      this._slots = ['amount', 'fromDate', 'toDate'];
      this.amount = params.amount;
      this.fromDate = params.fromDate;
      this.toDate = params.toDate;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let amount = await Primitive.Long.read(b);
      let fromDate = await Primitive.Int.read(b);
      let toDate = await Primitive.Int.read(b);
      return new Raw2.BroadcastRevenueTransactionProceeds({
        amount,
        fromDate,
        toDate,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.amount !== void 0) {
        b.write(Primitive.Long.write(this.amount));
      }
      if (this.fromDate !== void 0) {
        b.write(Primitive.Int.write(this.fromDate));
      }
      if (this.toDate !== void 0) {
        b.write(Primitive.Int.write(this.toDate));
      }
      return b.buffer;
    }
  }
  Raw2.BroadcastRevenueTransactionProceeds = BroadcastRevenueTransactionProceeds;
  class BroadcastRevenueTransactionWithdrawal extends TLObject {
    pending;
    failed;
    amount;
    date;
    provider;
    transactionDate;
    transactionUrl;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BroadcastRevenueTransactionWithdrawal';
      this.constructorId = 1515784568;
      this.subclassOfId = 1962590909;
      this._slots = [
        'pending',
        'failed',
        'amount',
        'date',
        'provider',
        'transactionDate',
        'transactionUrl',
      ];
      this.pending = params.pending;
      this.failed = params.failed;
      this.amount = params.amount;
      this.date = params.date;
      this.provider = params.provider;
      this.transactionDate = params.transactionDate;
      this.transactionUrl = params.transactionUrl;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let pending = flags & (1 << 0) ? true : false;
      let failed = flags & (1 << 2) ? true : false;
      let amount = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let provider = await Primitive.String.read(b);
      let transactionDate = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
      let transactionUrl = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
      return new Raw2.BroadcastRevenueTransactionWithdrawal({
        pending,
        failed,
        amount,
        date,
        provider,
        transactionDate,
        transactionUrl,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.pending ? 1 << 0 : 0;
      flags |= this.failed ? 1 << 2 : 0;
      flags |= this.transactionDate !== void 0 ? 1 << 1 : 0;
      flags |= this.transactionUrl !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.amount !== void 0) {
        b.write(Primitive.Long.write(this.amount));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.provider !== void 0) {
        b.write(Primitive.String.write(this.provider));
      }
      if (this.transactionDate !== void 0) {
        b.write(Primitive.Int.write(this.transactionDate));
      }
      if (this.transactionUrl !== void 0) {
        b.write(Primitive.String.write(this.transactionUrl));
      }
      return b.buffer;
    }
  }
  Raw2.BroadcastRevenueTransactionWithdrawal = BroadcastRevenueTransactionWithdrawal;
  class BroadcastRevenueTransactionRefund extends TLObject {
    amount;
    date;
    provider;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'BroadcastRevenueTransactionRefund';
      this.constructorId = 1121127726;
      this.subclassOfId = 1962590909;
      this._slots = ['amount', 'date', 'provider'];
      this.amount = params.amount;
      this.date = params.date;
      this.provider = params.provider;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let amount = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let provider = await Primitive.String.read(b);
      return new Raw2.BroadcastRevenueTransactionRefund({
        amount,
        date,
        provider,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.amount !== void 0) {
        b.write(Primitive.Long.write(this.amount));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.provider !== void 0) {
        b.write(Primitive.String.write(this.provider));
      }
      return b.buffer;
    }
  }
  Raw2.BroadcastRevenueTransactionRefund = BroadcastRevenueTransactionRefund;
  class ReactionNotificationsFromContacts extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'ReactionNotificationsFromContacts';
      this.constructorId = 3133384218;
      this.subclassOfId = 878672192;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.ReactionNotificationsFromContacts();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.ReactionNotificationsFromContacts = ReactionNotificationsFromContacts;
  class ReactionNotificationsFromAll extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'ReactionNotificationsFromAll';
      this.constructorId = 1268654752;
      this.subclassOfId = 878672192;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.ReactionNotificationsFromAll();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.ReactionNotificationsFromAll = ReactionNotificationsFromAll;
  class ReactionsNotifySettings extends TLObject {
    messagesNotifyFrom;
    storiesNotifyFrom;
    sound;
    showPreviews;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'ReactionsNotifySettings';
      this.constructorId = 1457736048;
      this.subclassOfId = 2382301265;
      this._slots = ['messagesNotifyFrom', 'storiesNotifyFrom', 'sound', 'showPreviews'];
      this.messagesNotifyFrom = params.messagesNotifyFrom;
      this.storiesNotifyFrom = params.storiesNotifyFrom;
      this.sound = params.sound;
      this.showPreviews = params.showPreviews;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let messagesNotifyFrom = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let storiesNotifyFrom = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      let sound = await TLObject.read(b);
      let showPreviews = await Primitive.Bool.read(b);
      return new Raw2.ReactionsNotifySettings({
        messagesNotifyFrom,
        storiesNotifyFrom,
        sound,
        showPreviews,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.messagesNotifyFrom !== void 0 ? 1 << 0 : 0;
      flags |= this.storiesNotifyFrom !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.messagesNotifyFrom !== void 0) {
        b.write(this.messagesNotifyFrom.write());
      }
      if (this.storiesNotifyFrom !== void 0) {
        b.write(this.storiesNotifyFrom.write());
      }
      if (this.sound !== void 0) {
        b.write(this.sound.write());
      }
      if (this.showPreviews !== void 0) {
        b.write(Primitive.Bool.write(this.showPreviews));
      }
      return b.buffer;
    }
  }
  Raw2.ReactionsNotifySettings = ReactionsNotifySettings;
  class InvokeAfterMsg extends TLObject {
    __response__;
    msgId;
    query;
    constructor(params) {
      super();
      this.classType = 'functions';
      this.className = 'InvokeAfterMsg';
      this.constructorId = 3416209197;
      this.subclassOfId = 3081909835;
      this._slots = ['msgId', 'query'];
      this.msgId = params.msgId;
      this.query = params.query;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let msgId = await Primitive.Long.read(b);
      let query = await TLObject.read(b);
      return new Raw2.InvokeAfterMsg({ msgId, query });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.msgId !== void 0) {
        b.write(Primitive.Long.write(this.msgId));
      }
      if (this.query !== void 0) {
        b.write(this.query.write());
      }
      return b.buffer;
    }
  }
  Raw2.InvokeAfterMsg = InvokeAfterMsg;
  class InvokeAfterMsgs extends TLObject {
    __response__;
    msgIds;
    query;
    constructor(params) {
      super();
      this.classType = 'functions';
      this.className = 'InvokeAfterMsgs';
      this.constructorId = 1036301552;
      this.subclassOfId = 3081909835;
      this._slots = ['msgIds', 'query'];
      this.msgIds = params.msgIds;
      this.query = params.query;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let msgIds = await TLObject.read(b, Primitive.Long);
      let query = await TLObject.read(b);
      return new Raw2.InvokeAfterMsgs({ msgIds, query });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.msgIds) {
        b.write(Primitive.Vector.write(this.msgIds, Primitive.Long));
      }
      if (this.query !== void 0) {
        b.write(this.query.write());
      }
      return b.buffer;
    }
  }
  Raw2.InvokeAfterMsgs = InvokeAfterMsgs;
  class InitConnection extends TLObject {
    __response__;
    apiId;
    deviceModel;
    systemVersion;
    appVersion;
    systemLangCode;
    langPack;
    langCode;
    proxy;
    params;
    query;
    constructor(params) {
      super();
      this.classType = 'functions';
      this.className = 'InitConnection';
      this.constructorId = 3251461801;
      this.subclassOfId = 3081909835;
      this._slots = [
        'apiId',
        'deviceModel',
        'systemVersion',
        'appVersion',
        'systemLangCode',
        'langPack',
        'langCode',
        'proxy',
        'params',
        'query',
      ];
      this.apiId = params.apiId;
      this.deviceModel = params.deviceModel;
      this.systemVersion = params.systemVersion;
      this.appVersion = params.appVersion;
      this.systemLangCode = params.systemLangCode;
      this.langPack = params.langPack;
      this.langCode = params.langCode;
      this.proxy = params.proxy;
      this.params = params.params;
      this.query = params.query;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let apiId = await Primitive.Int.read(b);
      let deviceModel = await Primitive.String.read(b);
      let systemVersion = await Primitive.String.read(b);
      let appVersion = await Primitive.String.read(b);
      let systemLangCode = await Primitive.String.read(b);
      let langPack = await Primitive.String.read(b);
      let langCode = await Primitive.String.read(b);
      let proxy = flags & (1 << 0) ? await TLObject.read(b) : void 0;
      let params = flags & (1 << 1) ? await TLObject.read(b) : void 0;
      let query = await TLObject.read(b);
      return new Raw2.InitConnection({
        apiId,
        deviceModel,
        systemVersion,
        appVersion,
        systemLangCode,
        langPack,
        langCode,
        proxy,
        params,
        query,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.proxy !== void 0 ? 1 << 0 : 0;
      flags |= this.params !== void 0 ? 1 << 1 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.apiId !== void 0) {
        b.write(Primitive.Int.write(this.apiId));
      }
      if (this.deviceModel !== void 0) {
        b.write(Primitive.String.write(this.deviceModel));
      }
      if (this.systemVersion !== void 0) {
        b.write(Primitive.String.write(this.systemVersion));
      }
      if (this.appVersion !== void 0) {
        b.write(Primitive.String.write(this.appVersion));
      }
      if (this.systemLangCode !== void 0) {
        b.write(Primitive.String.write(this.systemLangCode));
      }
      if (this.langPack !== void 0) {
        b.write(Primitive.String.write(this.langPack));
      }
      if (this.langCode !== void 0) {
        b.write(Primitive.String.write(this.langCode));
      }
      if (this.proxy !== void 0) {
        b.write(this.proxy.write());
      }
      if (this.params !== void 0) {
        b.write(this.params.write());
      }
      if (this.query !== void 0) {
        b.write(this.query.write());
      }
      return b.buffer;
    }
  }
  Raw2.InitConnection = InitConnection;
  class InvokeWithLayer extends TLObject {
    __response__;
    layer;
    query;
    constructor(params) {
      super();
      this.classType = 'functions';
      this.className = 'InvokeWithLayer';
      this.constructorId = 3667594509;
      this.subclassOfId = 3081909835;
      this._slots = ['layer', 'query'];
      this.layer = params.layer;
      this.query = params.query;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let layer = await Primitive.Int.read(b);
      let query = await TLObject.read(b);
      return new Raw2.InvokeWithLayer({ layer, query });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.layer !== void 0) {
        b.write(Primitive.Int.write(this.layer));
      }
      if (this.query !== void 0) {
        b.write(this.query.write());
      }
      return b.buffer;
    }
  }
  Raw2.InvokeWithLayer = InvokeWithLayer;
  class InvokeWithoutUpdates extends TLObject {
    __response__;
    query;
    constructor(params) {
      super();
      this.classType = 'functions';
      this.className = 'InvokeWithoutUpdates';
      this.constructorId = 3214170551;
      this.subclassOfId = 3081909835;
      this._slots = ['query'];
      this.query = params.query;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let query = await TLObject.read(b);
      return new Raw2.InvokeWithoutUpdates({ query });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.query !== void 0) {
        b.write(this.query.write());
      }
      return b.buffer;
    }
  }
  Raw2.InvokeWithoutUpdates = InvokeWithoutUpdates;
  class InvokeWithMessagesRange extends TLObject {
    __response__;
    range;
    query;
    constructor(params) {
      super();
      this.classType = 'functions';
      this.className = 'InvokeWithMessagesRange';
      this.constructorId = 911373810;
      this.subclassOfId = 3081909835;
      this._slots = ['range', 'query'];
      this.range = params.range;
      this.query = params.query;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let range = await TLObject.read(b);
      let query = await TLObject.read(b);
      return new Raw2.InvokeWithMessagesRange({ range, query });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.range !== void 0) {
        b.write(this.range.write());
      }
      if (this.query !== void 0) {
        b.write(this.query.write());
      }
      return b.buffer;
    }
  }
  Raw2.InvokeWithMessagesRange = InvokeWithMessagesRange;
  class InvokeWithTakeout extends TLObject {
    __response__;
    takeoutId;
    query;
    constructor(params) {
      super();
      this.classType = 'functions';
      this.className = 'InvokeWithTakeout';
      this.constructorId = 2896821550;
      this.subclassOfId = 3081909835;
      this._slots = ['takeoutId', 'query'];
      this.takeoutId = params.takeoutId;
      this.query = params.query;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let takeoutId = await Primitive.Long.read(b);
      let query = await TLObject.read(b);
      return new Raw2.InvokeWithTakeout({ takeoutId, query });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.takeoutId !== void 0) {
        b.write(Primitive.Long.write(this.takeoutId));
      }
      if (this.query !== void 0) {
        b.write(this.query.write());
      }
      return b.buffer;
    }
  }
  Raw2.InvokeWithTakeout = InvokeWithTakeout;
  class InvokeWithBusinessConnection extends TLObject {
    __response__;
    connectionId;
    query;
    constructor(params) {
      super();
      this.classType = 'functions';
      this.className = 'InvokeWithBusinessConnection';
      this.constructorId = 3710427022;
      this.subclassOfId = 3081909835;
      this._slots = ['connectionId', 'query'];
      this.connectionId = params.connectionId;
      this.query = params.query;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let connectionId = await Primitive.String.read(b);
      let query = await TLObject.read(b);
      return new Raw2.InvokeWithBusinessConnection({ connectionId, query });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.connectionId !== void 0) {
        b.write(Primitive.String.write(this.connectionId));
      }
      if (this.query !== void 0) {
        b.write(this.query.write());
      }
      return b.buffer;
    }
  }
  Raw2.InvokeWithBusinessConnection = InvokeWithBusinessConnection;
  class DecryptedMessage8 extends TLObject {
    randomId;
    randomBytes;
    message;
    media;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessage8';
      this.constructorId = 528568095;
      this.subclassOfId = 1392711998;
      this._slots = ['randomId', 'randomBytes', 'message', 'media'];
      this.randomId = params.randomId;
      this.randomBytes = params.randomBytes;
      this.message = params.message;
      this.media = params.media;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let randomId = await Primitive.Long.read(b);
      let randomBytes = await Primitive.Bytes.read(b);
      let message = await Primitive.String.read(b);
      let media = await TLObject.read(b);
      return new Raw2.DecryptedMessage8({
        randomId,
        randomBytes,
        message,
        media,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.randomId !== void 0) {
        b.write(Primitive.Long.write(this.randomId));
      }
      if (this.randomBytes !== void 0) {
        b.write(Primitive.Bytes.write(this.randomBytes));
      }
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.media !== void 0) {
        b.write(this.media.write());
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessage8 = DecryptedMessage8;
  class DecryptedMessageService8 extends TLObject {
    randomId;
    randomBytes;
    action;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageService8';
      this.constructorId = 2856858237;
      this.subclassOfId = 1392711998;
      this._slots = ['randomId', 'randomBytes', 'action'];
      this.randomId = params.randomId;
      this.randomBytes = params.randomBytes;
      this.action = params.action;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let randomId = await Primitive.Long.read(b);
      let randomBytes = await Primitive.Bytes.read(b);
      let action = await TLObject.read(b);
      return new Raw2.DecryptedMessageService8({
        randomId,
        randomBytes,
        action,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.randomId !== void 0) {
        b.write(Primitive.Long.write(this.randomId));
      }
      if (this.randomBytes !== void 0) {
        b.write(Primitive.Bytes.write(this.randomBytes));
      }
      if (this.action !== void 0) {
        b.write(this.action.write());
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageService8 = DecryptedMessageService8;
  class DecryptedMessageMediaEmpty8 extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageMediaEmpty8';
      this.constructorId = 144661578;
      this.subclassOfId = 188555316;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.DecryptedMessageMediaEmpty8();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageMediaEmpty8 = DecryptedMessageMediaEmpty8;
  class DecryptedMessageMediaPhoto8 extends TLObject {
    thumb;
    thumbW;
    thumbH;
    w;
    h;
    size;
    key;
    iv;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageMediaPhoto8';
      this.constructorId = 846826124;
      this.subclassOfId = 188555316;
      this._slots = ['thumb', 'thumbW', 'thumbH', 'w', 'h', 'size', 'key', 'iv'];
      this.thumb = params.thumb;
      this.thumbW = params.thumbW;
      this.thumbH = params.thumbH;
      this.w = params.w;
      this.h = params.h;
      this.size = params.size;
      this.key = params.key;
      this.iv = params.iv;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let thumb = await Primitive.Bytes.read(b);
      let thumbW = await Primitive.Int.read(b);
      let thumbH = await Primitive.Int.read(b);
      let w = await Primitive.Int.read(b);
      let h = await Primitive.Int.read(b);
      let size = await Primitive.Int.read(b);
      let key = await Primitive.Bytes.read(b);
      let iv = await Primitive.Bytes.read(b);
      return new Raw2.DecryptedMessageMediaPhoto8({
        thumb,
        thumbW,
        thumbH,
        w,
        h,
        size,
        key,
        iv,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.thumb !== void 0) {
        b.write(Primitive.Bytes.write(this.thumb));
      }
      if (this.thumbW !== void 0) {
        b.write(Primitive.Int.write(this.thumbW));
      }
      if (this.thumbH !== void 0) {
        b.write(Primitive.Int.write(this.thumbH));
      }
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Int.write(this.size));
      }
      if (this.key !== void 0) {
        b.write(Primitive.Bytes.write(this.key));
      }
      if (this.iv !== void 0) {
        b.write(Primitive.Bytes.write(this.iv));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageMediaPhoto8 = DecryptedMessageMediaPhoto8;
  class DecryptedMessageMediaVideo8 extends TLObject {
    thumb;
    thumbW;
    thumbH;
    duration;
    w;
    h;
    size;
    key;
    iv;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageMediaVideo8';
      this.constructorId = 1290694387;
      this.subclassOfId = 188555316;
      this._slots = ['thumb', 'thumbW', 'thumbH', 'duration', 'w', 'h', 'size', 'key', 'iv'];
      this.thumb = params.thumb;
      this.thumbW = params.thumbW;
      this.thumbH = params.thumbH;
      this.duration = params.duration;
      this.w = params.w;
      this.h = params.h;
      this.size = params.size;
      this.key = params.key;
      this.iv = params.iv;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let thumb = await Primitive.Bytes.read(b);
      let thumbW = await Primitive.Int.read(b);
      let thumbH = await Primitive.Int.read(b);
      let duration = await Primitive.Int.read(b);
      let w = await Primitive.Int.read(b);
      let h = await Primitive.Int.read(b);
      let size = await Primitive.Int.read(b);
      let key = await Primitive.Bytes.read(b);
      let iv = await Primitive.Bytes.read(b);
      return new Raw2.DecryptedMessageMediaVideo8({
        thumb,
        thumbW,
        thumbH,
        duration,
        w,
        h,
        size,
        key,
        iv,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.thumb !== void 0) {
        b.write(Primitive.Bytes.write(this.thumb));
      }
      if (this.thumbW !== void 0) {
        b.write(Primitive.Int.write(this.thumbW));
      }
      if (this.thumbH !== void 0) {
        b.write(Primitive.Int.write(this.thumbH));
      }
      if (this.duration !== void 0) {
        b.write(Primitive.Int.write(this.duration));
      }
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Int.write(this.size));
      }
      if (this.key !== void 0) {
        b.write(Primitive.Bytes.write(this.key));
      }
      if (this.iv !== void 0) {
        b.write(Primitive.Bytes.write(this.iv));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageMediaVideo8 = DecryptedMessageMediaVideo8;
  class DecryptedMessageMediaGeoPoint8 extends TLObject {
    lat;
    long;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageMediaGeoPoint8';
      this.constructorId = 893913689;
      this.subclassOfId = 188555316;
      this._slots = ['lat', 'long'];
      this.lat = params.lat;
      this.long = params.long;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let lat = await Primitive.Double.read(b);
      let long = await Primitive.Double.read(b);
      return new Raw2.DecryptedMessageMediaGeoPoint8({ lat, long });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.lat !== void 0) {
        b.write(Primitive.Double.write(this.lat));
      }
      if (this.long !== void 0) {
        b.write(Primitive.Double.write(this.long));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageMediaGeoPoint8 = DecryptedMessageMediaGeoPoint8;
  class DecryptedMessageMediaContact8 extends TLObject {
    phoneNumber;
    firstName;
    lastName;
    userId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageMediaContact8';
      this.constructorId = 1485441687;
      this.subclassOfId = 188555316;
      this._slots = ['phoneNumber', 'firstName', 'lastName', 'userId'];
      this.phoneNumber = params.phoneNumber;
      this.firstName = params.firstName;
      this.lastName = params.lastName;
      this.userId = params.userId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let phoneNumber = await Primitive.String.read(b);
      let firstName = await Primitive.String.read(b);
      let lastName = await Primitive.String.read(b);
      let userId = await Primitive.Int.read(b);
      return new Raw2.DecryptedMessageMediaContact8({
        phoneNumber,
        firstName,
        lastName,
        userId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.phoneNumber !== void 0) {
        b.write(Primitive.String.write(this.phoneNumber));
      }
      if (this.firstName !== void 0) {
        b.write(Primitive.String.write(this.firstName));
      }
      if (this.lastName !== void 0) {
        b.write(Primitive.String.write(this.lastName));
      }
      if (this.userId !== void 0) {
        b.write(Primitive.Int.write(this.userId));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageMediaContact8 = DecryptedMessageMediaContact8;
  class DecryptedMessageActionSetMessageTTL8 extends TLObject {
    ttlSeconds;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageActionSetMessageTTL8';
      this.constructorId = 2708683500;
      this.subclassOfId = 1873749389;
      this._slots = ['ttlSeconds'];
      this.ttlSeconds = params.ttlSeconds;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let ttlSeconds = await Primitive.Int.read(b);
      return new Raw2.DecryptedMessageActionSetMessageTTL8({ ttlSeconds });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.ttlSeconds !== void 0) {
        b.write(Primitive.Int.write(this.ttlSeconds));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageActionSetMessageTTL8 = DecryptedMessageActionSetMessageTTL8;
  class DecryptedMessageMediaDocument8 extends TLObject {
    thumb;
    thumbW;
    thumbH;
    fileName;
    mimeType;
    size;
    key;
    iv;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageMediaDocument8';
      this.constructorId = 2962572107;
      this.subclassOfId = 188555316;
      this._slots = ['thumb', 'thumbW', 'thumbH', 'fileName', 'mimeType', 'size', 'key', 'iv'];
      this.thumb = params.thumb;
      this.thumbW = params.thumbW;
      this.thumbH = params.thumbH;
      this.fileName = params.fileName;
      this.mimeType = params.mimeType;
      this.size = params.size;
      this.key = params.key;
      this.iv = params.iv;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let thumb = await Primitive.Bytes.read(b);
      let thumbW = await Primitive.Int.read(b);
      let thumbH = await Primitive.Int.read(b);
      let fileName = await Primitive.String.read(b);
      let mimeType = await Primitive.String.read(b);
      let size = await Primitive.Int.read(b);
      let key = await Primitive.Bytes.read(b);
      let iv = await Primitive.Bytes.read(b);
      return new Raw2.DecryptedMessageMediaDocument8({
        thumb,
        thumbW,
        thumbH,
        fileName,
        mimeType,
        size,
        key,
        iv,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.thumb !== void 0) {
        b.write(Primitive.Bytes.write(this.thumb));
      }
      if (this.thumbW !== void 0) {
        b.write(Primitive.Int.write(this.thumbW));
      }
      if (this.thumbH !== void 0) {
        b.write(Primitive.Int.write(this.thumbH));
      }
      if (this.fileName !== void 0) {
        b.write(Primitive.String.write(this.fileName));
      }
      if (this.mimeType !== void 0) {
        b.write(Primitive.String.write(this.mimeType));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Int.write(this.size));
      }
      if (this.key !== void 0) {
        b.write(Primitive.Bytes.write(this.key));
      }
      if (this.iv !== void 0) {
        b.write(Primitive.Bytes.write(this.iv));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageMediaDocument8 = DecryptedMessageMediaDocument8;
  class DecryptedMessageMediaAudio8 extends TLObject {
    duration;
    size;
    key;
    iv;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageMediaAudio8';
      this.constructorId = 1619031439;
      this.subclassOfId = 188555316;
      this._slots = ['duration', 'size', 'key', 'iv'];
      this.duration = params.duration;
      this.size = params.size;
      this.key = params.key;
      this.iv = params.iv;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let duration = await Primitive.Int.read(b);
      let size = await Primitive.Int.read(b);
      let key = await Primitive.Bytes.read(b);
      let iv = await Primitive.Bytes.read(b);
      return new Raw2.DecryptedMessageMediaAudio8({
        duration,
        size,
        key,
        iv,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.duration !== void 0) {
        b.write(Primitive.Int.write(this.duration));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Int.write(this.size));
      }
      if (this.key !== void 0) {
        b.write(Primitive.Bytes.write(this.key));
      }
      if (this.iv !== void 0) {
        b.write(Primitive.Bytes.write(this.iv));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageMediaAudio8 = DecryptedMessageMediaAudio8;
  class DecryptedMessageActionReadMessages8 extends TLObject {
    randomIds;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageActionReadMessages8';
      this.constructorId = 206520510;
      this.subclassOfId = 1873749389;
      this._slots = ['randomIds'];
      this.randomIds = params.randomIds;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let randomIds = await TLObject.read(b, Primitive.Long);
      return new Raw2.DecryptedMessageActionReadMessages8({ randomIds });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.randomIds) {
        b.write(Primitive.Vector.write(this.randomIds, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageActionReadMessages8 = DecryptedMessageActionReadMessages8;
  class DecryptedMessageActionDeleteMessages8 extends TLObject {
    randomIds;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageActionDeleteMessages8';
      this.constructorId = 1700872964;
      this.subclassOfId = 1873749389;
      this._slots = ['randomIds'];
      this.randomIds = params.randomIds;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let randomIds = await TLObject.read(b, Primitive.Long);
      return new Raw2.DecryptedMessageActionDeleteMessages8({ randomIds });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.randomIds) {
        b.write(Primitive.Vector.write(this.randomIds, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageActionDeleteMessages8 = DecryptedMessageActionDeleteMessages8;
  class DecryptedMessageActionScreenshotMessages8 extends TLObject {
    randomIds;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageActionScreenshotMessages8';
      this.constructorId = 2327966837;
      this.subclassOfId = 1873749389;
      this._slots = ['randomIds'];
      this.randomIds = params.randomIds;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let randomIds = await TLObject.read(b, Primitive.Long);
      return new Raw2.DecryptedMessageActionScreenshotMessages8({ randomIds });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.randomIds) {
        b.write(Primitive.Vector.write(this.randomIds, Primitive.Long));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageActionScreenshotMessages8 = DecryptedMessageActionScreenshotMessages8;
  class DecryptedMessageActionFlushHistory8 extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageActionFlushHistory8';
      this.constructorId = 1729750108;
      this.subclassOfId = 1873749389;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.DecryptedMessageActionFlushHistory8();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageActionFlushHistory8 = DecryptedMessageActionFlushHistory8;
  class DecryptedMessage17 extends TLObject {
    randomId;
    ttl;
    message;
    media;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessage17';
      this.constructorId = 541931640;
      this.subclassOfId = 1392711998;
      this._slots = ['randomId', 'ttl', 'message', 'media'];
      this.randomId = params.randomId;
      this.ttl = params.ttl;
      this.message = params.message;
      this.media = params.media;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let randomId = await Primitive.Long.read(b);
      let ttl = await Primitive.Int.read(b);
      let message = await Primitive.String.read(b);
      let media = await TLObject.read(b);
      return new Raw2.DecryptedMessage17({
        randomId,
        ttl,
        message,
        media,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.randomId !== void 0) {
        b.write(Primitive.Long.write(this.randomId));
      }
      if (this.ttl !== void 0) {
        b.write(Primitive.Int.write(this.ttl));
      }
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.media !== void 0) {
        b.write(this.media.write());
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessage17 = DecryptedMessage17;
  class DecryptedMessageService17 extends TLObject {
    randomId;
    action;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageService17';
      this.constructorId = 1930838368;
      this.subclassOfId = 1392711998;
      this._slots = ['randomId', 'action'];
      this.randomId = params.randomId;
      this.action = params.action;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let randomId = await Primitive.Long.read(b);
      let action = await TLObject.read(b);
      return new Raw2.DecryptedMessageService17({ randomId, action });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.randomId !== void 0) {
        b.write(Primitive.Long.write(this.randomId));
      }
      if (this.action !== void 0) {
        b.write(this.action.write());
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageService17 = DecryptedMessageService17;
  class DecryptedMessageMediaVideo17 extends TLObject {
    thumb;
    thumbW;
    thumbH;
    duration;
    mimeType;
    w;
    h;
    size;
    key;
    iv;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageMediaVideo17';
      this.constructorId = 1380598109;
      this.subclassOfId = 188555316;
      this._slots = [
        'thumb',
        'thumbW',
        'thumbH',
        'duration',
        'mimeType',
        'w',
        'h',
        'size',
        'key',
        'iv',
      ];
      this.thumb = params.thumb;
      this.thumbW = params.thumbW;
      this.thumbH = params.thumbH;
      this.duration = params.duration;
      this.mimeType = params.mimeType;
      this.w = params.w;
      this.h = params.h;
      this.size = params.size;
      this.key = params.key;
      this.iv = params.iv;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let thumb = await Primitive.Bytes.read(b);
      let thumbW = await Primitive.Int.read(b);
      let thumbH = await Primitive.Int.read(b);
      let duration = await Primitive.Int.read(b);
      let mimeType = await Primitive.String.read(b);
      let w = await Primitive.Int.read(b);
      let h = await Primitive.Int.read(b);
      let size = await Primitive.Int.read(b);
      let key = await Primitive.Bytes.read(b);
      let iv = await Primitive.Bytes.read(b);
      return new Raw2.DecryptedMessageMediaVideo17({
        thumb,
        thumbW,
        thumbH,
        duration,
        mimeType,
        w,
        h,
        size,
        key,
        iv,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.thumb !== void 0) {
        b.write(Primitive.Bytes.write(this.thumb));
      }
      if (this.thumbW !== void 0) {
        b.write(Primitive.Int.write(this.thumbW));
      }
      if (this.thumbH !== void 0) {
        b.write(Primitive.Int.write(this.thumbH));
      }
      if (this.duration !== void 0) {
        b.write(Primitive.Int.write(this.duration));
      }
      if (this.mimeType !== void 0) {
        b.write(Primitive.String.write(this.mimeType));
      }
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Int.write(this.size));
      }
      if (this.key !== void 0) {
        b.write(Primitive.Bytes.write(this.key));
      }
      if (this.iv !== void 0) {
        b.write(Primitive.Bytes.write(this.iv));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageMediaVideo17 = DecryptedMessageMediaVideo17;
  class DecryptedMessageMediaAudio17 extends TLObject {
    duration;
    mimeType;
    size;
    key;
    iv;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageMediaAudio17';
      this.constructorId = 1474341323;
      this.subclassOfId = 188555316;
      this._slots = ['duration', 'mimeType', 'size', 'key', 'iv'];
      this.duration = params.duration;
      this.mimeType = params.mimeType;
      this.size = params.size;
      this.key = params.key;
      this.iv = params.iv;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let duration = await Primitive.Int.read(b);
      let mimeType = await Primitive.String.read(b);
      let size = await Primitive.Int.read(b);
      let key = await Primitive.Bytes.read(b);
      let iv = await Primitive.Bytes.read(b);
      return new Raw2.DecryptedMessageMediaAudio17({
        duration,
        mimeType,
        size,
        key,
        iv,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.duration !== void 0) {
        b.write(Primitive.Int.write(this.duration));
      }
      if (this.mimeType !== void 0) {
        b.write(Primitive.String.write(this.mimeType));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Int.write(this.size));
      }
      if (this.key !== void 0) {
        b.write(Primitive.Bytes.write(this.key));
      }
      if (this.iv !== void 0) {
        b.write(Primitive.Bytes.write(this.iv));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageMediaAudio17 = DecryptedMessageMediaAudio17;
  class DecryptedMessageLayer17 extends TLObject {
    randomBytes;
    layer;
    inSeqNo;
    outSeqNo;
    message;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageLayer17';
      this.constructorId = 467867529;
      this.subclassOfId = 2244648994;
      this._slots = ['randomBytes', 'layer', 'inSeqNo', 'outSeqNo', 'message'];
      this.randomBytes = params.randomBytes;
      this.layer = params.layer;
      this.inSeqNo = params.inSeqNo;
      this.outSeqNo = params.outSeqNo;
      this.message = params.message;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let randomBytes = await Primitive.Bytes.read(b);
      let layer = await Primitive.Int.read(b);
      let inSeqNo = await Primitive.Int.read(b);
      let outSeqNo = await Primitive.Int.read(b);
      let message = await TLObject.read(b);
      return new Raw2.DecryptedMessageLayer17({
        randomBytes,
        layer,
        inSeqNo,
        outSeqNo,
        message,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.randomBytes !== void 0) {
        b.write(Primitive.Bytes.write(this.randomBytes));
      }
      if (this.layer !== void 0) {
        b.write(Primitive.Int.write(this.layer));
      }
      if (this.inSeqNo !== void 0) {
        b.write(Primitive.Int.write(this.inSeqNo));
      }
      if (this.outSeqNo !== void 0) {
        b.write(Primitive.Int.write(this.outSeqNo));
      }
      if (this.message !== void 0) {
        b.write(this.message.write());
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageLayer17 = DecryptedMessageLayer17;
  class SendMessageUploadVideoAction17 extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SendMessageUploadVideoAction17';
      this.constructorId = 2449747959;
      this.subclassOfId = 548588577;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SendMessageUploadVideoAction17();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SendMessageUploadVideoAction17 = SendMessageUploadVideoAction17;
  class SendMessageUploadAudioAction17 extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SendMessageUploadAudioAction17';
      this.constructorId = 3870067311;
      this.subclassOfId = 548588577;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SendMessageUploadAudioAction17();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SendMessageUploadAudioAction17 = SendMessageUploadAudioAction17;
  class SendMessageUploadPhotoAction17 extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SendMessageUploadPhotoAction17';
      this.constructorId = 2567584794;
      this.subclassOfId = 548588577;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SendMessageUploadPhotoAction17();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SendMessageUploadPhotoAction17 = SendMessageUploadPhotoAction17;
  class SendMessageUploadDocumentAction17 extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SendMessageUploadDocumentAction17';
      this.constructorId = 2410604942;
      this.subclassOfId = 548588577;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SendMessageUploadDocumentAction17();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SendMessageUploadDocumentAction17 = SendMessageUploadDocumentAction17;
  class DecryptedMessageActionResend17 extends TLObject {
    startSeqNo;
    endSeqNo;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageActionResend17';
      this.constructorId = 1360072880;
      this.subclassOfId = 1873749389;
      this._slots = ['startSeqNo', 'endSeqNo'];
      this.startSeqNo = params.startSeqNo;
      this.endSeqNo = params.endSeqNo;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let startSeqNo = await Primitive.Int.read(b);
      let endSeqNo = await Primitive.Int.read(b);
      return new Raw2.DecryptedMessageActionResend17({ startSeqNo, endSeqNo });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.startSeqNo !== void 0) {
        b.write(Primitive.Int.write(this.startSeqNo));
      }
      if (this.endSeqNo !== void 0) {
        b.write(Primitive.Int.write(this.endSeqNo));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageActionResend17 = DecryptedMessageActionResend17;
  class DecryptedMessageActionNotifyLayer17 extends TLObject {
    layer;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageActionNotifyLayer17';
      this.constructorId = 4077160579;
      this.subclassOfId = 1873749389;
      this._slots = ['layer'];
      this.layer = params.layer;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let layer = await Primitive.Int.read(b);
      return new Raw2.DecryptedMessageActionNotifyLayer17({ layer });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.layer !== void 0) {
        b.write(Primitive.Int.write(this.layer));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageActionNotifyLayer17 = DecryptedMessageActionNotifyLayer17;
  class DecryptedMessageActionTyping17 extends TLObject {
    action;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageActionTyping17';
      this.constructorId = 3434247745;
      this.subclassOfId = 1873749389;
      this._slots = ['action'];
      this.action = params.action;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let action = await TLObject.read(b);
      return new Raw2.DecryptedMessageActionTyping17({ action });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.action !== void 0) {
        b.write(this.action.write());
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageActionTyping17 = DecryptedMessageActionTyping17;
  class DecryptedMessageActionRequestKey20 extends TLObject {
    exchangeId;
    gA;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageActionRequestKey20';
      this.constructorId = 4090061083;
      this.subclassOfId = 1873749389;
      this._slots = ['exchangeId', 'gA'];
      this.exchangeId = params.exchangeId;
      this.gA = params.gA;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let exchangeId = await Primitive.Long.read(b);
      let gA = await Primitive.Bytes.read(b);
      return new Raw2.DecryptedMessageActionRequestKey20({ exchangeId, gA });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.exchangeId !== void 0) {
        b.write(Primitive.Long.write(this.exchangeId));
      }
      if (this.gA !== void 0) {
        b.write(Primitive.Bytes.write(this.gA));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageActionRequestKey20 = DecryptedMessageActionRequestKey20;
  class DecryptedMessageActionAcceptKey20 extends TLObject {
    exchangeId;
    gB;
    keyFingerprint;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageActionAcceptKey20';
      this.constructorId = 1877046107;
      this.subclassOfId = 1873749389;
      this._slots = ['exchangeId', 'gB', 'keyFingerprint'];
      this.exchangeId = params.exchangeId;
      this.gB = params.gB;
      this.keyFingerprint = params.keyFingerprint;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let exchangeId = await Primitive.Long.read(b);
      let gB = await Primitive.Bytes.read(b);
      let keyFingerprint = await Primitive.Long.read(b);
      return new Raw2.DecryptedMessageActionAcceptKey20({
        exchangeId,
        gB,
        keyFingerprint,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.exchangeId !== void 0) {
        b.write(Primitive.Long.write(this.exchangeId));
      }
      if (this.gB !== void 0) {
        b.write(Primitive.Bytes.write(this.gB));
      }
      if (this.keyFingerprint !== void 0) {
        b.write(Primitive.Long.write(this.keyFingerprint));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageActionAcceptKey20 = DecryptedMessageActionAcceptKey20;
  class DecryptedMessageActionAbortKey20 extends TLObject {
    exchangeId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageActionAbortKey20';
      this.constructorId = 3708152939;
      this.subclassOfId = 1873749389;
      this._slots = ['exchangeId'];
      this.exchangeId = params.exchangeId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let exchangeId = await Primitive.Long.read(b);
      return new Raw2.DecryptedMessageActionAbortKey20({ exchangeId });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.exchangeId !== void 0) {
        b.write(Primitive.Long.write(this.exchangeId));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageActionAbortKey20 = DecryptedMessageActionAbortKey20;
  class DecryptedMessageActionCommitKey20 extends TLObject {
    exchangeId;
    keyFingerprint;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageActionCommitKey20';
      this.constructorId = 3962440603;
      this.subclassOfId = 1873749389;
      this._slots = ['exchangeId', 'keyFingerprint'];
      this.exchangeId = params.exchangeId;
      this.keyFingerprint = params.keyFingerprint;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let exchangeId = await Primitive.Long.read(b);
      let keyFingerprint = await Primitive.Long.read(b);
      return new Raw2.DecryptedMessageActionCommitKey20({
        exchangeId,
        keyFingerprint,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.exchangeId !== void 0) {
        b.write(Primitive.Long.write(this.exchangeId));
      }
      if (this.keyFingerprint !== void 0) {
        b.write(Primitive.Long.write(this.keyFingerprint));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageActionCommitKey20 = DecryptedMessageActionCommitKey20;
  class DecryptedMessageActionNoop20 extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageActionNoop20';
      this.constructorId = 2821709155;
      this.subclassOfId = 1873749389;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.DecryptedMessageActionNoop20();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageActionNoop20 = DecryptedMessageActionNoop20;
  class DocumentAttributeSticker23 extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'DocumentAttributeSticker23';
      this.constructorId = 4211758887;
      this.subclassOfId = 4146719643;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.DocumentAttributeSticker23();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.DocumentAttributeSticker23 = DocumentAttributeSticker23;
  class DocumentAttributeVideo23 extends TLObject {
    duration;
    w;
    h;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DocumentAttributeVideo23';
      this.constructorId = 1494273227;
      this.subclassOfId = 4146719643;
      this._slots = ['duration', 'w', 'h'];
      this.duration = params.duration;
      this.w = params.w;
      this.h = params.h;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let duration = await Primitive.Int.read(b);
      let w = await Primitive.Int.read(b);
      let h = await Primitive.Int.read(b);
      return new Raw2.DocumentAttributeVideo23({ duration, w, h });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.duration !== void 0) {
        b.write(Primitive.Int.write(this.duration));
      }
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      return b.buffer;
    }
  }
  Raw2.DocumentAttributeVideo23 = DocumentAttributeVideo23;
  class DocumentAttributeAudio23 extends TLObject {
    duration;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DocumentAttributeAudio23';
      this.constructorId = 85215461;
      this.subclassOfId = 4146719643;
      this._slots = ['duration'];
      this.duration = params.duration;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let duration = await Primitive.Int.read(b);
      return new Raw2.DocumentAttributeAudio23({ duration });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.duration !== void 0) {
        b.write(Primitive.Int.write(this.duration));
      }
      return b.buffer;
    }
  }
  Raw2.DocumentAttributeAudio23 = DocumentAttributeAudio23;
  class PhotoSize23 extends TLObject {
    type;
    location;
    w;
    h;
    size;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PhotoSize23';
      this.constructorId = 2009052699;
      this.subclassOfId = 399256025;
      this._slots = ['type', 'location', 'w', 'h', 'size'];
      this.type = params.type;
      this.location = params.location;
      this.w = params.w;
      this.h = params.h;
      this.size = params.size;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let type = await Primitive.String.read(b);
      let location = await TLObject.read(b);
      let w = await Primitive.Int.read(b);
      let h = await Primitive.Int.read(b);
      let size = await Primitive.Int.read(b);
      return new Raw2.PhotoSize23({ type, location, w, h, size });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.type !== void 0) {
        b.write(Primitive.String.write(this.type));
      }
      if (this.location !== void 0) {
        b.write(this.location.write());
      }
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Int.write(this.size));
      }
      return b.buffer;
    }
  }
  Raw2.PhotoSize23 = PhotoSize23;
  class PhotoCachedSize23 extends TLObject {
    type;
    location;
    w;
    h;
    bytes;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'PhotoCachedSize23';
      this.constructorId = 3920049402;
      this.subclassOfId = 399256025;
      this._slots = ['type', 'location', 'w', 'h', 'bytes'];
      this.type = params.type;
      this.location = params.location;
      this.w = params.w;
      this.h = params.h;
      this.bytes = params.bytes;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let type = await Primitive.String.read(b);
      let location = await TLObject.read(b);
      let w = await Primitive.Int.read(b);
      let h = await Primitive.Int.read(b);
      let bytes = await Primitive.Bytes.read(b);
      return new Raw2.PhotoCachedSize23({
        type,
        location,
        w,
        h,
        bytes,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.type !== void 0) {
        b.write(Primitive.String.write(this.type));
      }
      if (this.location !== void 0) {
        b.write(this.location.write());
      }
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      if (this.bytes !== void 0) {
        b.write(Primitive.Bytes.write(this.bytes));
      }
      return b.buffer;
    }
  }
  Raw2.PhotoCachedSize23 = PhotoCachedSize23;
  class FileLocationUnavailable23 extends TLObject {
    volumeId;
    localId;
    secret;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'FileLocationUnavailable23';
      this.constructorId = 2086234950;
      this.subclassOfId = 2432133155;
      this._slots = ['volumeId', 'localId', 'secret'];
      this.volumeId = params.volumeId;
      this.localId = params.localId;
      this.secret = params.secret;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let volumeId = await Primitive.Long.read(b);
      let localId = await Primitive.Int.read(b);
      let secret = await Primitive.Long.read(b);
      return new Raw2.FileLocationUnavailable23({
        volumeId,
        localId,
        secret,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.volumeId !== void 0) {
        b.write(Primitive.Long.write(this.volumeId));
      }
      if (this.localId !== void 0) {
        b.write(Primitive.Int.write(this.localId));
      }
      if (this.secret !== void 0) {
        b.write(Primitive.Long.write(this.secret));
      }
      return b.buffer;
    }
  }
  Raw2.FileLocationUnavailable23 = FileLocationUnavailable23;
  class FileLocation23 extends TLObject {
    dcId;
    volumeId;
    localId;
    secret;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'FileLocation23';
      this.constructorId = 1406570614;
      this.subclassOfId = 2432133155;
      this._slots = ['dcId', 'volumeId', 'localId', 'secret'];
      this.dcId = params.dcId;
      this.volumeId = params.volumeId;
      this.localId = params.localId;
      this.secret = params.secret;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let dcId = await Primitive.Int.read(b);
      let volumeId = await Primitive.Long.read(b);
      let localId = await Primitive.Int.read(b);
      let secret = await Primitive.Long.read(b);
      return new Raw2.FileLocation23({
        dcId,
        volumeId,
        localId,
        secret,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.dcId !== void 0) {
        b.write(Primitive.Int.write(this.dcId));
      }
      if (this.volumeId !== void 0) {
        b.write(Primitive.Long.write(this.volumeId));
      }
      if (this.localId !== void 0) {
        b.write(Primitive.Int.write(this.localId));
      }
      if (this.secret !== void 0) {
        b.write(Primitive.Long.write(this.secret));
      }
      return b.buffer;
    }
  }
  Raw2.FileLocation23 = FileLocation23;
  class DecryptedMessageMediaExternalDocument23 extends TLObject {
    id;
    accessHash;
    date;
    mimeType;
    size;
    thumb;
    dcId;
    attributes;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageMediaExternalDocument23';
      this.constructorId = 4204114141;
      this.subclassOfId = 188555316;
      this._slots = ['id', 'accessHash', 'date', 'mimeType', 'size', 'thumb', 'dcId', 'attributes'];
      this.id = params.id;
      this.accessHash = params.accessHash;
      this.date = params.date;
      this.mimeType = params.mimeType;
      this.size = params.size;
      this.thumb = params.thumb;
      this.dcId = params.dcId;
      this.attributes = params.attributes;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let id = await Primitive.Long.read(b);
      let accessHash = await Primitive.Long.read(b);
      let date = await Primitive.Int.read(b);
      let mimeType = await Primitive.String.read(b);
      let size = await Primitive.Int.read(b);
      let thumb = await TLObject.read(b);
      let dcId = await Primitive.Int.read(b);
      let attributes = await TLObject.read(b);
      return new Raw2.DecryptedMessageMediaExternalDocument23({
        id,
        accessHash,
        date,
        mimeType,
        size,
        thumb,
        dcId,
        attributes,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.id !== void 0) {
        b.write(Primitive.Long.write(this.id));
      }
      if (this.accessHash !== void 0) {
        b.write(Primitive.Long.write(this.accessHash));
      }
      if (this.date !== void 0) {
        b.write(Primitive.Int.write(this.date));
      }
      if (this.mimeType !== void 0) {
        b.write(Primitive.String.write(this.mimeType));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Int.write(this.size));
      }
      if (this.thumb !== void 0) {
        b.write(this.thumb.write());
      }
      if (this.dcId !== void 0) {
        b.write(Primitive.Int.write(this.dcId));
      }
      if (this.attributes) {
        b.write(Primitive.Vector.write(this.attributes));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageMediaExternalDocument23 = DecryptedMessageMediaExternalDocument23;
  class DecryptedMessage45 extends TLObject {
    randomId;
    ttl;
    message;
    media;
    entities;
    viaBotName;
    replyToRandomId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessage45';
      this.constructorId = 917541342;
      this.subclassOfId = 1392711998;
      this._slots = [
        'randomId',
        'ttl',
        'message',
        'media',
        'entities',
        'viaBotName',
        'replyToRandomId',
      ];
      this.randomId = params.randomId;
      this.ttl = params.ttl;
      this.message = params.message;
      this.media = params.media;
      this.entities = params.entities;
      this.viaBotName = params.viaBotName;
      this.replyToRandomId = params.replyToRandomId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let randomId = await Primitive.Long.read(b);
      let ttl = await Primitive.Int.read(b);
      let message = await Primitive.String.read(b);
      let media = flags & (1 << 9) ? await TLObject.read(b) : void 0;
      let entities = flags & (1 << 7) ? await TLObject.read(b) : [];
      let viaBotName = flags & (1 << 11) ? await Primitive.String.read(b) : void 0;
      let replyToRandomId = flags & (1 << 3) ? await Primitive.Long.read(b) : void 0;
      return new Raw2.DecryptedMessage45({
        randomId,
        ttl,
        message,
        media,
        entities,
        viaBotName,
        replyToRandomId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.media !== void 0 ? 1 << 9 : 0;
      flags |= this.entities ? 1 << 7 : 0;
      flags |= this.viaBotName !== void 0 ? 1 << 11 : 0;
      flags |= this.replyToRandomId !== void 0 ? 1 << 3 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.randomId !== void 0) {
        b.write(Primitive.Long.write(this.randomId));
      }
      if (this.ttl !== void 0) {
        b.write(Primitive.Int.write(this.ttl));
      }
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.media !== void 0) {
        b.write(this.media.write());
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      if (this.viaBotName !== void 0) {
        b.write(Primitive.String.write(this.viaBotName));
      }
      if (this.replyToRandomId !== void 0) {
        b.write(Primitive.Long.write(this.replyToRandomId));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessage45 = DecryptedMessage45;
  class DecryptedMessageMediaPhoto45 extends TLObject {
    thumb;
    thumbW;
    thumbH;
    w;
    h;
    size;
    key;
    iv;
    caption;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageMediaPhoto45';
      this.constructorId = 4059729272;
      this.subclassOfId = 188555316;
      this._slots = ['thumb', 'thumbW', 'thumbH', 'w', 'h', 'size', 'key', 'iv', 'caption'];
      this.thumb = params.thumb;
      this.thumbW = params.thumbW;
      this.thumbH = params.thumbH;
      this.w = params.w;
      this.h = params.h;
      this.size = params.size;
      this.key = params.key;
      this.iv = params.iv;
      this.caption = params.caption;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let thumb = await Primitive.Bytes.read(b);
      let thumbW = await Primitive.Int.read(b);
      let thumbH = await Primitive.Int.read(b);
      let w = await Primitive.Int.read(b);
      let h = await Primitive.Int.read(b);
      let size = await Primitive.Int.read(b);
      let key = await Primitive.Bytes.read(b);
      let iv = await Primitive.Bytes.read(b);
      let caption = await Primitive.String.read(b);
      return new Raw2.DecryptedMessageMediaPhoto45({
        thumb,
        thumbW,
        thumbH,
        w,
        h,
        size,
        key,
        iv,
        caption,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.thumb !== void 0) {
        b.write(Primitive.Bytes.write(this.thumb));
      }
      if (this.thumbW !== void 0) {
        b.write(Primitive.Int.write(this.thumbW));
      }
      if (this.thumbH !== void 0) {
        b.write(Primitive.Int.write(this.thumbH));
      }
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Int.write(this.size));
      }
      if (this.key !== void 0) {
        b.write(Primitive.Bytes.write(this.key));
      }
      if (this.iv !== void 0) {
        b.write(Primitive.Bytes.write(this.iv));
      }
      if (this.caption !== void 0) {
        b.write(Primitive.String.write(this.caption));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageMediaPhoto45 = DecryptedMessageMediaPhoto45;
  class DecryptedMessageMediaVideo45 extends TLObject {
    thumb;
    thumbW;
    thumbH;
    duration;
    mimeType;
    w;
    h;
    size;
    key;
    iv;
    caption;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageMediaVideo45';
      this.constructorId = 2534181902;
      this.subclassOfId = 188555316;
      this._slots = [
        'thumb',
        'thumbW',
        'thumbH',
        'duration',
        'mimeType',
        'w',
        'h',
        'size',
        'key',
        'iv',
        'caption',
      ];
      this.thumb = params.thumb;
      this.thumbW = params.thumbW;
      this.thumbH = params.thumbH;
      this.duration = params.duration;
      this.mimeType = params.mimeType;
      this.w = params.w;
      this.h = params.h;
      this.size = params.size;
      this.key = params.key;
      this.iv = params.iv;
      this.caption = params.caption;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let thumb = await Primitive.Bytes.read(b);
      let thumbW = await Primitive.Int.read(b);
      let thumbH = await Primitive.Int.read(b);
      let duration = await Primitive.Int.read(b);
      let mimeType = await Primitive.String.read(b);
      let w = await Primitive.Int.read(b);
      let h = await Primitive.Int.read(b);
      let size = await Primitive.Int.read(b);
      let key = await Primitive.Bytes.read(b);
      let iv = await Primitive.Bytes.read(b);
      let caption = await Primitive.String.read(b);
      return new Raw2.DecryptedMessageMediaVideo45({
        thumb,
        thumbW,
        thumbH,
        duration,
        mimeType,
        w,
        h,
        size,
        key,
        iv,
        caption,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.thumb !== void 0) {
        b.write(Primitive.Bytes.write(this.thumb));
      }
      if (this.thumbW !== void 0) {
        b.write(Primitive.Int.write(this.thumbW));
      }
      if (this.thumbH !== void 0) {
        b.write(Primitive.Int.write(this.thumbH));
      }
      if (this.duration !== void 0) {
        b.write(Primitive.Int.write(this.duration));
      }
      if (this.mimeType !== void 0) {
        b.write(Primitive.String.write(this.mimeType));
      }
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Int.write(this.size));
      }
      if (this.key !== void 0) {
        b.write(Primitive.Bytes.write(this.key));
      }
      if (this.iv !== void 0) {
        b.write(Primitive.Bytes.write(this.iv));
      }
      if (this.caption !== void 0) {
        b.write(Primitive.String.write(this.caption));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageMediaVideo45 = DecryptedMessageMediaVideo45;
  class DecryptedMessageMediaDocument45 extends TLObject {
    thumb;
    thumbW;
    thumbH;
    mimeType;
    size;
    key;
    iv;
    attributes;
    caption;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageMediaDocument45';
      this.constructorId = 2063502050;
      this.subclassOfId = 188555316;
      this._slots = [
        'thumb',
        'thumbW',
        'thumbH',
        'mimeType',
        'size',
        'key',
        'iv',
        'attributes',
        'caption',
      ];
      this.thumb = params.thumb;
      this.thumbW = params.thumbW;
      this.thumbH = params.thumbH;
      this.mimeType = params.mimeType;
      this.size = params.size;
      this.key = params.key;
      this.iv = params.iv;
      this.attributes = params.attributes;
      this.caption = params.caption;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let thumb = await Primitive.Bytes.read(b);
      let thumbW = await Primitive.Int.read(b);
      let thumbH = await Primitive.Int.read(b);
      let mimeType = await Primitive.String.read(b);
      let size = await Primitive.Int.read(b);
      let key = await Primitive.Bytes.read(b);
      let iv = await Primitive.Bytes.read(b);
      let attributes = await TLObject.read(b);
      let caption = await Primitive.String.read(b);
      return new Raw2.DecryptedMessageMediaDocument45({
        thumb,
        thumbW,
        thumbH,
        mimeType,
        size,
        key,
        iv,
        attributes,
        caption,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.thumb !== void 0) {
        b.write(Primitive.Bytes.write(this.thumb));
      }
      if (this.thumbW !== void 0) {
        b.write(Primitive.Int.write(this.thumbW));
      }
      if (this.thumbH !== void 0) {
        b.write(Primitive.Int.write(this.thumbH));
      }
      if (this.mimeType !== void 0) {
        b.write(Primitive.String.write(this.mimeType));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Int.write(this.size));
      }
      if (this.key !== void 0) {
        b.write(Primitive.Bytes.write(this.key));
      }
      if (this.iv !== void 0) {
        b.write(Primitive.Bytes.write(this.iv));
      }
      if (this.attributes) {
        b.write(Primitive.Vector.write(this.attributes));
      }
      if (this.caption !== void 0) {
        b.write(Primitive.String.write(this.caption));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageMediaDocument45 = DecryptedMessageMediaDocument45;
  class DocumentAttributeSticker45 extends TLObject {
    alt;
    stickerset;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DocumentAttributeSticker45';
      this.constructorId = 978674434;
      this.subclassOfId = 4146719643;
      this._slots = ['alt', 'stickerset'];
      this.alt = params.alt;
      this.stickerset = params.stickerset;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let alt = await Primitive.String.read(b);
      let stickerset = await TLObject.read(b);
      return new Raw2.DocumentAttributeSticker45({ alt, stickerset });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.alt !== void 0) {
        b.write(Primitive.String.write(this.alt));
      }
      if (this.stickerset !== void 0) {
        b.write(this.stickerset.write());
      }
      return b.buffer;
    }
  }
  Raw2.DocumentAttributeSticker45 = DocumentAttributeSticker45;
  class DocumentAttributeAudio45 extends TLObject {
    duration;
    title;
    performer;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DocumentAttributeAudio45';
      this.constructorId = 3738310880;
      this.subclassOfId = 4146719643;
      this._slots = ['duration', 'title', 'performer'];
      this.duration = params.duration;
      this.title = params.title;
      this.performer = params.performer;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let duration = await Primitive.Int.read(b);
      let title = await Primitive.String.read(b);
      let performer = await Primitive.String.read(b);
      return new Raw2.DocumentAttributeAudio45({
        duration,
        title,
        performer,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.duration !== void 0) {
        b.write(Primitive.Int.write(this.duration));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.performer !== void 0) {
        b.write(Primitive.String.write(this.performer));
      }
      return b.buffer;
    }
  }
  Raw2.DocumentAttributeAudio45 = DocumentAttributeAudio45;
  class DecryptedMessageMediaVenue45 extends TLObject {
    lat;
    long;
    title;
    address;
    provider;
    venueId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageMediaVenue45';
      this.constructorId = 2316170607;
      this.subclassOfId = 188555316;
      this._slots = ['lat', 'long', 'title', 'address', 'provider', 'venueId'];
      this.lat = params.lat;
      this.long = params.long;
      this.title = params.title;
      this.address = params.address;
      this.provider = params.provider;
      this.venueId = params.venueId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let lat = await Primitive.Double.read(b);
      let long = await Primitive.Double.read(b);
      let title = await Primitive.String.read(b);
      let address = await Primitive.String.read(b);
      let provider = await Primitive.String.read(b);
      let venueId = await Primitive.String.read(b);
      return new Raw2.DecryptedMessageMediaVenue45({
        lat,
        long,
        title,
        address,
        provider,
        venueId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.lat !== void 0) {
        b.write(Primitive.Double.write(this.lat));
      }
      if (this.long !== void 0) {
        b.write(Primitive.Double.write(this.long));
      }
      if (this.title !== void 0) {
        b.write(Primitive.String.write(this.title));
      }
      if (this.address !== void 0) {
        b.write(Primitive.String.write(this.address));
      }
      if (this.provider !== void 0) {
        b.write(Primitive.String.write(this.provider));
      }
      if (this.venueId !== void 0) {
        b.write(Primitive.String.write(this.venueId));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageMediaVenue45 = DecryptedMessageMediaVenue45;
  class DecryptedMessageMediaWebPage45 extends TLObject {
    url;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageMediaWebPage45';
      this.constructorId = 3842314712;
      this.subclassOfId = 188555316;
      this._slots = ['url'];
      this.url = params.url;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let url = await Primitive.String.read(b);
      return new Raw2.DecryptedMessageMediaWebPage45({ url });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.url !== void 0) {
        b.write(Primitive.String.write(this.url));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageMediaWebPage45 = DecryptedMessageMediaWebPage45;
  class DocumentAttributeVideo66 extends TLObject {
    roundMessage;
    duration;
    w;
    h;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DocumentAttributeVideo66';
      this.constructorId = 250621158;
      this.subclassOfId = 4146719643;
      this._slots = ['roundMessage', 'duration', 'w', 'h'];
      this.roundMessage = params.roundMessage;
      this.duration = params.duration;
      this.w = params.w;
      this.h = params.h;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let roundMessage = flags & (1 << 0) ? true : false;
      let duration = await Primitive.Int.read(b);
      let w = await Primitive.Int.read(b);
      let h = await Primitive.Int.read(b);
      return new Raw2.DocumentAttributeVideo66({
        roundMessage,
        duration,
        w,
        h,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.roundMessage ? 1 << 0 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.duration !== void 0) {
        b.write(Primitive.Int.write(this.duration));
      }
      if (this.w !== void 0) {
        b.write(Primitive.Int.write(this.w));
      }
      if (this.h !== void 0) {
        b.write(Primitive.Int.write(this.h));
      }
      return b.buffer;
    }
  }
  Raw2.DocumentAttributeVideo66 = DocumentAttributeVideo66;
  class SendMessageUploadRoundAction66 extends TLObject {
    constructor() {
      super();
      this.classType = 'types';
      this.className = 'SendMessageUploadRoundAction66';
      this.constructorId = 3144779300;
      this.subclassOfId = 548588577;
      this._slots = [];
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      return new Raw2.SendMessageUploadRoundAction66();
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      return b.buffer;
    }
  }
  Raw2.SendMessageUploadRoundAction66 = SendMessageUploadRoundAction66;
  class DecryptedMessage73 extends TLObject {
    noWebpage;
    silent;
    randomId;
    ttl;
    message;
    media;
    entities;
    viaBotName;
    replyToRandomId;
    groupedId;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessage73';
      this.constructorId = 2446083700;
      this.subclassOfId = 1392711998;
      this._slots = [
        'noWebpage',
        'silent',
        'randomId',
        'ttl',
        'message',
        'media',
        'entities',
        'viaBotName',
        'replyToRandomId',
        'groupedId',
      ];
      this.noWebpage = params.noWebpage;
      this.silent = params.silent;
      this.randomId = params.randomId;
      this.ttl = params.ttl;
      this.message = params.message;
      this.media = params.media;
      this.entities = params.entities;
      this.viaBotName = params.viaBotName;
      this.replyToRandomId = params.replyToRandomId;
      this.groupedId = params.groupedId;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let flags = await Primitive.Int.read(b);
      let noWebpage = flags & (1 << 1) ? true : false;
      let silent = flags & (1 << 5) ? true : false;
      let randomId = await Primitive.Long.read(b);
      let ttl = await Primitive.Int.read(b);
      let message = await Primitive.String.read(b);
      let media = flags & (1 << 9) ? await TLObject.read(b) : void 0;
      let entities = flags & (1 << 7) ? await TLObject.read(b) : [];
      let viaBotName = flags & (1 << 11) ? await Primitive.String.read(b) : void 0;
      let replyToRandomId = flags & (1 << 3) ? await Primitive.Long.read(b) : void 0;
      let groupedId = flags & (1 << 17) ? await Primitive.Long.read(b) : void 0;
      return new Raw2.DecryptedMessage73({
        noWebpage,
        silent,
        randomId,
        ttl,
        message,
        media,
        entities,
        viaBotName,
        replyToRandomId,
        groupedId,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      let flags = 0;
      flags |= this.noWebpage ? 1 << 1 : 0;
      flags |= this.silent ? 1 << 5 : 0;
      flags |= this.media !== void 0 ? 1 << 9 : 0;
      flags |= this.entities ? 1 << 7 : 0;
      flags |= this.viaBotName !== void 0 ? 1 << 11 : 0;
      flags |= this.replyToRandomId !== void 0 ? 1 << 3 : 0;
      flags |= this.groupedId !== void 0 ? 1 << 17 : 0;
      b.write(Primitive.Int.write(flags));
      if (this.randomId !== void 0) {
        b.write(Primitive.Long.write(this.randomId));
      }
      if (this.ttl !== void 0) {
        b.write(Primitive.Int.write(this.ttl));
      }
      if (this.message !== void 0) {
        b.write(Primitive.String.write(this.message));
      }
      if (this.media !== void 0) {
        b.write(this.media.write());
      }
      if (this.entities) {
        b.write(Primitive.Vector.write(this.entities));
      }
      if (this.viaBotName !== void 0) {
        b.write(Primitive.String.write(this.viaBotName));
      }
      if (this.replyToRandomId !== void 0) {
        b.write(Primitive.Long.write(this.replyToRandomId));
      }
      if (this.groupedId !== void 0) {
        b.write(Primitive.Long.write(this.groupedId));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessage73 = DecryptedMessage73;
  class DecryptedMessageMediaDocument143 extends TLObject {
    thumb;
    thumbW;
    thumbH;
    mimeType;
    size;
    key;
    iv;
    attributes;
    caption;
    constructor(params) {
      super();
      this.classType = 'types';
      this.className = 'DecryptedMessageMediaDocument143';
      this.constructorId = 1790809986;
      this.subclassOfId = 188555316;
      this._slots = [
        'thumb',
        'thumbW',
        'thumbH',
        'mimeType',
        'size',
        'key',
        'iv',
        'attributes',
        'caption',
      ];
      this.thumb = params.thumb;
      this.thumbW = params.thumbW;
      this.thumbH = params.thumbH;
      this.mimeType = params.mimeType;
      this.size = params.size;
      this.key = params.key;
      this.iv = params.iv;
      this.attributes = params.attributes;
      this.caption = params.caption;
    }
    /**
     * Generate the TLObject from buffer.
     * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
     */
    static async read(b, ...args) {
      let thumb = await Primitive.Bytes.read(b);
      let thumbW = await Primitive.Int.read(b);
      let thumbH = await Primitive.Int.read(b);
      let mimeType = await Primitive.String.read(b);
      let size = await Primitive.Long.read(b);
      let key = await Primitive.Bytes.read(b);
      let iv = await Primitive.Bytes.read(b);
      let attributes = await TLObject.read(b);
      let caption = await Primitive.String.read(b);
      return new Raw2.DecryptedMessageMediaDocument143({
        thumb,
        thumbW,
        thumbH,
        mimeType,
        size,
        key,
        iv,
        attributes,
        caption,
      });
    }
    /**
     * Generate buffer from TLObject.
     */
    write() {
      let b = new BytesIO();
      b.write(Primitive.Int.write(this.constructorId, false));
      if (this.thumb !== void 0) {
        b.write(Primitive.Bytes.write(this.thumb));
      }
      if (this.thumbW !== void 0) {
        b.write(Primitive.Int.write(this.thumbW));
      }
      if (this.thumbH !== void 0) {
        b.write(Primitive.Int.write(this.thumbH));
      }
      if (this.mimeType !== void 0) {
        b.write(Primitive.String.write(this.mimeType));
      }
      if (this.size !== void 0) {
        b.write(Primitive.Long.write(this.size));
      }
      if (this.key !== void 0) {
        b.write(Primitive.Bytes.write(this.key));
      }
      if (this.iv !== void 0) {
        b.write(Primitive.Bytes.write(this.iv));
      }
      if (this.attributes) {
        b.write(Primitive.Vector.write(this.attributes));
      }
      if (this.caption !== void 0) {
        b.write(Primitive.String.write(this.caption));
      }
      return b.buffer;
    }
  }
  Raw2.DecryptedMessageMediaDocument143 = DecryptedMessageMediaDocument143;
  let help;
  ((help2) => {
    class ConfigSimple extends TLObject {
      date;
      expires;
      rules;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.ConfigSimple';
        this.constructorId = 1515793004;
        this.subclassOfId = 689453764;
        this._slots = ['date', 'expires', 'rules'];
        this.date = params.date;
        this.expires = params.expires;
        this.rules = params.rules;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let date = await Primitive.Int.read(b);
        let expires = await Primitive.Int.read(b);
        let rules = await TLObject.read(b);
        return new Raw2.help.ConfigSimple({ date, expires, rules });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.date !== void 0) {
          b.write(Primitive.Int.write(this.date));
        }
        if (this.expires !== void 0) {
          b.write(Primitive.Int.write(this.expires));
        }
        if (this.rules) {
          b.write(Primitive.Vector.write(this.rules));
        }
        return b.buffer;
      }
    }
    help2.ConfigSimple = ConfigSimple;
    class AppUpdate extends TLObject {
      canNotSkip;
      id;
      version;
      text;
      entities;
      document;
      url;
      sticker;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.AppUpdate';
        this.constructorId = 3434860080;
        this.subclassOfId = 1486292638;
        this._slots = [
          'canNotSkip',
          'id',
          'version',
          'text',
          'entities',
          'document',
          'url',
          'sticker',
        ];
        this.canNotSkip = params.canNotSkip;
        this.id = params.id;
        this.version = params.version;
        this.text = params.text;
        this.entities = params.entities;
        this.document = params.document;
        this.url = params.url;
        this.sticker = params.sticker;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let canNotSkip = flags & (1 << 0) ? true : false;
        let id = await Primitive.Int.read(b);
        let version = await Primitive.String.read(b);
        let text = await Primitive.String.read(b);
        let entities = await TLObject.read(b);
        let document = flags & (1 << 1) ? await TLObject.read(b) : void 0;
        let url = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
        let sticker = flags & (1 << 3) ? await TLObject.read(b) : void 0;
        return new Raw2.help.AppUpdate({
          canNotSkip,
          id,
          version,
          text,
          entities,
          document,
          url,
          sticker,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.canNotSkip ? 1 << 0 : 0;
        flags |= this.document !== void 0 ? 1 << 1 : 0;
        flags |= this.url !== void 0 ? 1 << 2 : 0;
        flags |= this.sticker !== void 0 ? 1 << 3 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.id !== void 0) {
          b.write(Primitive.Int.write(this.id));
        }
        if (this.version !== void 0) {
          b.write(Primitive.String.write(this.version));
        }
        if (this.text !== void 0) {
          b.write(Primitive.String.write(this.text));
        }
        if (this.entities) {
          b.write(Primitive.Vector.write(this.entities));
        }
        if (this.document !== void 0) {
          b.write(this.document.write());
        }
        if (this.url !== void 0) {
          b.write(Primitive.String.write(this.url));
        }
        if (this.sticker !== void 0) {
          b.write(this.sticker.write());
        }
        return b.buffer;
      }
    }
    help2.AppUpdate = AppUpdate;
    class NoAppUpdate extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'help.NoAppUpdate';
        this.constructorId = 3294258486;
        this.subclassOfId = 1486292638;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.help.NoAppUpdate();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    help2.NoAppUpdate = NoAppUpdate;
    class InviteText extends TLObject {
      message;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.InviteText';
        this.constructorId = 415997816;
        this.subclassOfId = 3480267317;
        this._slots = ['message'];
        this.message = params.message;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let message = await Primitive.String.read(b);
        return new Raw2.help.InviteText({ message });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.message !== void 0) {
          b.write(Primitive.String.write(this.message));
        }
        return b.buffer;
      }
    }
    help2.InviteText = InviteText;
    class Support extends TLObject {
      phoneNumber;
      user;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.Support';
        this.constructorId = 398898678;
        this.subclassOfId = 1901706475;
        this._slots = ['phoneNumber', 'user'];
        this.phoneNumber = params.phoneNumber;
        this.user = params.user;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let phoneNumber = await Primitive.String.read(b);
        let user = await TLObject.read(b);
        return new Raw2.help.Support({ phoneNumber, user });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.phoneNumber !== void 0) {
          b.write(Primitive.String.write(this.phoneNumber));
        }
        if (this.user !== void 0) {
          b.write(this.user.write());
        }
        return b.buffer;
      }
    }
    help2.Support = Support;
    class TermsOfService extends TLObject {
      popup;
      id;
      text;
      entities;
      minAgeConfirm;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.TermsOfService';
        this.constructorId = 2013922064;
        this.subclassOfId = 552502034;
        this._slots = ['popup', 'id', 'text', 'entities', 'minAgeConfirm'];
        this.popup = params.popup;
        this.id = params.id;
        this.text = params.text;
        this.entities = params.entities;
        this.minAgeConfirm = params.minAgeConfirm;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let popup = flags & (1 << 0) ? true : false;
        let id = await TLObject.read(b);
        let text = await Primitive.String.read(b);
        let entities = await TLObject.read(b);
        let minAgeConfirm = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.help.TermsOfService({
          popup,
          id,
          text,
          entities,
          minAgeConfirm,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.popup ? 1 << 0 : 0;
        flags |= this.minAgeConfirm !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.id !== void 0) {
          b.write(this.id.write());
        }
        if (this.text !== void 0) {
          b.write(Primitive.String.write(this.text));
        }
        if (this.entities) {
          b.write(Primitive.Vector.write(this.entities));
        }
        if (this.minAgeConfirm !== void 0) {
          b.write(Primitive.Int.write(this.minAgeConfirm));
        }
        return b.buffer;
      }
    }
    help2.TermsOfService = TermsOfService;
    class RecentMeUrls extends TLObject {
      urls;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.RecentMeUrls';
        this.constructorId = 235081943;
        this.subclassOfId = 4067017847;
        this._slots = ['urls', 'chats', 'users'];
        this.urls = params.urls;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let urls = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.help.RecentMeUrls({ urls, chats, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.urls) {
          b.write(Primitive.Vector.write(this.urls));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    help2.RecentMeUrls = RecentMeUrls;
    class TermsOfServiceUpdateEmpty extends TLObject {
      expires;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.TermsOfServiceUpdateEmpty';
        this.constructorId = 3811614591;
        this.subclassOfId = 691808631;
        this._slots = ['expires'];
        this.expires = params.expires;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let expires = await Primitive.Int.read(b);
        return new Raw2.help.TermsOfServiceUpdateEmpty({ expires });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.expires !== void 0) {
          b.write(Primitive.Int.write(this.expires));
        }
        return b.buffer;
      }
    }
    help2.TermsOfServiceUpdateEmpty = TermsOfServiceUpdateEmpty;
    class TermsOfServiceUpdate extends TLObject {
      expires;
      termsOfService;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.TermsOfServiceUpdate';
        this.constructorId = 686618977;
        this.subclassOfId = 691808631;
        this._slots = ['expires', 'termsOfService'];
        this.expires = params.expires;
        this.termsOfService = params.termsOfService;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let expires = await Primitive.Int.read(b);
        let termsOfService = await TLObject.read(b);
        return new Raw2.help.TermsOfServiceUpdate({
          expires,
          termsOfService,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.expires !== void 0) {
          b.write(Primitive.Int.write(this.expires));
        }
        if (this.termsOfService !== void 0) {
          b.write(this.termsOfService.write());
        }
        return b.buffer;
      }
    }
    help2.TermsOfServiceUpdate = TermsOfServiceUpdate;
    class DeepLinkInfoEmpty extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'help.DeepLinkInfoEmpty';
        this.constructorId = 1722786150;
        this.subclassOfId = 2555030584;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.help.DeepLinkInfoEmpty();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    help2.DeepLinkInfoEmpty = DeepLinkInfoEmpty;
    class DeepLinkInfo extends TLObject {
      updateApp;
      message;
      entities;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.DeepLinkInfo';
        this.constructorId = 1783556146;
        this.subclassOfId = 2555030584;
        this._slots = ['updateApp', 'message', 'entities'];
        this.updateApp = params.updateApp;
        this.message = params.message;
        this.entities = params.entities;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let updateApp = flags & (1 << 0) ? true : false;
        let message = await Primitive.String.read(b);
        let entities = flags & (1 << 1) ? await TLObject.read(b) : [];
        return new Raw2.help.DeepLinkInfo({
          updateApp,
          message,
          entities,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.updateApp ? 1 << 0 : 0;
        flags |= this.entities ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.message !== void 0) {
          b.write(Primitive.String.write(this.message));
        }
        if (this.entities) {
          b.write(Primitive.Vector.write(this.entities));
        }
        return b.buffer;
      }
    }
    help2.DeepLinkInfo = DeepLinkInfo;
    class PassportConfigNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'help.PassportConfigNotModified';
        this.constructorId = 3216634967;
        this.subclassOfId = 3328622765;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.help.PassportConfigNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    help2.PassportConfigNotModified = PassportConfigNotModified;
    class PassportConfig extends TLObject {
      hash;
      countriesLangs;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.PassportConfig';
        this.constructorId = 2694370991;
        this.subclassOfId = 3328622765;
        this._slots = ['hash', 'countriesLangs'];
        this.hash = params.hash;
        this.countriesLangs = params.countriesLangs;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Int.read(b);
        let countriesLangs = await TLObject.read(b);
        return new Raw2.help.PassportConfig({ hash, countriesLangs });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        if (this.countriesLangs !== void 0) {
          b.write(this.countriesLangs.write());
        }
        return b.buffer;
      }
    }
    help2.PassportConfig = PassportConfig;
    class SupportName extends TLObject {
      name;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.SupportName';
        this.constructorId = 2349199817;
        this.subclassOfId = 2135996354;
        this._slots = ['name'];
        this.name = params.name;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let name = await Primitive.String.read(b);
        return new Raw2.help.SupportName({ name });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.name !== void 0) {
          b.write(Primitive.String.write(this.name));
        }
        return b.buffer;
      }
    }
    help2.SupportName = SupportName;
    class UserInfoEmpty extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'help.UserInfoEmpty';
        this.constructorId = 4088278765;
        this.subclassOfId = 1548998616;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.help.UserInfoEmpty();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    help2.UserInfoEmpty = UserInfoEmpty;
    class UserInfo extends TLObject {
      message;
      entities;
      author;
      date;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.UserInfo';
        this.constructorId = 32192344;
        this.subclassOfId = 1548998616;
        this._slots = ['message', 'entities', 'author', 'date'];
        this.message = params.message;
        this.entities = params.entities;
        this.author = params.author;
        this.date = params.date;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let message = await Primitive.String.read(b);
        let entities = await TLObject.read(b);
        let author = await Primitive.String.read(b);
        let date = await Primitive.Int.read(b);
        return new Raw2.help.UserInfo({
          message,
          entities,
          author,
          date,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.message !== void 0) {
          b.write(Primitive.String.write(this.message));
        }
        if (this.entities) {
          b.write(Primitive.Vector.write(this.entities));
        }
        if (this.author !== void 0) {
          b.write(Primitive.String.write(this.author));
        }
        if (this.date !== void 0) {
          b.write(Primitive.Int.write(this.date));
        }
        return b.buffer;
      }
    }
    help2.UserInfo = UserInfo;
    class PromoDataEmpty extends TLObject {
      expires;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.PromoDataEmpty';
        this.constructorId = 2566302837;
        this.subclassOfId = 2639877442;
        this._slots = ['expires'];
        this.expires = params.expires;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let expires = await Primitive.Int.read(b);
        return new Raw2.help.PromoDataEmpty({ expires });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.expires !== void 0) {
          b.write(Primitive.Int.write(this.expires));
        }
        return b.buffer;
      }
    }
    help2.PromoDataEmpty = PromoDataEmpty;
    class PromoData extends TLObject {
      proxy;
      expires;
      peer;
      chats;
      users;
      psaType;
      psaMessage;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.PromoData';
        this.constructorId = 2352576831;
        this.subclassOfId = 2639877442;
        this._slots = ['proxy', 'expires', 'peer', 'chats', 'users', 'psaType', 'psaMessage'];
        this.proxy = params.proxy;
        this.expires = params.expires;
        this.peer = params.peer;
        this.chats = params.chats;
        this.users = params.users;
        this.psaType = params.psaType;
        this.psaMessage = params.psaMessage;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let proxy = flags & (1 << 0) ? true : false;
        let expires = await Primitive.Int.read(b);
        let peer = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        let psaType = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let psaMessage = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
        return new Raw2.help.PromoData({
          proxy,
          expires,
          peer,
          chats,
          users: users2,
          psaType,
          psaMessage,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.proxy ? 1 << 0 : 0;
        flags |= this.psaType !== void 0 ? 1 << 1 : 0;
        flags |= this.psaMessage !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.expires !== void 0) {
          b.write(Primitive.Int.write(this.expires));
        }
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        if (this.psaType !== void 0) {
          b.write(Primitive.String.write(this.psaType));
        }
        if (this.psaMessage !== void 0) {
          b.write(Primitive.String.write(this.psaMessage));
        }
        return b.buffer;
      }
    }
    help2.PromoData = PromoData;
    class CountryCode extends TLObject {
      countryCode;
      prefixes;
      patterns;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.CountryCode';
        this.constructorId = 1107543535;
        this.subclassOfId = 1995654757;
        this._slots = ['countryCode', 'prefixes', 'patterns'];
        this.countryCode = params.countryCode;
        this.prefixes = params.prefixes;
        this.patterns = params.patterns;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let countryCode = await Primitive.String.read(b);
        let prefixes = flags & (1 << 0) ? await TLObject.read(b, Primitive.String) : [];
        let patterns = flags & (1 << 1) ? await TLObject.read(b, Primitive.String) : [];
        return new Raw2.help.CountryCode({
          countryCode,
          prefixes,
          patterns,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.prefixes ? 1 << 0 : 0;
        flags |= this.patterns ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.countryCode !== void 0) {
          b.write(Primitive.String.write(this.countryCode));
        }
        if (this.prefixes) {
          b.write(Primitive.Vector.write(this.prefixes, Primitive.String));
        }
        if (this.patterns) {
          b.write(Primitive.Vector.write(this.patterns, Primitive.String));
        }
        return b.buffer;
      }
    }
    help2.CountryCode = CountryCode;
    class Country extends TLObject {
      hidden;
      iso2;
      defaultName;
      name;
      countryCodes;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.Country';
        this.constructorId = 3280440867;
        this.subclassOfId = 2720964136;
        this._slots = ['hidden', 'iso2', 'defaultName', 'name', 'countryCodes'];
        this.hidden = params.hidden;
        this.iso2 = params.iso2;
        this.defaultName = params.defaultName;
        this.name = params.name;
        this.countryCodes = params.countryCodes;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let hidden = flags & (1 << 0) ? true : false;
        let iso2 = await Primitive.String.read(b);
        let defaultName = await Primitive.String.read(b);
        let name = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let countryCodes = await TLObject.read(b);
        return new Raw2.help.Country({
          hidden,
          iso2,
          defaultName,
          name,
          countryCodes,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.hidden ? 1 << 0 : 0;
        flags |= this.name !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.iso2 !== void 0) {
          b.write(Primitive.String.write(this.iso2));
        }
        if (this.defaultName !== void 0) {
          b.write(Primitive.String.write(this.defaultName));
        }
        if (this.name !== void 0) {
          b.write(Primitive.String.write(this.name));
        }
        if (this.countryCodes) {
          b.write(Primitive.Vector.write(this.countryCodes));
        }
        return b.buffer;
      }
    }
    help2.Country = Country;
    class CountriesListNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'help.CountriesListNotModified';
        this.constructorId = 2479628082;
        this.subclassOfId = 3929144968;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.help.CountriesListNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    help2.CountriesListNotModified = CountriesListNotModified;
    class CountriesList extends TLObject {
      countries;
      hash;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.CountriesList';
        this.constructorId = 2278585758;
        this.subclassOfId = 3929144968;
        this._slots = ['countries', 'hash'];
        this.countries = params.countries;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let countries = await TLObject.read(b);
        let hash = await Primitive.Int.read(b);
        return new Raw2.help.CountriesList({ countries, hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.countries) {
          b.write(Primitive.Vector.write(this.countries));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        return b.buffer;
      }
    }
    help2.CountriesList = CountriesList;
    class PremiumPromo extends TLObject {
      statusText;
      statusEntities;
      videoSections;
      videos;
      periodOptions;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.PremiumPromo';
        this.constructorId = 1395946908;
        this.subclassOfId = 3381109560;
        this._slots = [
          'statusText',
          'statusEntities',
          'videoSections',
          'videos',
          'periodOptions',
          'users',
        ];
        this.statusText = params.statusText;
        this.statusEntities = params.statusEntities;
        this.videoSections = params.videoSections;
        this.videos = params.videos;
        this.periodOptions = params.periodOptions;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let statusText = await Primitive.String.read(b);
        let statusEntities = await TLObject.read(b);
        let videoSections = await TLObject.read(b, Primitive.String);
        let videos = await TLObject.read(b);
        let periodOptions = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.help.PremiumPromo({
          statusText,
          statusEntities,
          videoSections,
          videos,
          periodOptions,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.statusText !== void 0) {
          b.write(Primitive.String.write(this.statusText));
        }
        if (this.statusEntities) {
          b.write(Primitive.Vector.write(this.statusEntities));
        }
        if (this.videoSections) {
          b.write(Primitive.Vector.write(this.videoSections, Primitive.String));
        }
        if (this.videos) {
          b.write(Primitive.Vector.write(this.videos));
        }
        if (this.periodOptions) {
          b.write(Primitive.Vector.write(this.periodOptions));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    help2.PremiumPromo = PremiumPromo;
    class AppConfigNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'help.AppConfigNotModified';
        this.constructorId = 2094949405;
        this.subclassOfId = 339221658;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.help.AppConfigNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    help2.AppConfigNotModified = AppConfigNotModified;
    class AppConfig extends TLObject {
      hash;
      config;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.AppConfig';
        this.constructorId = 3709368366;
        this.subclassOfId = 339221658;
        this._slots = ['hash', 'config'];
        this.hash = params.hash;
        this.config = params.config;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Int.read(b);
        let config = await TLObject.read(b);
        return new Raw2.help.AppConfig({ hash, config });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        if (this.config !== void 0) {
          b.write(this.config.write());
        }
        return b.buffer;
      }
    }
    help2.AppConfig = AppConfig;
    class PeerColorSet extends TLObject {
      colors;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.PeerColorSet';
        this.constructorId = 639736408;
        this.subclassOfId = 298574124;
        this._slots = ['colors'];
        this.colors = params.colors;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let colors = await TLObject.read(b, Primitive.Int);
        return new Raw2.help.PeerColorSet({ colors });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.colors) {
          b.write(Primitive.Vector.write(this.colors, Primitive.Int));
        }
        return b.buffer;
      }
    }
    help2.PeerColorSet = PeerColorSet;
    class PeerColorProfileSet extends TLObject {
      paletteColors;
      bgColors;
      storyColors;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.PeerColorProfileSet';
        this.constructorId = 1987928555;
        this.subclassOfId = 298574124;
        this._slots = ['paletteColors', 'bgColors', 'storyColors'];
        this.paletteColors = params.paletteColors;
        this.bgColors = params.bgColors;
        this.storyColors = params.storyColors;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let paletteColors = await TLObject.read(b, Primitive.Int);
        let bgColors = await TLObject.read(b, Primitive.Int);
        let storyColors = await TLObject.read(b, Primitive.Int);
        return new Raw2.help.PeerColorProfileSet({
          paletteColors,
          bgColors,
          storyColors,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.paletteColors) {
          b.write(Primitive.Vector.write(this.paletteColors, Primitive.Int));
        }
        if (this.bgColors) {
          b.write(Primitive.Vector.write(this.bgColors, Primitive.Int));
        }
        if (this.storyColors) {
          b.write(Primitive.Vector.write(this.storyColors, Primitive.Int));
        }
        return b.buffer;
      }
    }
    help2.PeerColorProfileSet = PeerColorProfileSet;
    class PeerColorOption extends TLObject {
      hidden;
      colorId;
      colors;
      darkColors;
      channelMinLevel;
      groupMinLevel;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.PeerColorOption';
        this.constructorId = 2917953214;
        this.subclassOfId = 1454943896;
        this._slots = [
          'hidden',
          'colorId',
          'colors',
          'darkColors',
          'channelMinLevel',
          'groupMinLevel',
        ];
        this.hidden = params.hidden;
        this.colorId = params.colorId;
        this.colors = params.colors;
        this.darkColors = params.darkColors;
        this.channelMinLevel = params.channelMinLevel;
        this.groupMinLevel = params.groupMinLevel;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let hidden = flags & (1 << 0) ? true : false;
        let colorId = await Primitive.Int.read(b);
        let colors = flags & (1 << 1) ? await TLObject.read(b) : void 0;
        let darkColors = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let channelMinLevel = flags & (1 << 3) ? await Primitive.Int.read(b) : void 0;
        let groupMinLevel = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.help.PeerColorOption({
          hidden,
          colorId,
          colors,
          darkColors,
          channelMinLevel,
          groupMinLevel,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.hidden ? 1 << 0 : 0;
        flags |= this.colors !== void 0 ? 1 << 1 : 0;
        flags |= this.darkColors !== void 0 ? 1 << 2 : 0;
        flags |= this.channelMinLevel !== void 0 ? 1 << 3 : 0;
        flags |= this.groupMinLevel !== void 0 ? 1 << 4 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.colorId !== void 0) {
          b.write(Primitive.Int.write(this.colorId));
        }
        if (this.colors !== void 0) {
          b.write(this.colors.write());
        }
        if (this.darkColors !== void 0) {
          b.write(this.darkColors.write());
        }
        if (this.channelMinLevel !== void 0) {
          b.write(Primitive.Int.write(this.channelMinLevel));
        }
        if (this.groupMinLevel !== void 0) {
          b.write(Primitive.Int.write(this.groupMinLevel));
        }
        return b.buffer;
      }
    }
    help2.PeerColorOption = PeerColorOption;
    class PeerColorsNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'help.PeerColorsNotModified';
        this.constructorId = 732034510;
        this.subclassOfId = 239036211;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.help.PeerColorsNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    help2.PeerColorsNotModified = PeerColorsNotModified;
    class PeerColors extends TLObject {
      hash;
      colors;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.PeerColors';
        this.constructorId = 16313608;
        this.subclassOfId = 239036211;
        this._slots = ['hash', 'colors'];
        this.hash = params.hash;
        this.colors = params.colors;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Int.read(b);
        let colors = await TLObject.read(b);
        return new Raw2.help.PeerColors({ hash, colors });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        if (this.colors) {
          b.write(Primitive.Vector.write(this.colors));
        }
        return b.buffer;
      }
    }
    help2.PeerColors = PeerColors;
    class TimezonesListNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'help.TimezonesListNotModified';
        this.constructorId = 2533820620;
        this.subclassOfId = 3396789365;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.help.TimezonesListNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    help2.TimezonesListNotModified = TimezonesListNotModified;
    class TimezonesList extends TLObject {
      timezones;
      hash;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'help.TimezonesList';
        this.constructorId = 2071260529;
        this.subclassOfId = 3396789365;
        this._slots = ['timezones', 'hash'];
        this.timezones = params.timezones;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let timezones = await TLObject.read(b);
        let hash = await Primitive.Int.read(b);
        return new Raw2.help.TimezonesList({ timezones, hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.timezones) {
          b.write(Primitive.Vector.write(this.timezones));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        return b.buffer;
      }
    }
    help2.TimezonesList = TimezonesList;
    class GetConfig extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'help.GetConfig';
        this.constructorId = 3304659051;
        this.subclassOfId = 3542493770;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.help.GetConfig();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    help2.GetConfig = GetConfig;
    class GetNearestDc extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'help.GetNearestDc';
        this.constructorId = 531836966;
        this.subclassOfId = 947323999;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.help.GetNearestDc();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    help2.GetNearestDc = GetNearestDc;
    class GetAppUpdate extends TLObject {
      __response__;
      source;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'help.GetAppUpdate';
        this.constructorId = 1378703997;
        this.subclassOfId = 1486292638;
        this._slots = ['source'];
        this.source = params.source;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let source = await Primitive.String.read(b);
        return new Raw2.help.GetAppUpdate({ source });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.source !== void 0) {
          b.write(Primitive.String.write(this.source));
        }
        return b.buffer;
      }
    }
    help2.GetAppUpdate = GetAppUpdate;
    class GetInviteText extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'help.GetInviteText';
        this.constructorId = 1295590211;
        this.subclassOfId = 3480267317;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.help.GetInviteText();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    help2.GetInviteText = GetInviteText;
    class GetSupport extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'help.GetSupport';
        this.constructorId = 2631862477;
        this.subclassOfId = 1901706475;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.help.GetSupport();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    help2.GetSupport = GetSupport;
    class SetBotUpdatesStatus extends TLObject {
      __response__;
      pendingUpdatesCount;
      message;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'help.SetBotUpdatesStatus';
        this.constructorId = 3961704397;
        this.subclassOfId = 4122188204;
        this._slots = ['pendingUpdatesCount', 'message'];
        this.pendingUpdatesCount = params.pendingUpdatesCount;
        this.message = params.message;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let pendingUpdatesCount = await Primitive.Int.read(b);
        let message = await Primitive.String.read(b);
        return new Raw2.help.SetBotUpdatesStatus({
          pendingUpdatesCount,
          message,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.pendingUpdatesCount !== void 0) {
          b.write(Primitive.Int.write(this.pendingUpdatesCount));
        }
        if (this.message !== void 0) {
          b.write(Primitive.String.write(this.message));
        }
        return b.buffer;
      }
    }
    help2.SetBotUpdatesStatus = SetBotUpdatesStatus;
    class GetCdnConfig extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'help.GetCdnConfig';
        this.constructorId = 1375900482;
        this.subclassOfId = 3973724540;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.help.GetCdnConfig();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    help2.GetCdnConfig = GetCdnConfig;
    class GetRecentMeUrls extends TLObject {
      __response__;
      referer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'help.GetRecentMeUrls';
        this.constructorId = 1036054804;
        this.subclassOfId = 4067017847;
        this._slots = ['referer'];
        this.referer = params.referer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let referer = await Primitive.String.read(b);
        return new Raw2.help.GetRecentMeUrls({ referer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.referer !== void 0) {
          b.write(Primitive.String.write(this.referer));
        }
        return b.buffer;
      }
    }
    help2.GetRecentMeUrls = GetRecentMeUrls;
    class GetTermsOfServiceUpdate extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'help.GetTermsOfServiceUpdate';
        this.constructorId = 749019089;
        this.subclassOfId = 691808631;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.help.GetTermsOfServiceUpdate();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    help2.GetTermsOfServiceUpdate = GetTermsOfServiceUpdate;
    class AcceptTermsOfService extends TLObject {
      __response__;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'help.AcceptTermsOfService';
        this.constructorId = 4000511898;
        this.subclassOfId = 4122188204;
        this._slots = ['id'];
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b);
        return new Raw2.help.AcceptTermsOfService({ id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id !== void 0) {
          b.write(this.id.write());
        }
        return b.buffer;
      }
    }
    help2.AcceptTermsOfService = AcceptTermsOfService;
    class GetDeepLinkInfo extends TLObject {
      __response__;
      path;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'help.GetDeepLinkInfo';
        this.constructorId = 1072547679;
        this.subclassOfId = 2555030584;
        this._slots = ['path'];
        this.path = params.path;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let path = await Primitive.String.read(b);
        return new Raw2.help.GetDeepLinkInfo({ path });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.path !== void 0) {
          b.write(Primitive.String.write(this.path));
        }
        return b.buffer;
      }
    }
    help2.GetDeepLinkInfo = GetDeepLinkInfo;
    class GetAppConfig extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'help.GetAppConfig';
        this.constructorId = 1642330196;
        this.subclassOfId = 339221658;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Int.read(b);
        return new Raw2.help.GetAppConfig({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        return b.buffer;
      }
    }
    help2.GetAppConfig = GetAppConfig;
    class SaveAppLog extends TLObject {
      __response__;
      events;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'help.SaveAppLog';
        this.constructorId = 1862465352;
        this.subclassOfId = 4122188204;
        this._slots = ['events'];
        this.events = params.events;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let events = await TLObject.read(b);
        return new Raw2.help.SaveAppLog({ events });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.events) {
          b.write(Primitive.Vector.write(this.events));
        }
        return b.buffer;
      }
    }
    help2.SaveAppLog = SaveAppLog;
    class GetPassportConfig extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'help.GetPassportConfig';
        this.constructorId = 3328290056;
        this.subclassOfId = 3328622765;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Int.read(b);
        return new Raw2.help.GetPassportConfig({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        return b.buffer;
      }
    }
    help2.GetPassportConfig = GetPassportConfig;
    class GetSupportName extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'help.GetSupportName';
        this.constructorId = 3546343212;
        this.subclassOfId = 2135996354;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.help.GetSupportName();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    help2.GetSupportName = GetSupportName;
    class GetUserInfo extends TLObject {
      __response__;
      userId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'help.GetUserInfo';
        this.constructorId = 59377875;
        this.subclassOfId = 1548998616;
        this._slots = ['userId'];
        this.userId = params.userId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let userId = await TLObject.read(b);
        return new Raw2.help.GetUserInfo({ userId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        return b.buffer;
      }
    }
    help2.GetUserInfo = GetUserInfo;
    class EditUserInfo extends TLObject {
      __response__;
      userId;
      message;
      entities;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'help.EditUserInfo';
        this.constructorId = 1723407216;
        this.subclassOfId = 1548998616;
        this._slots = ['userId', 'message', 'entities'];
        this.userId = params.userId;
        this.message = params.message;
        this.entities = params.entities;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let userId = await TLObject.read(b);
        let message = await Primitive.String.read(b);
        let entities = await TLObject.read(b);
        return new Raw2.help.EditUserInfo({ userId, message, entities });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        if (this.message !== void 0) {
          b.write(Primitive.String.write(this.message));
        }
        if (this.entities) {
          b.write(Primitive.Vector.write(this.entities));
        }
        return b.buffer;
      }
    }
    help2.EditUserInfo = EditUserInfo;
    class GetPromoData extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'help.GetPromoData';
        this.constructorId = 3231151137;
        this.subclassOfId = 2639877442;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.help.GetPromoData();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    help2.GetPromoData = GetPromoData;
    class HidePromoData extends TLObject {
      __response__;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'help.HidePromoData';
        this.constructorId = 505748629;
        this.subclassOfId = 4122188204;
        this._slots = ['peer'];
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        return new Raw2.help.HidePromoData({ peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    help2.HidePromoData = HidePromoData;
    class DismissSuggestion extends TLObject {
      __response__;
      peer;
      suggestion;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'help.DismissSuggestion';
        this.constructorId = 4111317665;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'suggestion'];
        this.peer = params.peer;
        this.suggestion = params.suggestion;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let suggestion = await Primitive.String.read(b);
        return new Raw2.help.DismissSuggestion({ peer, suggestion });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.suggestion !== void 0) {
          b.write(Primitive.String.write(this.suggestion));
        }
        return b.buffer;
      }
    }
    help2.DismissSuggestion = DismissSuggestion;
    class GetCountriesList extends TLObject {
      __response__;
      langCode;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'help.GetCountriesList';
        this.constructorId = 1935116200;
        this.subclassOfId = 3929144968;
        this._slots = ['langCode', 'hash'];
        this.langCode = params.langCode;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let langCode = await Primitive.String.read(b);
        let hash = await Primitive.Int.read(b);
        return new Raw2.help.GetCountriesList({ langCode, hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.langCode !== void 0) {
          b.write(Primitive.String.write(this.langCode));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        return b.buffer;
      }
    }
    help2.GetCountriesList = GetCountriesList;
    class GetPremiumPromo extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'help.GetPremiumPromo';
        this.constructorId = 3088815060;
        this.subclassOfId = 3381109560;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.help.GetPremiumPromo();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    help2.GetPremiumPromo = GetPremiumPromo;
    class GetPeerColors extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'help.GetPeerColors';
        this.constructorId = 3665884207;
        this.subclassOfId = 239036211;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Int.read(b);
        return new Raw2.help.GetPeerColors({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        return b.buffer;
      }
    }
    help2.GetPeerColors = GetPeerColors;
    class GetPeerProfileColors extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'help.GetPeerProfileColors';
        this.constructorId = 2882513405;
        this.subclassOfId = 239036211;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Int.read(b);
        return new Raw2.help.GetPeerProfileColors({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        return b.buffer;
      }
    }
    help2.GetPeerProfileColors = GetPeerProfileColors;
    class GetTimezonesList extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'help.GetTimezonesList';
        this.constructorId = 1236468288;
        this.subclassOfId = 3396789365;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Int.read(b);
        return new Raw2.help.GetTimezonesList({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        return b.buffer;
      }
    }
    help2.GetTimezonesList = GetTimezonesList;
  })((help = Raw2.help || (Raw2.help = {})));
  let storage;
  ((storage2) => {
    class FileUnknown extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'storage.FileUnknown';
        this.constructorId = 2861972229;
        this.subclassOfId = 4087473907;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.storage.FileUnknown();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    storage2.FileUnknown = FileUnknown;
    class FilePartial extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'storage.FilePartial';
        this.constructorId = 1086091090;
        this.subclassOfId = 4087473907;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.storage.FilePartial();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    storage2.FilePartial = FilePartial;
    class FileJpeg extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'storage.FileJpeg';
        this.constructorId = 8322574;
        this.subclassOfId = 4087473907;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.storage.FileJpeg();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    storage2.FileJpeg = FileJpeg;
    class FileGif extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'storage.FileGif';
        this.constructorId = 3403786975;
        this.subclassOfId = 4087473907;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.storage.FileGif();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    storage2.FileGif = FileGif;
    class FilePng extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'storage.FilePng';
        this.constructorId = 172975040;
        this.subclassOfId = 4087473907;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.storage.FilePng();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    storage2.FilePng = FilePng;
    class FilePdf extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'storage.FilePdf';
        this.constructorId = 2921222285;
        this.subclassOfId = 4087473907;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.storage.FilePdf();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    storage2.FilePdf = FilePdf;
    class FileMp3 extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'storage.FileMp3';
        this.constructorId = 1384777335;
        this.subclassOfId = 4087473907;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.storage.FileMp3();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    storage2.FileMp3 = FileMp3;
    class FileMov extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'storage.FileMov';
        this.constructorId = 1258941372;
        this.subclassOfId = 4087473907;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.storage.FileMov();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    storage2.FileMov = FileMov;
    class FileMp4 extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'storage.FileMp4';
        this.constructorId = 3016663268;
        this.subclassOfId = 4087473907;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.storage.FileMp4();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    storage2.FileMp4 = FileMp4;
    class FileWebp extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'storage.FileWebp';
        this.constructorId = 276907596;
        this.subclassOfId = 4087473907;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.storage.FileWebp();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    storage2.FileWebp = FileWebp;
  })((storage = Raw2.storage || (Raw2.storage = {})));
  let auth;
  ((auth2) => {
    class SentCode extends TLObject {
      type;
      phoneCodeHash;
      nextType;
      timeout;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.SentCode';
        this.constructorId = 1577067778;
        this.subclassOfId = 1827172481;
        this._slots = ['type', 'phoneCodeHash', 'nextType', 'timeout'];
        this.type = params.type;
        this.phoneCodeHash = params.phoneCodeHash;
        this.nextType = params.nextType;
        this.timeout = params.timeout;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let type = await TLObject.read(b);
        let phoneCodeHash = await Primitive.String.read(b);
        let nextType = flags & (1 << 1) ? await TLObject.read(b) : void 0;
        let timeout = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.auth.SentCode({
          type,
          phoneCodeHash,
          nextType,
          timeout,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.nextType !== void 0 ? 1 << 1 : 0;
        flags |= this.timeout !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.type !== void 0) {
          b.write(this.type.write());
        }
        if (this.phoneCodeHash !== void 0) {
          b.write(Primitive.String.write(this.phoneCodeHash));
        }
        if (this.nextType !== void 0) {
          b.write(this.nextType.write());
        }
        if (this.timeout !== void 0) {
          b.write(Primitive.Int.write(this.timeout));
        }
        return b.buffer;
      }
    }
    auth2.SentCode = SentCode;
    class SentCodeSuccess extends TLObject {
      authorization;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.SentCodeSuccess';
        this.constructorId = 596704836;
        this.subclassOfId = 1827172481;
        this._slots = ['authorization'];
        this.authorization = params.authorization;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let authorization = await TLObject.read(b);
        return new Raw2.auth.SentCodeSuccess({ authorization });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.authorization !== void 0) {
          b.write(this.authorization.write());
        }
        return b.buffer;
      }
    }
    auth2.SentCodeSuccess = SentCodeSuccess;
    class Authorization2 extends TLObject {
      setupPasswordRequired;
      otherwiseReloginDays;
      tmpSessions;
      futureAuthToken;
      user;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.Authorization';
        this.constructorId = 782418132;
        this.subclassOfId = 3118485049;
        this._slots = [
          'setupPasswordRequired',
          'otherwiseReloginDays',
          'tmpSessions',
          'futureAuthToken',
          'user',
        ];
        this.setupPasswordRequired = params.setupPasswordRequired;
        this.otherwiseReloginDays = params.otherwiseReloginDays;
        this.tmpSessions = params.tmpSessions;
        this.futureAuthToken = params.futureAuthToken;
        this.user = params.user;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let setupPasswordRequired = flags & (1 << 1) ? true : false;
        let otherwiseReloginDays = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let tmpSessions = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        let futureAuthToken = flags & (1 << 2) ? await Primitive.Bytes.read(b) : void 0;
        let user = await TLObject.read(b);
        return new Raw2.auth.Authorization({
          setupPasswordRequired,
          otherwiseReloginDays,
          tmpSessions,
          futureAuthToken,
          user,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.setupPasswordRequired ? 1 << 1 : 0;
        flags |= this.otherwiseReloginDays !== void 0 ? 1 << 1 : 0;
        flags |= this.tmpSessions !== void 0 ? 1 << 0 : 0;
        flags |= this.futureAuthToken !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.otherwiseReloginDays !== void 0) {
          b.write(Primitive.Int.write(this.otherwiseReloginDays));
        }
        if (this.tmpSessions !== void 0) {
          b.write(Primitive.Int.write(this.tmpSessions));
        }
        if (this.futureAuthToken !== void 0) {
          b.write(Primitive.Bytes.write(this.futureAuthToken));
        }
        if (this.user !== void 0) {
          b.write(this.user.write());
        }
        return b.buffer;
      }
    }
    auth2.Authorization = Authorization2;
    class AuthorizationSignUpRequired extends TLObject {
      termsOfService;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.AuthorizationSignUpRequired';
        this.constructorId = 1148485274;
        this.subclassOfId = 3118485049;
        this._slots = ['termsOfService'];
        this.termsOfService = params.termsOfService;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let termsOfService = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        return new Raw2.auth.AuthorizationSignUpRequired({ termsOfService });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.termsOfService !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.termsOfService !== void 0) {
          b.write(this.termsOfService.write());
        }
        return b.buffer;
      }
    }
    auth2.AuthorizationSignUpRequired = AuthorizationSignUpRequired;
    class ExportedAuthorization extends TLObject {
      id;
      bytes;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.ExportedAuthorization';
        this.constructorId = 3023364792;
        this.subclassOfId = 1607593041;
        this._slots = ['id', 'bytes'];
        this.id = params.id;
        this.bytes = params.bytes;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await Primitive.Long.read(b);
        let bytes = await Primitive.Bytes.read(b);
        return new Raw2.auth.ExportedAuthorization({ id, bytes });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id !== void 0) {
          b.write(Primitive.Long.write(this.id));
        }
        if (this.bytes !== void 0) {
          b.write(Primitive.Bytes.write(this.bytes));
        }
        return b.buffer;
      }
    }
    auth2.ExportedAuthorization = ExportedAuthorization;
    class PasswordRecovery extends TLObject {
      emailPattern;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.PasswordRecovery';
        this.constructorId = 326715557;
        this.subclassOfId = 4201829434;
        this._slots = ['emailPattern'];
        this.emailPattern = params.emailPattern;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let emailPattern = await Primitive.String.read(b);
        return new Raw2.auth.PasswordRecovery({ emailPattern });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.emailPattern !== void 0) {
          b.write(Primitive.String.write(this.emailPattern));
        }
        return b.buffer;
      }
    }
    auth2.PasswordRecovery = PasswordRecovery;
    class CodeTypeSms extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'auth.CodeTypeSms';
        this.constructorId = 1923290508;
        this.subclassOfId = 3019105281;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.auth.CodeTypeSms();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    auth2.CodeTypeSms = CodeTypeSms;
    class CodeTypeCall extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'auth.CodeTypeCall';
        this.constructorId = 1948046307;
        this.subclassOfId = 3019105281;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.auth.CodeTypeCall();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    auth2.CodeTypeCall = CodeTypeCall;
    class CodeTypeFlashCall extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'auth.CodeTypeFlashCall';
        this.constructorId = 577556219;
        this.subclassOfId = 3019105281;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.auth.CodeTypeFlashCall();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    auth2.CodeTypeFlashCall = CodeTypeFlashCall;
    class CodeTypeMissedCall extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'auth.CodeTypeMissedCall';
        this.constructorId = 3592083182;
        this.subclassOfId = 3019105281;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.auth.CodeTypeMissedCall();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    auth2.CodeTypeMissedCall = CodeTypeMissedCall;
    class CodeTypeFragmentSms extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'auth.CodeTypeFragmentSms';
        this.constructorId = 116234636;
        this.subclassOfId = 3019105281;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.auth.CodeTypeFragmentSms();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    auth2.CodeTypeFragmentSms = CodeTypeFragmentSms;
    class SentCodeTypeApp extends TLObject {
      length;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.SentCodeTypeApp';
        this.constructorId = 1035688326;
        this.subclassOfId = 4284159374;
        this._slots = ['length'];
        this.length = params.length;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let length = await Primitive.Int.read(b);
        return new Raw2.auth.SentCodeTypeApp({ length });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.length !== void 0) {
          b.write(Primitive.Int.write(this.length));
        }
        return b.buffer;
      }
    }
    auth2.SentCodeTypeApp = SentCodeTypeApp;
    class SentCodeTypeSms extends TLObject {
      length;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.SentCodeTypeSms';
        this.constructorId = 3221273506;
        this.subclassOfId = 4284159374;
        this._slots = ['length'];
        this.length = params.length;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let length = await Primitive.Int.read(b);
        return new Raw2.auth.SentCodeTypeSms({ length });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.length !== void 0) {
          b.write(Primitive.Int.write(this.length));
        }
        return b.buffer;
      }
    }
    auth2.SentCodeTypeSms = SentCodeTypeSms;
    class SentCodeTypeCall extends TLObject {
      length;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.SentCodeTypeCall';
        this.constructorId = 1398007207;
        this.subclassOfId = 4284159374;
        this._slots = ['length'];
        this.length = params.length;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let length = await Primitive.Int.read(b);
        return new Raw2.auth.SentCodeTypeCall({ length });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.length !== void 0) {
          b.write(Primitive.Int.write(this.length));
        }
        return b.buffer;
      }
    }
    auth2.SentCodeTypeCall = SentCodeTypeCall;
    class SentCodeTypeFlashCall extends TLObject {
      pattern;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.SentCodeTypeFlashCall';
        this.constructorId = 2869151449;
        this.subclassOfId = 4284159374;
        this._slots = ['pattern'];
        this.pattern = params.pattern;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let pattern = await Primitive.String.read(b);
        return new Raw2.auth.SentCodeTypeFlashCall({ pattern });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.pattern !== void 0) {
          b.write(Primitive.String.write(this.pattern));
        }
        return b.buffer;
      }
    }
    auth2.SentCodeTypeFlashCall = SentCodeTypeFlashCall;
    class SentCodeTypeMissedCall extends TLObject {
      prefix;
      length;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.SentCodeTypeMissedCall';
        this.constructorId = 2181063812;
        this.subclassOfId = 4284159374;
        this._slots = ['prefix', 'length'];
        this.prefix = params.prefix;
        this.length = params.length;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let prefix = await Primitive.String.read(b);
        let length = await Primitive.Int.read(b);
        return new Raw2.auth.SentCodeTypeMissedCall({ prefix, length });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.prefix !== void 0) {
          b.write(Primitive.String.write(this.prefix));
        }
        if (this.length !== void 0) {
          b.write(Primitive.Int.write(this.length));
        }
        return b.buffer;
      }
    }
    auth2.SentCodeTypeMissedCall = SentCodeTypeMissedCall;
    class SentCodeTypeEmailCode extends TLObject {
      appleSigninAllowed;
      googleSigninAllowed;
      emailPattern;
      length;
      resetAvailablePeriod;
      resetPendingDate;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.SentCodeTypeEmailCode';
        this.constructorId = 4098946459;
        this.subclassOfId = 4284159374;
        this._slots = [
          'appleSigninAllowed',
          'googleSigninAllowed',
          'emailPattern',
          'length',
          'resetAvailablePeriod',
          'resetPendingDate',
        ];
        this.appleSigninAllowed = params.appleSigninAllowed;
        this.googleSigninAllowed = params.googleSigninAllowed;
        this.emailPattern = params.emailPattern;
        this.length = params.length;
        this.resetAvailablePeriod = params.resetAvailablePeriod;
        this.resetPendingDate = params.resetPendingDate;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let appleSigninAllowed = flags & (1 << 0) ? true : false;
        let googleSigninAllowed = flags & (1 << 1) ? true : false;
        let emailPattern = await Primitive.String.read(b);
        let length = await Primitive.Int.read(b);
        let resetAvailablePeriod = flags & (1 << 3) ? await Primitive.Int.read(b) : void 0;
        let resetPendingDate = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.auth.SentCodeTypeEmailCode({
          appleSigninAllowed,
          googleSigninAllowed,
          emailPattern,
          length,
          resetAvailablePeriod,
          resetPendingDate,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.appleSigninAllowed ? 1 << 0 : 0;
        flags |= this.googleSigninAllowed ? 1 << 1 : 0;
        flags |= this.resetAvailablePeriod !== void 0 ? 1 << 3 : 0;
        flags |= this.resetPendingDate !== void 0 ? 1 << 4 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.emailPattern !== void 0) {
          b.write(Primitive.String.write(this.emailPattern));
        }
        if (this.length !== void 0) {
          b.write(Primitive.Int.write(this.length));
        }
        if (this.resetAvailablePeriod !== void 0) {
          b.write(Primitive.Int.write(this.resetAvailablePeriod));
        }
        if (this.resetPendingDate !== void 0) {
          b.write(Primitive.Int.write(this.resetPendingDate));
        }
        return b.buffer;
      }
    }
    auth2.SentCodeTypeEmailCode = SentCodeTypeEmailCode;
    class SentCodeTypeSetUpEmailRequired extends TLObject {
      appleSigninAllowed;
      googleSigninAllowed;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.SentCodeTypeSetUpEmailRequired';
        this.constructorId = 2773032426;
        this.subclassOfId = 4284159374;
        this._slots = ['appleSigninAllowed', 'googleSigninAllowed'];
        this.appleSigninAllowed = params.appleSigninAllowed;
        this.googleSigninAllowed = params.googleSigninAllowed;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let appleSigninAllowed = flags & (1 << 0) ? true : false;
        let googleSigninAllowed = flags & (1 << 1) ? true : false;
        return new Raw2.auth.SentCodeTypeSetUpEmailRequired({
          appleSigninAllowed,
          googleSigninAllowed,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.appleSigninAllowed ? 1 << 0 : 0;
        flags |= this.googleSigninAllowed ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        return b.buffer;
      }
    }
    auth2.SentCodeTypeSetUpEmailRequired = SentCodeTypeSetUpEmailRequired;
    class SentCodeTypeFragmentSms extends TLObject {
      url;
      length;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.SentCodeTypeFragmentSms';
        this.constructorId = 3646315577;
        this.subclassOfId = 4284159374;
        this._slots = ['url', 'length'];
        this.url = params.url;
        this.length = params.length;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let url = await Primitive.String.read(b);
        let length = await Primitive.Int.read(b);
        return new Raw2.auth.SentCodeTypeFragmentSms({ url, length });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.url !== void 0) {
          b.write(Primitive.String.write(this.url));
        }
        if (this.length !== void 0) {
          b.write(Primitive.Int.write(this.length));
        }
        return b.buffer;
      }
    }
    auth2.SentCodeTypeFragmentSms = SentCodeTypeFragmentSms;
    class SentCodeTypeFirebaseSms extends TLObject {
      nonce;
      receipt;
      pushTimeout;
      length;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.SentCodeTypeFirebaseSms';
        this.constructorId = 3850048562;
        this.subclassOfId = 4284159374;
        this._slots = ['nonce', 'receipt', 'pushTimeout', 'length'];
        this.nonce = params.nonce;
        this.receipt = params.receipt;
        this.pushTimeout = params.pushTimeout;
        this.length = params.length;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let nonce = flags & (1 << 0) ? await Primitive.Bytes.read(b) : void 0;
        let receipt = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let pushTimeout = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let length = await Primitive.Int.read(b);
        return new Raw2.auth.SentCodeTypeFirebaseSms({
          nonce,
          receipt,
          pushTimeout,
          length,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.nonce !== void 0 ? 1 << 0 : 0;
        flags |= this.receipt !== void 0 ? 1 << 1 : 0;
        flags |= this.pushTimeout !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.nonce !== void 0) {
          b.write(Primitive.Bytes.write(this.nonce));
        }
        if (this.receipt !== void 0) {
          b.write(Primitive.String.write(this.receipt));
        }
        if (this.pushTimeout !== void 0) {
          b.write(Primitive.Int.write(this.pushTimeout));
        }
        if (this.length !== void 0) {
          b.write(Primitive.Int.write(this.length));
        }
        return b.buffer;
      }
    }
    auth2.SentCodeTypeFirebaseSms = SentCodeTypeFirebaseSms;
    class SentCodeTypeSmsWord extends TLObject {
      beginning;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.SentCodeTypeSmsWord';
        this.constructorId = 2752949377;
        this.subclassOfId = 4284159374;
        this._slots = ['beginning'];
        this.beginning = params.beginning;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let beginning = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        return new Raw2.auth.SentCodeTypeSmsWord({ beginning });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.beginning !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.beginning !== void 0) {
          b.write(Primitive.String.write(this.beginning));
        }
        return b.buffer;
      }
    }
    auth2.SentCodeTypeSmsWord = SentCodeTypeSmsWord;
    class SentCodeTypeSmsPhrase extends TLObject {
      beginning;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.SentCodeTypeSmsPhrase';
        this.constructorId = 3010958511;
        this.subclassOfId = 4284159374;
        this._slots = ['beginning'];
        this.beginning = params.beginning;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let beginning = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        return new Raw2.auth.SentCodeTypeSmsPhrase({ beginning });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.beginning !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.beginning !== void 0) {
          b.write(Primitive.String.write(this.beginning));
        }
        return b.buffer;
      }
    }
    auth2.SentCodeTypeSmsPhrase = SentCodeTypeSmsPhrase;
    class LoginToken extends TLObject {
      expires;
      token;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.LoginToken';
        this.constructorId = 1654593920;
        this.subclassOfId = 1800795702;
        this._slots = ['expires', 'token'];
        this.expires = params.expires;
        this.token = params.token;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let expires = await Primitive.Int.read(b);
        let token = await Primitive.Bytes.read(b);
        return new Raw2.auth.LoginToken({ expires, token });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.expires !== void 0) {
          b.write(Primitive.Int.write(this.expires));
        }
        if (this.token !== void 0) {
          b.write(Primitive.Bytes.write(this.token));
        }
        return b.buffer;
      }
    }
    auth2.LoginToken = LoginToken;
    class LoginTokenMigrateTo extends TLObject {
      dcId;
      token;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.LoginTokenMigrateTo';
        this.constructorId = 110008598;
        this.subclassOfId = 1800795702;
        this._slots = ['dcId', 'token'];
        this.dcId = params.dcId;
        this.token = params.token;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let dcId = await Primitive.Int.read(b);
        let token = await Primitive.Bytes.read(b);
        return new Raw2.auth.LoginTokenMigrateTo({ dcId, token });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.dcId !== void 0) {
          b.write(Primitive.Int.write(this.dcId));
        }
        if (this.token !== void 0) {
          b.write(Primitive.Bytes.write(this.token));
        }
        return b.buffer;
      }
    }
    auth2.LoginTokenMigrateTo = LoginTokenMigrateTo;
    class LoginTokenSuccess extends TLObject {
      authorization;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.LoginTokenSuccess';
        this.constructorId = 957176926;
        this.subclassOfId = 1800795702;
        this._slots = ['authorization'];
        this.authorization = params.authorization;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let authorization = await TLObject.read(b);
        return new Raw2.auth.LoginTokenSuccess({ authorization });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.authorization !== void 0) {
          b.write(this.authorization.write());
        }
        return b.buffer;
      }
    }
    auth2.LoginTokenSuccess = LoginTokenSuccess;
    class LoggedOut extends TLObject {
      futureAuthToken;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'auth.LoggedOut';
        this.constructorId = 3282207583;
        this.subclassOfId = 176177941;
        this._slots = ['futureAuthToken'];
        this.futureAuthToken = params.futureAuthToken;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let futureAuthToken = flags & (1 << 0) ? await Primitive.Bytes.read(b) : void 0;
        return new Raw2.auth.LoggedOut({ futureAuthToken });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.futureAuthToken !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.futureAuthToken !== void 0) {
          b.write(Primitive.Bytes.write(this.futureAuthToken));
        }
        return b.buffer;
      }
    }
    auth2.LoggedOut = LoggedOut;
    class SendCode extends TLObject {
      __response__;
      phoneNumber;
      apiId;
      apiHash;
      settings;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.SendCode';
        this.constructorId = 2792825935;
        this.subclassOfId = 1827172481;
        this._slots = ['phoneNumber', 'apiId', 'apiHash', 'settings'];
        this.phoneNumber = params.phoneNumber;
        this.apiId = params.apiId;
        this.apiHash = params.apiHash;
        this.settings = params.settings;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let phoneNumber = await Primitive.String.read(b);
        let apiId = await Primitive.Int.read(b);
        let apiHash = await Primitive.String.read(b);
        let settings = await TLObject.read(b);
        return new Raw2.auth.SendCode({
          phoneNumber,
          apiId,
          apiHash,
          settings,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.phoneNumber !== void 0) {
          b.write(Primitive.String.write(this.phoneNumber));
        }
        if (this.apiId !== void 0) {
          b.write(Primitive.Int.write(this.apiId));
        }
        if (this.apiHash !== void 0) {
          b.write(Primitive.String.write(this.apiHash));
        }
        if (this.settings !== void 0) {
          b.write(this.settings.write());
        }
        return b.buffer;
      }
    }
    auth2.SendCode = SendCode;
    class SignUp extends TLObject {
      __response__;
      noJoinedNotifications;
      phoneNumber;
      phoneCodeHash;
      firstName;
      lastName;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.SignUp';
        this.constructorId = 2865215255;
        this.subclassOfId = 3118485049;
        this._slots = [
          'noJoinedNotifications',
          'phoneNumber',
          'phoneCodeHash',
          'firstName',
          'lastName',
        ];
        this.noJoinedNotifications = params.noJoinedNotifications;
        this.phoneNumber = params.phoneNumber;
        this.phoneCodeHash = params.phoneCodeHash;
        this.firstName = params.firstName;
        this.lastName = params.lastName;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let noJoinedNotifications = flags & (1 << 0) ? true : false;
        let phoneNumber = await Primitive.String.read(b);
        let phoneCodeHash = await Primitive.String.read(b);
        let firstName = await Primitive.String.read(b);
        let lastName = await Primitive.String.read(b);
        return new Raw2.auth.SignUp({
          noJoinedNotifications,
          phoneNumber,
          phoneCodeHash,
          firstName,
          lastName,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.noJoinedNotifications ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.phoneNumber !== void 0) {
          b.write(Primitive.String.write(this.phoneNumber));
        }
        if (this.phoneCodeHash !== void 0) {
          b.write(Primitive.String.write(this.phoneCodeHash));
        }
        if (this.firstName !== void 0) {
          b.write(Primitive.String.write(this.firstName));
        }
        if (this.lastName !== void 0) {
          b.write(Primitive.String.write(this.lastName));
        }
        return b.buffer;
      }
    }
    auth2.SignUp = SignUp;
    class SignIn extends TLObject {
      __response__;
      phoneNumber;
      phoneCodeHash;
      phoneCode;
      emailVerification;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.SignIn';
        this.constructorId = 2371004753;
        this.subclassOfId = 3118485049;
        this._slots = ['phoneNumber', 'phoneCodeHash', 'phoneCode', 'emailVerification'];
        this.phoneNumber = params.phoneNumber;
        this.phoneCodeHash = params.phoneCodeHash;
        this.phoneCode = params.phoneCode;
        this.emailVerification = params.emailVerification;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let phoneNumber = await Primitive.String.read(b);
        let phoneCodeHash = await Primitive.String.read(b);
        let phoneCode = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let emailVerification = flags & (1 << 1) ? await TLObject.read(b) : void 0;
        return new Raw2.auth.SignIn({
          phoneNumber,
          phoneCodeHash,
          phoneCode,
          emailVerification,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.phoneCode !== void 0 ? 1 << 0 : 0;
        flags |= this.emailVerification !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.phoneNumber !== void 0) {
          b.write(Primitive.String.write(this.phoneNumber));
        }
        if (this.phoneCodeHash !== void 0) {
          b.write(Primitive.String.write(this.phoneCodeHash));
        }
        if (this.phoneCode !== void 0) {
          b.write(Primitive.String.write(this.phoneCode));
        }
        if (this.emailVerification !== void 0) {
          b.write(this.emailVerification.write());
        }
        return b.buffer;
      }
    }
    auth2.SignIn = SignIn;
    class LogOut extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'auth.LogOut';
        this.constructorId = 1047706137;
        this.subclassOfId = 176177941;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.auth.LogOut();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    auth2.LogOut = LogOut;
    class ResetAuthorizations extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'auth.ResetAuthorizations';
        this.constructorId = 2678787354;
        this.subclassOfId = 4122188204;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.auth.ResetAuthorizations();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    auth2.ResetAuthorizations = ResetAuthorizations;
    class ExportAuthorization extends TLObject {
      __response__;
      dcId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.ExportAuthorization';
        this.constructorId = 3854565325;
        this.subclassOfId = 1607593041;
        this._slots = ['dcId'];
        this.dcId = params.dcId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let dcId = await Primitive.Int.read(b);
        return new Raw2.auth.ExportAuthorization({ dcId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.dcId !== void 0) {
          b.write(Primitive.Int.write(this.dcId));
        }
        return b.buffer;
      }
    }
    auth2.ExportAuthorization = ExportAuthorization;
    class ImportAuthorization extends TLObject {
      __response__;
      id;
      bytes;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.ImportAuthorization';
        this.constructorId = 2776268205;
        this.subclassOfId = 3118485049;
        this._slots = ['id', 'bytes'];
        this.id = params.id;
        this.bytes = params.bytes;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await Primitive.Long.read(b);
        let bytes = await Primitive.Bytes.read(b);
        return new Raw2.auth.ImportAuthorization({ id, bytes });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id !== void 0) {
          b.write(Primitive.Long.write(this.id));
        }
        if (this.bytes !== void 0) {
          b.write(Primitive.Bytes.write(this.bytes));
        }
        return b.buffer;
      }
    }
    auth2.ImportAuthorization = ImportAuthorization;
    class BindTempAuthKey extends TLObject {
      __response__;
      permAuthKeyId;
      nonce;
      expiresAt;
      encryptedMessage;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.BindTempAuthKey';
        this.constructorId = 3453233669;
        this.subclassOfId = 4122188204;
        this._slots = ['permAuthKeyId', 'nonce', 'expiresAt', 'encryptedMessage'];
        this.permAuthKeyId = params.permAuthKeyId;
        this.nonce = params.nonce;
        this.expiresAt = params.expiresAt;
        this.encryptedMessage = params.encryptedMessage;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let permAuthKeyId = await Primitive.Long.read(b);
        let nonce = await Primitive.Long.read(b);
        let expiresAt = await Primitive.Int.read(b);
        let encryptedMessage = await Primitive.Bytes.read(b);
        return new Raw2.auth.BindTempAuthKey({
          permAuthKeyId,
          nonce,
          expiresAt,
          encryptedMessage,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.permAuthKeyId !== void 0) {
          b.write(Primitive.Long.write(this.permAuthKeyId));
        }
        if (this.nonce !== void 0) {
          b.write(Primitive.Long.write(this.nonce));
        }
        if (this.expiresAt !== void 0) {
          b.write(Primitive.Int.write(this.expiresAt));
        }
        if (this.encryptedMessage !== void 0) {
          b.write(Primitive.Bytes.write(this.encryptedMessage));
        }
        return b.buffer;
      }
    }
    auth2.BindTempAuthKey = BindTempAuthKey;
    class ImportBotAuthorization extends TLObject {
      __response__;
      flags;
      apiId;
      apiHash;
      botAuthToken;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.ImportBotAuthorization';
        this.constructorId = 1738800940;
        this.subclassOfId = 3118485049;
        this._slots = ['flags', 'apiId', 'apiHash', 'botAuthToken'];
        this.flags = params.flags;
        this.apiId = params.apiId;
        this.apiHash = params.apiHash;
        this.botAuthToken = params.botAuthToken;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let apiId = await Primitive.Int.read(b);
        let apiHash = await Primitive.String.read(b);
        let botAuthToken = await Primitive.String.read(b);
        return new Raw2.auth.ImportBotAuthorization({
          flags,
          apiId,
          apiHash,
          botAuthToken,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.flags !== void 0) {
          b.write(Primitive.Int.write(this.flags));
        }
        if (this.apiId !== void 0) {
          b.write(Primitive.Int.write(this.apiId));
        }
        if (this.apiHash !== void 0) {
          b.write(Primitive.String.write(this.apiHash));
        }
        if (this.botAuthToken !== void 0) {
          b.write(Primitive.String.write(this.botAuthToken));
        }
        return b.buffer;
      }
    }
    auth2.ImportBotAuthorization = ImportBotAuthorization;
    class CheckPassword extends TLObject {
      __response__;
      password;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.CheckPassword';
        this.constructorId = 3515567382;
        this.subclassOfId = 3118485049;
        this._slots = ['password'];
        this.password = params.password;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let password = await TLObject.read(b);
        return new Raw2.auth.CheckPassword({ password });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.password !== void 0) {
          b.write(this.password.write());
        }
        return b.buffer;
      }
    }
    auth2.CheckPassword = CheckPassword;
    class RequestPasswordRecovery extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'auth.RequestPasswordRecovery';
        this.constructorId = 3633822822;
        this.subclassOfId = 4201829434;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.auth.RequestPasswordRecovery();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    auth2.RequestPasswordRecovery = RequestPasswordRecovery;
    class RecoverPassword extends TLObject {
      __response__;
      code;
      newSettings;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.RecoverPassword';
        this.constructorId = 923364464;
        this.subclassOfId = 3118485049;
        this._slots = ['code', 'newSettings'];
        this.code = params.code;
        this.newSettings = params.newSettings;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let code = await Primitive.String.read(b);
        let newSettings = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        return new Raw2.auth.RecoverPassword({ code, newSettings });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.newSettings !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.code !== void 0) {
          b.write(Primitive.String.write(this.code));
        }
        if (this.newSettings !== void 0) {
          b.write(this.newSettings.write());
        }
        return b.buffer;
      }
    }
    auth2.RecoverPassword = RecoverPassword;
    class ResendCode extends TLObject {
      __response__;
      phoneNumber;
      phoneCodeHash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.ResendCode';
        this.constructorId = 1056025023;
        this.subclassOfId = 1827172481;
        this._slots = ['phoneNumber', 'phoneCodeHash'];
        this.phoneNumber = params.phoneNumber;
        this.phoneCodeHash = params.phoneCodeHash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let phoneNumber = await Primitive.String.read(b);
        let phoneCodeHash = await Primitive.String.read(b);
        return new Raw2.auth.ResendCode({ phoneNumber, phoneCodeHash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.phoneNumber !== void 0) {
          b.write(Primitive.String.write(this.phoneNumber));
        }
        if (this.phoneCodeHash !== void 0) {
          b.write(Primitive.String.write(this.phoneCodeHash));
        }
        return b.buffer;
      }
    }
    auth2.ResendCode = ResendCode;
    class CancelCode extends TLObject {
      __response__;
      phoneNumber;
      phoneCodeHash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.CancelCode';
        this.constructorId = 520357240;
        this.subclassOfId = 4122188204;
        this._slots = ['phoneNumber', 'phoneCodeHash'];
        this.phoneNumber = params.phoneNumber;
        this.phoneCodeHash = params.phoneCodeHash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let phoneNumber = await Primitive.String.read(b);
        let phoneCodeHash = await Primitive.String.read(b);
        return new Raw2.auth.CancelCode({ phoneNumber, phoneCodeHash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.phoneNumber !== void 0) {
          b.write(Primitive.String.write(this.phoneNumber));
        }
        if (this.phoneCodeHash !== void 0) {
          b.write(Primitive.String.write(this.phoneCodeHash));
        }
        return b.buffer;
      }
    }
    auth2.CancelCode = CancelCode;
    class DropTempAuthKeys extends TLObject {
      __response__;
      exceptAuthKeys;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.DropTempAuthKeys';
        this.constructorId = 2387124616;
        this.subclassOfId = 4122188204;
        this._slots = ['exceptAuthKeys'];
        this.exceptAuthKeys = params.exceptAuthKeys;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let exceptAuthKeys = await TLObject.read(b, Primitive.Long);
        return new Raw2.auth.DropTempAuthKeys({ exceptAuthKeys });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.exceptAuthKeys) {
          b.write(Primitive.Vector.write(this.exceptAuthKeys, Primitive.Long));
        }
        return b.buffer;
      }
    }
    auth2.DropTempAuthKeys = DropTempAuthKeys;
    class ExportLoginToken extends TLObject {
      __response__;
      apiId;
      apiHash;
      exceptIds;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.ExportLoginToken';
        this.constructorId = 3084944894;
        this.subclassOfId = 1800795702;
        this._slots = ['apiId', 'apiHash', 'exceptIds'];
        this.apiId = params.apiId;
        this.apiHash = params.apiHash;
        this.exceptIds = params.exceptIds;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let apiId = await Primitive.Int.read(b);
        let apiHash = await Primitive.String.read(b);
        let exceptIds = await TLObject.read(b, Primitive.Long);
        return new Raw2.auth.ExportLoginToken({
          apiId,
          apiHash,
          exceptIds,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.apiId !== void 0) {
          b.write(Primitive.Int.write(this.apiId));
        }
        if (this.apiHash !== void 0) {
          b.write(Primitive.String.write(this.apiHash));
        }
        if (this.exceptIds) {
          b.write(Primitive.Vector.write(this.exceptIds, Primitive.Long));
        }
        return b.buffer;
      }
    }
    auth2.ExportLoginToken = ExportLoginToken;
    class ImportLoginToken extends TLObject {
      __response__;
      token;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.ImportLoginToken';
        this.constructorId = 2511101156;
        this.subclassOfId = 1800795702;
        this._slots = ['token'];
        this.token = params.token;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let token = await Primitive.Bytes.read(b);
        return new Raw2.auth.ImportLoginToken({ token });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.token !== void 0) {
          b.write(Primitive.Bytes.write(this.token));
        }
        return b.buffer;
      }
    }
    auth2.ImportLoginToken = ImportLoginToken;
    class AcceptLoginToken extends TLObject {
      __response__;
      token;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.AcceptLoginToken';
        this.constructorId = 3902057805;
        this.subclassOfId = 3373514778;
        this._slots = ['token'];
        this.token = params.token;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let token = await Primitive.Bytes.read(b);
        return new Raw2.auth.AcceptLoginToken({ token });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.token !== void 0) {
          b.write(Primitive.Bytes.write(this.token));
        }
        return b.buffer;
      }
    }
    auth2.AcceptLoginToken = AcceptLoginToken;
    class CheckRecoveryPassword extends TLObject {
      __response__;
      code;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.CheckRecoveryPassword';
        this.constructorId = 221691769;
        this.subclassOfId = 4122188204;
        this._slots = ['code'];
        this.code = params.code;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let code = await Primitive.String.read(b);
        return new Raw2.auth.CheckRecoveryPassword({ code });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.code !== void 0) {
          b.write(Primitive.String.write(this.code));
        }
        return b.buffer;
      }
    }
    auth2.CheckRecoveryPassword = CheckRecoveryPassword;
    class ImportWebTokenAuthorization extends TLObject {
      __response__;
      apiId;
      apiHash;
      webAuthToken;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.ImportWebTokenAuthorization';
        this.constructorId = 767062953;
        this.subclassOfId = 3118485049;
        this._slots = ['apiId', 'apiHash', 'webAuthToken'];
        this.apiId = params.apiId;
        this.apiHash = params.apiHash;
        this.webAuthToken = params.webAuthToken;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let apiId = await Primitive.Int.read(b);
        let apiHash = await Primitive.String.read(b);
        let webAuthToken = await Primitive.String.read(b);
        return new Raw2.auth.ImportWebTokenAuthorization({
          apiId,
          apiHash,
          webAuthToken,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.apiId !== void 0) {
          b.write(Primitive.Int.write(this.apiId));
        }
        if (this.apiHash !== void 0) {
          b.write(Primitive.String.write(this.apiHash));
        }
        if (this.webAuthToken !== void 0) {
          b.write(Primitive.String.write(this.webAuthToken));
        }
        return b.buffer;
      }
    }
    auth2.ImportWebTokenAuthorization = ImportWebTokenAuthorization;
    class RequestFirebaseSms extends TLObject {
      __response__;
      phoneNumber;
      phoneCodeHash;
      safetyNetToken;
      iosPushSecret;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.RequestFirebaseSms';
        this.constructorId = 2303085392;
        this.subclassOfId = 4122188204;
        this._slots = ['phoneNumber', 'phoneCodeHash', 'safetyNetToken', 'iosPushSecret'];
        this.phoneNumber = params.phoneNumber;
        this.phoneCodeHash = params.phoneCodeHash;
        this.safetyNetToken = params.safetyNetToken;
        this.iosPushSecret = params.iosPushSecret;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let phoneNumber = await Primitive.String.read(b);
        let phoneCodeHash = await Primitive.String.read(b);
        let safetyNetToken = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let iosPushSecret = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        return new Raw2.auth.RequestFirebaseSms({
          phoneNumber,
          phoneCodeHash,
          safetyNetToken,
          iosPushSecret,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.safetyNetToken !== void 0 ? 1 << 0 : 0;
        flags |= this.iosPushSecret !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.phoneNumber !== void 0) {
          b.write(Primitive.String.write(this.phoneNumber));
        }
        if (this.phoneCodeHash !== void 0) {
          b.write(Primitive.String.write(this.phoneCodeHash));
        }
        if (this.safetyNetToken !== void 0) {
          b.write(Primitive.String.write(this.safetyNetToken));
        }
        if (this.iosPushSecret !== void 0) {
          b.write(Primitive.String.write(this.iosPushSecret));
        }
        return b.buffer;
      }
    }
    auth2.RequestFirebaseSms = RequestFirebaseSms;
    class ResetLoginEmail extends TLObject {
      __response__;
      phoneNumber;
      phoneCodeHash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.ResetLoginEmail';
        this.constructorId = 2123760019;
        this.subclassOfId = 1827172481;
        this._slots = ['phoneNumber', 'phoneCodeHash'];
        this.phoneNumber = params.phoneNumber;
        this.phoneCodeHash = params.phoneCodeHash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let phoneNumber = await Primitive.String.read(b);
        let phoneCodeHash = await Primitive.String.read(b);
        return new Raw2.auth.ResetLoginEmail({
          phoneNumber,
          phoneCodeHash,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.phoneNumber !== void 0) {
          b.write(Primitive.String.write(this.phoneNumber));
        }
        if (this.phoneCodeHash !== void 0) {
          b.write(Primitive.String.write(this.phoneCodeHash));
        }
        return b.buffer;
      }
    }
    auth2.ResetLoginEmail = ResetLoginEmail;
    class ReportMissingCode extends TLObject {
      __response__;
      phoneNumber;
      phoneCodeHash;
      mnc;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'auth.ReportMissingCode';
        this.constructorId = 3416125430;
        this.subclassOfId = 4122188204;
        this._slots = ['phoneNumber', 'phoneCodeHash', 'mnc'];
        this.phoneNumber = params.phoneNumber;
        this.phoneCodeHash = params.phoneCodeHash;
        this.mnc = params.mnc;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let phoneNumber = await Primitive.String.read(b);
        let phoneCodeHash = await Primitive.String.read(b);
        let mnc = await Primitive.String.read(b);
        return new Raw2.auth.ReportMissingCode({
          phoneNumber,
          phoneCodeHash,
          mnc,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.phoneNumber !== void 0) {
          b.write(Primitive.String.write(this.phoneNumber));
        }
        if (this.phoneCodeHash !== void 0) {
          b.write(Primitive.String.write(this.phoneCodeHash));
        }
        if (this.mnc !== void 0) {
          b.write(Primitive.String.write(this.mnc));
        }
        return b.buffer;
      }
    }
    auth2.ReportMissingCode = ReportMissingCode;
  })((auth = Raw2.auth || (Raw2.auth = {})));
  let contacts;
  ((contacts2) => {
    class ContactsNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'contacts.ContactsNotModified';
        this.constructorId = 3075189202;
        this.subclassOfId = 951985654;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.contacts.ContactsNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    contacts2.ContactsNotModified = ContactsNotModified;
    class Contacts extends TLObject {
      contacts;
      savedCount;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'contacts.Contacts';
        this.constructorId = 3941105218;
        this.subclassOfId = 951985654;
        this._slots = ['contacts', 'savedCount', 'users'];
        this.contacts = params.contacts;
        this.savedCount = params.savedCount;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let contacts3 = await TLObject.read(b);
        let savedCount = await Primitive.Int.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.contacts.Contacts({
          contacts: contacts3,
          savedCount,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.contacts) {
          b.write(Primitive.Vector.write(this.contacts));
        }
        if (this.savedCount !== void 0) {
          b.write(Primitive.Int.write(this.savedCount));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    contacts2.Contacts = Contacts;
    class ImportedContacts extends TLObject {
      imported;
      popularInvites;
      retryContacts;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'contacts.ImportedContacts';
        this.constructorId = 2010127419;
        this.subclassOfId = 2171776403;
        this._slots = ['imported', 'popularInvites', 'retryContacts', 'users'];
        this.imported = params.imported;
        this.popularInvites = params.popularInvites;
        this.retryContacts = params.retryContacts;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let imported = await TLObject.read(b);
        let popularInvites = await TLObject.read(b);
        let retryContacts = await TLObject.read(b, Primitive.Long);
        let users2 = await TLObject.read(b);
        return new Raw2.contacts.ImportedContacts({
          imported,
          popularInvites,
          retryContacts,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.imported) {
          b.write(Primitive.Vector.write(this.imported));
        }
        if (this.popularInvites) {
          b.write(Primitive.Vector.write(this.popularInvites));
        }
        if (this.retryContacts) {
          b.write(Primitive.Vector.write(this.retryContacts, Primitive.Long));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    contacts2.ImportedContacts = ImportedContacts;
    class Blocked extends TLObject {
      blocked;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'contacts.Blocked';
        this.constructorId = 182326673;
        this.subclassOfId = 4290400079;
        this._slots = ['blocked', 'chats', 'users'];
        this.blocked = params.blocked;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let blocked = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.contacts.Blocked({ blocked, chats, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.blocked) {
          b.write(Primitive.Vector.write(this.blocked));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    contacts2.Blocked = Blocked;
    class BlockedSlice extends TLObject {
      count;
      blocked;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'contacts.BlockedSlice';
        this.constructorId = 3781575060;
        this.subclassOfId = 4290400079;
        this._slots = ['count', 'blocked', 'chats', 'users'];
        this.count = params.count;
        this.blocked = params.blocked;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let count = await Primitive.Int.read(b);
        let blocked = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.contacts.BlockedSlice({
          count,
          blocked,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.blocked) {
          b.write(Primitive.Vector.write(this.blocked));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    contacts2.BlockedSlice = BlockedSlice;
    class Found extends TLObject {
      myResults;
      results;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'contacts.Found';
        this.constructorId = 3004386717;
        this.subclassOfId = 1132896995;
        this._slots = ['myResults', 'results', 'chats', 'users'];
        this.myResults = params.myResults;
        this.results = params.results;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let myResults = await TLObject.read(b);
        let results = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.contacts.Found({
          myResults,
          results,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.myResults) {
          b.write(Primitive.Vector.write(this.myResults));
        }
        if (this.results) {
          b.write(Primitive.Vector.write(this.results));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    contacts2.Found = Found;
    class ResolvedPeer extends TLObject {
      peer;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'contacts.ResolvedPeer';
        this.constructorId = 2131196633;
        this.subclassOfId = 4033196968;
        this._slots = ['peer', 'chats', 'users'];
        this.peer = params.peer;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.contacts.ResolvedPeer({ peer, chats, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    contacts2.ResolvedPeer = ResolvedPeer;
    class TopPeersNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'contacts.TopPeersNotModified';
        this.constructorId = 3727060725;
        this.subclassOfId = 2666052488;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.contacts.TopPeersNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    contacts2.TopPeersNotModified = TopPeersNotModified;
    class TopPeers extends TLObject {
      categories;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'contacts.TopPeers';
        this.constructorId = 1891070632;
        this.subclassOfId = 2666052488;
        this._slots = ['categories', 'chats', 'users'];
        this.categories = params.categories;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let categories = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.contacts.TopPeers({ categories, chats, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.categories) {
          b.write(Primitive.Vector.write(this.categories));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    contacts2.TopPeers = TopPeers;
    class TopPeersDisabled extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'contacts.TopPeersDisabled';
        this.constructorId = 3039597469;
        this.subclassOfId = 2666052488;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.contacts.TopPeersDisabled();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    contacts2.TopPeersDisabled = TopPeersDisabled;
    class ContactBirthdays extends TLObject {
      contacts;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'contacts.ContactBirthdays';
        this.constructorId = 290452237;
        this.subclassOfId = 242920447;
        this._slots = ['contacts', 'users'];
        this.contacts = params.contacts;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let contacts3 = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.contacts.ContactBirthdays({ contacts: contacts3, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.contacts) {
          b.write(Primitive.Vector.write(this.contacts));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    contacts2.ContactBirthdays = ContactBirthdays;
    class GetContactIDs extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.GetContactIDs';
        this.constructorId = 2061264541;
        this.subclassOfId = 1344696591;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.contacts.GetContactIDs({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    contacts2.GetContactIDs = GetContactIDs;
    class GetStatuses extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'contacts.GetStatuses';
        this.constructorId = 3299038190;
        this.subclassOfId = 3749797008;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.contacts.GetStatuses();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    contacts2.GetStatuses = GetStatuses;
    class GetContacts extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.GetContacts';
        this.constructorId = 1574346258;
        this.subclassOfId = 951985654;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.contacts.GetContacts({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    contacts2.GetContacts = GetContacts;
    class ImportContacts extends TLObject {
      __response__;
      contacts;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.ImportContacts';
        this.constructorId = 746589157;
        this.subclassOfId = 2171776403;
        this._slots = ['contacts'];
        this.contacts = params.contacts;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let contacts3 = await TLObject.read(b);
        return new Raw2.contacts.ImportContacts({ contacts: contacts3 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.contacts) {
          b.write(Primitive.Vector.write(this.contacts));
        }
        return b.buffer;
      }
    }
    contacts2.ImportContacts = ImportContacts;
    class DeleteContacts extends TLObject {
      __response__;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.DeleteContacts';
        this.constructorId = 157945344;
        this.subclassOfId = 2331323052;
        this._slots = ['id'];
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b);
        return new Raw2.contacts.DeleteContacts({ id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id) {
          b.write(Primitive.Vector.write(this.id));
        }
        return b.buffer;
      }
    }
    contacts2.DeleteContacts = DeleteContacts;
    class DeleteByPhones extends TLObject {
      __response__;
      phones;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.DeleteByPhones';
        this.constructorId = 269745566;
        this.subclassOfId = 4122188204;
        this._slots = ['phones'];
        this.phones = params.phones;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let phones = await TLObject.read(b, Primitive.String);
        return new Raw2.contacts.DeleteByPhones({ phones });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.phones) {
          b.write(Primitive.Vector.write(this.phones, Primitive.String));
        }
        return b.buffer;
      }
    }
    contacts2.DeleteByPhones = DeleteByPhones;
    class Block extends TLObject {
      __response__;
      myStoriesFrom;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.Block';
        this.constructorId = 774801204;
        this.subclassOfId = 4122188204;
        this._slots = ['myStoriesFrom', 'id'];
        this.myStoriesFrom = params.myStoriesFrom;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let myStoriesFrom = flags & (1 << 0) ? true : false;
        let id = await TLObject.read(b);
        return new Raw2.contacts.Block({ myStoriesFrom, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.myStoriesFrom ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.id !== void 0) {
          b.write(this.id.write());
        }
        return b.buffer;
      }
    }
    contacts2.Block = Block;
    class Unblock extends TLObject {
      __response__;
      myStoriesFrom;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.Unblock';
        this.constructorId = 3041973032;
        this.subclassOfId = 4122188204;
        this._slots = ['myStoriesFrom', 'id'];
        this.myStoriesFrom = params.myStoriesFrom;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let myStoriesFrom = flags & (1 << 0) ? true : false;
        let id = await TLObject.read(b);
        return new Raw2.contacts.Unblock({ myStoriesFrom, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.myStoriesFrom ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.id !== void 0) {
          b.write(this.id.write());
        }
        return b.buffer;
      }
    }
    contacts2.Unblock = Unblock;
    class GetBlocked extends TLObject {
      __response__;
      myStoriesFrom;
      offset;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.GetBlocked';
        this.constructorId = 2592509824;
        this.subclassOfId = 4290400079;
        this._slots = ['myStoriesFrom', 'offset', 'limit'];
        this.myStoriesFrom = params.myStoriesFrom;
        this.offset = params.offset;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let myStoriesFrom = flags & (1 << 0) ? true : false;
        let offset = await Primitive.Int.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.contacts.GetBlocked({
          myStoriesFrom,
          offset,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.myStoriesFrom ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.offset !== void 0) {
          b.write(Primitive.Int.write(this.offset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    contacts2.GetBlocked = GetBlocked;
    class Search extends TLObject {
      __response__;
      q;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.Search';
        this.constructorId = 301470424;
        this.subclassOfId = 1132896995;
        this._slots = ['q', 'limit'];
        this.q = params.q;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let q = await Primitive.String.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.contacts.Search({ q, limit });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.q !== void 0) {
          b.write(Primitive.String.write(this.q));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    contacts2.Search = Search;
    class ResolveUsername extends TLObject {
      __response__;
      username;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.ResolveUsername';
        this.constructorId = 4181511075;
        this.subclassOfId = 4033196968;
        this._slots = ['username'];
        this.username = params.username;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let username = await Primitive.String.read(b);
        return new Raw2.contacts.ResolveUsername({ username });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.username !== void 0) {
          b.write(Primitive.String.write(this.username));
        }
        return b.buffer;
      }
    }
    contacts2.ResolveUsername = ResolveUsername;
    class GetTopPeers extends TLObject {
      __response__;
      correspondents;
      botsPm;
      botsInline;
      phoneCalls;
      forwardUsers;
      forwardChats;
      groups;
      channels;
      offset;
      limit;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.GetTopPeers';
        this.constructorId = 2536798390;
        this.subclassOfId = 2666052488;
        this._slots = [
          'correspondents',
          'botsPm',
          'botsInline',
          'phoneCalls',
          'forwardUsers',
          'forwardChats',
          'groups',
          'channels',
          'offset',
          'limit',
          'hash',
        ];
        this.correspondents = params.correspondents;
        this.botsPm = params.botsPm;
        this.botsInline = params.botsInline;
        this.phoneCalls = params.phoneCalls;
        this.forwardUsers = params.forwardUsers;
        this.forwardChats = params.forwardChats;
        this.groups = params.groups;
        this.channels = params.channels;
        this.offset = params.offset;
        this.limit = params.limit;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let correspondents = flags & (1 << 0) ? true : false;
        let botsPm = flags & (1 << 1) ? true : false;
        let botsInline = flags & (1 << 2) ? true : false;
        let phoneCalls = flags & (1 << 3) ? true : false;
        let forwardUsers = flags & (1 << 4) ? true : false;
        let forwardChats = flags & (1 << 5) ? true : false;
        let groups = flags & (1 << 10) ? true : false;
        let channels2 = flags & (1 << 15) ? true : false;
        let offset = await Primitive.Int.read(b);
        let limit = await Primitive.Int.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.contacts.GetTopPeers({
          correspondents,
          botsPm,
          botsInline,
          phoneCalls,
          forwardUsers,
          forwardChats,
          groups,
          channels: channels2,
          offset,
          limit,
          hash,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.correspondents ? 1 << 0 : 0;
        flags |= this.botsPm ? 1 << 1 : 0;
        flags |= this.botsInline ? 1 << 2 : 0;
        flags |= this.phoneCalls ? 1 << 3 : 0;
        flags |= this.forwardUsers ? 1 << 4 : 0;
        flags |= this.forwardChats ? 1 << 5 : 0;
        flags |= this.groups ? 1 << 10 : 0;
        flags |= this.channels ? 1 << 15 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.offset !== void 0) {
          b.write(Primitive.Int.write(this.offset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    contacts2.GetTopPeers = GetTopPeers;
    class ResetTopPeerRating extends TLObject {
      __response__;
      category;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.ResetTopPeerRating';
        this.constructorId = 451113900;
        this.subclassOfId = 4122188204;
        this._slots = ['category', 'peer'];
        this.category = params.category;
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let category = await TLObject.read(b);
        let peer = await TLObject.read(b);
        return new Raw2.contacts.ResetTopPeerRating({ category, peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.category !== void 0) {
          b.write(this.category.write());
        }
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    contacts2.ResetTopPeerRating = ResetTopPeerRating;
    class ResetSaved extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'contacts.ResetSaved';
        this.constructorId = 2274703345;
        this.subclassOfId = 4122188204;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.contacts.ResetSaved();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    contacts2.ResetSaved = ResetSaved;
    class GetSaved extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'contacts.GetSaved';
        this.constructorId = 2196890527;
        this.subclassOfId = 158718959;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.contacts.GetSaved();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    contacts2.GetSaved = GetSaved;
    class ToggleTopPeers extends TLObject {
      __response__;
      enabled;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.ToggleTopPeers';
        this.constructorId = 2232729050;
        this.subclassOfId = 4122188204;
        this._slots = ['enabled'];
        this.enabled = params.enabled;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let enabled = await Primitive.Bool.read(b);
        return new Raw2.contacts.ToggleTopPeers({ enabled });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.enabled !== void 0) {
          b.write(Primitive.Bool.write(this.enabled));
        }
        return b.buffer;
      }
    }
    contacts2.ToggleTopPeers = ToggleTopPeers;
    class AddContact extends TLObject {
      __response__;
      addPhonePrivacyException;
      id;
      firstName;
      lastName;
      phone;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.AddContact';
        this.constructorId = 3908330448;
        this.subclassOfId = 2331323052;
        this._slots = ['addPhonePrivacyException', 'id', 'firstName', 'lastName', 'phone'];
        this.addPhonePrivacyException = params.addPhonePrivacyException;
        this.id = params.id;
        this.firstName = params.firstName;
        this.lastName = params.lastName;
        this.phone = params.phone;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let addPhonePrivacyException = flags & (1 << 0) ? true : false;
        let id = await TLObject.read(b);
        let firstName = await Primitive.String.read(b);
        let lastName = await Primitive.String.read(b);
        let phone2 = await Primitive.String.read(b);
        return new Raw2.contacts.AddContact({
          addPhonePrivacyException,
          id,
          firstName,
          lastName,
          phone: phone2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.addPhonePrivacyException ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.id !== void 0) {
          b.write(this.id.write());
        }
        if (this.firstName !== void 0) {
          b.write(Primitive.String.write(this.firstName));
        }
        if (this.lastName !== void 0) {
          b.write(Primitive.String.write(this.lastName));
        }
        if (this.phone !== void 0) {
          b.write(Primitive.String.write(this.phone));
        }
        return b.buffer;
      }
    }
    contacts2.AddContact = AddContact;
    class AcceptContact extends TLObject {
      __response__;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.AcceptContact';
        this.constructorId = 4164002319;
        this.subclassOfId = 2331323052;
        this._slots = ['id'];
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b);
        return new Raw2.contacts.AcceptContact({ id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id !== void 0) {
          b.write(this.id.write());
        }
        return b.buffer;
      }
    }
    contacts2.AcceptContact = AcceptContact;
    class GetLocated extends TLObject {
      __response__;
      background;
      geoPoint;
      selfExpires;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.GetLocated';
        this.constructorId = 3544759364;
        this.subclassOfId = 2331323052;
        this._slots = ['background', 'geoPoint', 'selfExpires'];
        this.background = params.background;
        this.geoPoint = params.geoPoint;
        this.selfExpires = params.selfExpires;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let background = flags & (1 << 1) ? true : false;
        let geoPoint = await TLObject.read(b);
        let selfExpires = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.contacts.GetLocated({
          background,
          geoPoint,
          selfExpires,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.background ? 1 << 1 : 0;
        flags |= this.selfExpires !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.geoPoint !== void 0) {
          b.write(this.geoPoint.write());
        }
        if (this.selfExpires !== void 0) {
          b.write(Primitive.Int.write(this.selfExpires));
        }
        return b.buffer;
      }
    }
    contacts2.GetLocated = GetLocated;
    class BlockFromReplies extends TLObject {
      __response__;
      deleteMessage;
      deleteHistory;
      reportSpam;
      msgId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.BlockFromReplies';
        this.constructorId = 698914348;
        this.subclassOfId = 2331323052;
        this._slots = ['deleteMessage', 'deleteHistory', 'reportSpam', 'msgId'];
        this.deleteMessage = params.deleteMessage;
        this.deleteHistory = params.deleteHistory;
        this.reportSpam = params.reportSpam;
        this.msgId = params.msgId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let deleteMessage = flags & (1 << 0) ? true : false;
        let deleteHistory = flags & (1 << 1) ? true : false;
        let reportSpam = flags & (1 << 2) ? true : false;
        let msgId = await Primitive.Int.read(b);
        return new Raw2.contacts.BlockFromReplies({
          deleteMessage,
          deleteHistory,
          reportSpam,
          msgId,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.deleteMessage ? 1 << 0 : 0;
        flags |= this.deleteHistory ? 1 << 1 : 0;
        flags |= this.reportSpam ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        return b.buffer;
      }
    }
    contacts2.BlockFromReplies = BlockFromReplies;
    class ResolvePhone extends TLObject {
      __response__;
      phone;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.ResolvePhone';
        this.constructorId = 2331591492;
        this.subclassOfId = 4033196968;
        this._slots = ['phone'];
        this.phone = params.phone;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let phone2 = await Primitive.String.read(b);
        return new Raw2.contacts.ResolvePhone({ phone: phone2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.phone !== void 0) {
          b.write(Primitive.String.write(this.phone));
        }
        return b.buffer;
      }
    }
    contacts2.ResolvePhone = ResolvePhone;
    class ExportContactToken extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'contacts.ExportContactToken';
        this.constructorId = 4167385127;
        this.subclassOfId = 2262679249;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.contacts.ExportContactToken();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    contacts2.ExportContactToken = ExportContactToken;
    class ImportContactToken extends TLObject {
      __response__;
      token;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.ImportContactToken';
        this.constructorId = 318789512;
        this.subclassOfId = 765557111;
        this._slots = ['token'];
        this.token = params.token;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let token = await Primitive.String.read(b);
        return new Raw2.contacts.ImportContactToken({ token });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.token !== void 0) {
          b.write(Primitive.String.write(this.token));
        }
        return b.buffer;
      }
    }
    contacts2.ImportContactToken = ImportContactToken;
    class EditCloseFriends extends TLObject {
      __response__;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.EditCloseFriends';
        this.constructorId = 3127313904;
        this.subclassOfId = 4122188204;
        this._slots = ['id'];
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b, Primitive.Long);
        return new Raw2.contacts.EditCloseFriends({ id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Long));
        }
        return b.buffer;
      }
    }
    contacts2.EditCloseFriends = EditCloseFriends;
    class SetBlocked extends TLObject {
      __response__;
      myStoriesFrom;
      id;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'contacts.SetBlocked';
        this.constructorId = 2496027766;
        this.subclassOfId = 4122188204;
        this._slots = ['myStoriesFrom', 'id', 'limit'];
        this.myStoriesFrom = params.myStoriesFrom;
        this.id = params.id;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let myStoriesFrom = flags & (1 << 0) ? true : false;
        let id = await TLObject.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.contacts.SetBlocked({ myStoriesFrom, id, limit });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.myStoriesFrom ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.id) {
          b.write(Primitive.Vector.write(this.id));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    contacts2.SetBlocked = SetBlocked;
    class GetBirthdays extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'contacts.GetBirthdays';
        this.constructorId = 3673008228;
        this.subclassOfId = 242920447;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.contacts.GetBirthdays();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    contacts2.GetBirthdays = GetBirthdays;
  })((contacts = Raw2.contacts || (Raw2.contacts = {})));
  let messages;
  ((messages2) => {
    class Dialogs extends TLObject {
      dialogs;
      messages;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.Dialogs';
        this.constructorId = 364538944;
        this.subclassOfId = 236671726;
        this._slots = ['dialogs', 'messages', 'chats', 'users'];
        this.dialogs = params.dialogs;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let dialogs = await TLObject.read(b);
        let messages3 = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.Dialogs({
          dialogs,
          messages: messages3,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.dialogs) {
          b.write(Primitive.Vector.write(this.dialogs));
        }
        if (this.messages) {
          b.write(Primitive.Vector.write(this.messages));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.Dialogs = Dialogs;
    class DialogsSlice extends TLObject {
      count;
      dialogs;
      messages;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.DialogsSlice';
        this.constructorId = 1910543603;
        this.subclassOfId = 236671726;
        this._slots = ['count', 'dialogs', 'messages', 'chats', 'users'];
        this.count = params.count;
        this.dialogs = params.dialogs;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let count = await Primitive.Int.read(b);
        let dialogs = await TLObject.read(b);
        let messages3 = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.DialogsSlice({
          count,
          dialogs,
          messages: messages3,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.dialogs) {
          b.write(Primitive.Vector.write(this.dialogs));
        }
        if (this.messages) {
          b.write(Primitive.Vector.write(this.messages));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.DialogsSlice = DialogsSlice;
    class DialogsNotModified extends TLObject {
      count;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.DialogsNotModified';
        this.constructorId = 4041467286;
        this.subclassOfId = 236671726;
        this._slots = ['count'];
        this.count = params.count;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let count = await Primitive.Int.read(b);
        return new Raw2.messages.DialogsNotModified({ count });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        return b.buffer;
      }
    }
    messages2.DialogsNotModified = DialogsNotModified;
    class Messages extends TLObject {
      messages;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.Messages';
        this.constructorId = 2356252295;
        this.subclassOfId = 3568569182;
        this._slots = ['messages', 'chats', 'users'];
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let messages3 = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.Messages({ messages: messages3, chats, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.messages) {
          b.write(Primitive.Vector.write(this.messages));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.Messages = Messages;
    class MessagesSlice extends TLObject {
      inexact;
      count;
      nextRate;
      offsetIdOffset;
      messages;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.MessagesSlice';
        this.constructorId = 978610270;
        this.subclassOfId = 3568569182;
        this._slots = [
          'inexact',
          'count',
          'nextRate',
          'offsetIdOffset',
          'messages',
          'chats',
          'users',
        ];
        this.inexact = params.inexact;
        this.count = params.count;
        this.nextRate = params.nextRate;
        this.offsetIdOffset = params.offsetIdOffset;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let inexact = flags & (1 << 1) ? true : false;
        let count = await Primitive.Int.read(b);
        let nextRate = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        let offsetIdOffset = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
        let messages3 = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.MessagesSlice({
          inexact,
          count,
          nextRate,
          offsetIdOffset,
          messages: messages3,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.inexact ? 1 << 1 : 0;
        flags |= this.nextRate !== void 0 ? 1 << 0 : 0;
        flags |= this.offsetIdOffset !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.nextRate !== void 0) {
          b.write(Primitive.Int.write(this.nextRate));
        }
        if (this.offsetIdOffset !== void 0) {
          b.write(Primitive.Int.write(this.offsetIdOffset));
        }
        if (this.messages) {
          b.write(Primitive.Vector.write(this.messages));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.MessagesSlice = MessagesSlice;
    class ChannelMessages extends TLObject {
      inexact;
      pts;
      count;
      offsetIdOffset;
      messages;
      topics;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.ChannelMessages';
        this.constructorId = 3346446926;
        this.subclassOfId = 3568569182;
        this._slots = [
          'inexact',
          'pts',
          'count',
          'offsetIdOffset',
          'messages',
          'topics',
          'chats',
          'users',
        ];
        this.inexact = params.inexact;
        this.pts = params.pts;
        this.count = params.count;
        this.offsetIdOffset = params.offsetIdOffset;
        this.messages = params.messages;
        this.topics = params.topics;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let inexact = flags & (1 << 1) ? true : false;
        let pts = await Primitive.Int.read(b);
        let count = await Primitive.Int.read(b);
        let offsetIdOffset = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
        let messages3 = await TLObject.read(b);
        let topics = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.ChannelMessages({
          inexact,
          pts,
          count,
          offsetIdOffset,
          messages: messages3,
          topics,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.inexact ? 1 << 1 : 0;
        flags |= this.offsetIdOffset !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.pts !== void 0) {
          b.write(Primitive.Int.write(this.pts));
        }
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.offsetIdOffset !== void 0) {
          b.write(Primitive.Int.write(this.offsetIdOffset));
        }
        if (this.messages) {
          b.write(Primitive.Vector.write(this.messages));
        }
        if (this.topics) {
          b.write(Primitive.Vector.write(this.topics));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.ChannelMessages = ChannelMessages;
    class MessagesNotModified extends TLObject {
      count;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.MessagesNotModified';
        this.constructorId = 1951620897;
        this.subclassOfId = 3568569182;
        this._slots = ['count'];
        this.count = params.count;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let count = await Primitive.Int.read(b);
        return new Raw2.messages.MessagesNotModified({ count });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        return b.buffer;
      }
    }
    messages2.MessagesNotModified = MessagesNotModified;
    class Chats extends TLObject {
      chats;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.Chats';
        this.constructorId = 1694474197;
        this.subclassOfId = 2580925204;
        this._slots = ['chats'];
        this.chats = params.chats;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let chats = await TLObject.read(b);
        return new Raw2.messages.Chats({ chats });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        return b.buffer;
      }
    }
    messages2.Chats = Chats;
    class ChatsSlice extends TLObject {
      count;
      chats;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.ChatsSlice';
        this.constructorId = 2631405892;
        this.subclassOfId = 2580925204;
        this._slots = ['count', 'chats'];
        this.count = params.count;
        this.chats = params.chats;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let count = await Primitive.Int.read(b);
        let chats = await TLObject.read(b);
        return new Raw2.messages.ChatsSlice({ count, chats });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        return b.buffer;
      }
    }
    messages2.ChatsSlice = ChatsSlice;
    class ChatFull2 extends TLObject {
      fullChat;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.ChatFull';
        this.constructorId = 3856126364;
        this.subclassOfId = 576344329;
        this._slots = ['fullChat', 'chats', 'users'];
        this.fullChat = params.fullChat;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let fullChat = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.ChatFull({ fullChat, chats, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.fullChat !== void 0) {
          b.write(this.fullChat.write());
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.ChatFull = ChatFull2;
    class AffectedHistory extends TLObject {
      pts;
      ptsCount;
      offset;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.AffectedHistory';
        this.constructorId = 3025955281;
        this.subclassOfId = 743031062;
        this._slots = ['pts', 'ptsCount', 'offset'];
        this.pts = params.pts;
        this.ptsCount = params.ptsCount;
        this.offset = params.offset;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let pts = await Primitive.Int.read(b);
        let ptsCount = await Primitive.Int.read(b);
        let offset = await Primitive.Int.read(b);
        return new Raw2.messages.AffectedHistory({ pts, ptsCount, offset });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.pts !== void 0) {
          b.write(Primitive.Int.write(this.pts));
        }
        if (this.ptsCount !== void 0) {
          b.write(Primitive.Int.write(this.ptsCount));
        }
        if (this.offset !== void 0) {
          b.write(Primitive.Int.write(this.offset));
        }
        return b.buffer;
      }
    }
    messages2.AffectedHistory = AffectedHistory;
    class DhConfigNotModified extends TLObject {
      random;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.DhConfigNotModified';
        this.constructorId = 3236054581;
        this.subclassOfId = 3834178955;
        this._slots = ['random'];
        this.random = params.random;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let random = await Primitive.Bytes.read(b);
        return new Raw2.messages.DhConfigNotModified({ random });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.random !== void 0) {
          b.write(Primitive.Bytes.write(this.random));
        }
        return b.buffer;
      }
    }
    messages2.DhConfigNotModified = DhConfigNotModified;
    class DhConfig extends TLObject {
      g;
      p;
      version;
      random;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.DhConfig';
        this.constructorId = 740433629;
        this.subclassOfId = 3834178955;
        this._slots = ['g', 'p', 'version', 'random'];
        this.g = params.g;
        this.p = params.p;
        this.version = params.version;
        this.random = params.random;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let g = await Primitive.Int.read(b);
        let p = await Primitive.Bytes.read(b);
        let version = await Primitive.Int.read(b);
        let random = await Primitive.Bytes.read(b);
        return new Raw2.messages.DhConfig({ g, p, version, random });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.g !== void 0) {
          b.write(Primitive.Int.write(this.g));
        }
        if (this.p !== void 0) {
          b.write(Primitive.Bytes.write(this.p));
        }
        if (this.version !== void 0) {
          b.write(Primitive.Int.write(this.version));
        }
        if (this.random !== void 0) {
          b.write(Primitive.Bytes.write(this.random));
        }
        return b.buffer;
      }
    }
    messages2.DhConfig = DhConfig;
    class SentEncryptedMessage extends TLObject {
      date;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.SentEncryptedMessage';
        this.constructorId = 1443858741;
        this.subclassOfId = 3382591056;
        this._slots = ['date'];
        this.date = params.date;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let date = await Primitive.Int.read(b);
        return new Raw2.messages.SentEncryptedMessage({ date });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.date !== void 0) {
          b.write(Primitive.Int.write(this.date));
        }
        return b.buffer;
      }
    }
    messages2.SentEncryptedMessage = SentEncryptedMessage;
    class SentEncryptedFile extends TLObject {
      date;
      file;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.SentEncryptedFile';
        this.constructorId = 2492727090;
        this.subclassOfId = 3382591056;
        this._slots = ['date', 'file'];
        this.date = params.date;
        this.file = params.file;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let date = await Primitive.Int.read(b);
        let file = await TLObject.read(b);
        return new Raw2.messages.SentEncryptedFile({ date, file });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.date !== void 0) {
          b.write(Primitive.Int.write(this.date));
        }
        if (this.file !== void 0) {
          b.write(this.file.write());
        }
        return b.buffer;
      }
    }
    messages2.SentEncryptedFile = SentEncryptedFile;
    class StickersNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'messages.StickersNotModified';
        this.constructorId = 4050950690;
        this.subclassOfId = 3611015646;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.StickersNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.StickersNotModified = StickersNotModified;
    class Stickers extends TLObject {
      hash;
      stickers;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.Stickers';
        this.constructorId = 816245886;
        this.subclassOfId = 3611015646;
        this._slots = ['hash', 'stickers'];
        this.hash = params.hash;
        this.stickers = params.stickers;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        let stickers2 = await TLObject.read(b);
        return new Raw2.messages.Stickers({ hash, stickers: stickers2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        if (this.stickers) {
          b.write(Primitive.Vector.write(this.stickers));
        }
        return b.buffer;
      }
    }
    messages2.Stickers = Stickers;
    class AllStickersNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'messages.AllStickersNotModified';
        this.constructorId = 3898999491;
        this.subclassOfId = 1166231593;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.AllStickersNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.AllStickersNotModified = AllStickersNotModified;
    class AllStickers extends TLObject {
      hash;
      sets;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.AllStickers';
        this.constructorId = 3451637435;
        this.subclassOfId = 1166231593;
        this._slots = ['hash', 'sets'];
        this.hash = params.hash;
        this.sets = params.sets;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        let sets = await TLObject.read(b);
        return new Raw2.messages.AllStickers({ hash, sets });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        if (this.sets) {
          b.write(Primitive.Vector.write(this.sets));
        }
        return b.buffer;
      }
    }
    messages2.AllStickers = AllStickers;
    class AffectedMessages extends TLObject {
      pts;
      ptsCount;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.AffectedMessages';
        this.constructorId = 2228326789;
        this.subclassOfId = 3469983854;
        this._slots = ['pts', 'ptsCount'];
        this.pts = params.pts;
        this.ptsCount = params.ptsCount;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let pts = await Primitive.Int.read(b);
        let ptsCount = await Primitive.Int.read(b);
        return new Raw2.messages.AffectedMessages({ pts, ptsCount });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.pts !== void 0) {
          b.write(Primitive.Int.write(this.pts));
        }
        if (this.ptsCount !== void 0) {
          b.write(Primitive.Int.write(this.ptsCount));
        }
        return b.buffer;
      }
    }
    messages2.AffectedMessages = AffectedMessages;
    class StickerSet2 extends TLObject {
      set;
      packs;
      keywords;
      documents;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.StickerSet';
        this.constructorId = 1846886166;
        this.subclassOfId = 2607827546;
        this._slots = ['set', 'packs', 'keywords', 'documents'];
        this.set = params.set;
        this.packs = params.packs;
        this.keywords = params.keywords;
        this.documents = params.documents;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let set = await TLObject.read(b);
        let packs = await TLObject.read(b);
        let keywords = await TLObject.read(b);
        let documents = await TLObject.read(b);
        return new Raw2.messages.StickerSet({
          set,
          packs,
          keywords,
          documents,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.set !== void 0) {
          b.write(this.set.write());
        }
        if (this.packs) {
          b.write(Primitive.Vector.write(this.packs));
        }
        if (this.keywords) {
          b.write(Primitive.Vector.write(this.keywords));
        }
        if (this.documents) {
          b.write(Primitive.Vector.write(this.documents));
        }
        return b.buffer;
      }
    }
    messages2.StickerSet = StickerSet2;
    class StickerSetNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'messages.StickerSetNotModified';
        this.constructorId = 3556320491;
        this.subclassOfId = 2607827546;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.StickerSetNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.StickerSetNotModified = StickerSetNotModified;
    class SavedGifsNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'messages.SavedGifsNotModified';
        this.constructorId = 3892468898;
        this.subclassOfId = 2794152437;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.SavedGifsNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.SavedGifsNotModified = SavedGifsNotModified;
    class SavedGifs extends TLObject {
      hash;
      gifs;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.SavedGifs';
        this.constructorId = 2225089037;
        this.subclassOfId = 2794152437;
        this._slots = ['hash', 'gifs'];
        this.hash = params.hash;
        this.gifs = params.gifs;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        let gifs = await TLObject.read(b);
        return new Raw2.messages.SavedGifs({ hash, gifs });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        if (this.gifs) {
          b.write(Primitive.Vector.write(this.gifs));
        }
        return b.buffer;
      }
    }
    messages2.SavedGifs = SavedGifs;
    class BotResults extends TLObject {
      gallery;
      queryId;
      nextOffset;
      switchPm;
      switchWebview;
      results;
      cacheTime;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.BotResults';
        this.constructorId = 3760321270;
        this.subclassOfId = 1054136777;
        this._slots = [
          'gallery',
          'queryId',
          'nextOffset',
          'switchPm',
          'switchWebview',
          'results',
          'cacheTime',
          'users',
        ];
        this.gallery = params.gallery;
        this.queryId = params.queryId;
        this.nextOffset = params.nextOffset;
        this.switchPm = params.switchPm;
        this.switchWebview = params.switchWebview;
        this.results = params.results;
        this.cacheTime = params.cacheTime;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let gallery = flags & (1 << 0) ? true : false;
        let queryId = await Primitive.Long.read(b);
        let nextOffset = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let switchPm = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let switchWebview = flags & (1 << 3) ? await TLObject.read(b) : void 0;
        let results = await TLObject.read(b);
        let cacheTime = await Primitive.Int.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.BotResults({
          gallery,
          queryId,
          nextOffset,
          switchPm,
          switchWebview,
          results,
          cacheTime,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.gallery ? 1 << 0 : 0;
        flags |= this.nextOffset !== void 0 ? 1 << 1 : 0;
        flags |= this.switchPm !== void 0 ? 1 << 2 : 0;
        flags |= this.switchWebview !== void 0 ? 1 << 3 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.queryId !== void 0) {
          b.write(Primitive.Long.write(this.queryId));
        }
        if (this.nextOffset !== void 0) {
          b.write(Primitive.String.write(this.nextOffset));
        }
        if (this.switchPm !== void 0) {
          b.write(this.switchPm.write());
        }
        if (this.switchWebview !== void 0) {
          b.write(this.switchWebview.write());
        }
        if (this.results) {
          b.write(Primitive.Vector.write(this.results));
        }
        if (this.cacheTime !== void 0) {
          b.write(Primitive.Int.write(this.cacheTime));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.BotResults = BotResults;
    class BotCallbackAnswer extends TLObject {
      alert;
      hasUrl;
      nativeUi;
      message;
      url;
      cacheTime;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.BotCallbackAnswer';
        this.constructorId = 911761060;
        this.subclassOfId = 1817039244;
        this._slots = ['alert', 'hasUrl', 'nativeUi', 'message', 'url', 'cacheTime'];
        this.alert = params.alert;
        this.hasUrl = params.hasUrl;
        this.nativeUi = params.nativeUi;
        this.message = params.message;
        this.url = params.url;
        this.cacheTime = params.cacheTime;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let alert = flags & (1 << 1) ? true : false;
        let hasUrl = flags & (1 << 3) ? true : false;
        let nativeUi = flags & (1 << 4) ? true : false;
        let message = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let url = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
        let cacheTime = await Primitive.Int.read(b);
        return new Raw2.messages.BotCallbackAnswer({
          alert,
          hasUrl,
          nativeUi,
          message,
          url,
          cacheTime,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.alert ? 1 << 1 : 0;
        flags |= this.hasUrl ? 1 << 3 : 0;
        flags |= this.nativeUi ? 1 << 4 : 0;
        flags |= this.message !== void 0 ? 1 << 0 : 0;
        flags |= this.url !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.message !== void 0) {
          b.write(Primitive.String.write(this.message));
        }
        if (this.url !== void 0) {
          b.write(Primitive.String.write(this.url));
        }
        if (this.cacheTime !== void 0) {
          b.write(Primitive.Int.write(this.cacheTime));
        }
        return b.buffer;
      }
    }
    messages2.BotCallbackAnswer = BotCallbackAnswer;
    class MessageEditData extends TLObject {
      caption;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.MessageEditData';
        this.constructorId = 649453030;
        this.subclassOfId = 4215772317;
        this._slots = ['caption'];
        this.caption = params.caption;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let caption = flags & (1 << 0) ? true : false;
        return new Raw2.messages.MessageEditData({ caption });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.caption ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        return b.buffer;
      }
    }
    messages2.MessageEditData = MessageEditData;
    class PeerDialogs extends TLObject {
      dialogs;
      messages;
      chats;
      users;
      state;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.PeerDialogs';
        this.constructorId = 863093588;
        this.subclassOfId = 986120498;
        this._slots = ['dialogs', 'messages', 'chats', 'users', 'state'];
        this.dialogs = params.dialogs;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
        this.state = params.state;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let dialogs = await TLObject.read(b);
        let messages3 = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        let state = await TLObject.read(b);
        return new Raw2.messages.PeerDialogs({
          dialogs,
          messages: messages3,
          chats,
          users: users2,
          state,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.dialogs) {
          b.write(Primitive.Vector.write(this.dialogs));
        }
        if (this.messages) {
          b.write(Primitive.Vector.write(this.messages));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        if (this.state !== void 0) {
          b.write(this.state.write());
        }
        return b.buffer;
      }
    }
    messages2.PeerDialogs = PeerDialogs;
    class FeaturedStickersNotModified extends TLObject {
      count;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.FeaturedStickersNotModified';
        this.constructorId = 3336309862;
        this.subclassOfId = 638891810;
        this._slots = ['count'];
        this.count = params.count;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let count = await Primitive.Int.read(b);
        return new Raw2.messages.FeaturedStickersNotModified({ count });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        return b.buffer;
      }
    }
    messages2.FeaturedStickersNotModified = FeaturedStickersNotModified;
    class FeaturedStickers extends TLObject {
      premium;
      hash;
      count;
      sets;
      unread;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.FeaturedStickers';
        this.constructorId = 3191351558;
        this.subclassOfId = 638891810;
        this._slots = ['premium', 'hash', 'count', 'sets', 'unread'];
        this.premium = params.premium;
        this.hash = params.hash;
        this.count = params.count;
        this.sets = params.sets;
        this.unread = params.unread;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let premium2 = flags & (1 << 0) ? true : false;
        let hash = await Primitive.Long.read(b);
        let count = await Primitive.Int.read(b);
        let sets = await TLObject.read(b);
        let unread = await TLObject.read(b, Primitive.Long);
        return new Raw2.messages.FeaturedStickers({
          premium: premium2,
          hash,
          count,
          sets,
          unread,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.premium ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.sets) {
          b.write(Primitive.Vector.write(this.sets));
        }
        if (this.unread) {
          b.write(Primitive.Vector.write(this.unread, Primitive.Long));
        }
        return b.buffer;
      }
    }
    messages2.FeaturedStickers = FeaturedStickers;
    class RecentStickersNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'messages.RecentStickersNotModified';
        this.constructorId = 186120336;
        this.subclassOfId = 4151281283;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.RecentStickersNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.RecentStickersNotModified = RecentStickersNotModified;
    class RecentStickers extends TLObject {
      hash;
      packs;
      stickers;
      dates;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.RecentStickers';
        this.constructorId = 2295561302;
        this.subclassOfId = 4151281283;
        this._slots = ['hash', 'packs', 'stickers', 'dates'];
        this.hash = params.hash;
        this.packs = params.packs;
        this.stickers = params.stickers;
        this.dates = params.dates;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        let packs = await TLObject.read(b);
        let stickers2 = await TLObject.read(b);
        let dates = await TLObject.read(b, Primitive.Int);
        return new Raw2.messages.RecentStickers({
          hash,
          packs,
          stickers: stickers2,
          dates,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        if (this.packs) {
          b.write(Primitive.Vector.write(this.packs));
        }
        if (this.stickers) {
          b.write(Primitive.Vector.write(this.stickers));
        }
        if (this.dates) {
          b.write(Primitive.Vector.write(this.dates, Primitive.Int));
        }
        return b.buffer;
      }
    }
    messages2.RecentStickers = RecentStickers;
    class ArchivedStickers extends TLObject {
      count;
      sets;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.ArchivedStickers';
        this.constructorId = 1338747336;
        this.subclassOfId = 1922488177;
        this._slots = ['count', 'sets'];
        this.count = params.count;
        this.sets = params.sets;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let count = await Primitive.Int.read(b);
        let sets = await TLObject.read(b);
        return new Raw2.messages.ArchivedStickers({ count, sets });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.sets) {
          b.write(Primitive.Vector.write(this.sets));
        }
        return b.buffer;
      }
    }
    messages2.ArchivedStickers = ArchivedStickers;
    class StickerSetInstallResultSuccess extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'messages.StickerSetInstallResultSuccess';
        this.constructorId = 946083368;
        this.subclassOfId = 1741373416;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.StickerSetInstallResultSuccess();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.StickerSetInstallResultSuccess = StickerSetInstallResultSuccess;
    class StickerSetInstallResultArchive extends TLObject {
      sets;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.StickerSetInstallResultArchive';
        this.constructorId = 904138920;
        this.subclassOfId = 1741373416;
        this._slots = ['sets'];
        this.sets = params.sets;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let sets = await TLObject.read(b);
        return new Raw2.messages.StickerSetInstallResultArchive({ sets });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.sets) {
          b.write(Primitive.Vector.write(this.sets));
        }
        return b.buffer;
      }
    }
    messages2.StickerSetInstallResultArchive = StickerSetInstallResultArchive;
    class HighScores extends TLObject {
      scores;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.HighScores';
        this.constructorId = 2587622809;
        this.subclassOfId = 1825412605;
        this._slots = ['scores', 'users'];
        this.scores = params.scores;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let scores = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.HighScores({ scores, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.scores) {
          b.write(Primitive.Vector.write(this.scores));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.HighScores = HighScores;
    class FavedStickersNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'messages.FavedStickersNotModified';
        this.constructorId = 2660214483;
        this.subclassOfId = 2389929913;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.FavedStickersNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.FavedStickersNotModified = FavedStickersNotModified;
    class FavedStickers extends TLObject {
      hash;
      packs;
      stickers;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.FavedStickers';
        this.constructorId = 750063767;
        this.subclassOfId = 2389929913;
        this._slots = ['hash', 'packs', 'stickers'];
        this.hash = params.hash;
        this.packs = params.packs;
        this.stickers = params.stickers;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        let packs = await TLObject.read(b);
        let stickers2 = await TLObject.read(b);
        return new Raw2.messages.FavedStickers({ hash, packs, stickers: stickers2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        if (this.packs) {
          b.write(Primitive.Vector.write(this.packs));
        }
        if (this.stickers) {
          b.write(Primitive.Vector.write(this.stickers));
        }
        return b.buffer;
      }
    }
    messages2.FavedStickers = FavedStickers;
    class FoundStickerSetsNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'messages.FoundStickerSetsNotModified';
        this.constructorId = 223655517;
        this.subclassOfId = 68023137;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.FoundStickerSetsNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.FoundStickerSetsNotModified = FoundStickerSetsNotModified;
    class FoundStickerSets extends TLObject {
      hash;
      sets;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.FoundStickerSets';
        this.constructorId = 2331024850;
        this.subclassOfId = 68023137;
        this._slots = ['hash', 'sets'];
        this.hash = params.hash;
        this.sets = params.sets;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        let sets = await TLObject.read(b);
        return new Raw2.messages.FoundStickerSets({ hash, sets });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        if (this.sets) {
          b.write(Primitive.Vector.write(this.sets));
        }
        return b.buffer;
      }
    }
    messages2.FoundStickerSets = FoundStickerSets;
    class SearchCounter extends TLObject {
      inexact;
      filter;
      count;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.SearchCounter';
        this.constructorId = 3896830975;
        this.subclassOfId = 3601317794;
        this._slots = ['inexact', 'filter', 'count'];
        this.inexact = params.inexact;
        this.filter = params.filter;
        this.count = params.count;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let inexact = flags & (1 << 1) ? true : false;
        let filter = await TLObject.read(b);
        let count = await Primitive.Int.read(b);
        return new Raw2.messages.SearchCounter({ inexact, filter, count });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.inexact ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.filter !== void 0) {
          b.write(this.filter.write());
        }
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        return b.buffer;
      }
    }
    messages2.SearchCounter = SearchCounter;
    class InactiveChats extends TLObject {
      dates;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.InactiveChats';
        this.constructorId = 2837970629;
        this.subclassOfId = 2348013524;
        this._slots = ['dates', 'chats', 'users'];
        this.dates = params.dates;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let dates = await TLObject.read(b, Primitive.Int);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.InactiveChats({ dates, chats, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.dates) {
          b.write(Primitive.Vector.write(this.dates, Primitive.Int));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.InactiveChats = InactiveChats;
    class VotesList extends TLObject {
      count;
      votes;
      chats;
      users;
      nextOffset;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.VotesList';
        this.constructorId = 1218005070;
        this.subclassOfId = 3256457349;
        this._slots = ['count', 'votes', 'chats', 'users', 'nextOffset'];
        this.count = params.count;
        this.votes = params.votes;
        this.chats = params.chats;
        this.users = params.users;
        this.nextOffset = params.nextOffset;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let count = await Primitive.Int.read(b);
        let votes = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        let nextOffset = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        return new Raw2.messages.VotesList({
          count,
          votes,
          chats,
          users: users2,
          nextOffset,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.nextOffset !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.votes) {
          b.write(Primitive.Vector.write(this.votes));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        if (this.nextOffset !== void 0) {
          b.write(Primitive.String.write(this.nextOffset));
        }
        return b.buffer;
      }
    }
    messages2.VotesList = VotesList;
    class MessageViews2 extends TLObject {
      views;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.MessageViews';
        this.constructorId = 3066361155;
        this.subclassOfId = 2947935132;
        this._slots = ['views', 'chats', 'users'];
        this.views = params.views;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let views = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.MessageViews({ views, chats, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.views) {
          b.write(Primitive.Vector.write(this.views));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.MessageViews = MessageViews2;
    class DiscussionMessage extends TLObject {
      messages;
      maxId;
      readInboxMaxId;
      readOutboxMaxId;
      unreadCount;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.DiscussionMessage';
        this.constructorId = 2788431746;
        this.subclassOfId = 1408820200;
        this._slots = [
          'messages',
          'maxId',
          'readInboxMaxId',
          'readOutboxMaxId',
          'unreadCount',
          'chats',
          'users',
        ];
        this.messages = params.messages;
        this.maxId = params.maxId;
        this.readInboxMaxId = params.readInboxMaxId;
        this.readOutboxMaxId = params.readOutboxMaxId;
        this.unreadCount = params.unreadCount;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let messages3 = await TLObject.read(b);
        let maxId = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        let readInboxMaxId = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let readOutboxMaxId = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
        let unreadCount = await Primitive.Int.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.DiscussionMessage({
          messages: messages3,
          maxId,
          readInboxMaxId,
          readOutboxMaxId,
          unreadCount,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.maxId !== void 0 ? 1 << 0 : 0;
        flags |= this.readInboxMaxId !== void 0 ? 1 << 1 : 0;
        flags |= this.readOutboxMaxId !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.messages) {
          b.write(Primitive.Vector.write(this.messages));
        }
        if (this.maxId !== void 0) {
          b.write(Primitive.Int.write(this.maxId));
        }
        if (this.readInboxMaxId !== void 0) {
          b.write(Primitive.Int.write(this.readInboxMaxId));
        }
        if (this.readOutboxMaxId !== void 0) {
          b.write(Primitive.Int.write(this.readOutboxMaxId));
        }
        if (this.unreadCount !== void 0) {
          b.write(Primitive.Int.write(this.unreadCount));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.DiscussionMessage = DiscussionMessage;
    class HistoryImport extends TLObject {
      id;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.HistoryImport';
        this.constructorId = 375566091;
        this.subclassOfId = 2978723082;
        this._slots = ['id'];
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await Primitive.Long.read(b);
        return new Raw2.messages.HistoryImport({ id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id !== void 0) {
          b.write(Primitive.Long.write(this.id));
        }
        return b.buffer;
      }
    }
    messages2.HistoryImport = HistoryImport;
    class HistoryImportParsed extends TLObject {
      pm;
      group;
      title;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.HistoryImportParsed';
        this.constructorId = 1578088377;
        this.subclassOfId = 1538421259;
        this._slots = ['pm', 'group', 'title'];
        this.pm = params.pm;
        this.group = params.group;
        this.title = params.title;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let pm = flags & (1 << 0) ? true : false;
        let group = flags & (1 << 1) ? true : false;
        let title = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
        return new Raw2.messages.HistoryImportParsed({ pm, group, title });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.pm ? 1 << 0 : 0;
        flags |= this.group ? 1 << 1 : 0;
        flags |= this.title !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        return b.buffer;
      }
    }
    messages2.HistoryImportParsed = HistoryImportParsed;
    class AffectedFoundMessages extends TLObject {
      pts;
      ptsCount;
      offset;
      messages;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.AffectedFoundMessages';
        this.constructorId = 4019011180;
        this.subclassOfId = 4162282798;
        this._slots = ['pts', 'ptsCount', 'offset', 'messages'];
        this.pts = params.pts;
        this.ptsCount = params.ptsCount;
        this.offset = params.offset;
        this.messages = params.messages;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let pts = await Primitive.Int.read(b);
        let ptsCount = await Primitive.Int.read(b);
        let offset = await Primitive.Int.read(b);
        let messages3 = await TLObject.read(b, Primitive.Int);
        return new Raw2.messages.AffectedFoundMessages({
          pts,
          ptsCount,
          offset,
          messages: messages3,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.pts !== void 0) {
          b.write(Primitive.Int.write(this.pts));
        }
        if (this.ptsCount !== void 0) {
          b.write(Primitive.Int.write(this.ptsCount));
        }
        if (this.offset !== void 0) {
          b.write(Primitive.Int.write(this.offset));
        }
        if (this.messages) {
          b.write(Primitive.Vector.write(this.messages, Primitive.Int));
        }
        return b.buffer;
      }
    }
    messages2.AffectedFoundMessages = AffectedFoundMessages;
    class ExportedChatInvites extends TLObject {
      count;
      invites;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.ExportedChatInvites';
        this.constructorId = 3183881676;
        this.subclassOfId = 1614624881;
        this._slots = ['count', 'invites', 'users'];
        this.count = params.count;
        this.invites = params.invites;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let count = await Primitive.Int.read(b);
        let invites = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.ExportedChatInvites({
          count,
          invites,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.invites) {
          b.write(Primitive.Vector.write(this.invites));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.ExportedChatInvites = ExportedChatInvites;
    class ExportedChatInvite extends TLObject {
      invite;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.ExportedChatInvite';
        this.constructorId = 410107472;
        this.subclassOfId = 2195510474;
        this._slots = ['invite', 'users'];
        this.invite = params.invite;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let invite = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.ExportedChatInvite({ invite, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.invite !== void 0) {
          b.write(this.invite.write());
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.ExportedChatInvite = ExportedChatInvite;
    class ExportedChatInviteReplaced extends TLObject {
      invite;
      newInvite;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.ExportedChatInviteReplaced';
        this.constructorId = 572915951;
        this.subclassOfId = 2195510474;
        this._slots = ['invite', 'newInvite', 'users'];
        this.invite = params.invite;
        this.newInvite = params.newInvite;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let invite = await TLObject.read(b);
        let newInvite = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.ExportedChatInviteReplaced({
          invite,
          newInvite,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.invite !== void 0) {
          b.write(this.invite.write());
        }
        if (this.newInvite !== void 0) {
          b.write(this.newInvite.write());
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.ExportedChatInviteReplaced = ExportedChatInviteReplaced;
    class ChatInviteImporters extends TLObject {
      count;
      importers;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.ChatInviteImporters';
        this.constructorId = 2176233482;
        this.subclassOfId = 3653012134;
        this._slots = ['count', 'importers', 'users'];
        this.count = params.count;
        this.importers = params.importers;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let count = await Primitive.Int.read(b);
        let importers = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.ChatInviteImporters({
          count,
          importers,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.importers) {
          b.write(Primitive.Vector.write(this.importers));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.ChatInviteImporters = ChatInviteImporters;
    class ChatAdminsWithInvites extends TLObject {
      admins;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.ChatAdminsWithInvites';
        this.constructorId = 3063640791;
        this.subclassOfId = 2405149995;
        this._slots = ['admins', 'users'];
        this.admins = params.admins;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let admins = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.ChatAdminsWithInvites({ admins, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.admins) {
          b.write(Primitive.Vector.write(this.admins));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.ChatAdminsWithInvites = ChatAdminsWithInvites;
    class CheckedHistoryImportPeer extends TLObject {
      confirmText;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.CheckedHistoryImportPeer';
        this.constructorId = 2723014423;
        this.subclassOfId = 3091968823;
        this._slots = ['confirmText'];
        this.confirmText = params.confirmText;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let confirmText = await Primitive.String.read(b);
        return new Raw2.messages.CheckedHistoryImportPeer({ confirmText });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.confirmText !== void 0) {
          b.write(Primitive.String.write(this.confirmText));
        }
        return b.buffer;
      }
    }
    messages2.CheckedHistoryImportPeer = CheckedHistoryImportPeer;
    class SponsoredMessages extends TLObject {
      postsBetween;
      messages;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.SponsoredMessages';
        this.constructorId = 3387825543;
        this.subclassOfId = 2134993376;
        this._slots = ['postsBetween', 'messages', 'chats', 'users'];
        this.postsBetween = params.postsBetween;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let postsBetween = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        let messages3 = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.SponsoredMessages({
          postsBetween,
          messages: messages3,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.postsBetween !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.postsBetween !== void 0) {
          b.write(Primitive.Int.write(this.postsBetween));
        }
        if (this.messages) {
          b.write(Primitive.Vector.write(this.messages));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.SponsoredMessages = SponsoredMessages;
    class SponsoredMessagesEmpty extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'messages.SponsoredMessagesEmpty';
        this.constructorId = 406407439;
        this.subclassOfId = 2134993376;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.SponsoredMessagesEmpty();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.SponsoredMessagesEmpty = SponsoredMessagesEmpty;
    class SearchResultsCalendar extends TLObject {
      inexact;
      count;
      minDate;
      minMsgId;
      offsetIdOffset;
      periods;
      messages;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.SearchResultsCalendar';
        this.constructorId = 343859772;
        this.subclassOfId = 2462409743;
        this._slots = [
          'inexact',
          'count',
          'minDate',
          'minMsgId',
          'offsetIdOffset',
          'periods',
          'messages',
          'chats',
          'users',
        ];
        this.inexact = params.inexact;
        this.count = params.count;
        this.minDate = params.minDate;
        this.minMsgId = params.minMsgId;
        this.offsetIdOffset = params.offsetIdOffset;
        this.periods = params.periods;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let inexact = flags & (1 << 0) ? true : false;
        let count = await Primitive.Int.read(b);
        let minDate = await Primitive.Int.read(b);
        let minMsgId = await Primitive.Int.read(b);
        let offsetIdOffset = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let periods = await TLObject.read(b);
        let messages3 = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.SearchResultsCalendar({
          inexact,
          count,
          minDate,
          minMsgId,
          offsetIdOffset,
          periods,
          messages: messages3,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.inexact ? 1 << 0 : 0;
        flags |= this.offsetIdOffset !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.minDate !== void 0) {
          b.write(Primitive.Int.write(this.minDate));
        }
        if (this.minMsgId !== void 0) {
          b.write(Primitive.Int.write(this.minMsgId));
        }
        if (this.offsetIdOffset !== void 0) {
          b.write(Primitive.Int.write(this.offsetIdOffset));
        }
        if (this.periods) {
          b.write(Primitive.Vector.write(this.periods));
        }
        if (this.messages) {
          b.write(Primitive.Vector.write(this.messages));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.SearchResultsCalendar = SearchResultsCalendar;
    class SearchResultsPositions extends TLObject {
      count;
      positions;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.SearchResultsPositions';
        this.constructorId = 1404185519;
        this.subclassOfId = 3647172749;
        this._slots = ['count', 'positions'];
        this.count = params.count;
        this.positions = params.positions;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let count = await Primitive.Int.read(b);
        let positions = await TLObject.read(b);
        return new Raw2.messages.SearchResultsPositions({ count, positions });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.positions) {
          b.write(Primitive.Vector.write(this.positions));
        }
        return b.buffer;
      }
    }
    messages2.SearchResultsPositions = SearchResultsPositions;
    class PeerSettings2 extends TLObject {
      settings;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.PeerSettings';
        this.constructorId = 1753266509;
        this.subclassOfId = 1705179041;
        this._slots = ['settings', 'chats', 'users'];
        this.settings = params.settings;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let settings = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.PeerSettings({ settings, chats, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.settings !== void 0) {
          b.write(this.settings.write());
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.PeerSettings = PeerSettings2;
    class MessageReactionsList extends TLObject {
      count;
      reactions;
      chats;
      users;
      nextOffset;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.MessageReactionsList';
        this.constructorId = 834488621;
        this.subclassOfId = 1627186662;
        this._slots = ['count', 'reactions', 'chats', 'users', 'nextOffset'];
        this.count = params.count;
        this.reactions = params.reactions;
        this.chats = params.chats;
        this.users = params.users;
        this.nextOffset = params.nextOffset;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let count = await Primitive.Int.read(b);
        let reactions = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        let nextOffset = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        return new Raw2.messages.MessageReactionsList({
          count,
          reactions,
          chats,
          users: users2,
          nextOffset,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.nextOffset !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.reactions) {
          b.write(Primitive.Vector.write(this.reactions));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        if (this.nextOffset !== void 0) {
          b.write(Primitive.String.write(this.nextOffset));
        }
        return b.buffer;
      }
    }
    messages2.MessageReactionsList = MessageReactionsList;
    class AvailableReactionsNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'messages.AvailableReactionsNotModified';
        this.constructorId = 2668042583;
        this.subclassOfId = 3827740034;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.AvailableReactionsNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.AvailableReactionsNotModified = AvailableReactionsNotModified;
    class AvailableReactions extends TLObject {
      hash;
      reactions;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.AvailableReactions';
        this.constructorId = 1989032621;
        this.subclassOfId = 3827740034;
        this._slots = ['hash', 'reactions'];
        this.hash = params.hash;
        this.reactions = params.reactions;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Int.read(b);
        let reactions = await TLObject.read(b);
        return new Raw2.messages.AvailableReactions({ hash, reactions });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        if (this.reactions) {
          b.write(Primitive.Vector.write(this.reactions));
        }
        return b.buffer;
      }
    }
    messages2.AvailableReactions = AvailableReactions;
    class TranscribedAudio extends TLObject {
      pending;
      transcriptionId;
      text;
      trialRemainsNum;
      trialRemainsUntilDate;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.TranscribedAudio';
        this.constructorId = 3485063511;
        this.subclassOfId = 565332278;
        this._slots = [
          'pending',
          'transcriptionId',
          'text',
          'trialRemainsNum',
          'trialRemainsUntilDate',
        ];
        this.pending = params.pending;
        this.transcriptionId = params.transcriptionId;
        this.text = params.text;
        this.trialRemainsNum = params.trialRemainsNum;
        this.trialRemainsUntilDate = params.trialRemainsUntilDate;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let pending = flags & (1 << 0) ? true : false;
        let transcriptionId = await Primitive.Long.read(b);
        let text = await Primitive.String.read(b);
        let trialRemainsNum = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let trialRemainsUntilDate = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.messages.TranscribedAudio({
          pending,
          transcriptionId,
          text,
          trialRemainsNum,
          trialRemainsUntilDate,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.pending ? 1 << 0 : 0;
        flags |= this.trialRemainsNum !== void 0 ? 1 << 1 : 0;
        flags |= this.trialRemainsUntilDate !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.transcriptionId !== void 0) {
          b.write(Primitive.Long.write(this.transcriptionId));
        }
        if (this.text !== void 0) {
          b.write(Primitive.String.write(this.text));
        }
        if (this.trialRemainsNum !== void 0) {
          b.write(Primitive.Int.write(this.trialRemainsNum));
        }
        if (this.trialRemainsUntilDate !== void 0) {
          b.write(Primitive.Int.write(this.trialRemainsUntilDate));
        }
        return b.buffer;
      }
    }
    messages2.TranscribedAudio = TranscribedAudio;
    class ReactionsNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'messages.ReactionsNotModified';
        this.constructorId = 2960120799;
        this.subclassOfId = 2915271460;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.ReactionsNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.ReactionsNotModified = ReactionsNotModified;
    class Reactions extends TLObject {
      hash;
      reactions;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.Reactions';
        this.constructorId = 3942512406;
        this.subclassOfId = 2915271460;
        this._slots = ['hash', 'reactions'];
        this.hash = params.hash;
        this.reactions = params.reactions;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        let reactions = await TLObject.read(b);
        return new Raw2.messages.Reactions({ hash, reactions });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        if (this.reactions) {
          b.write(Primitive.Vector.write(this.reactions));
        }
        return b.buffer;
      }
    }
    messages2.Reactions = Reactions;
    class ForumTopics extends TLObject {
      orderByCreateDate;
      count;
      topics;
      messages;
      chats;
      users;
      pts;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.ForumTopics';
        this.constructorId = 913709011;
        this.subclassOfId = 2384281118;
        this._slots = ['orderByCreateDate', 'count', 'topics', 'messages', 'chats', 'users', 'pts'];
        this.orderByCreateDate = params.orderByCreateDate;
        this.count = params.count;
        this.topics = params.topics;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
        this.pts = params.pts;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let orderByCreateDate = flags & (1 << 0) ? true : false;
        let count = await Primitive.Int.read(b);
        let topics = await TLObject.read(b);
        let messages3 = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        let pts = await Primitive.Int.read(b);
        return new Raw2.messages.ForumTopics({
          orderByCreateDate,
          count,
          topics,
          messages: messages3,
          chats,
          users: users2,
          pts,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.orderByCreateDate ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.topics) {
          b.write(Primitive.Vector.write(this.topics));
        }
        if (this.messages) {
          b.write(Primitive.Vector.write(this.messages));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        if (this.pts !== void 0) {
          b.write(Primitive.Int.write(this.pts));
        }
        return b.buffer;
      }
    }
    messages2.ForumTopics = ForumTopics;
    class EmojiGroupsNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'messages.EmojiGroupsNotModified';
        this.constructorId = 1874111879;
        this.subclassOfId = 2127189465;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.EmojiGroupsNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.EmojiGroupsNotModified = EmojiGroupsNotModified;
    class EmojiGroups extends TLObject {
      hash;
      groups;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.EmojiGroups';
        this.constructorId = 2283780427;
        this.subclassOfId = 2127189465;
        this._slots = ['hash', 'groups'];
        this.hash = params.hash;
        this.groups = params.groups;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Int.read(b);
        let groups = await TLObject.read(b);
        return new Raw2.messages.EmojiGroups({ hash, groups });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        if (this.groups) {
          b.write(Primitive.Vector.write(this.groups));
        }
        return b.buffer;
      }
    }
    messages2.EmojiGroups = EmojiGroups;
    class TranslateResult extends TLObject {
      result;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.TranslateResult';
        this.constructorId = 870003448;
        this.subclassOfId = 37897192;
        this._slots = ['result'];
        this.result = params.result;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let result = await TLObject.read(b);
        return new Raw2.messages.TranslateResult({ result });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.result) {
          b.write(Primitive.Vector.write(this.result));
        }
        return b.buffer;
      }
    }
    messages2.TranslateResult = TranslateResult;
    class BotApp2 extends TLObject {
      inactive;
      requestWriteAccess;
      hasSettings;
      app;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.BotApp';
        this.constructorId = 3947933173;
        this.subclassOfId = 2406630311;
        this._slots = ['inactive', 'requestWriteAccess', 'hasSettings', 'app'];
        this.inactive = params.inactive;
        this.requestWriteAccess = params.requestWriteAccess;
        this.hasSettings = params.hasSettings;
        this.app = params.app;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let inactive = flags & (1 << 0) ? true : false;
        let requestWriteAccess = flags & (1 << 1) ? true : false;
        let hasSettings = flags & (1 << 2) ? true : false;
        let app = await TLObject.read(b);
        return new Raw2.messages.BotApp({
          inactive,
          requestWriteAccess,
          hasSettings,
          app,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.inactive ? 1 << 0 : 0;
        flags |= this.requestWriteAccess ? 1 << 1 : 0;
        flags |= this.hasSettings ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.app !== void 0) {
          b.write(this.app.write());
        }
        return b.buffer;
      }
    }
    messages2.BotApp = BotApp2;
    class WebPage2 extends TLObject {
      webpage;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.WebPage';
        this.constructorId = 4250800829;
        this.subclassOfId = 754495828;
        this._slots = ['webpage', 'chats', 'users'];
        this.webpage = params.webpage;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let webpage = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.WebPage({ webpage, chats, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.webpage !== void 0) {
          b.write(this.webpage.write());
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.WebPage = WebPage2;
    class SavedDialogs extends TLObject {
      dialogs;
      messages;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.SavedDialogs';
        this.constructorId = 4164608545;
        this.subclassOfId = 1632352382;
        this._slots = ['dialogs', 'messages', 'chats', 'users'];
        this.dialogs = params.dialogs;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let dialogs = await TLObject.read(b);
        let messages3 = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.SavedDialogs({
          dialogs,
          messages: messages3,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.dialogs) {
          b.write(Primitive.Vector.write(this.dialogs));
        }
        if (this.messages) {
          b.write(Primitive.Vector.write(this.messages));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.SavedDialogs = SavedDialogs;
    class SavedDialogsSlice extends TLObject {
      count;
      dialogs;
      messages;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.SavedDialogsSlice';
        this.constructorId = 1153080793;
        this.subclassOfId = 1632352382;
        this._slots = ['count', 'dialogs', 'messages', 'chats', 'users'];
        this.count = params.count;
        this.dialogs = params.dialogs;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let count = await Primitive.Int.read(b);
        let dialogs = await TLObject.read(b);
        let messages3 = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.SavedDialogsSlice({
          count,
          dialogs,
          messages: messages3,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.dialogs) {
          b.write(Primitive.Vector.write(this.dialogs));
        }
        if (this.messages) {
          b.write(Primitive.Vector.write(this.messages));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.SavedDialogsSlice = SavedDialogsSlice;
    class SavedDialogsNotModified extends TLObject {
      count;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.SavedDialogsNotModified';
        this.constructorId = 3223285736;
        this.subclassOfId = 1632352382;
        this._slots = ['count'];
        this.count = params.count;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let count = await Primitive.Int.read(b);
        return new Raw2.messages.SavedDialogsNotModified({ count });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        return b.buffer;
      }
    }
    messages2.SavedDialogsNotModified = SavedDialogsNotModified;
    class SavedReactionTagsNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'messages.SavedReactionTagsNotModified';
        this.constructorId = 2291882479;
        this.subclassOfId = 2744867811;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.SavedReactionTagsNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.SavedReactionTagsNotModified = SavedReactionTagsNotModified;
    class SavedReactionTags extends TLObject {
      tags;
      hash;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.SavedReactionTags';
        this.constructorId = 844731658;
        this.subclassOfId = 2744867811;
        this._slots = ['tags', 'hash'];
        this.tags = params.tags;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let tags = await TLObject.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.SavedReactionTags({ tags, hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.tags) {
          b.write(Primitive.Vector.write(this.tags));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.SavedReactionTags = SavedReactionTags;
    class QuickReplies extends TLObject {
      quickReplies;
      messages;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.QuickReplies';
        this.constructorId = 3331155605;
        this.subclassOfId = 4147636582;
        this._slots = ['quickReplies', 'messages', 'chats', 'users'];
        this.quickReplies = params.quickReplies;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let quickReplies = await TLObject.read(b);
        let messages3 = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.messages.QuickReplies({
          quickReplies,
          messages: messages3,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.quickReplies) {
          b.write(Primitive.Vector.write(this.quickReplies));
        }
        if (this.messages) {
          b.write(Primitive.Vector.write(this.messages));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    messages2.QuickReplies = QuickReplies;
    class QuickRepliesNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'messages.QuickRepliesNotModified';
        this.constructorId = 1603398491;
        this.subclassOfId = 4147636582;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.QuickRepliesNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.QuickRepliesNotModified = QuickRepliesNotModified;
    class DialogFilters extends TLObject {
      tagsEnabled;
      filters;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.DialogFilters';
        this.constructorId = 718878489;
        this.subclassOfId = 2785014199;
        this._slots = ['tagsEnabled', 'filters'];
        this.tagsEnabled = params.tagsEnabled;
        this.filters = params.filters;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let tagsEnabled = flags & (1 << 0) ? true : false;
        let filters = await TLObject.read(b);
        return new Raw2.messages.DialogFilters({ tagsEnabled, filters });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.tagsEnabled ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.filters) {
          b.write(Primitive.Vector.write(this.filters));
        }
        return b.buffer;
      }
    }
    messages2.DialogFilters = DialogFilters;
    class MyStickers extends TLObject {
      count;
      sets;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.MyStickers';
        this.constructorId = 4211040925;
        this.subclassOfId = 2981377290;
        this._slots = ['count', 'sets'];
        this.count = params.count;
        this.sets = params.sets;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let count = await Primitive.Int.read(b);
        let sets = await TLObject.read(b);
        return new Raw2.messages.MyStickers({ count, sets });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.sets) {
          b.write(Primitive.Vector.write(this.sets));
        }
        return b.buffer;
      }
    }
    messages2.MyStickers = MyStickers;
    class InvitedUsers extends TLObject {
      updates;
      missingInvitees;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'messages.InvitedUsers';
        this.constructorId = 2136862630;
        this.subclassOfId = 1035899041;
        this._slots = ['updates', 'missingInvitees'];
        this.updates = params.updates;
        this.missingInvitees = params.missingInvitees;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let updates2 = await TLObject.read(b);
        let missingInvitees = await TLObject.read(b);
        return new Raw2.messages.InvitedUsers({
          updates: updates2,
          missingInvitees,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.updates !== void 0) {
          b.write(this.updates.write());
        }
        if (this.missingInvitees) {
          b.write(Primitive.Vector.write(this.missingInvitees));
        }
        return b.buffer;
      }
    }
    messages2.InvitedUsers = InvitedUsers;
    class GetMessages extends TLObject {
      __response__;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetMessages';
        this.constructorId = 1673946374;
        this.subclassOfId = 3568569182;
        this._slots = ['id'];
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b);
        return new Raw2.messages.GetMessages({ id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id) {
          b.write(Primitive.Vector.write(this.id));
        }
        return b.buffer;
      }
    }
    messages2.GetMessages = GetMessages;
    class GetDialogs extends TLObject {
      __response__;
      excludePinned;
      folderId;
      offsetDate;
      offsetId;
      offsetPeer;
      limit;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetDialogs';
        this.constructorId = 2700397391;
        this.subclassOfId = 236671726;
        this._slots = [
          'excludePinned',
          'folderId',
          'offsetDate',
          'offsetId',
          'offsetPeer',
          'limit',
          'hash',
        ];
        this.excludePinned = params.excludePinned;
        this.folderId = params.folderId;
        this.offsetDate = params.offsetDate;
        this.offsetId = params.offsetId;
        this.offsetPeer = params.offsetPeer;
        this.limit = params.limit;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let excludePinned = flags & (1 << 0) ? true : false;
        let folderId = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let offsetDate = await Primitive.Int.read(b);
        let offsetId = await Primitive.Int.read(b);
        let offsetPeer = await TLObject.read(b);
        let limit = await Primitive.Int.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetDialogs({
          excludePinned,
          folderId,
          offsetDate,
          offsetId,
          offsetPeer,
          limit,
          hash,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.excludePinned ? 1 << 0 : 0;
        flags |= this.folderId !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.folderId !== void 0) {
          b.write(Primitive.Int.write(this.folderId));
        }
        if (this.offsetDate !== void 0) {
          b.write(Primitive.Int.write(this.offsetDate));
        }
        if (this.offsetId !== void 0) {
          b.write(Primitive.Int.write(this.offsetId));
        }
        if (this.offsetPeer !== void 0) {
          b.write(this.offsetPeer.write());
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetDialogs = GetDialogs;
    class GetHistory extends TLObject {
      __response__;
      peer;
      offsetId;
      offsetDate;
      addOffset;
      limit;
      maxId;
      minId;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetHistory';
        this.constructorId = 1143203525;
        this.subclassOfId = 3568569182;
        this._slots = [
          'peer',
          'offsetId',
          'offsetDate',
          'addOffset',
          'limit',
          'maxId',
          'minId',
          'hash',
        ];
        this.peer = params.peer;
        this.offsetId = params.offsetId;
        this.offsetDate = params.offsetDate;
        this.addOffset = params.addOffset;
        this.limit = params.limit;
        this.maxId = params.maxId;
        this.minId = params.minId;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let offsetId = await Primitive.Int.read(b);
        let offsetDate = await Primitive.Int.read(b);
        let addOffset = await Primitive.Int.read(b);
        let limit = await Primitive.Int.read(b);
        let maxId = await Primitive.Int.read(b);
        let minId = await Primitive.Int.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetHistory({
          peer,
          offsetId,
          offsetDate,
          addOffset,
          limit,
          maxId,
          minId,
          hash,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.offsetId !== void 0) {
          b.write(Primitive.Int.write(this.offsetId));
        }
        if (this.offsetDate !== void 0) {
          b.write(Primitive.Int.write(this.offsetDate));
        }
        if (this.addOffset !== void 0) {
          b.write(Primitive.Int.write(this.addOffset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        if (this.maxId !== void 0) {
          b.write(Primitive.Int.write(this.maxId));
        }
        if (this.minId !== void 0) {
          b.write(Primitive.Int.write(this.minId));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetHistory = GetHistory;
    class Search extends TLObject {
      __response__;
      peer;
      q;
      fromId;
      savedPeerId;
      savedReaction;
      topMsgId;
      filter;
      minDate;
      maxDate;
      offsetId;
      addOffset;
      limit;
      maxId;
      minId;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.Search';
        this.constructorId = 703497338;
        this.subclassOfId = 3568569182;
        this._slots = [
          'peer',
          'q',
          'fromId',
          'savedPeerId',
          'savedReaction',
          'topMsgId',
          'filter',
          'minDate',
          'maxDate',
          'offsetId',
          'addOffset',
          'limit',
          'maxId',
          'minId',
          'hash',
        ];
        this.peer = params.peer;
        this.q = params.q;
        this.fromId = params.fromId;
        this.savedPeerId = params.savedPeerId;
        this.savedReaction = params.savedReaction;
        this.topMsgId = params.topMsgId;
        this.filter = params.filter;
        this.minDate = params.minDate;
        this.maxDate = params.maxDate;
        this.offsetId = params.offsetId;
        this.addOffset = params.addOffset;
        this.limit = params.limit;
        this.maxId = params.maxId;
        this.minId = params.minId;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = await TLObject.read(b);
        let q = await Primitive.String.read(b);
        let fromId = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let savedPeerId = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let savedReaction = flags & (1 << 3) ? await TLObject.read(b) : [];
        let topMsgId = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let filter = await TLObject.read(b);
        let minDate = await Primitive.Int.read(b);
        let maxDate = await Primitive.Int.read(b);
        let offsetId = await Primitive.Int.read(b);
        let addOffset = await Primitive.Int.read(b);
        let limit = await Primitive.Int.read(b);
        let maxId = await Primitive.Int.read(b);
        let minId = await Primitive.Int.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.Search({
          peer,
          q,
          fromId,
          savedPeerId,
          savedReaction,
          topMsgId,
          filter,
          minDate,
          maxDate,
          offsetId,
          addOffset,
          limit,
          maxId,
          minId,
          hash,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.fromId !== void 0 ? 1 << 0 : 0;
        flags |= this.savedPeerId !== void 0 ? 1 << 2 : 0;
        flags |= this.savedReaction ? 1 << 3 : 0;
        flags |= this.topMsgId !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.q !== void 0) {
          b.write(Primitive.String.write(this.q));
        }
        if (this.fromId !== void 0) {
          b.write(this.fromId.write());
        }
        if (this.savedPeerId !== void 0) {
          b.write(this.savedPeerId.write());
        }
        if (this.savedReaction) {
          b.write(Primitive.Vector.write(this.savedReaction));
        }
        if (this.topMsgId !== void 0) {
          b.write(Primitive.Int.write(this.topMsgId));
        }
        if (this.filter !== void 0) {
          b.write(this.filter.write());
        }
        if (this.minDate !== void 0) {
          b.write(Primitive.Int.write(this.minDate));
        }
        if (this.maxDate !== void 0) {
          b.write(Primitive.Int.write(this.maxDate));
        }
        if (this.offsetId !== void 0) {
          b.write(Primitive.Int.write(this.offsetId));
        }
        if (this.addOffset !== void 0) {
          b.write(Primitive.Int.write(this.addOffset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        if (this.maxId !== void 0) {
          b.write(Primitive.Int.write(this.maxId));
        }
        if (this.minId !== void 0) {
          b.write(Primitive.Int.write(this.minId));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.Search = Search;
    class ReadHistory extends TLObject {
      __response__;
      peer;
      maxId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ReadHistory';
        this.constructorId = 238054714;
        this.subclassOfId = 3469983854;
        this._slots = ['peer', 'maxId'];
        this.peer = params.peer;
        this.maxId = params.maxId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let maxId = await Primitive.Int.read(b);
        return new Raw2.messages.ReadHistory({ peer, maxId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.maxId !== void 0) {
          b.write(Primitive.Int.write(this.maxId));
        }
        return b.buffer;
      }
    }
    messages2.ReadHistory = ReadHistory;
    class DeleteHistory extends TLObject {
      __response__;
      justClear;
      revoke;
      peer;
      maxId;
      minDate;
      maxDate;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.DeleteHistory';
        this.constructorId = 2962199082;
        this.subclassOfId = 743031062;
        this._slots = ['justClear', 'revoke', 'peer', 'maxId', 'minDate', 'maxDate'];
        this.justClear = params.justClear;
        this.revoke = params.revoke;
        this.peer = params.peer;
        this.maxId = params.maxId;
        this.minDate = params.minDate;
        this.maxDate = params.maxDate;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let justClear = flags & (1 << 0) ? true : false;
        let revoke = flags & (1 << 1) ? true : false;
        let peer = await TLObject.read(b);
        let maxId = await Primitive.Int.read(b);
        let minDate = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
        let maxDate = flags & (1 << 3) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.messages.DeleteHistory({
          justClear,
          revoke,
          peer,
          maxId,
          minDate,
          maxDate,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.justClear ? 1 << 0 : 0;
        flags |= this.revoke ? 1 << 1 : 0;
        flags |= this.minDate !== void 0 ? 1 << 2 : 0;
        flags |= this.maxDate !== void 0 ? 1 << 3 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.maxId !== void 0) {
          b.write(Primitive.Int.write(this.maxId));
        }
        if (this.minDate !== void 0) {
          b.write(Primitive.Int.write(this.minDate));
        }
        if (this.maxDate !== void 0) {
          b.write(Primitive.Int.write(this.maxDate));
        }
        return b.buffer;
      }
    }
    messages2.DeleteHistory = DeleteHistory;
    class DeleteMessages extends TLObject {
      __response__;
      revoke;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.DeleteMessages';
        this.constructorId = 3851326930;
        this.subclassOfId = 3469983854;
        this._slots = ['revoke', 'id'];
        this.revoke = params.revoke;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let revoke = flags & (1 << 0) ? true : false;
        let id = await TLObject.read(b, Primitive.Int);
        return new Raw2.messages.DeleteMessages({ revoke, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.revoke ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        return b.buffer;
      }
    }
    messages2.DeleteMessages = DeleteMessages;
    class ReceivedMessages extends TLObject {
      __response__;
      maxId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ReceivedMessages';
        this.constructorId = 94983360;
        this.subclassOfId = 2238052503;
        this._slots = ['maxId'];
        this.maxId = params.maxId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let maxId = await Primitive.Int.read(b);
        return new Raw2.messages.ReceivedMessages({ maxId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.maxId !== void 0) {
          b.write(Primitive.Int.write(this.maxId));
        }
        return b.buffer;
      }
    }
    messages2.ReceivedMessages = ReceivedMessages;
    class SetTyping extends TLObject {
      __response__;
      peer;
      topMsgId;
      action;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SetTyping';
        this.constructorId = 1486110434;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'topMsgId', 'action'];
        this.peer = params.peer;
        this.topMsgId = params.topMsgId;
        this.action = params.action;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = await TLObject.read(b);
        let topMsgId = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        let action = await TLObject.read(b);
        return new Raw2.messages.SetTyping({ peer, topMsgId, action });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.topMsgId !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.topMsgId !== void 0) {
          b.write(Primitive.Int.write(this.topMsgId));
        }
        if (this.action !== void 0) {
          b.write(this.action.write());
        }
        return b.buffer;
      }
    }
    messages2.SetTyping = SetTyping;
    class SendMessage extends TLObject {
      __response__;
      noWebpage;
      silent;
      background;
      clearDraft;
      noforwards;
      updateStickersetsOrder;
      invertMedia;
      peer;
      replyTo;
      message;
      randomId;
      replyMarkup;
      entities;
      scheduleDate;
      sendAs;
      quickReplyShortcut;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SendMessage';
        this.constructorId = 3757573164;
        this.subclassOfId = 2331323052;
        this._slots = [
          'noWebpage',
          'silent',
          'background',
          'clearDraft',
          'noforwards',
          'updateStickersetsOrder',
          'invertMedia',
          'peer',
          'replyTo',
          'message',
          'randomId',
          'replyMarkup',
          'entities',
          'scheduleDate',
          'sendAs',
          'quickReplyShortcut',
        ];
        this.noWebpage = params.noWebpage;
        this.silent = params.silent;
        this.background = params.background;
        this.clearDraft = params.clearDraft;
        this.noforwards = params.noforwards;
        this.updateStickersetsOrder = params.updateStickersetsOrder;
        this.invertMedia = params.invertMedia;
        this.peer = params.peer;
        this.replyTo = params.replyTo;
        this.message = params.message;
        this.randomId = params.randomId;
        this.replyMarkup = params.replyMarkup;
        this.entities = params.entities;
        this.scheduleDate = params.scheduleDate;
        this.sendAs = params.sendAs;
        this.quickReplyShortcut = params.quickReplyShortcut;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let noWebpage = flags & (1 << 1) ? true : false;
        let silent = flags & (1 << 5) ? true : false;
        let background = flags & (1 << 6) ? true : false;
        let clearDraft = flags & (1 << 7) ? true : false;
        let noforwards = flags & (1 << 14) ? true : false;
        let updateStickersetsOrder = flags & (1 << 15) ? true : false;
        let invertMedia = flags & (1 << 16) ? true : false;
        let peer = await TLObject.read(b);
        let replyTo = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let message = await Primitive.String.read(b);
        let randomId = await Primitive.Long.read(b);
        let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let entities = flags & (1 << 3) ? await TLObject.read(b) : [];
        let scheduleDate = flags & (1 << 10) ? await Primitive.Int.read(b) : void 0;
        let sendAs = flags & (1 << 13) ? await TLObject.read(b) : void 0;
        let quickReplyShortcut = flags & (1 << 17) ? await TLObject.read(b) : void 0;
        return new Raw2.messages.SendMessage({
          noWebpage,
          silent,
          background,
          clearDraft,
          noforwards,
          updateStickersetsOrder,
          invertMedia,
          peer,
          replyTo,
          message,
          randomId,
          replyMarkup,
          entities,
          scheduleDate,
          sendAs,
          quickReplyShortcut,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.noWebpage ? 1 << 1 : 0;
        flags |= this.silent ? 1 << 5 : 0;
        flags |= this.background ? 1 << 6 : 0;
        flags |= this.clearDraft ? 1 << 7 : 0;
        flags |= this.noforwards ? 1 << 14 : 0;
        flags |= this.updateStickersetsOrder ? 1 << 15 : 0;
        flags |= this.invertMedia ? 1 << 16 : 0;
        flags |= this.replyTo !== void 0 ? 1 << 0 : 0;
        flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
        flags |= this.entities ? 1 << 3 : 0;
        flags |= this.scheduleDate !== void 0 ? 1 << 10 : 0;
        flags |= this.sendAs !== void 0 ? 1 << 13 : 0;
        flags |= this.quickReplyShortcut !== void 0 ? 1 << 17 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.replyTo !== void 0) {
          b.write(this.replyTo.write());
        }
        if (this.message !== void 0) {
          b.write(Primitive.String.write(this.message));
        }
        if (this.randomId !== void 0) {
          b.write(Primitive.Long.write(this.randomId));
        }
        if (this.replyMarkup !== void 0) {
          b.write(this.replyMarkup.write());
        }
        if (this.entities) {
          b.write(Primitive.Vector.write(this.entities));
        }
        if (this.scheduleDate !== void 0) {
          b.write(Primitive.Int.write(this.scheduleDate));
        }
        if (this.sendAs !== void 0) {
          b.write(this.sendAs.write());
        }
        if (this.quickReplyShortcut !== void 0) {
          b.write(this.quickReplyShortcut.write());
        }
        return b.buffer;
      }
    }
    messages2.SendMessage = SendMessage;
    class SendMedia extends TLObject {
      __response__;
      silent;
      background;
      clearDraft;
      noforwards;
      updateStickersetsOrder;
      invertMedia;
      peer;
      replyTo;
      media;
      message;
      randomId;
      replyMarkup;
      entities;
      scheduleDate;
      sendAs;
      quickReplyShortcut;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SendMedia';
        this.constructorId = 2077646913;
        this.subclassOfId = 2331323052;
        this._slots = [
          'silent',
          'background',
          'clearDraft',
          'noforwards',
          'updateStickersetsOrder',
          'invertMedia',
          'peer',
          'replyTo',
          'media',
          'message',
          'randomId',
          'replyMarkup',
          'entities',
          'scheduleDate',
          'sendAs',
          'quickReplyShortcut',
        ];
        this.silent = params.silent;
        this.background = params.background;
        this.clearDraft = params.clearDraft;
        this.noforwards = params.noforwards;
        this.updateStickersetsOrder = params.updateStickersetsOrder;
        this.invertMedia = params.invertMedia;
        this.peer = params.peer;
        this.replyTo = params.replyTo;
        this.media = params.media;
        this.message = params.message;
        this.randomId = params.randomId;
        this.replyMarkup = params.replyMarkup;
        this.entities = params.entities;
        this.scheduleDate = params.scheduleDate;
        this.sendAs = params.sendAs;
        this.quickReplyShortcut = params.quickReplyShortcut;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let silent = flags & (1 << 5) ? true : false;
        let background = flags & (1 << 6) ? true : false;
        let clearDraft = flags & (1 << 7) ? true : false;
        let noforwards = flags & (1 << 14) ? true : false;
        let updateStickersetsOrder = flags & (1 << 15) ? true : false;
        let invertMedia = flags & (1 << 16) ? true : false;
        let peer = await TLObject.read(b);
        let replyTo = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let media = await TLObject.read(b);
        let message = await Primitive.String.read(b);
        let randomId = await Primitive.Long.read(b);
        let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let entities = flags & (1 << 3) ? await TLObject.read(b) : [];
        let scheduleDate = flags & (1 << 10) ? await Primitive.Int.read(b) : void 0;
        let sendAs = flags & (1 << 13) ? await TLObject.read(b) : void 0;
        let quickReplyShortcut = flags & (1 << 17) ? await TLObject.read(b) : void 0;
        return new Raw2.messages.SendMedia({
          silent,
          background,
          clearDraft,
          noforwards,
          updateStickersetsOrder,
          invertMedia,
          peer,
          replyTo,
          media,
          message,
          randomId,
          replyMarkup,
          entities,
          scheduleDate,
          sendAs,
          quickReplyShortcut,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.silent ? 1 << 5 : 0;
        flags |= this.background ? 1 << 6 : 0;
        flags |= this.clearDraft ? 1 << 7 : 0;
        flags |= this.noforwards ? 1 << 14 : 0;
        flags |= this.updateStickersetsOrder ? 1 << 15 : 0;
        flags |= this.invertMedia ? 1 << 16 : 0;
        flags |= this.replyTo !== void 0 ? 1 << 0 : 0;
        flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
        flags |= this.entities ? 1 << 3 : 0;
        flags |= this.scheduleDate !== void 0 ? 1 << 10 : 0;
        flags |= this.sendAs !== void 0 ? 1 << 13 : 0;
        flags |= this.quickReplyShortcut !== void 0 ? 1 << 17 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.replyTo !== void 0) {
          b.write(this.replyTo.write());
        }
        if (this.media !== void 0) {
          b.write(this.media.write());
        }
        if (this.message !== void 0) {
          b.write(Primitive.String.write(this.message));
        }
        if (this.randomId !== void 0) {
          b.write(Primitive.Long.write(this.randomId));
        }
        if (this.replyMarkup !== void 0) {
          b.write(this.replyMarkup.write());
        }
        if (this.entities) {
          b.write(Primitive.Vector.write(this.entities));
        }
        if (this.scheduleDate !== void 0) {
          b.write(Primitive.Int.write(this.scheduleDate));
        }
        if (this.sendAs !== void 0) {
          b.write(this.sendAs.write());
        }
        if (this.quickReplyShortcut !== void 0) {
          b.write(this.quickReplyShortcut.write());
        }
        return b.buffer;
      }
    }
    messages2.SendMedia = SendMedia;
    class ForwardMessages extends TLObject {
      __response__;
      silent;
      background;
      withMyScore;
      dropAuthor;
      dropMediaCaptions;
      noforwards;
      fromPeer;
      id;
      randomId;
      toPeer;
      topMsgId;
      scheduleDate;
      sendAs;
      quickReplyShortcut;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ForwardMessages';
        this.constructorId = 3573781e3;
        this.subclassOfId = 2331323052;
        this._slots = [
          'silent',
          'background',
          'withMyScore',
          'dropAuthor',
          'dropMediaCaptions',
          'noforwards',
          'fromPeer',
          'id',
          'randomId',
          'toPeer',
          'topMsgId',
          'scheduleDate',
          'sendAs',
          'quickReplyShortcut',
        ];
        this.silent = params.silent;
        this.background = params.background;
        this.withMyScore = params.withMyScore;
        this.dropAuthor = params.dropAuthor;
        this.dropMediaCaptions = params.dropMediaCaptions;
        this.noforwards = params.noforwards;
        this.fromPeer = params.fromPeer;
        this.id = params.id;
        this.randomId = params.randomId;
        this.toPeer = params.toPeer;
        this.topMsgId = params.topMsgId;
        this.scheduleDate = params.scheduleDate;
        this.sendAs = params.sendAs;
        this.quickReplyShortcut = params.quickReplyShortcut;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let silent = flags & (1 << 5) ? true : false;
        let background = flags & (1 << 6) ? true : false;
        let withMyScore = flags & (1 << 8) ? true : false;
        let dropAuthor = flags & (1 << 11) ? true : false;
        let dropMediaCaptions = flags & (1 << 12) ? true : false;
        let noforwards = flags & (1 << 14) ? true : false;
        let fromPeer = await TLObject.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        let randomId = await TLObject.read(b, Primitive.Long);
        let toPeer = await TLObject.read(b);
        let topMsgId = flags & (1 << 9) ? await Primitive.Int.read(b) : void 0;
        let scheduleDate = flags & (1 << 10) ? await Primitive.Int.read(b) : void 0;
        let sendAs = flags & (1 << 13) ? await TLObject.read(b) : void 0;
        let quickReplyShortcut = flags & (1 << 17) ? await TLObject.read(b) : void 0;
        return new Raw2.messages.ForwardMessages({
          silent,
          background,
          withMyScore,
          dropAuthor,
          dropMediaCaptions,
          noforwards,
          fromPeer,
          id,
          randomId,
          toPeer,
          topMsgId,
          scheduleDate,
          sendAs,
          quickReplyShortcut,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.silent ? 1 << 5 : 0;
        flags |= this.background ? 1 << 6 : 0;
        flags |= this.withMyScore ? 1 << 8 : 0;
        flags |= this.dropAuthor ? 1 << 11 : 0;
        flags |= this.dropMediaCaptions ? 1 << 12 : 0;
        flags |= this.noforwards ? 1 << 14 : 0;
        flags |= this.topMsgId !== void 0 ? 1 << 9 : 0;
        flags |= this.scheduleDate !== void 0 ? 1 << 10 : 0;
        flags |= this.sendAs !== void 0 ? 1 << 13 : 0;
        flags |= this.quickReplyShortcut !== void 0 ? 1 << 17 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.fromPeer !== void 0) {
          b.write(this.fromPeer.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        if (this.randomId) {
          b.write(Primitive.Vector.write(this.randomId, Primitive.Long));
        }
        if (this.toPeer !== void 0) {
          b.write(this.toPeer.write());
        }
        if (this.topMsgId !== void 0) {
          b.write(Primitive.Int.write(this.topMsgId));
        }
        if (this.scheduleDate !== void 0) {
          b.write(Primitive.Int.write(this.scheduleDate));
        }
        if (this.sendAs !== void 0) {
          b.write(this.sendAs.write());
        }
        if (this.quickReplyShortcut !== void 0) {
          b.write(this.quickReplyShortcut.write());
        }
        return b.buffer;
      }
    }
    messages2.ForwardMessages = ForwardMessages;
    class ReportSpam extends TLObject {
      __response__;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ReportSpam';
        this.constructorId = 3474297563;
        this.subclassOfId = 4122188204;
        this._slots = ['peer'];
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        return new Raw2.messages.ReportSpam({ peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    messages2.ReportSpam = ReportSpam;
    class GetPeerSettings extends TLObject {
      __response__;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetPeerSettings';
        this.constructorId = 4024018594;
        this.subclassOfId = 1705179041;
        this._slots = ['peer'];
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        return new Raw2.messages.GetPeerSettings({ peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    messages2.GetPeerSettings = GetPeerSettings;
    class Report extends TLObject {
      __response__;
      peer;
      id;
      reason;
      message;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.Report';
        this.constructorId = 2303961934;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'id', 'reason', 'message'];
        this.peer = params.peer;
        this.id = params.id;
        this.reason = params.reason;
        this.message = params.message;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        let reason = await TLObject.read(b);
        let message = await Primitive.String.read(b);
        return new Raw2.messages.Report({ peer, id, reason, message });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        if (this.reason !== void 0) {
          b.write(this.reason.write());
        }
        if (this.message !== void 0) {
          b.write(Primitive.String.write(this.message));
        }
        return b.buffer;
      }
    }
    messages2.Report = Report;
    class GetChats extends TLObject {
      __response__;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetChats';
        this.constructorId = 1240027791;
        this.subclassOfId = 2580925204;
        this._slots = ['id'];
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b, Primitive.Long);
        return new Raw2.messages.GetChats({ id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Long));
        }
        return b.buffer;
      }
    }
    messages2.GetChats = GetChats;
    class GetFullChat extends TLObject {
      __response__;
      chatId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetFullChat';
        this.constructorId = 2930772788;
        this.subclassOfId = 576344329;
        this._slots = ['chatId'];
        this.chatId = params.chatId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let chatId = await Primitive.Long.read(b);
        return new Raw2.messages.GetFullChat({ chatId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.chatId !== void 0) {
          b.write(Primitive.Long.write(this.chatId));
        }
        return b.buffer;
      }
    }
    messages2.GetFullChat = GetFullChat;
    class EditChatTitle extends TLObject {
      __response__;
      chatId;
      title;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.EditChatTitle';
        this.constructorId = 1937260541;
        this.subclassOfId = 2331323052;
        this._slots = ['chatId', 'title'];
        this.chatId = params.chatId;
        this.title = params.title;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let chatId = await Primitive.Long.read(b);
        let title = await Primitive.String.read(b);
        return new Raw2.messages.EditChatTitle({ chatId, title });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.chatId !== void 0) {
          b.write(Primitive.Long.write(this.chatId));
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        return b.buffer;
      }
    }
    messages2.EditChatTitle = EditChatTitle;
    class EditChatPhoto extends TLObject {
      __response__;
      chatId;
      photo;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.EditChatPhoto';
        this.constructorId = 903730804;
        this.subclassOfId = 2331323052;
        this._slots = ['chatId', 'photo'];
        this.chatId = params.chatId;
        this.photo = params.photo;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let chatId = await Primitive.Long.read(b);
        let photo = await TLObject.read(b);
        return new Raw2.messages.EditChatPhoto({ chatId, photo });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.chatId !== void 0) {
          b.write(Primitive.Long.write(this.chatId));
        }
        if (this.photo !== void 0) {
          b.write(this.photo.write());
        }
        return b.buffer;
      }
    }
    messages2.EditChatPhoto = EditChatPhoto;
    class AddChatUser extends TLObject {
      __response__;
      chatId;
      userId;
      fwdLimit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.AddChatUser';
        this.constructorId = 3418804487;
        this.subclassOfId = 1035899041;
        this._slots = ['chatId', 'userId', 'fwdLimit'];
        this.chatId = params.chatId;
        this.userId = params.userId;
        this.fwdLimit = params.fwdLimit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let chatId = await Primitive.Long.read(b);
        let userId = await TLObject.read(b);
        let fwdLimit = await Primitive.Int.read(b);
        return new Raw2.messages.AddChatUser({ chatId, userId, fwdLimit });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.chatId !== void 0) {
          b.write(Primitive.Long.write(this.chatId));
        }
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        if (this.fwdLimit !== void 0) {
          b.write(Primitive.Int.write(this.fwdLimit));
        }
        return b.buffer;
      }
    }
    messages2.AddChatUser = AddChatUser;
    class DeleteChatUser extends TLObject {
      __response__;
      revokeHistory;
      chatId;
      userId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.DeleteChatUser';
        this.constructorId = 2719505579;
        this.subclassOfId = 2331323052;
        this._slots = ['revokeHistory', 'chatId', 'userId'];
        this.revokeHistory = params.revokeHistory;
        this.chatId = params.chatId;
        this.userId = params.userId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let revokeHistory = flags & (1 << 0) ? true : false;
        let chatId = await Primitive.Long.read(b);
        let userId = await TLObject.read(b);
        return new Raw2.messages.DeleteChatUser({
          revokeHistory,
          chatId,
          userId,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.revokeHistory ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.chatId !== void 0) {
          b.write(Primitive.Long.write(this.chatId));
        }
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        return b.buffer;
      }
    }
    messages2.DeleteChatUser = DeleteChatUser;
    class CreateChat extends TLObject {
      __response__;
      users;
      title;
      ttlPeriod;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.CreateChat';
        this.constructorId = 2463030740;
        this.subclassOfId = 1035899041;
        this._slots = ['users', 'title', 'ttlPeriod'];
        this.users = params.users;
        this.title = params.title;
        this.ttlPeriod = params.ttlPeriod;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let users2 = await TLObject.read(b);
        let title = await Primitive.String.read(b);
        let ttlPeriod = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.messages.CreateChat({ users: users2, title, ttlPeriod });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.ttlPeriod !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        if (this.ttlPeriod !== void 0) {
          b.write(Primitive.Int.write(this.ttlPeriod));
        }
        return b.buffer;
      }
    }
    messages2.CreateChat = CreateChat;
    class GetDhConfig extends TLObject {
      __response__;
      version;
      randomLength;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetDhConfig';
        this.constructorId = 651135312;
        this.subclassOfId = 3834178955;
        this._slots = ['version', 'randomLength'];
        this.version = params.version;
        this.randomLength = params.randomLength;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let version = await Primitive.Int.read(b);
        let randomLength = await Primitive.Int.read(b);
        return new Raw2.messages.GetDhConfig({ version, randomLength });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.version !== void 0) {
          b.write(Primitive.Int.write(this.version));
        }
        if (this.randomLength !== void 0) {
          b.write(Primitive.Int.write(this.randomLength));
        }
        return b.buffer;
      }
    }
    messages2.GetDhConfig = GetDhConfig;
    class RequestEncryption extends TLObject {
      __response__;
      userId;
      randomId;
      gA;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.RequestEncryption';
        this.constructorId = 4132286275;
        this.subclassOfId = 1831379834;
        this._slots = ['userId', 'randomId', 'gA'];
        this.userId = params.userId;
        this.randomId = params.randomId;
        this.gA = params.gA;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let userId = await TLObject.read(b);
        let randomId = await Primitive.Int.read(b);
        let gA = await Primitive.Bytes.read(b);
        return new Raw2.messages.RequestEncryption({ userId, randomId, gA });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        if (this.randomId !== void 0) {
          b.write(Primitive.Int.write(this.randomId));
        }
        if (this.gA !== void 0) {
          b.write(Primitive.Bytes.write(this.gA));
        }
        return b.buffer;
      }
    }
    messages2.RequestEncryption = RequestEncryption;
    class AcceptEncryption extends TLObject {
      __response__;
      peer;
      gB;
      keyFingerprint;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.AcceptEncryption';
        this.constructorId = 1035731989;
        this.subclassOfId = 1831379834;
        this._slots = ['peer', 'gB', 'keyFingerprint'];
        this.peer = params.peer;
        this.gB = params.gB;
        this.keyFingerprint = params.keyFingerprint;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let gB = await Primitive.Bytes.read(b);
        let keyFingerprint = await Primitive.Long.read(b);
        return new Raw2.messages.AcceptEncryption({
          peer,
          gB,
          keyFingerprint,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.gB !== void 0) {
          b.write(Primitive.Bytes.write(this.gB));
        }
        if (this.keyFingerprint !== void 0) {
          b.write(Primitive.Long.write(this.keyFingerprint));
        }
        return b.buffer;
      }
    }
    messages2.AcceptEncryption = AcceptEncryption;
    class DiscardEncryption extends TLObject {
      __response__;
      deleteHistory;
      chatId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.DiscardEncryption';
        this.constructorId = 4086541984;
        this.subclassOfId = 4122188204;
        this._slots = ['deleteHistory', 'chatId'];
        this.deleteHistory = params.deleteHistory;
        this.chatId = params.chatId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let deleteHistory = flags & (1 << 0) ? true : false;
        let chatId = await Primitive.Int.read(b);
        return new Raw2.messages.DiscardEncryption({ deleteHistory, chatId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.deleteHistory ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.chatId !== void 0) {
          b.write(Primitive.Int.write(this.chatId));
        }
        return b.buffer;
      }
    }
    messages2.DiscardEncryption = DiscardEncryption;
    class SetEncryptedTyping extends TLObject {
      __response__;
      peer;
      typing;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SetEncryptedTyping';
        this.constructorId = 2031374829;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'typing'];
        this.peer = params.peer;
        this.typing = params.typing;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let typing = await Primitive.Bool.read(b);
        return new Raw2.messages.SetEncryptedTyping({ peer, typing });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.typing !== void 0) {
          b.write(Primitive.Bool.write(this.typing));
        }
        return b.buffer;
      }
    }
    messages2.SetEncryptedTyping = SetEncryptedTyping;
    class ReadEncryptedHistory extends TLObject {
      __response__;
      peer;
      maxDate;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ReadEncryptedHistory';
        this.constructorId = 2135648522;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'maxDate'];
        this.peer = params.peer;
        this.maxDate = params.maxDate;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let maxDate = await Primitive.Int.read(b);
        return new Raw2.messages.ReadEncryptedHistory({ peer, maxDate });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.maxDate !== void 0) {
          b.write(Primitive.Int.write(this.maxDate));
        }
        return b.buffer;
      }
    }
    messages2.ReadEncryptedHistory = ReadEncryptedHistory;
    class SendEncrypted extends TLObject {
      __response__;
      silent;
      peer;
      randomId;
      data;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SendEncrypted';
        this.constructorId = 1157265941;
        this.subclassOfId = 3382591056;
        this._slots = ['silent', 'peer', 'randomId', 'data'];
        this.silent = params.silent;
        this.peer = params.peer;
        this.randomId = params.randomId;
        this.data = params.data;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let silent = flags & (1 << 0) ? true : false;
        let peer = await TLObject.read(b);
        let randomId = await Primitive.Long.read(b);
        let data = await Primitive.Bytes.read(b);
        return new Raw2.messages.SendEncrypted({
          silent,
          peer,
          randomId,
          data,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.silent ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.randomId !== void 0) {
          b.write(Primitive.Long.write(this.randomId));
        }
        if (this.data !== void 0) {
          b.write(Primitive.Bytes.write(this.data));
        }
        return b.buffer;
      }
    }
    messages2.SendEncrypted = SendEncrypted;
    class SendEncryptedFile extends TLObject {
      __response__;
      silent;
      peer;
      randomId;
      data;
      file;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SendEncryptedFile';
        this.constructorId = 1431914525;
        this.subclassOfId = 3382591056;
        this._slots = ['silent', 'peer', 'randomId', 'data', 'file'];
        this.silent = params.silent;
        this.peer = params.peer;
        this.randomId = params.randomId;
        this.data = params.data;
        this.file = params.file;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let silent = flags & (1 << 0) ? true : false;
        let peer = await TLObject.read(b);
        let randomId = await Primitive.Long.read(b);
        let data = await Primitive.Bytes.read(b);
        let file = await TLObject.read(b);
        return new Raw2.messages.SendEncryptedFile({
          silent,
          peer,
          randomId,
          data,
          file,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.silent ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.randomId !== void 0) {
          b.write(Primitive.Long.write(this.randomId));
        }
        if (this.data !== void 0) {
          b.write(Primitive.Bytes.write(this.data));
        }
        if (this.file !== void 0) {
          b.write(this.file.write());
        }
        return b.buffer;
      }
    }
    messages2.SendEncryptedFile = SendEncryptedFile;
    class SendEncryptedService extends TLObject {
      __response__;
      peer;
      randomId;
      data;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SendEncryptedService';
        this.constructorId = 852769188;
        this.subclassOfId = 3382591056;
        this._slots = ['peer', 'randomId', 'data'];
        this.peer = params.peer;
        this.randomId = params.randomId;
        this.data = params.data;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let randomId = await Primitive.Long.read(b);
        let data = await Primitive.Bytes.read(b);
        return new Raw2.messages.SendEncryptedService({
          peer,
          randomId,
          data,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.randomId !== void 0) {
          b.write(Primitive.Long.write(this.randomId));
        }
        if (this.data !== void 0) {
          b.write(Primitive.Bytes.write(this.data));
        }
        return b.buffer;
      }
    }
    messages2.SendEncryptedService = SendEncryptedService;
    class ReceivedQueue extends TLObject {
      __response__;
      maxQts;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ReceivedQueue';
        this.constructorId = 1436924774;
        this.subclassOfId = 2300109160;
        this._slots = ['maxQts'];
        this.maxQts = params.maxQts;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let maxQts = await Primitive.Int.read(b);
        return new Raw2.messages.ReceivedQueue({ maxQts });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.maxQts !== void 0) {
          b.write(Primitive.Int.write(this.maxQts));
        }
        return b.buffer;
      }
    }
    messages2.ReceivedQueue = ReceivedQueue;
    class ReportEncryptedSpam extends TLObject {
      __response__;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ReportEncryptedSpam';
        this.constructorId = 1259113487;
        this.subclassOfId = 4122188204;
        this._slots = ['peer'];
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        return new Raw2.messages.ReportEncryptedSpam({ peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    messages2.ReportEncryptedSpam = ReportEncryptedSpam;
    class ReadMessageContents extends TLObject {
      __response__;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ReadMessageContents';
        this.constructorId = 916930423;
        this.subclassOfId = 3469983854;
        this._slots = ['id'];
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b, Primitive.Int);
        return new Raw2.messages.ReadMessageContents({ id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        return b.buffer;
      }
    }
    messages2.ReadMessageContents = ReadMessageContents;
    class GetStickers extends TLObject {
      __response__;
      emoticon;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetStickers';
        this.constructorId = 3584414625;
        this.subclassOfId = 3611015646;
        this._slots = ['emoticon', 'hash'];
        this.emoticon = params.emoticon;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let emoticon = await Primitive.String.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetStickers({ emoticon, hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.emoticon !== void 0) {
          b.write(Primitive.String.write(this.emoticon));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetStickers = GetStickers;
    class GetAllStickers extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetAllStickers';
        this.constructorId = 3097534888;
        this.subclassOfId = 1166231593;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetAllStickers({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetAllStickers = GetAllStickers;
    class GetWebPagePreview extends TLObject {
      __response__;
      message;
      entities;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetWebPagePreview';
        this.constructorId = 2338894028;
        this.subclassOfId = 1198308914;
        this._slots = ['message', 'entities'];
        this.message = params.message;
        this.entities = params.entities;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let message = await Primitive.String.read(b);
        let entities = flags & (1 << 3) ? await TLObject.read(b) : [];
        return new Raw2.messages.GetWebPagePreview({ message, entities });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.entities ? 1 << 3 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.message !== void 0) {
          b.write(Primitive.String.write(this.message));
        }
        if (this.entities) {
          b.write(Primitive.Vector.write(this.entities));
        }
        return b.buffer;
      }
    }
    messages2.GetWebPagePreview = GetWebPagePreview;
    class ExportChatInvite extends TLObject {
      __response__;
      legacyRevokePermanent;
      requestNeeded;
      peer;
      expireDate;
      usageLimit;
      title;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ExportChatInvite';
        this.constructorId = 2687296981;
        this.subclassOfId = 3027536472;
        this._slots = [
          'legacyRevokePermanent',
          'requestNeeded',
          'peer',
          'expireDate',
          'usageLimit',
          'title',
        ];
        this.legacyRevokePermanent = params.legacyRevokePermanent;
        this.requestNeeded = params.requestNeeded;
        this.peer = params.peer;
        this.expireDate = params.expireDate;
        this.usageLimit = params.usageLimit;
        this.title = params.title;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let legacyRevokePermanent = flags & (1 << 2) ? true : false;
        let requestNeeded = flags & (1 << 3) ? true : false;
        let peer = await TLObject.read(b);
        let expireDate = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        let usageLimit = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let title = flags & (1 << 4) ? await Primitive.String.read(b) : void 0;
        return new Raw2.messages.ExportChatInvite({
          legacyRevokePermanent,
          requestNeeded,
          peer,
          expireDate,
          usageLimit,
          title,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.legacyRevokePermanent ? 1 << 2 : 0;
        flags |= this.requestNeeded ? 1 << 3 : 0;
        flags |= this.expireDate !== void 0 ? 1 << 0 : 0;
        flags |= this.usageLimit !== void 0 ? 1 << 1 : 0;
        flags |= this.title !== void 0 ? 1 << 4 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.expireDate !== void 0) {
          b.write(Primitive.Int.write(this.expireDate));
        }
        if (this.usageLimit !== void 0) {
          b.write(Primitive.Int.write(this.usageLimit));
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        return b.buffer;
      }
    }
    messages2.ExportChatInvite = ExportChatInvite;
    class CheckChatInvite extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.CheckChatInvite';
        this.constructorId = 1051570619;
        this.subclassOfId = 72750902;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.String.read(b);
        return new Raw2.messages.CheckChatInvite({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.String.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.CheckChatInvite = CheckChatInvite;
    class ImportChatInvite extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ImportChatInvite';
        this.constructorId = 1817183516;
        this.subclassOfId = 2331323052;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.String.read(b);
        return new Raw2.messages.ImportChatInvite({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.String.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.ImportChatInvite = ImportChatInvite;
    class GetStickerSet extends TLObject {
      __response__;
      stickerset;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetStickerSet';
        this.constructorId = 3365989492;
        this.subclassOfId = 2607827546;
        this._slots = ['stickerset', 'hash'];
        this.stickerset = params.stickerset;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let stickerset = await TLObject.read(b);
        let hash = await Primitive.Int.read(b);
        return new Raw2.messages.GetStickerSet({ stickerset, hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.stickerset !== void 0) {
          b.write(this.stickerset.write());
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetStickerSet = GetStickerSet;
    class InstallStickerSet extends TLObject {
      __response__;
      stickerset;
      archived;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.InstallStickerSet';
        this.constructorId = 3348096096;
        this.subclassOfId = 1741373416;
        this._slots = ['stickerset', 'archived'];
        this.stickerset = params.stickerset;
        this.archived = params.archived;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let stickerset = await TLObject.read(b);
        let archived = await Primitive.Bool.read(b);
        return new Raw2.messages.InstallStickerSet({ stickerset, archived });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.stickerset !== void 0) {
          b.write(this.stickerset.write());
        }
        if (this.archived !== void 0) {
          b.write(Primitive.Bool.write(this.archived));
        }
        return b.buffer;
      }
    }
    messages2.InstallStickerSet = InstallStickerSet;
    class UninstallStickerSet extends TLObject {
      __response__;
      stickerset;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.UninstallStickerSet';
        this.constructorId = 4184757726;
        this.subclassOfId = 4122188204;
        this._slots = ['stickerset'];
        this.stickerset = params.stickerset;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let stickerset = await TLObject.read(b);
        return new Raw2.messages.UninstallStickerSet({ stickerset });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.stickerset !== void 0) {
          b.write(this.stickerset.write());
        }
        return b.buffer;
      }
    }
    messages2.UninstallStickerSet = UninstallStickerSet;
    class StartBot extends TLObject {
      __response__;
      bot;
      peer;
      randomId;
      startParam;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.StartBot';
        this.constructorId = 3873403768;
        this.subclassOfId = 2331323052;
        this._slots = ['bot', 'peer', 'randomId', 'startParam'];
        this.bot = params.bot;
        this.peer = params.peer;
        this.randomId = params.randomId;
        this.startParam = params.startParam;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let bot = await TLObject.read(b);
        let peer = await TLObject.read(b);
        let randomId = await Primitive.Long.read(b);
        let startParam = await Primitive.String.read(b);
        return new Raw2.messages.StartBot({
          bot,
          peer,
          randomId,
          startParam,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.bot !== void 0) {
          b.write(this.bot.write());
        }
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.randomId !== void 0) {
          b.write(Primitive.Long.write(this.randomId));
        }
        if (this.startParam !== void 0) {
          b.write(Primitive.String.write(this.startParam));
        }
        return b.buffer;
      }
    }
    messages2.StartBot = StartBot;
    class GetMessagesViews extends TLObject {
      __response__;
      peer;
      id;
      increment;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetMessagesViews';
        this.constructorId = 1468322785;
        this.subclassOfId = 2947935132;
        this._slots = ['peer', 'id', 'increment'];
        this.peer = params.peer;
        this.id = params.id;
        this.increment = params.increment;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        let increment = await Primitive.Bool.read(b);
        return new Raw2.messages.GetMessagesViews({ peer, id, increment });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        if (this.increment !== void 0) {
          b.write(Primitive.Bool.write(this.increment));
        }
        return b.buffer;
      }
    }
    messages2.GetMessagesViews = GetMessagesViews;
    class EditChatAdmin extends TLObject {
      __response__;
      chatId;
      userId;
      isAdmin;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.EditChatAdmin';
        this.constructorId = 2824589762;
        this.subclassOfId = 4122188204;
        this._slots = ['chatId', 'userId', 'isAdmin'];
        this.chatId = params.chatId;
        this.userId = params.userId;
        this.isAdmin = params.isAdmin;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let chatId = await Primitive.Long.read(b);
        let userId = await TLObject.read(b);
        let isAdmin = await Primitive.Bool.read(b);
        return new Raw2.messages.EditChatAdmin({ chatId, userId, isAdmin });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.chatId !== void 0) {
          b.write(Primitive.Long.write(this.chatId));
        }
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        if (this.isAdmin !== void 0) {
          b.write(Primitive.Bool.write(this.isAdmin));
        }
        return b.buffer;
      }
    }
    messages2.EditChatAdmin = EditChatAdmin;
    class MigrateChat extends TLObject {
      __response__;
      chatId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.MigrateChat';
        this.constructorId = 2726777625;
        this.subclassOfId = 2331323052;
        this._slots = ['chatId'];
        this.chatId = params.chatId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let chatId = await Primitive.Long.read(b);
        return new Raw2.messages.MigrateChat({ chatId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.chatId !== void 0) {
          b.write(Primitive.Long.write(this.chatId));
        }
        return b.buffer;
      }
    }
    messages2.MigrateChat = MigrateChat;
    class SearchGlobal extends TLObject {
      __response__;
      broadcastsOnly;
      folderId;
      q;
      filter;
      minDate;
      maxDate;
      offsetRate;
      offsetPeer;
      offsetId;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SearchGlobal';
        this.constructorId = 1271290010;
        this.subclassOfId = 3568569182;
        this._slots = [
          'broadcastsOnly',
          'folderId',
          'q',
          'filter',
          'minDate',
          'maxDate',
          'offsetRate',
          'offsetPeer',
          'offsetId',
          'limit',
        ];
        this.broadcastsOnly = params.broadcastsOnly;
        this.folderId = params.folderId;
        this.q = params.q;
        this.filter = params.filter;
        this.minDate = params.minDate;
        this.maxDate = params.maxDate;
        this.offsetRate = params.offsetRate;
        this.offsetPeer = params.offsetPeer;
        this.offsetId = params.offsetId;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let broadcastsOnly = flags & (1 << 1) ? true : false;
        let folderId = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        let q = await Primitive.String.read(b);
        let filter = await TLObject.read(b);
        let minDate = await Primitive.Int.read(b);
        let maxDate = await Primitive.Int.read(b);
        let offsetRate = await Primitive.Int.read(b);
        let offsetPeer = await TLObject.read(b);
        let offsetId = await Primitive.Int.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.messages.SearchGlobal({
          broadcastsOnly,
          folderId,
          q,
          filter,
          minDate,
          maxDate,
          offsetRate,
          offsetPeer,
          offsetId,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.broadcastsOnly ? 1 << 1 : 0;
        flags |= this.folderId !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.folderId !== void 0) {
          b.write(Primitive.Int.write(this.folderId));
        }
        if (this.q !== void 0) {
          b.write(Primitive.String.write(this.q));
        }
        if (this.filter !== void 0) {
          b.write(this.filter.write());
        }
        if (this.minDate !== void 0) {
          b.write(Primitive.Int.write(this.minDate));
        }
        if (this.maxDate !== void 0) {
          b.write(Primitive.Int.write(this.maxDate));
        }
        if (this.offsetRate !== void 0) {
          b.write(Primitive.Int.write(this.offsetRate));
        }
        if (this.offsetPeer !== void 0) {
          b.write(this.offsetPeer.write());
        }
        if (this.offsetId !== void 0) {
          b.write(Primitive.Int.write(this.offsetId));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    messages2.SearchGlobal = SearchGlobal;
    class ReorderStickerSets extends TLObject {
      __response__;
      masks;
      emojis;
      order;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ReorderStickerSets';
        this.constructorId = 2016638777;
        this.subclassOfId = 4122188204;
        this._slots = ['masks', 'emojis', 'order'];
        this.masks = params.masks;
        this.emojis = params.emojis;
        this.order = params.order;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let masks = flags & (1 << 0) ? true : false;
        let emojis = flags & (1 << 1) ? true : false;
        let order = await TLObject.read(b, Primitive.Long);
        return new Raw2.messages.ReorderStickerSets({ masks, emojis, order });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.masks ? 1 << 0 : 0;
        flags |= this.emojis ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.order) {
          b.write(Primitive.Vector.write(this.order, Primitive.Long));
        }
        return b.buffer;
      }
    }
    messages2.ReorderStickerSets = ReorderStickerSets;
    class GetDocumentByHash extends TLObject {
      __response__;
      sha256;
      size;
      mimeType;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetDocumentByHash';
        this.constructorId = 2985428511;
        this.subclassOfId = 555739168;
        this._slots = ['sha256', 'size', 'mimeType'];
        this.sha256 = params.sha256;
        this.size = params.size;
        this.mimeType = params.mimeType;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let sha256 = await Primitive.Bytes.read(b);
        let size = await Primitive.Long.read(b);
        let mimeType = await Primitive.String.read(b);
        return new Raw2.messages.GetDocumentByHash({
          sha256,
          size,
          mimeType,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.sha256 !== void 0) {
          b.write(Primitive.Bytes.write(this.sha256));
        }
        if (this.size !== void 0) {
          b.write(Primitive.Long.write(this.size));
        }
        if (this.mimeType !== void 0) {
          b.write(Primitive.String.write(this.mimeType));
        }
        return b.buffer;
      }
    }
    messages2.GetDocumentByHash = GetDocumentByHash;
    class GetSavedGifs extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetSavedGifs';
        this.constructorId = 1559270965;
        this.subclassOfId = 2794152437;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetSavedGifs({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetSavedGifs = GetSavedGifs;
    class SaveGif extends TLObject {
      __response__;
      id;
      unsave;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SaveGif';
        this.constructorId = 846868683;
        this.subclassOfId = 4122188204;
        this._slots = ['id', 'unsave'];
        this.id = params.id;
        this.unsave = params.unsave;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b);
        let unsave = await Primitive.Bool.read(b);
        return new Raw2.messages.SaveGif({ id, unsave });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id !== void 0) {
          b.write(this.id.write());
        }
        if (this.unsave !== void 0) {
          b.write(Primitive.Bool.write(this.unsave));
        }
        return b.buffer;
      }
    }
    messages2.SaveGif = SaveGif;
    class GetInlineBotResults extends TLObject {
      __response__;
      bot;
      peer;
      geoPoint;
      query;
      offset;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetInlineBotResults';
        this.constructorId = 1364105629;
        this.subclassOfId = 1054136777;
        this._slots = ['bot', 'peer', 'geoPoint', 'query', 'offset'];
        this.bot = params.bot;
        this.peer = params.peer;
        this.geoPoint = params.geoPoint;
        this.query = params.query;
        this.offset = params.offset;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let bot = await TLObject.read(b);
        let peer = await TLObject.read(b);
        let geoPoint = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let query = await Primitive.String.read(b);
        let offset = await Primitive.String.read(b);
        return new Raw2.messages.GetInlineBotResults({
          bot,
          peer,
          geoPoint,
          query,
          offset,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.geoPoint !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.bot !== void 0) {
          b.write(this.bot.write());
        }
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.geoPoint !== void 0) {
          b.write(this.geoPoint.write());
        }
        if (this.query !== void 0) {
          b.write(Primitive.String.write(this.query));
        }
        if (this.offset !== void 0) {
          b.write(Primitive.String.write(this.offset));
        }
        return b.buffer;
      }
    }
    messages2.GetInlineBotResults = GetInlineBotResults;
    class SetInlineBotResults extends TLObject {
      __response__;
      gallery;
      private;
      queryId;
      results;
      cacheTime;
      nextOffset;
      switchPm;
      switchWebview;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SetInlineBotResults';
        this.constructorId = 3138561049;
        this.subclassOfId = 4122188204;
        this._slots = [
          'gallery',
          'private',
          'queryId',
          'results',
          'cacheTime',
          'nextOffset',
          'switchPm',
          'switchWebview',
        ];
        this.gallery = params.gallery;
        this.private = params.private;
        this.queryId = params.queryId;
        this.results = params.results;
        this.cacheTime = params.cacheTime;
        this.nextOffset = params.nextOffset;
        this.switchPm = params.switchPm;
        this.switchWebview = params.switchWebview;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let gallery = flags & (1 << 0) ? true : false;
        let _private = flags & (1 << 1) ? true : false;
        let queryId = await Primitive.Long.read(b);
        let results = await TLObject.read(b);
        let cacheTime = await Primitive.Int.read(b);
        let nextOffset = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
        let switchPm = flags & (1 << 3) ? await TLObject.read(b) : void 0;
        let switchWebview = flags & (1 << 4) ? await TLObject.read(b) : void 0;
        return new Raw2.messages.SetInlineBotResults({
          gallery,
          private: _private,
          queryId,
          results,
          cacheTime,
          nextOffset,
          switchPm,
          switchWebview,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.gallery ? 1 << 0 : 0;
        flags |= this.private ? 1 << 1 : 0;
        flags |= this.nextOffset !== void 0 ? 1 << 2 : 0;
        flags |= this.switchPm !== void 0 ? 1 << 3 : 0;
        flags |= this.switchWebview !== void 0 ? 1 << 4 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.queryId !== void 0) {
          b.write(Primitive.Long.write(this.queryId));
        }
        if (this.results) {
          b.write(Primitive.Vector.write(this.results));
        }
        if (this.cacheTime !== void 0) {
          b.write(Primitive.Int.write(this.cacheTime));
        }
        if (this.nextOffset !== void 0) {
          b.write(Primitive.String.write(this.nextOffset));
        }
        if (this.switchPm !== void 0) {
          b.write(this.switchPm.write());
        }
        if (this.switchWebview !== void 0) {
          b.write(this.switchWebview.write());
        }
        return b.buffer;
      }
    }
    messages2.SetInlineBotResults = SetInlineBotResults;
    class SendInlineBotResult extends TLObject {
      __response__;
      silent;
      background;
      clearDraft;
      hideVia;
      peer;
      replyTo;
      randomId;
      queryId;
      id;
      scheduleDate;
      sendAs;
      quickReplyShortcut;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SendInlineBotResult';
        this.constructorId = 1052698730;
        this.subclassOfId = 2331323052;
        this._slots = [
          'silent',
          'background',
          'clearDraft',
          'hideVia',
          'peer',
          'replyTo',
          'randomId',
          'queryId',
          'id',
          'scheduleDate',
          'sendAs',
          'quickReplyShortcut',
        ];
        this.silent = params.silent;
        this.background = params.background;
        this.clearDraft = params.clearDraft;
        this.hideVia = params.hideVia;
        this.peer = params.peer;
        this.replyTo = params.replyTo;
        this.randomId = params.randomId;
        this.queryId = params.queryId;
        this.id = params.id;
        this.scheduleDate = params.scheduleDate;
        this.sendAs = params.sendAs;
        this.quickReplyShortcut = params.quickReplyShortcut;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let silent = flags & (1 << 5) ? true : false;
        let background = flags & (1 << 6) ? true : false;
        let clearDraft = flags & (1 << 7) ? true : false;
        let hideVia = flags & (1 << 11) ? true : false;
        let peer = await TLObject.read(b);
        let replyTo = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let randomId = await Primitive.Long.read(b);
        let queryId = await Primitive.Long.read(b);
        let id = await Primitive.String.read(b);
        let scheduleDate = flags & (1 << 10) ? await Primitive.Int.read(b) : void 0;
        let sendAs = flags & (1 << 13) ? await TLObject.read(b) : void 0;
        let quickReplyShortcut = flags & (1 << 17) ? await TLObject.read(b) : void 0;
        return new Raw2.messages.SendInlineBotResult({
          silent,
          background,
          clearDraft,
          hideVia,
          peer,
          replyTo,
          randomId,
          queryId,
          id,
          scheduleDate,
          sendAs,
          quickReplyShortcut,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.silent ? 1 << 5 : 0;
        flags |= this.background ? 1 << 6 : 0;
        flags |= this.clearDraft ? 1 << 7 : 0;
        flags |= this.hideVia ? 1 << 11 : 0;
        flags |= this.replyTo !== void 0 ? 1 << 0 : 0;
        flags |= this.scheduleDate !== void 0 ? 1 << 10 : 0;
        flags |= this.sendAs !== void 0 ? 1 << 13 : 0;
        flags |= this.quickReplyShortcut !== void 0 ? 1 << 17 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.replyTo !== void 0) {
          b.write(this.replyTo.write());
        }
        if (this.randomId !== void 0) {
          b.write(Primitive.Long.write(this.randomId));
        }
        if (this.queryId !== void 0) {
          b.write(Primitive.Long.write(this.queryId));
        }
        if (this.id !== void 0) {
          b.write(Primitive.String.write(this.id));
        }
        if (this.scheduleDate !== void 0) {
          b.write(Primitive.Int.write(this.scheduleDate));
        }
        if (this.sendAs !== void 0) {
          b.write(this.sendAs.write());
        }
        if (this.quickReplyShortcut !== void 0) {
          b.write(this.quickReplyShortcut.write());
        }
        return b.buffer;
      }
    }
    messages2.SendInlineBotResult = SendInlineBotResult;
    class GetMessageEditData extends TLObject {
      __response__;
      peer;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetMessageEditData';
        this.constructorId = 4255550774;
        this.subclassOfId = 4215772317;
        this._slots = ['peer', 'id'];
        this.peer = params.peer;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await Primitive.Int.read(b);
        return new Raw2.messages.GetMessageEditData({ peer, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id !== void 0) {
          b.write(Primitive.Int.write(this.id));
        }
        return b.buffer;
      }
    }
    messages2.GetMessageEditData = GetMessageEditData;
    class EditMessage extends TLObject {
      __response__;
      noWebpage;
      invertMedia;
      peer;
      id;
      message;
      media;
      replyMarkup;
      entities;
      scheduleDate;
      quickReplyShortcutId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.EditMessage';
        this.constructorId = 3755032581;
        this.subclassOfId = 2331323052;
        this._slots = [
          'noWebpage',
          'invertMedia',
          'peer',
          'id',
          'message',
          'media',
          'replyMarkup',
          'entities',
          'scheduleDate',
          'quickReplyShortcutId',
        ];
        this.noWebpage = params.noWebpage;
        this.invertMedia = params.invertMedia;
        this.peer = params.peer;
        this.id = params.id;
        this.message = params.message;
        this.media = params.media;
        this.replyMarkup = params.replyMarkup;
        this.entities = params.entities;
        this.scheduleDate = params.scheduleDate;
        this.quickReplyShortcutId = params.quickReplyShortcutId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let noWebpage = flags & (1 << 1) ? true : false;
        let invertMedia = flags & (1 << 16) ? true : false;
        let peer = await TLObject.read(b);
        let id = await Primitive.Int.read(b);
        let message = flags & (1 << 11) ? await Primitive.String.read(b) : void 0;
        let media = flags & (1 << 14) ? await TLObject.read(b) : void 0;
        let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let entities = flags & (1 << 3) ? await TLObject.read(b) : [];
        let scheduleDate = flags & (1 << 15) ? await Primitive.Int.read(b) : void 0;
        let quickReplyShortcutId = flags & (1 << 17) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.messages.EditMessage({
          noWebpage,
          invertMedia,
          peer,
          id,
          message,
          media,
          replyMarkup,
          entities,
          scheduleDate,
          quickReplyShortcutId,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.noWebpage ? 1 << 1 : 0;
        flags |= this.invertMedia ? 1 << 16 : 0;
        flags |= this.message !== void 0 ? 1 << 11 : 0;
        flags |= this.media !== void 0 ? 1 << 14 : 0;
        flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
        flags |= this.entities ? 1 << 3 : 0;
        flags |= this.scheduleDate !== void 0 ? 1 << 15 : 0;
        flags |= this.quickReplyShortcutId !== void 0 ? 1 << 17 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id !== void 0) {
          b.write(Primitive.Int.write(this.id));
        }
        if (this.message !== void 0) {
          b.write(Primitive.String.write(this.message));
        }
        if (this.media !== void 0) {
          b.write(this.media.write());
        }
        if (this.replyMarkup !== void 0) {
          b.write(this.replyMarkup.write());
        }
        if (this.entities) {
          b.write(Primitive.Vector.write(this.entities));
        }
        if (this.scheduleDate !== void 0) {
          b.write(Primitive.Int.write(this.scheduleDate));
        }
        if (this.quickReplyShortcutId !== void 0) {
          b.write(Primitive.Int.write(this.quickReplyShortcutId));
        }
        return b.buffer;
      }
    }
    messages2.EditMessage = EditMessage;
    class EditInlineBotMessage extends TLObject {
      __response__;
      noWebpage;
      invertMedia;
      id;
      message;
      media;
      replyMarkup;
      entities;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.EditInlineBotMessage';
        this.constructorId = 2203418042;
        this.subclassOfId = 4122188204;
        this._slots = [
          'noWebpage',
          'invertMedia',
          'id',
          'message',
          'media',
          'replyMarkup',
          'entities',
        ];
        this.noWebpage = params.noWebpage;
        this.invertMedia = params.invertMedia;
        this.id = params.id;
        this.message = params.message;
        this.media = params.media;
        this.replyMarkup = params.replyMarkup;
        this.entities = params.entities;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let noWebpage = flags & (1 << 1) ? true : false;
        let invertMedia = flags & (1 << 16) ? true : false;
        let id = await TLObject.read(b);
        let message = flags & (1 << 11) ? await Primitive.String.read(b) : void 0;
        let media = flags & (1 << 14) ? await TLObject.read(b) : void 0;
        let replyMarkup = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let entities = flags & (1 << 3) ? await TLObject.read(b) : [];
        return new Raw2.messages.EditInlineBotMessage({
          noWebpage,
          invertMedia,
          id,
          message,
          media,
          replyMarkup,
          entities,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.noWebpage ? 1 << 1 : 0;
        flags |= this.invertMedia ? 1 << 16 : 0;
        flags |= this.message !== void 0 ? 1 << 11 : 0;
        flags |= this.media !== void 0 ? 1 << 14 : 0;
        flags |= this.replyMarkup !== void 0 ? 1 << 2 : 0;
        flags |= this.entities ? 1 << 3 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.id !== void 0) {
          b.write(this.id.write());
        }
        if (this.message !== void 0) {
          b.write(Primitive.String.write(this.message));
        }
        if (this.media !== void 0) {
          b.write(this.media.write());
        }
        if (this.replyMarkup !== void 0) {
          b.write(this.replyMarkup.write());
        }
        if (this.entities) {
          b.write(Primitive.Vector.write(this.entities));
        }
        return b.buffer;
      }
    }
    messages2.EditInlineBotMessage = EditInlineBotMessage;
    class GetBotCallbackAnswer extends TLObject {
      __response__;
      game;
      peer;
      msgId;
      data;
      password;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetBotCallbackAnswer';
        this.constructorId = 2470627847;
        this.subclassOfId = 1817039244;
        this._slots = ['game', 'peer', 'msgId', 'data', 'password'];
        this.game = params.game;
        this.peer = params.peer;
        this.msgId = params.msgId;
        this.data = params.data;
        this.password = params.password;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let game = flags & (1 << 1) ? true : false;
        let peer = await TLObject.read(b);
        let msgId = await Primitive.Int.read(b);
        let data = flags & (1 << 0) ? await Primitive.Bytes.read(b) : void 0;
        let password = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        return new Raw2.messages.GetBotCallbackAnswer({
          game,
          peer,
          msgId,
          data,
          password,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.game ? 1 << 1 : 0;
        flags |= this.data !== void 0 ? 1 << 0 : 0;
        flags |= this.password !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        if (this.data !== void 0) {
          b.write(Primitive.Bytes.write(this.data));
        }
        if (this.password !== void 0) {
          b.write(this.password.write());
        }
        return b.buffer;
      }
    }
    messages2.GetBotCallbackAnswer = GetBotCallbackAnswer;
    class SetBotCallbackAnswer extends TLObject {
      __response__;
      alert;
      queryId;
      message;
      url;
      cacheTime;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SetBotCallbackAnswer';
        this.constructorId = 3582923530;
        this.subclassOfId = 4122188204;
        this._slots = ['alert', 'queryId', 'message', 'url', 'cacheTime'];
        this.alert = params.alert;
        this.queryId = params.queryId;
        this.message = params.message;
        this.url = params.url;
        this.cacheTime = params.cacheTime;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let alert = flags & (1 << 1) ? true : false;
        let queryId = await Primitive.Long.read(b);
        let message = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let url = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
        let cacheTime = await Primitive.Int.read(b);
        return new Raw2.messages.SetBotCallbackAnswer({
          alert,
          queryId,
          message,
          url,
          cacheTime,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.alert ? 1 << 1 : 0;
        flags |= this.message !== void 0 ? 1 << 0 : 0;
        flags |= this.url !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.queryId !== void 0) {
          b.write(Primitive.Long.write(this.queryId));
        }
        if (this.message !== void 0) {
          b.write(Primitive.String.write(this.message));
        }
        if (this.url !== void 0) {
          b.write(Primitive.String.write(this.url));
        }
        if (this.cacheTime !== void 0) {
          b.write(Primitive.Int.write(this.cacheTime));
        }
        return b.buffer;
      }
    }
    messages2.SetBotCallbackAnswer = SetBotCallbackAnswer;
    class GetPeerDialogs extends TLObject {
      __response__;
      peers;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetPeerDialogs';
        this.constructorId = 3832593661;
        this.subclassOfId = 986120498;
        this._slots = ['peers'];
        this.peers = params.peers;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peers = await TLObject.read(b);
        return new Raw2.messages.GetPeerDialogs({ peers });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peers) {
          b.write(Primitive.Vector.write(this.peers));
        }
        return b.buffer;
      }
    }
    messages2.GetPeerDialogs = GetPeerDialogs;
    class SaveDraft extends TLObject {
      __response__;
      noWebpage;
      invertMedia;
      replyTo;
      peer;
      message;
      entities;
      media;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SaveDraft';
        this.constructorId = 2146678790;
        this.subclassOfId = 4122188204;
        this._slots = [
          'noWebpage',
          'invertMedia',
          'replyTo',
          'peer',
          'message',
          'entities',
          'media',
        ];
        this.noWebpage = params.noWebpage;
        this.invertMedia = params.invertMedia;
        this.replyTo = params.replyTo;
        this.peer = params.peer;
        this.message = params.message;
        this.entities = params.entities;
        this.media = params.media;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let noWebpage = flags & (1 << 1) ? true : false;
        let invertMedia = flags & (1 << 6) ? true : false;
        let replyTo = flags & (1 << 4) ? await TLObject.read(b) : void 0;
        let peer = await TLObject.read(b);
        let message = await Primitive.String.read(b);
        let entities = flags & (1 << 3) ? await TLObject.read(b) : [];
        let media = flags & (1 << 5) ? await TLObject.read(b) : void 0;
        return new Raw2.messages.SaveDraft({
          noWebpage,
          invertMedia,
          replyTo,
          peer,
          message,
          entities,
          media,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.noWebpage ? 1 << 1 : 0;
        flags |= this.invertMedia ? 1 << 6 : 0;
        flags |= this.replyTo !== void 0 ? 1 << 4 : 0;
        flags |= this.entities ? 1 << 3 : 0;
        flags |= this.media !== void 0 ? 1 << 5 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.replyTo !== void 0) {
          b.write(this.replyTo.write());
        }
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.message !== void 0) {
          b.write(Primitive.String.write(this.message));
        }
        if (this.entities) {
          b.write(Primitive.Vector.write(this.entities));
        }
        if (this.media !== void 0) {
          b.write(this.media.write());
        }
        return b.buffer;
      }
    }
    messages2.SaveDraft = SaveDraft;
    class GetAllDrafts extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetAllDrafts';
        this.constructorId = 1782549861;
        this.subclassOfId = 2331323052;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.GetAllDrafts();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.GetAllDrafts = GetAllDrafts;
    class GetFeaturedStickers extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetFeaturedStickers';
        this.constructorId = 1685588756;
        this.subclassOfId = 638891810;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetFeaturedStickers({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetFeaturedStickers = GetFeaturedStickers;
    class ReadFeaturedStickers extends TLObject {
      __response__;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ReadFeaturedStickers';
        this.constructorId = 1527873830;
        this.subclassOfId = 4122188204;
        this._slots = ['id'];
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b, Primitive.Long);
        return new Raw2.messages.ReadFeaturedStickers({ id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Long));
        }
        return b.buffer;
      }
    }
    messages2.ReadFeaturedStickers = ReadFeaturedStickers;
    class GetRecentStickers extends TLObject {
      __response__;
      attached;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetRecentStickers';
        this.constructorId = 2645114939;
        this.subclassOfId = 4151281283;
        this._slots = ['attached', 'hash'];
        this.attached = params.attached;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let attached = flags & (1 << 0) ? true : false;
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetRecentStickers({ attached, hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.attached ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetRecentStickers = GetRecentStickers;
    class SaveRecentSticker extends TLObject {
      __response__;
      attached;
      id;
      unsave;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SaveRecentSticker';
        this.constructorId = 958863608;
        this.subclassOfId = 4122188204;
        this._slots = ['attached', 'id', 'unsave'];
        this.attached = params.attached;
        this.id = params.id;
        this.unsave = params.unsave;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let attached = flags & (1 << 0) ? true : false;
        let id = await TLObject.read(b);
        let unsave = await Primitive.Bool.read(b);
        return new Raw2.messages.SaveRecentSticker({ attached, id, unsave });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.attached ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.id !== void 0) {
          b.write(this.id.write());
        }
        if (this.unsave !== void 0) {
          b.write(Primitive.Bool.write(this.unsave));
        }
        return b.buffer;
      }
    }
    messages2.SaveRecentSticker = SaveRecentSticker;
    class ClearRecentStickers extends TLObject {
      __response__;
      attached;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ClearRecentStickers';
        this.constructorId = 2308530221;
        this.subclassOfId = 4122188204;
        this._slots = ['attached'];
        this.attached = params.attached;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let attached = flags & (1 << 0) ? true : false;
        return new Raw2.messages.ClearRecentStickers({ attached });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.attached ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        return b.buffer;
      }
    }
    messages2.ClearRecentStickers = ClearRecentStickers;
    class GetArchivedStickers extends TLObject {
      __response__;
      masks;
      emojis;
      offsetId;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetArchivedStickers';
        this.constructorId = 1475442322;
        this.subclassOfId = 1922488177;
        this._slots = ['masks', 'emojis', 'offsetId', 'limit'];
        this.masks = params.masks;
        this.emojis = params.emojis;
        this.offsetId = params.offsetId;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let masks = flags & (1 << 0) ? true : false;
        let emojis = flags & (1 << 1) ? true : false;
        let offsetId = await Primitive.Long.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.messages.GetArchivedStickers({
          masks,
          emojis,
          offsetId,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.masks ? 1 << 0 : 0;
        flags |= this.emojis ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.offsetId !== void 0) {
          b.write(Primitive.Long.write(this.offsetId));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    messages2.GetArchivedStickers = GetArchivedStickers;
    class GetMaskStickers extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetMaskStickers';
        this.constructorId = 1678738104;
        this.subclassOfId = 1166231593;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetMaskStickers({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetMaskStickers = GetMaskStickers;
    class GetAttachedStickers extends TLObject {
      __response__;
      media;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetAttachedStickers';
        this.constructorId = 3428542412;
        this.subclassOfId = 3423756139;
        this._slots = ['media'];
        this.media = params.media;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let media = await TLObject.read(b);
        return new Raw2.messages.GetAttachedStickers({ media });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.media !== void 0) {
          b.write(this.media.write());
        }
        return b.buffer;
      }
    }
    messages2.GetAttachedStickers = GetAttachedStickers;
    class SetGameScore extends TLObject {
      __response__;
      editMessage;
      force;
      peer;
      id;
      userId;
      score;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SetGameScore';
        this.constructorId = 2398678208;
        this.subclassOfId = 2331323052;
        this._slots = ['editMessage', 'force', 'peer', 'id', 'userId', 'score'];
        this.editMessage = params.editMessage;
        this.force = params.force;
        this.peer = params.peer;
        this.id = params.id;
        this.userId = params.userId;
        this.score = params.score;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let editMessage = flags & (1 << 0) ? true : false;
        let force = flags & (1 << 1) ? true : false;
        let peer = await TLObject.read(b);
        let id = await Primitive.Int.read(b);
        let userId = await TLObject.read(b);
        let score = await Primitive.Int.read(b);
        return new Raw2.messages.SetGameScore({
          editMessage,
          force,
          peer,
          id,
          userId,
          score,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.editMessage ? 1 << 0 : 0;
        flags |= this.force ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id !== void 0) {
          b.write(Primitive.Int.write(this.id));
        }
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        if (this.score !== void 0) {
          b.write(Primitive.Int.write(this.score));
        }
        return b.buffer;
      }
    }
    messages2.SetGameScore = SetGameScore;
    class SetInlineGameScore extends TLObject {
      __response__;
      editMessage;
      force;
      id;
      userId;
      score;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SetInlineGameScore';
        this.constructorId = 363700068;
        this.subclassOfId = 4122188204;
        this._slots = ['editMessage', 'force', 'id', 'userId', 'score'];
        this.editMessage = params.editMessage;
        this.force = params.force;
        this.id = params.id;
        this.userId = params.userId;
        this.score = params.score;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let editMessage = flags & (1 << 0) ? true : false;
        let force = flags & (1 << 1) ? true : false;
        let id = await TLObject.read(b);
        let userId = await TLObject.read(b);
        let score = await Primitive.Int.read(b);
        return new Raw2.messages.SetInlineGameScore({
          editMessage,
          force,
          id,
          userId,
          score,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.editMessage ? 1 << 0 : 0;
        flags |= this.force ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.id !== void 0) {
          b.write(this.id.write());
        }
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        if (this.score !== void 0) {
          b.write(Primitive.Int.write(this.score));
        }
        return b.buffer;
      }
    }
    messages2.SetInlineGameScore = SetInlineGameScore;
    class GetGameHighScores extends TLObject {
      __response__;
      peer;
      id;
      userId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetGameHighScores';
        this.constructorId = 3894568093;
        this.subclassOfId = 1825412605;
        this._slots = ['peer', 'id', 'userId'];
        this.peer = params.peer;
        this.id = params.id;
        this.userId = params.userId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await Primitive.Int.read(b);
        let userId = await TLObject.read(b);
        return new Raw2.messages.GetGameHighScores({ peer, id, userId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id !== void 0) {
          b.write(Primitive.Int.write(this.id));
        }
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        return b.buffer;
      }
    }
    messages2.GetGameHighScores = GetGameHighScores;
    class GetInlineGameHighScores extends TLObject {
      __response__;
      id;
      userId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetInlineGameHighScores';
        this.constructorId = 258170395;
        this.subclassOfId = 1825412605;
        this._slots = ['id', 'userId'];
        this.id = params.id;
        this.userId = params.userId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b);
        let userId = await TLObject.read(b);
        return new Raw2.messages.GetInlineGameHighScores({ id, userId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id !== void 0) {
          b.write(this.id.write());
        }
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        return b.buffer;
      }
    }
    messages2.GetInlineGameHighScores = GetInlineGameHighScores;
    class GetCommonChats extends TLObject {
      __response__;
      userId;
      maxId;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetCommonChats';
        this.constructorId = 3826032900;
        this.subclassOfId = 2580925204;
        this._slots = ['userId', 'maxId', 'limit'];
        this.userId = params.userId;
        this.maxId = params.maxId;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let userId = await TLObject.read(b);
        let maxId = await Primitive.Long.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.messages.GetCommonChats({ userId, maxId, limit });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        if (this.maxId !== void 0) {
          b.write(Primitive.Long.write(this.maxId));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    messages2.GetCommonChats = GetCommonChats;
    class GetWebPage extends TLObject {
      __response__;
      url;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetWebPage';
        this.constructorId = 2375455395;
        this.subclassOfId = 754495828;
        this._slots = ['url', 'hash'];
        this.url = params.url;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let url = await Primitive.String.read(b);
        let hash = await Primitive.Int.read(b);
        return new Raw2.messages.GetWebPage({ url, hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.url !== void 0) {
          b.write(Primitive.String.write(this.url));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetWebPage = GetWebPage;
    class ToggleDialogPin extends TLObject {
      __response__;
      pinned;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ToggleDialogPin';
        this.constructorId = 2805064279;
        this.subclassOfId = 4122188204;
        this._slots = ['pinned', 'peer'];
        this.pinned = params.pinned;
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let pinned = flags & (1 << 0) ? true : false;
        let peer = await TLObject.read(b);
        return new Raw2.messages.ToggleDialogPin({ pinned, peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.pinned ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    messages2.ToggleDialogPin = ToggleDialogPin;
    class ReorderPinnedDialogs extends TLObject {
      __response__;
      force;
      folderId;
      order;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ReorderPinnedDialogs';
        this.constructorId = 991616823;
        this.subclassOfId = 4122188204;
        this._slots = ['force', 'folderId', 'order'];
        this.force = params.force;
        this.folderId = params.folderId;
        this.order = params.order;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let force = flags & (1 << 0) ? true : false;
        let folderId = await Primitive.Int.read(b);
        let order = await TLObject.read(b);
        return new Raw2.messages.ReorderPinnedDialogs({
          force,
          folderId,
          order,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.force ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.folderId !== void 0) {
          b.write(Primitive.Int.write(this.folderId));
        }
        if (this.order) {
          b.write(Primitive.Vector.write(this.order));
        }
        return b.buffer;
      }
    }
    messages2.ReorderPinnedDialogs = ReorderPinnedDialogs;
    class GetPinnedDialogs extends TLObject {
      __response__;
      folderId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetPinnedDialogs';
        this.constructorId = 3602468338;
        this.subclassOfId = 986120498;
        this._slots = ['folderId'];
        this.folderId = params.folderId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let folderId = await Primitive.Int.read(b);
        return new Raw2.messages.GetPinnedDialogs({ folderId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.folderId !== void 0) {
          b.write(Primitive.Int.write(this.folderId));
        }
        return b.buffer;
      }
    }
    messages2.GetPinnedDialogs = GetPinnedDialogs;
    class SetBotShippingResults extends TLObject {
      __response__;
      queryId;
      error;
      shippingOptions;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SetBotShippingResults';
        this.constructorId = 3858133754;
        this.subclassOfId = 4122188204;
        this._slots = ['queryId', 'error', 'shippingOptions'];
        this.queryId = params.queryId;
        this.error = params.error;
        this.shippingOptions = params.shippingOptions;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let queryId = await Primitive.Long.read(b);
        let error = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let shippingOptions = flags & (1 << 1) ? await TLObject.read(b) : [];
        return new Raw2.messages.SetBotShippingResults({
          queryId,
          error,
          shippingOptions,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.error !== void 0 ? 1 << 0 : 0;
        flags |= this.shippingOptions ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.queryId !== void 0) {
          b.write(Primitive.Long.write(this.queryId));
        }
        if (this.error !== void 0) {
          b.write(Primitive.String.write(this.error));
        }
        if (this.shippingOptions) {
          b.write(Primitive.Vector.write(this.shippingOptions));
        }
        return b.buffer;
      }
    }
    messages2.SetBotShippingResults = SetBotShippingResults;
    class SetBotPrecheckoutResults extends TLObject {
      __response__;
      success;
      queryId;
      error;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SetBotPrecheckoutResults';
        this.constructorId = 163765653;
        this.subclassOfId = 4122188204;
        this._slots = ['success', 'queryId', 'error'];
        this.success = params.success;
        this.queryId = params.queryId;
        this.error = params.error;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let success = flags & (1 << 1) ? true : false;
        let queryId = await Primitive.Long.read(b);
        let error = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        return new Raw2.messages.SetBotPrecheckoutResults({
          success,
          queryId,
          error,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.success ? 1 << 1 : 0;
        flags |= this.error !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.queryId !== void 0) {
          b.write(Primitive.Long.write(this.queryId));
        }
        if (this.error !== void 0) {
          b.write(Primitive.String.write(this.error));
        }
        return b.buffer;
      }
    }
    messages2.SetBotPrecheckoutResults = SetBotPrecheckoutResults;
    class UploadMedia extends TLObject {
      __response__;
      businessConnectionId;
      peer;
      media;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.UploadMedia';
        this.constructorId = 345405816;
        this.subclassOfId = 1198308914;
        this._slots = ['businessConnectionId', 'peer', 'media'];
        this.businessConnectionId = params.businessConnectionId;
        this.peer = params.peer;
        this.media = params.media;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let businessConnectionId = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let peer = await TLObject.read(b);
        let media = await TLObject.read(b);
        return new Raw2.messages.UploadMedia({
          businessConnectionId,
          peer,
          media,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.businessConnectionId !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.businessConnectionId !== void 0) {
          b.write(Primitive.String.write(this.businessConnectionId));
        }
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.media !== void 0) {
          b.write(this.media.write());
        }
        return b.buffer;
      }
    }
    messages2.UploadMedia = UploadMedia;
    class SendScreenshotNotification extends TLObject {
      __response__;
      peer;
      replyTo;
      randomId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SendScreenshotNotification';
        this.constructorId = 2705348631;
        this.subclassOfId = 2331323052;
        this._slots = ['peer', 'replyTo', 'randomId'];
        this.peer = params.peer;
        this.replyTo = params.replyTo;
        this.randomId = params.randomId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let replyTo = await TLObject.read(b);
        let randomId = await Primitive.Long.read(b);
        return new Raw2.messages.SendScreenshotNotification({
          peer,
          replyTo,
          randomId,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.replyTo !== void 0) {
          b.write(this.replyTo.write());
        }
        if (this.randomId !== void 0) {
          b.write(Primitive.Long.write(this.randomId));
        }
        return b.buffer;
      }
    }
    messages2.SendScreenshotNotification = SendScreenshotNotification;
    class GetFavedStickers extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetFavedStickers';
        this.constructorId = 82946729;
        this.subclassOfId = 2389929913;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetFavedStickers({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetFavedStickers = GetFavedStickers;
    class FaveSticker extends TLObject {
      __response__;
      id;
      unfave;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.FaveSticker';
        this.constructorId = 3120547163;
        this.subclassOfId = 4122188204;
        this._slots = ['id', 'unfave'];
        this.id = params.id;
        this.unfave = params.unfave;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b);
        let unfave = await Primitive.Bool.read(b);
        return new Raw2.messages.FaveSticker({ id, unfave });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id !== void 0) {
          b.write(this.id.write());
        }
        if (this.unfave !== void 0) {
          b.write(Primitive.Bool.write(this.unfave));
        }
        return b.buffer;
      }
    }
    messages2.FaveSticker = FaveSticker;
    class GetUnreadMentions extends TLObject {
      __response__;
      peer;
      topMsgId;
      offsetId;
      addOffset;
      limit;
      maxId;
      minId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetUnreadMentions';
        this.constructorId = 4043827088;
        this.subclassOfId = 3568569182;
        this._slots = ['peer', 'topMsgId', 'offsetId', 'addOffset', 'limit', 'maxId', 'minId'];
        this.peer = params.peer;
        this.topMsgId = params.topMsgId;
        this.offsetId = params.offsetId;
        this.addOffset = params.addOffset;
        this.limit = params.limit;
        this.maxId = params.maxId;
        this.minId = params.minId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = await TLObject.read(b);
        let topMsgId = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        let offsetId = await Primitive.Int.read(b);
        let addOffset = await Primitive.Int.read(b);
        let limit = await Primitive.Int.read(b);
        let maxId = await Primitive.Int.read(b);
        let minId = await Primitive.Int.read(b);
        return new Raw2.messages.GetUnreadMentions({
          peer,
          topMsgId,
          offsetId,
          addOffset,
          limit,
          maxId,
          minId,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.topMsgId !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.topMsgId !== void 0) {
          b.write(Primitive.Int.write(this.topMsgId));
        }
        if (this.offsetId !== void 0) {
          b.write(Primitive.Int.write(this.offsetId));
        }
        if (this.addOffset !== void 0) {
          b.write(Primitive.Int.write(this.addOffset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        if (this.maxId !== void 0) {
          b.write(Primitive.Int.write(this.maxId));
        }
        if (this.minId !== void 0) {
          b.write(Primitive.Int.write(this.minId));
        }
        return b.buffer;
      }
    }
    messages2.GetUnreadMentions = GetUnreadMentions;
    class ReadMentions extends TLObject {
      __response__;
      peer;
      topMsgId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ReadMentions';
        this.constructorId = 921026381;
        this.subclassOfId = 743031062;
        this._slots = ['peer', 'topMsgId'];
        this.peer = params.peer;
        this.topMsgId = params.topMsgId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = await TLObject.read(b);
        let topMsgId = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.messages.ReadMentions({ peer, topMsgId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.topMsgId !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.topMsgId !== void 0) {
          b.write(Primitive.Int.write(this.topMsgId));
        }
        return b.buffer;
      }
    }
    messages2.ReadMentions = ReadMentions;
    class GetRecentLocations extends TLObject {
      __response__;
      peer;
      limit;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetRecentLocations';
        this.constructorId = 1881817312;
        this.subclassOfId = 3568569182;
        this._slots = ['peer', 'limit', 'hash'];
        this.peer = params.peer;
        this.limit = params.limit;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let limit = await Primitive.Int.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetRecentLocations({ peer, limit, hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetRecentLocations = GetRecentLocations;
    class SendMultiMedia extends TLObject {
      __response__;
      silent;
      background;
      clearDraft;
      noforwards;
      updateStickersetsOrder;
      invertMedia;
      peer;
      replyTo;
      multiMedia;
      scheduleDate;
      sendAs;
      quickReplyShortcut;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SendMultiMedia';
        this.constructorId = 211175177;
        this.subclassOfId = 2331323052;
        this._slots = [
          'silent',
          'background',
          'clearDraft',
          'noforwards',
          'updateStickersetsOrder',
          'invertMedia',
          'peer',
          'replyTo',
          'multiMedia',
          'scheduleDate',
          'sendAs',
          'quickReplyShortcut',
        ];
        this.silent = params.silent;
        this.background = params.background;
        this.clearDraft = params.clearDraft;
        this.noforwards = params.noforwards;
        this.updateStickersetsOrder = params.updateStickersetsOrder;
        this.invertMedia = params.invertMedia;
        this.peer = params.peer;
        this.replyTo = params.replyTo;
        this.multiMedia = params.multiMedia;
        this.scheduleDate = params.scheduleDate;
        this.sendAs = params.sendAs;
        this.quickReplyShortcut = params.quickReplyShortcut;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let silent = flags & (1 << 5) ? true : false;
        let background = flags & (1 << 6) ? true : false;
        let clearDraft = flags & (1 << 7) ? true : false;
        let noforwards = flags & (1 << 14) ? true : false;
        let updateStickersetsOrder = flags & (1 << 15) ? true : false;
        let invertMedia = flags & (1 << 16) ? true : false;
        let peer = await TLObject.read(b);
        let replyTo = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let multiMedia = await TLObject.read(b);
        let scheduleDate = flags & (1 << 10) ? await Primitive.Int.read(b) : void 0;
        let sendAs = flags & (1 << 13) ? await TLObject.read(b) : void 0;
        let quickReplyShortcut = flags & (1 << 17) ? await TLObject.read(b) : void 0;
        return new Raw2.messages.SendMultiMedia({
          silent,
          background,
          clearDraft,
          noforwards,
          updateStickersetsOrder,
          invertMedia,
          peer,
          replyTo,
          multiMedia,
          scheduleDate,
          sendAs,
          quickReplyShortcut,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.silent ? 1 << 5 : 0;
        flags |= this.background ? 1 << 6 : 0;
        flags |= this.clearDraft ? 1 << 7 : 0;
        flags |= this.noforwards ? 1 << 14 : 0;
        flags |= this.updateStickersetsOrder ? 1 << 15 : 0;
        flags |= this.invertMedia ? 1 << 16 : 0;
        flags |= this.replyTo !== void 0 ? 1 << 0 : 0;
        flags |= this.scheduleDate !== void 0 ? 1 << 10 : 0;
        flags |= this.sendAs !== void 0 ? 1 << 13 : 0;
        flags |= this.quickReplyShortcut !== void 0 ? 1 << 17 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.replyTo !== void 0) {
          b.write(this.replyTo.write());
        }
        if (this.multiMedia) {
          b.write(Primitive.Vector.write(this.multiMedia));
        }
        if (this.scheduleDate !== void 0) {
          b.write(Primitive.Int.write(this.scheduleDate));
        }
        if (this.sendAs !== void 0) {
          b.write(this.sendAs.write());
        }
        if (this.quickReplyShortcut !== void 0) {
          b.write(this.quickReplyShortcut.write());
        }
        return b.buffer;
      }
    }
    messages2.SendMultiMedia = SendMultiMedia;
    class UploadEncryptedFile extends TLObject {
      __response__;
      peer;
      file;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.UploadEncryptedFile';
        this.constructorId = 1347929239;
        this.subclassOfId = 2217371584;
        this._slots = ['peer', 'file'];
        this.peer = params.peer;
        this.file = params.file;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let file = await TLObject.read(b);
        return new Raw2.messages.UploadEncryptedFile({ peer, file });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.file !== void 0) {
          b.write(this.file.write());
        }
        return b.buffer;
      }
    }
    messages2.UploadEncryptedFile = UploadEncryptedFile;
    class SearchStickerSets extends TLObject {
      __response__;
      excludeFeatured;
      q;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SearchStickerSets';
        this.constructorId = 896555914;
        this.subclassOfId = 68023137;
        this._slots = ['excludeFeatured', 'q', 'hash'];
        this.excludeFeatured = params.excludeFeatured;
        this.q = params.q;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let excludeFeatured = flags & (1 << 0) ? true : false;
        let q = await Primitive.String.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.SearchStickerSets({
          excludeFeatured,
          q,
          hash,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.excludeFeatured ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.q !== void 0) {
          b.write(Primitive.String.write(this.q));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.SearchStickerSets = SearchStickerSets;
    class GetSplitRanges extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetSplitRanges';
        this.constructorId = 486505992;
        this.subclassOfId = 1537549572;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.GetSplitRanges();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.GetSplitRanges = GetSplitRanges;
    class MarkDialogUnread extends TLObject {
      __response__;
      unread;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.MarkDialogUnread';
        this.constructorId = 3263617423;
        this.subclassOfId = 4122188204;
        this._slots = ['unread', 'peer'];
        this.unread = params.unread;
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let unread = flags & (1 << 0) ? true : false;
        let peer = await TLObject.read(b);
        return new Raw2.messages.MarkDialogUnread({ unread, peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.unread ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    messages2.MarkDialogUnread = MarkDialogUnread;
    class GetDialogUnreadMarks extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetDialogUnreadMarks';
        this.constructorId = 585256482;
        this.subclassOfId = 3200666329;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.GetDialogUnreadMarks();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.GetDialogUnreadMarks = GetDialogUnreadMarks;
    class ClearAllDrafts extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'messages.ClearAllDrafts';
        this.constructorId = 2119757468;
        this.subclassOfId = 4122188204;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.ClearAllDrafts();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.ClearAllDrafts = ClearAllDrafts;
    class UpdatePinnedMessage extends TLObject {
      __response__;
      silent;
      unpin;
      pmOneside;
      peer;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.UpdatePinnedMessage';
        this.constructorId = 3534419948;
        this.subclassOfId = 2331323052;
        this._slots = ['silent', 'unpin', 'pmOneside', 'peer', 'id'];
        this.silent = params.silent;
        this.unpin = params.unpin;
        this.pmOneside = params.pmOneside;
        this.peer = params.peer;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let silent = flags & (1 << 0) ? true : false;
        let unpin = flags & (1 << 1) ? true : false;
        let pmOneside = flags & (1 << 2) ? true : false;
        let peer = await TLObject.read(b);
        let id = await Primitive.Int.read(b);
        return new Raw2.messages.UpdatePinnedMessage({
          silent,
          unpin,
          pmOneside,
          peer,
          id,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.silent ? 1 << 0 : 0;
        flags |= this.unpin ? 1 << 1 : 0;
        flags |= this.pmOneside ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id !== void 0) {
          b.write(Primitive.Int.write(this.id));
        }
        return b.buffer;
      }
    }
    messages2.UpdatePinnedMessage = UpdatePinnedMessage;
    class SendVote extends TLObject {
      __response__;
      peer;
      msgId;
      options;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SendVote';
        this.constructorId = 283795844;
        this.subclassOfId = 2331323052;
        this._slots = ['peer', 'msgId', 'options'];
        this.peer = params.peer;
        this.msgId = params.msgId;
        this.options = params.options;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let msgId = await Primitive.Int.read(b);
        let options = await TLObject.read(b, Primitive.Bytes);
        return new Raw2.messages.SendVote({ peer, msgId, options });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        if (this.options) {
          b.write(Primitive.Vector.write(this.options, Primitive.Bytes));
        }
        return b.buffer;
      }
    }
    messages2.SendVote = SendVote;
    class GetPollResults extends TLObject {
      __response__;
      peer;
      msgId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetPollResults';
        this.constructorId = 1941660731;
        this.subclassOfId = 2331323052;
        this._slots = ['peer', 'msgId'];
        this.peer = params.peer;
        this.msgId = params.msgId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let msgId = await Primitive.Int.read(b);
        return new Raw2.messages.GetPollResults({ peer, msgId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        return b.buffer;
      }
    }
    messages2.GetPollResults = GetPollResults;
    class GetOnlines extends TLObject {
      __response__;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetOnlines';
        this.constructorId = 1848369232;
        this.subclassOfId = 2357301306;
        this._slots = ['peer'];
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        return new Raw2.messages.GetOnlines({ peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    messages2.GetOnlines = GetOnlines;
    class EditChatAbout extends TLObject {
      __response__;
      peer;
      about;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.EditChatAbout';
        this.constructorId = 3740665751;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'about'];
        this.peer = params.peer;
        this.about = params.about;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let about = await Primitive.String.read(b);
        return new Raw2.messages.EditChatAbout({ peer, about });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.about !== void 0) {
          b.write(Primitive.String.write(this.about));
        }
        return b.buffer;
      }
    }
    messages2.EditChatAbout = EditChatAbout;
    class EditChatDefaultBannedRights extends TLObject {
      __response__;
      peer;
      bannedRights;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.EditChatDefaultBannedRights';
        this.constructorId = 2777049921;
        this.subclassOfId = 2331323052;
        this._slots = ['peer', 'bannedRights'];
        this.peer = params.peer;
        this.bannedRights = params.bannedRights;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let bannedRights = await TLObject.read(b);
        return new Raw2.messages.EditChatDefaultBannedRights({
          peer,
          bannedRights,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.bannedRights !== void 0) {
          b.write(this.bannedRights.write());
        }
        return b.buffer;
      }
    }
    messages2.EditChatDefaultBannedRights = EditChatDefaultBannedRights;
    class GetEmojiKeywords extends TLObject {
      __response__;
      langCode;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetEmojiKeywords';
        this.constructorId = 899735650;
        this.subclassOfId = 3531196018;
        this._slots = ['langCode'];
        this.langCode = params.langCode;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let langCode = await Primitive.String.read(b);
        return new Raw2.messages.GetEmojiKeywords({ langCode });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.langCode !== void 0) {
          b.write(Primitive.String.write(this.langCode));
        }
        return b.buffer;
      }
    }
    messages2.GetEmojiKeywords = GetEmojiKeywords;
    class GetEmojiKeywordsDifference extends TLObject {
      __response__;
      langCode;
      fromVersion;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetEmojiKeywordsDifference';
        this.constructorId = 352892591;
        this.subclassOfId = 3531196018;
        this._slots = ['langCode', 'fromVersion'];
        this.langCode = params.langCode;
        this.fromVersion = params.fromVersion;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let langCode = await Primitive.String.read(b);
        let fromVersion = await Primitive.Int.read(b);
        return new Raw2.messages.GetEmojiKeywordsDifference({
          langCode,
          fromVersion,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.langCode !== void 0) {
          b.write(Primitive.String.write(this.langCode));
        }
        if (this.fromVersion !== void 0) {
          b.write(Primitive.Int.write(this.fromVersion));
        }
        return b.buffer;
      }
    }
    messages2.GetEmojiKeywordsDifference = GetEmojiKeywordsDifference;
    class GetEmojiKeywordsLanguages extends TLObject {
      __response__;
      langCodes;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetEmojiKeywordsLanguages';
        this.constructorId = 1318675378;
        this.subclassOfId = 3885355911;
        this._slots = ['langCodes'];
        this.langCodes = params.langCodes;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let langCodes = await TLObject.read(b, Primitive.String);
        return new Raw2.messages.GetEmojiKeywordsLanguages({ langCodes });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.langCodes) {
          b.write(Primitive.Vector.write(this.langCodes, Primitive.String));
        }
        return b.buffer;
      }
    }
    messages2.GetEmojiKeywordsLanguages = GetEmojiKeywordsLanguages;
    class GetEmojiURL extends TLObject {
      __response__;
      langCode;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetEmojiURL';
        this.constructorId = 3585149990;
        this.subclassOfId = 530614809;
        this._slots = ['langCode'];
        this.langCode = params.langCode;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let langCode = await Primitive.String.read(b);
        return new Raw2.messages.GetEmojiURL({ langCode });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.langCode !== void 0) {
          b.write(Primitive.String.write(this.langCode));
        }
        return b.buffer;
      }
    }
    messages2.GetEmojiURL = GetEmojiURL;
    class GetSearchCounters extends TLObject {
      __response__;
      peer;
      savedPeerId;
      topMsgId;
      filters;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetSearchCounters';
        this.constructorId = 465367808;
        this.subclassOfId = 1809726574;
        this._slots = ['peer', 'savedPeerId', 'topMsgId', 'filters'];
        this.peer = params.peer;
        this.savedPeerId = params.savedPeerId;
        this.topMsgId = params.topMsgId;
        this.filters = params.filters;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = await TLObject.read(b);
        let savedPeerId = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let topMsgId = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        let filters = await TLObject.read(b);
        return new Raw2.messages.GetSearchCounters({
          peer,
          savedPeerId,
          topMsgId,
          filters,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.savedPeerId !== void 0 ? 1 << 2 : 0;
        flags |= this.topMsgId !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.savedPeerId !== void 0) {
          b.write(this.savedPeerId.write());
        }
        if (this.topMsgId !== void 0) {
          b.write(Primitive.Int.write(this.topMsgId));
        }
        if (this.filters) {
          b.write(Primitive.Vector.write(this.filters));
        }
        return b.buffer;
      }
    }
    messages2.GetSearchCounters = GetSearchCounters;
    class RequestUrlAuth extends TLObject {
      __response__;
      peer;
      msgId;
      buttonId;
      url;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.RequestUrlAuth';
        this.constructorId = 428848198;
        this.subclassOfId = 2003159838;
        this._slots = ['peer', 'msgId', 'buttonId', 'url'];
        this.peer = params.peer;
        this.msgId = params.msgId;
        this.buttonId = params.buttonId;
        this.url = params.url;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = flags & (1 << 1) ? await TLObject.read(b) : void 0;
        let msgId = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let buttonId = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let url = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
        return new Raw2.messages.RequestUrlAuth({
          peer,
          msgId,
          buttonId,
          url,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.peer !== void 0 ? 1 << 1 : 0;
        flags |= this.msgId !== void 0 ? 1 << 1 : 0;
        flags |= this.buttonId !== void 0 ? 1 << 1 : 0;
        flags |= this.url !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        if (this.buttonId !== void 0) {
          b.write(Primitive.Int.write(this.buttonId));
        }
        if (this.url !== void 0) {
          b.write(Primitive.String.write(this.url));
        }
        return b.buffer;
      }
    }
    messages2.RequestUrlAuth = RequestUrlAuth;
    class AcceptUrlAuth extends TLObject {
      __response__;
      writeAllowed;
      peer;
      msgId;
      buttonId;
      url;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.AcceptUrlAuth';
        this.constructorId = 2972479781;
        this.subclassOfId = 2003159838;
        this._slots = ['writeAllowed', 'peer', 'msgId', 'buttonId', 'url'];
        this.writeAllowed = params.writeAllowed;
        this.peer = params.peer;
        this.msgId = params.msgId;
        this.buttonId = params.buttonId;
        this.url = params.url;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let writeAllowed = flags & (1 << 0) ? true : false;
        let peer = flags & (1 << 1) ? await TLObject.read(b) : void 0;
        let msgId = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let buttonId = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let url = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
        return new Raw2.messages.AcceptUrlAuth({
          writeAllowed,
          peer,
          msgId,
          buttonId,
          url,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.writeAllowed ? 1 << 0 : 0;
        flags |= this.peer !== void 0 ? 1 << 1 : 0;
        flags |= this.msgId !== void 0 ? 1 << 1 : 0;
        flags |= this.buttonId !== void 0 ? 1 << 1 : 0;
        flags |= this.url !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        if (this.buttonId !== void 0) {
          b.write(Primitive.Int.write(this.buttonId));
        }
        if (this.url !== void 0) {
          b.write(Primitive.String.write(this.url));
        }
        return b.buffer;
      }
    }
    messages2.AcceptUrlAuth = AcceptUrlAuth;
    class HidePeerSettingsBar extends TLObject {
      __response__;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.HidePeerSettingsBar';
        this.constructorId = 1336717624;
        this.subclassOfId = 4122188204;
        this._slots = ['peer'];
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        return new Raw2.messages.HidePeerSettingsBar({ peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    messages2.HidePeerSettingsBar = HidePeerSettingsBar;
    class GetScheduledHistory extends TLObject {
      __response__;
      peer;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetScheduledHistory';
        this.constructorId = 4111889931;
        this.subclassOfId = 3568569182;
        this._slots = ['peer', 'hash'];
        this.peer = params.peer;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetScheduledHistory({ peer, hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetScheduledHistory = GetScheduledHistory;
    class GetScheduledMessages extends TLObject {
      __response__;
      peer;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetScheduledMessages';
        this.constructorId = 3183150180;
        this.subclassOfId = 3568569182;
        this._slots = ['peer', 'id'];
        this.peer = params.peer;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        return new Raw2.messages.GetScheduledMessages({ peer, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        return b.buffer;
      }
    }
    messages2.GetScheduledMessages = GetScheduledMessages;
    class SendScheduledMessages extends TLObject {
      __response__;
      peer;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SendScheduledMessages';
        this.constructorId = 3174597898;
        this.subclassOfId = 2331323052;
        this._slots = ['peer', 'id'];
        this.peer = params.peer;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        return new Raw2.messages.SendScheduledMessages({ peer, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        return b.buffer;
      }
    }
    messages2.SendScheduledMessages = SendScheduledMessages;
    class DeleteScheduledMessages extends TLObject {
      __response__;
      peer;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.DeleteScheduledMessages';
        this.constructorId = 1504586518;
        this.subclassOfId = 2331323052;
        this._slots = ['peer', 'id'];
        this.peer = params.peer;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        return new Raw2.messages.DeleteScheduledMessages({ peer, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        return b.buffer;
      }
    }
    messages2.DeleteScheduledMessages = DeleteScheduledMessages;
    class GetPollVotes extends TLObject {
      __response__;
      peer;
      id;
      option;
      offset;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetPollVotes';
        this.constructorId = 3094231054;
        this.subclassOfId = 3256457349;
        this._slots = ['peer', 'id', 'option', 'offset', 'limit'];
        this.peer = params.peer;
        this.id = params.id;
        this.option = params.option;
        this.offset = params.offset;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = await TLObject.read(b);
        let id = await Primitive.Int.read(b);
        let option = flags & (1 << 0) ? await Primitive.Bytes.read(b) : void 0;
        let offset = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let limit = await Primitive.Int.read(b);
        return new Raw2.messages.GetPollVotes({
          peer,
          id,
          option,
          offset,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.option !== void 0 ? 1 << 0 : 0;
        flags |= this.offset !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id !== void 0) {
          b.write(Primitive.Int.write(this.id));
        }
        if (this.option !== void 0) {
          b.write(Primitive.Bytes.write(this.option));
        }
        if (this.offset !== void 0) {
          b.write(Primitive.String.write(this.offset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    messages2.GetPollVotes = GetPollVotes;
    class ToggleStickerSets extends TLObject {
      __response__;
      uninstall;
      archive;
      unarchive;
      stickersets;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ToggleStickerSets';
        this.constructorId = 3037016042;
        this.subclassOfId = 4122188204;
        this._slots = ['uninstall', 'archive', 'unarchive', 'stickersets'];
        this.uninstall = params.uninstall;
        this.archive = params.archive;
        this.unarchive = params.unarchive;
        this.stickersets = params.stickersets;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let uninstall = flags & (1 << 0) ? true : false;
        let archive = flags & (1 << 1) ? true : false;
        let unarchive = flags & (1 << 2) ? true : false;
        let stickersets = await TLObject.read(b);
        return new Raw2.messages.ToggleStickerSets({
          uninstall,
          archive,
          unarchive,
          stickersets,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.uninstall ? 1 << 0 : 0;
        flags |= this.archive ? 1 << 1 : 0;
        flags |= this.unarchive ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.stickersets) {
          b.write(Primitive.Vector.write(this.stickersets));
        }
        return b.buffer;
      }
    }
    messages2.ToggleStickerSets = ToggleStickerSets;
    class GetDialogFilters extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetDialogFilters';
        this.constructorId = 4023684233;
        this.subclassOfId = 2785014199;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.GetDialogFilters();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.GetDialogFilters = GetDialogFilters;
    class GetSuggestedDialogFilters extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetSuggestedDialogFilters';
        this.constructorId = 2728186924;
        this.subclassOfId = 2066312249;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.GetSuggestedDialogFilters();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.GetSuggestedDialogFilters = GetSuggestedDialogFilters;
    class UpdateDialogFilter2 extends TLObject {
      __response__;
      id;
      filter;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.UpdateDialogFilter';
        this.constructorId = 450142282;
        this.subclassOfId = 4122188204;
        this._slots = ['id', 'filter'];
        this.id = params.id;
        this.filter = params.filter;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let id = await Primitive.Int.read(b);
        let filter = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        return new Raw2.messages.UpdateDialogFilter({ id, filter });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.filter !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.id !== void 0) {
          b.write(Primitive.Int.write(this.id));
        }
        if (this.filter !== void 0) {
          b.write(this.filter.write());
        }
        return b.buffer;
      }
    }
    messages2.UpdateDialogFilter = UpdateDialogFilter2;
    class UpdateDialogFiltersOrder extends TLObject {
      __response__;
      order;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.UpdateDialogFiltersOrder';
        this.constructorId = 3311649252;
        this.subclassOfId = 4122188204;
        this._slots = ['order'];
        this.order = params.order;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let order = await TLObject.read(b, Primitive.Int);
        return new Raw2.messages.UpdateDialogFiltersOrder({ order });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.order) {
          b.write(Primitive.Vector.write(this.order, Primitive.Int));
        }
        return b.buffer;
      }
    }
    messages2.UpdateDialogFiltersOrder = UpdateDialogFiltersOrder;
    class GetOldFeaturedStickers extends TLObject {
      __response__;
      offset;
      limit;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetOldFeaturedStickers';
        this.constructorId = 2127598753;
        this.subclassOfId = 638891810;
        this._slots = ['offset', 'limit', 'hash'];
        this.offset = params.offset;
        this.limit = params.limit;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let offset = await Primitive.Int.read(b);
        let limit = await Primitive.Int.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetOldFeaturedStickers({
          offset,
          limit,
          hash,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.offset !== void 0) {
          b.write(Primitive.Int.write(this.offset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetOldFeaturedStickers = GetOldFeaturedStickers;
    class GetReplies extends TLObject {
      __response__;
      peer;
      msgId;
      offsetId;
      offsetDate;
      addOffset;
      limit;
      maxId;
      minId;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetReplies';
        this.constructorId = 584962828;
        this.subclassOfId = 3568569182;
        this._slots = [
          'peer',
          'msgId',
          'offsetId',
          'offsetDate',
          'addOffset',
          'limit',
          'maxId',
          'minId',
          'hash',
        ];
        this.peer = params.peer;
        this.msgId = params.msgId;
        this.offsetId = params.offsetId;
        this.offsetDate = params.offsetDate;
        this.addOffset = params.addOffset;
        this.limit = params.limit;
        this.maxId = params.maxId;
        this.minId = params.minId;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let msgId = await Primitive.Int.read(b);
        let offsetId = await Primitive.Int.read(b);
        let offsetDate = await Primitive.Int.read(b);
        let addOffset = await Primitive.Int.read(b);
        let limit = await Primitive.Int.read(b);
        let maxId = await Primitive.Int.read(b);
        let minId = await Primitive.Int.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetReplies({
          peer,
          msgId,
          offsetId,
          offsetDate,
          addOffset,
          limit,
          maxId,
          minId,
          hash,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        if (this.offsetId !== void 0) {
          b.write(Primitive.Int.write(this.offsetId));
        }
        if (this.offsetDate !== void 0) {
          b.write(Primitive.Int.write(this.offsetDate));
        }
        if (this.addOffset !== void 0) {
          b.write(Primitive.Int.write(this.addOffset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        if (this.maxId !== void 0) {
          b.write(Primitive.Int.write(this.maxId));
        }
        if (this.minId !== void 0) {
          b.write(Primitive.Int.write(this.minId));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetReplies = GetReplies;
    class GetDiscussionMessage extends TLObject {
      __response__;
      peer;
      msgId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetDiscussionMessage';
        this.constructorId = 1147761405;
        this.subclassOfId = 1408820200;
        this._slots = ['peer', 'msgId'];
        this.peer = params.peer;
        this.msgId = params.msgId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let msgId = await Primitive.Int.read(b);
        return new Raw2.messages.GetDiscussionMessage({ peer, msgId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        return b.buffer;
      }
    }
    messages2.GetDiscussionMessage = GetDiscussionMessage;
    class ReadDiscussion extends TLObject {
      __response__;
      peer;
      msgId;
      readMaxId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ReadDiscussion';
        this.constructorId = 4147227124;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'msgId', 'readMaxId'];
        this.peer = params.peer;
        this.msgId = params.msgId;
        this.readMaxId = params.readMaxId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let msgId = await Primitive.Int.read(b);
        let readMaxId = await Primitive.Int.read(b);
        return new Raw2.messages.ReadDiscussion({ peer, msgId, readMaxId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        if (this.readMaxId !== void 0) {
          b.write(Primitive.Int.write(this.readMaxId));
        }
        return b.buffer;
      }
    }
    messages2.ReadDiscussion = ReadDiscussion;
    class UnpinAllMessages extends TLObject {
      __response__;
      peer;
      topMsgId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.UnpinAllMessages';
        this.constructorId = 3995253160;
        this.subclassOfId = 743031062;
        this._slots = ['peer', 'topMsgId'];
        this.peer = params.peer;
        this.topMsgId = params.topMsgId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = await TLObject.read(b);
        let topMsgId = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.messages.UnpinAllMessages({ peer, topMsgId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.topMsgId !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.topMsgId !== void 0) {
          b.write(Primitive.Int.write(this.topMsgId));
        }
        return b.buffer;
      }
    }
    messages2.UnpinAllMessages = UnpinAllMessages;
    class DeleteChat extends TLObject {
      __response__;
      chatId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.DeleteChat';
        this.constructorId = 1540419152;
        this.subclassOfId = 4122188204;
        this._slots = ['chatId'];
        this.chatId = params.chatId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let chatId = await Primitive.Long.read(b);
        return new Raw2.messages.DeleteChat({ chatId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.chatId !== void 0) {
          b.write(Primitive.Long.write(this.chatId));
        }
        return b.buffer;
      }
    }
    messages2.DeleteChat = DeleteChat;
    class DeletePhoneCallHistory extends TLObject {
      __response__;
      revoke;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.DeletePhoneCallHistory';
        this.constructorId = 4190888969;
        this.subclassOfId = 4162282798;
        this._slots = ['revoke'];
        this.revoke = params.revoke;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let revoke = flags & (1 << 0) ? true : false;
        return new Raw2.messages.DeletePhoneCallHistory({ revoke });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.revoke ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        return b.buffer;
      }
    }
    messages2.DeletePhoneCallHistory = DeletePhoneCallHistory;
    class CheckHistoryImport extends TLObject {
      __response__;
      importHead;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.CheckHistoryImport';
        this.constructorId = 1140726259;
        this.subclassOfId = 1538421259;
        this._slots = ['importHead'];
        this.importHead = params.importHead;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let importHead = await Primitive.String.read(b);
        return new Raw2.messages.CheckHistoryImport({ importHead });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.importHead !== void 0) {
          b.write(Primitive.String.write(this.importHead));
        }
        return b.buffer;
      }
    }
    messages2.CheckHistoryImport = CheckHistoryImport;
    class InitHistoryImport extends TLObject {
      __response__;
      peer;
      file;
      mediaCount;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.InitHistoryImport';
        this.constructorId = 873008187;
        this.subclassOfId = 2978723082;
        this._slots = ['peer', 'file', 'mediaCount'];
        this.peer = params.peer;
        this.file = params.file;
        this.mediaCount = params.mediaCount;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let file = await TLObject.read(b);
        let mediaCount = await Primitive.Int.read(b);
        return new Raw2.messages.InitHistoryImport({
          peer,
          file,
          mediaCount,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.file !== void 0) {
          b.write(this.file.write());
        }
        if (this.mediaCount !== void 0) {
          b.write(Primitive.Int.write(this.mediaCount));
        }
        return b.buffer;
      }
    }
    messages2.InitHistoryImport = InitHistoryImport;
    class UploadImportedMedia extends TLObject {
      __response__;
      peer;
      importId;
      fileName;
      media;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.UploadImportedMedia';
        this.constructorId = 713433234;
        this.subclassOfId = 1198308914;
        this._slots = ['peer', 'importId', 'fileName', 'media'];
        this.peer = params.peer;
        this.importId = params.importId;
        this.fileName = params.fileName;
        this.media = params.media;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let importId = await Primitive.Long.read(b);
        let fileName = await Primitive.String.read(b);
        let media = await TLObject.read(b);
        return new Raw2.messages.UploadImportedMedia({
          peer,
          importId,
          fileName,
          media,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.importId !== void 0) {
          b.write(Primitive.Long.write(this.importId));
        }
        if (this.fileName !== void 0) {
          b.write(Primitive.String.write(this.fileName));
        }
        if (this.media !== void 0) {
          b.write(this.media.write());
        }
        return b.buffer;
      }
    }
    messages2.UploadImportedMedia = UploadImportedMedia;
    class StartHistoryImport extends TLObject {
      __response__;
      peer;
      importId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.StartHistoryImport';
        this.constructorId = 3023958852;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'importId'];
        this.peer = params.peer;
        this.importId = params.importId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let importId = await Primitive.Long.read(b);
        return new Raw2.messages.StartHistoryImport({ peer, importId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.importId !== void 0) {
          b.write(Primitive.Long.write(this.importId));
        }
        return b.buffer;
      }
    }
    messages2.StartHistoryImport = StartHistoryImport;
    class GetExportedChatInvites extends TLObject {
      __response__;
      revoked;
      peer;
      adminId;
      offsetDate;
      offsetLink;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetExportedChatInvites';
        this.constructorId = 2729812982;
        this.subclassOfId = 1614624881;
        this._slots = ['revoked', 'peer', 'adminId', 'offsetDate', 'offsetLink', 'limit'];
        this.revoked = params.revoked;
        this.peer = params.peer;
        this.adminId = params.adminId;
        this.offsetDate = params.offsetDate;
        this.offsetLink = params.offsetLink;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let revoked = flags & (1 << 3) ? true : false;
        let peer = await TLObject.read(b);
        let adminId = await TLObject.read(b);
        let offsetDate = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
        let offsetLink = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
        let limit = await Primitive.Int.read(b);
        return new Raw2.messages.GetExportedChatInvites({
          revoked,
          peer,
          adminId,
          offsetDate,
          offsetLink,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.revoked ? 1 << 3 : 0;
        flags |= this.offsetDate !== void 0 ? 1 << 2 : 0;
        flags |= this.offsetLink !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.adminId !== void 0) {
          b.write(this.adminId.write());
        }
        if (this.offsetDate !== void 0) {
          b.write(Primitive.Int.write(this.offsetDate));
        }
        if (this.offsetLink !== void 0) {
          b.write(Primitive.String.write(this.offsetLink));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    messages2.GetExportedChatInvites = GetExportedChatInvites;
    class GetExportedChatInvite extends TLObject {
      __response__;
      peer;
      link;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetExportedChatInvite';
        this.constructorId = 1937010524;
        this.subclassOfId = 2195510474;
        this._slots = ['peer', 'link'];
        this.peer = params.peer;
        this.link = params.link;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let link = await Primitive.String.read(b);
        return new Raw2.messages.GetExportedChatInvite({ peer, link });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.link !== void 0) {
          b.write(Primitive.String.write(this.link));
        }
        return b.buffer;
      }
    }
    messages2.GetExportedChatInvite = GetExportedChatInvite;
    class EditExportedChatInvite extends TLObject {
      __response__;
      revoked;
      peer;
      link;
      expireDate;
      usageLimit;
      requestNeeded;
      title;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.EditExportedChatInvite';
        this.constructorId = 3184144245;
        this.subclassOfId = 2195510474;
        this._slots = [
          'revoked',
          'peer',
          'link',
          'expireDate',
          'usageLimit',
          'requestNeeded',
          'title',
        ];
        this.revoked = params.revoked;
        this.peer = params.peer;
        this.link = params.link;
        this.expireDate = params.expireDate;
        this.usageLimit = params.usageLimit;
        this.requestNeeded = params.requestNeeded;
        this.title = params.title;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let revoked = flags & (1 << 2) ? true : false;
        let peer = await TLObject.read(b);
        let link = await Primitive.String.read(b);
        let expireDate = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        let usageLimit = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let requestNeeded = flags & (1 << 3) ? await Primitive.Bool.read(b) : void 0;
        let title = flags & (1 << 4) ? await Primitive.String.read(b) : void 0;
        return new Raw2.messages.EditExportedChatInvite({
          revoked,
          peer,
          link,
          expireDate,
          usageLimit,
          requestNeeded,
          title,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.revoked ? 1 << 2 : 0;
        flags |= this.expireDate !== void 0 ? 1 << 0 : 0;
        flags |= this.usageLimit !== void 0 ? 1 << 1 : 0;
        flags |= this.requestNeeded !== void 0 ? 1 << 3 : 0;
        flags |= this.title !== void 0 ? 1 << 4 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.link !== void 0) {
          b.write(Primitive.String.write(this.link));
        }
        if (this.expireDate !== void 0) {
          b.write(Primitive.Int.write(this.expireDate));
        }
        if (this.usageLimit !== void 0) {
          b.write(Primitive.Int.write(this.usageLimit));
        }
        if (this.requestNeeded !== void 0) {
          b.write(Primitive.Bool.write(this.requestNeeded));
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        return b.buffer;
      }
    }
    messages2.EditExportedChatInvite = EditExportedChatInvite;
    class DeleteRevokedExportedChatInvites extends TLObject {
      __response__;
      peer;
      adminId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.DeleteRevokedExportedChatInvites';
        this.constructorId = 1452833749;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'adminId'];
        this.peer = params.peer;
        this.adminId = params.adminId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let adminId = await TLObject.read(b);
        return new Raw2.messages.DeleteRevokedExportedChatInvites({ peer, adminId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.adminId !== void 0) {
          b.write(this.adminId.write());
        }
        return b.buffer;
      }
    }
    messages2.DeleteRevokedExportedChatInvites = DeleteRevokedExportedChatInvites;
    class DeleteExportedChatInvite extends TLObject {
      __response__;
      peer;
      link;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.DeleteExportedChatInvite';
        this.constructorId = 3563365419;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'link'];
        this.peer = params.peer;
        this.link = params.link;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let link = await Primitive.String.read(b);
        return new Raw2.messages.DeleteExportedChatInvite({ peer, link });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.link !== void 0) {
          b.write(Primitive.String.write(this.link));
        }
        return b.buffer;
      }
    }
    messages2.DeleteExportedChatInvite = DeleteExportedChatInvite;
    class GetAdminsWithInvites extends TLObject {
      __response__;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetAdminsWithInvites';
        this.constructorId = 958457583;
        this.subclassOfId = 2405149995;
        this._slots = ['peer'];
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        return new Raw2.messages.GetAdminsWithInvites({ peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    messages2.GetAdminsWithInvites = GetAdminsWithInvites;
    class GetChatInviteImporters extends TLObject {
      __response__;
      requested;
      peer;
      link;
      q;
      offsetDate;
      offsetUser;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetChatInviteImporters';
        this.constructorId = 3741637966;
        this.subclassOfId = 3653012134;
        this._slots = ['requested', 'peer', 'link', 'q', 'offsetDate', 'offsetUser', 'limit'];
        this.requested = params.requested;
        this.peer = params.peer;
        this.link = params.link;
        this.q = params.q;
        this.offsetDate = params.offsetDate;
        this.offsetUser = params.offsetUser;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let requested = flags & (1 << 0) ? true : false;
        let peer = await TLObject.read(b);
        let link = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let q = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
        let offsetDate = await Primitive.Int.read(b);
        let offsetUser = await TLObject.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.messages.GetChatInviteImporters({
          requested,
          peer,
          link,
          q,
          offsetDate,
          offsetUser,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.requested ? 1 << 0 : 0;
        flags |= this.link !== void 0 ? 1 << 1 : 0;
        flags |= this.q !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.link !== void 0) {
          b.write(Primitive.String.write(this.link));
        }
        if (this.q !== void 0) {
          b.write(Primitive.String.write(this.q));
        }
        if (this.offsetDate !== void 0) {
          b.write(Primitive.Int.write(this.offsetDate));
        }
        if (this.offsetUser !== void 0) {
          b.write(this.offsetUser.write());
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    messages2.GetChatInviteImporters = GetChatInviteImporters;
    class SetHistoryTTL extends TLObject {
      __response__;
      peer;
      period;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SetHistoryTTL';
        this.constructorId = 3087949796;
        this.subclassOfId = 2331323052;
        this._slots = ['peer', 'period'];
        this.peer = params.peer;
        this.period = params.period;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let period = await Primitive.Int.read(b);
        return new Raw2.messages.SetHistoryTTL({ peer, period });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.period !== void 0) {
          b.write(Primitive.Int.write(this.period));
        }
        return b.buffer;
      }
    }
    messages2.SetHistoryTTL = SetHistoryTTL;
    class CheckHistoryImportPeer extends TLObject {
      __response__;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.CheckHistoryImportPeer';
        this.constructorId = 1573261059;
        this.subclassOfId = 3091968823;
        this._slots = ['peer'];
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        return new Raw2.messages.CheckHistoryImportPeer({ peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    messages2.CheckHistoryImportPeer = CheckHistoryImportPeer;
    class SetChatTheme extends TLObject {
      __response__;
      peer;
      emoticon;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SetChatTheme';
        this.constructorId = 3862683967;
        this.subclassOfId = 2331323052;
        this._slots = ['peer', 'emoticon'];
        this.peer = params.peer;
        this.emoticon = params.emoticon;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let emoticon = await Primitive.String.read(b);
        return new Raw2.messages.SetChatTheme({ peer, emoticon });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.emoticon !== void 0) {
          b.write(Primitive.String.write(this.emoticon));
        }
        return b.buffer;
      }
    }
    messages2.SetChatTheme = SetChatTheme;
    class GetMessageReadParticipants extends TLObject {
      __response__;
      peer;
      msgId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetMessageReadParticipants';
        this.constructorId = 834782287;
        this.subclassOfId = 566904155;
        this._slots = ['peer', 'msgId'];
        this.peer = params.peer;
        this.msgId = params.msgId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let msgId = await Primitive.Int.read(b);
        return new Raw2.messages.GetMessageReadParticipants({ peer, msgId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        return b.buffer;
      }
    }
    messages2.GetMessageReadParticipants = GetMessageReadParticipants;
    class GetSearchResultsCalendar extends TLObject {
      __response__;
      peer;
      savedPeerId;
      filter;
      offsetId;
      offsetDate;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetSearchResultsCalendar';
        this.constructorId = 1789130429;
        this.subclassOfId = 2462409743;
        this._slots = ['peer', 'savedPeerId', 'filter', 'offsetId', 'offsetDate'];
        this.peer = params.peer;
        this.savedPeerId = params.savedPeerId;
        this.filter = params.filter;
        this.offsetId = params.offsetId;
        this.offsetDate = params.offsetDate;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = await TLObject.read(b);
        let savedPeerId = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let filter = await TLObject.read(b);
        let offsetId = await Primitive.Int.read(b);
        let offsetDate = await Primitive.Int.read(b);
        return new Raw2.messages.GetSearchResultsCalendar({
          peer,
          savedPeerId,
          filter,
          offsetId,
          offsetDate,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.savedPeerId !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.savedPeerId !== void 0) {
          b.write(this.savedPeerId.write());
        }
        if (this.filter !== void 0) {
          b.write(this.filter.write());
        }
        if (this.offsetId !== void 0) {
          b.write(Primitive.Int.write(this.offsetId));
        }
        if (this.offsetDate !== void 0) {
          b.write(Primitive.Int.write(this.offsetDate));
        }
        return b.buffer;
      }
    }
    messages2.GetSearchResultsCalendar = GetSearchResultsCalendar;
    class GetSearchResultsPositions extends TLObject {
      __response__;
      peer;
      savedPeerId;
      filter;
      offsetId;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetSearchResultsPositions';
        this.constructorId = 2625580816;
        this.subclassOfId = 3647172749;
        this._slots = ['peer', 'savedPeerId', 'filter', 'offsetId', 'limit'];
        this.peer = params.peer;
        this.savedPeerId = params.savedPeerId;
        this.filter = params.filter;
        this.offsetId = params.offsetId;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = await TLObject.read(b);
        let savedPeerId = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let filter = await TLObject.read(b);
        let offsetId = await Primitive.Int.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.messages.GetSearchResultsPositions({
          peer,
          savedPeerId,
          filter,
          offsetId,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.savedPeerId !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.savedPeerId !== void 0) {
          b.write(this.savedPeerId.write());
        }
        if (this.filter !== void 0) {
          b.write(this.filter.write());
        }
        if (this.offsetId !== void 0) {
          b.write(Primitive.Int.write(this.offsetId));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    messages2.GetSearchResultsPositions = GetSearchResultsPositions;
    class HideChatJoinRequest extends TLObject {
      __response__;
      approved;
      peer;
      userId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.HideChatJoinRequest';
        this.constructorId = 2145904661;
        this.subclassOfId = 2331323052;
        this._slots = ['approved', 'peer', 'userId'];
        this.approved = params.approved;
        this.peer = params.peer;
        this.userId = params.userId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let approved = flags & (1 << 0) ? true : false;
        let peer = await TLObject.read(b);
        let userId = await TLObject.read(b);
        return new Raw2.messages.HideChatJoinRequest({
          approved,
          peer,
          userId,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.approved ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        return b.buffer;
      }
    }
    messages2.HideChatJoinRequest = HideChatJoinRequest;
    class HideAllChatJoinRequests extends TLObject {
      __response__;
      approved;
      peer;
      link;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.HideAllChatJoinRequests';
        this.constructorId = 3766875370;
        this.subclassOfId = 2331323052;
        this._slots = ['approved', 'peer', 'link'];
        this.approved = params.approved;
        this.peer = params.peer;
        this.link = params.link;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let approved = flags & (1 << 0) ? true : false;
        let peer = await TLObject.read(b);
        let link = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        return new Raw2.messages.HideAllChatJoinRequests({
          approved,
          peer,
          link,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.approved ? 1 << 0 : 0;
        flags |= this.link !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.link !== void 0) {
          b.write(Primitive.String.write(this.link));
        }
        return b.buffer;
      }
    }
    messages2.HideAllChatJoinRequests = HideAllChatJoinRequests;
    class ToggleNoForwards extends TLObject {
      __response__;
      peer;
      enabled;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ToggleNoForwards';
        this.constructorId = 2971578274;
        this.subclassOfId = 2331323052;
        this._slots = ['peer', 'enabled'];
        this.peer = params.peer;
        this.enabled = params.enabled;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let enabled = await Primitive.Bool.read(b);
        return new Raw2.messages.ToggleNoForwards({ peer, enabled });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.enabled !== void 0) {
          b.write(Primitive.Bool.write(this.enabled));
        }
        return b.buffer;
      }
    }
    messages2.ToggleNoForwards = ToggleNoForwards;
    class SaveDefaultSendAs extends TLObject {
      __response__;
      peer;
      sendAs;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SaveDefaultSendAs';
        this.constructorId = 3439189910;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'sendAs'];
        this.peer = params.peer;
        this.sendAs = params.sendAs;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let sendAs = await TLObject.read(b);
        return new Raw2.messages.SaveDefaultSendAs({ peer, sendAs });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.sendAs !== void 0) {
          b.write(this.sendAs.write());
        }
        return b.buffer;
      }
    }
    messages2.SaveDefaultSendAs = SaveDefaultSendAs;
    class SendReaction extends TLObject {
      __response__;
      big;
      addToRecent;
      peer;
      msgId;
      reaction;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SendReaction';
        this.constructorId = 3540875476;
        this.subclassOfId = 2331323052;
        this._slots = ['big', 'addToRecent', 'peer', 'msgId', 'reaction'];
        this.big = params.big;
        this.addToRecent = params.addToRecent;
        this.peer = params.peer;
        this.msgId = params.msgId;
        this.reaction = params.reaction;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let big = flags & (1 << 1) ? true : false;
        let addToRecent = flags & (1 << 2) ? true : false;
        let peer = await TLObject.read(b);
        let msgId = await Primitive.Int.read(b);
        let reaction = flags & (1 << 0) ? await TLObject.read(b) : [];
        return new Raw2.messages.SendReaction({
          big,
          addToRecent,
          peer,
          msgId,
          reaction,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.big ? 1 << 1 : 0;
        flags |= this.addToRecent ? 1 << 2 : 0;
        flags |= this.reaction ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        if (this.reaction) {
          b.write(Primitive.Vector.write(this.reaction));
        }
        return b.buffer;
      }
    }
    messages2.SendReaction = SendReaction;
    class GetMessagesReactions extends TLObject {
      __response__;
      peer;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetMessagesReactions';
        this.constructorId = 2344259814;
        this.subclassOfId = 2331323052;
        this._slots = ['peer', 'id'];
        this.peer = params.peer;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        return new Raw2.messages.GetMessagesReactions({ peer, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        return b.buffer;
      }
    }
    messages2.GetMessagesReactions = GetMessagesReactions;
    class GetMessageReactionsList extends TLObject {
      __response__;
      peer;
      id;
      reaction;
      offset;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetMessageReactionsList';
        this.constructorId = 1176190792;
        this.subclassOfId = 1627186662;
        this._slots = ['peer', 'id', 'reaction', 'offset', 'limit'];
        this.peer = params.peer;
        this.id = params.id;
        this.reaction = params.reaction;
        this.offset = params.offset;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = await TLObject.read(b);
        let id = await Primitive.Int.read(b);
        let reaction = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let offset = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let limit = await Primitive.Int.read(b);
        return new Raw2.messages.GetMessageReactionsList({
          peer,
          id,
          reaction,
          offset,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.reaction !== void 0 ? 1 << 0 : 0;
        flags |= this.offset !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id !== void 0) {
          b.write(Primitive.Int.write(this.id));
        }
        if (this.reaction !== void 0) {
          b.write(this.reaction.write());
        }
        if (this.offset !== void 0) {
          b.write(Primitive.String.write(this.offset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    messages2.GetMessageReactionsList = GetMessageReactionsList;
    class SetChatAvailableReactions extends TLObject {
      __response__;
      peer;
      availableReactions;
      reactionsLimit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SetChatAvailableReactions';
        this.constructorId = 1511328724;
        this.subclassOfId = 2331323052;
        this._slots = ['peer', 'availableReactions', 'reactionsLimit'];
        this.peer = params.peer;
        this.availableReactions = params.availableReactions;
        this.reactionsLimit = params.reactionsLimit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = await TLObject.read(b);
        let availableReactions = await TLObject.read(b);
        let reactionsLimit = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.messages.SetChatAvailableReactions({
          peer,
          availableReactions,
          reactionsLimit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.reactionsLimit !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.availableReactions !== void 0) {
          b.write(this.availableReactions.write());
        }
        if (this.reactionsLimit !== void 0) {
          b.write(Primitive.Int.write(this.reactionsLimit));
        }
        return b.buffer;
      }
    }
    messages2.SetChatAvailableReactions = SetChatAvailableReactions;
    class GetAvailableReactions extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetAvailableReactions';
        this.constructorId = 417243308;
        this.subclassOfId = 3827740034;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Int.read(b);
        return new Raw2.messages.GetAvailableReactions({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetAvailableReactions = GetAvailableReactions;
    class SetDefaultReaction extends TLObject {
      __response__;
      reaction;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SetDefaultReaction';
        this.constructorId = 1330094102;
        this.subclassOfId = 4122188204;
        this._slots = ['reaction'];
        this.reaction = params.reaction;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let reaction = await TLObject.read(b);
        return new Raw2.messages.SetDefaultReaction({ reaction });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.reaction !== void 0) {
          b.write(this.reaction.write());
        }
        return b.buffer;
      }
    }
    messages2.SetDefaultReaction = SetDefaultReaction;
    class TranslateText extends TLObject {
      __response__;
      peer;
      id;
      text;
      toLang;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.TranslateText';
        this.constructorId = 1662529584;
        this.subclassOfId = 37897192;
        this._slots = ['peer', 'id', 'text', 'toLang'];
        this.peer = params.peer;
        this.id = params.id;
        this.text = params.text;
        this.toLang = params.toLang;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let id = flags & (1 << 0) ? await TLObject.read(b, Primitive.Int) : [];
        let text = flags & (1 << 1) ? await TLObject.read(b) : [];
        let toLang = await Primitive.String.read(b);
        return new Raw2.messages.TranslateText({ peer, id, text, toLang });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.peer !== void 0 ? 1 << 0 : 0;
        flags |= this.id ? 1 << 0 : 0;
        flags |= this.text ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        if (this.text) {
          b.write(Primitive.Vector.write(this.text));
        }
        if (this.toLang !== void 0) {
          b.write(Primitive.String.write(this.toLang));
        }
        return b.buffer;
      }
    }
    messages2.TranslateText = TranslateText;
    class GetUnreadReactions extends TLObject {
      __response__;
      peer;
      topMsgId;
      offsetId;
      addOffset;
      limit;
      maxId;
      minId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetUnreadReactions';
        this.constructorId = 841173339;
        this.subclassOfId = 3568569182;
        this._slots = ['peer', 'topMsgId', 'offsetId', 'addOffset', 'limit', 'maxId', 'minId'];
        this.peer = params.peer;
        this.topMsgId = params.topMsgId;
        this.offsetId = params.offsetId;
        this.addOffset = params.addOffset;
        this.limit = params.limit;
        this.maxId = params.maxId;
        this.minId = params.minId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = await TLObject.read(b);
        let topMsgId = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        let offsetId = await Primitive.Int.read(b);
        let addOffset = await Primitive.Int.read(b);
        let limit = await Primitive.Int.read(b);
        let maxId = await Primitive.Int.read(b);
        let minId = await Primitive.Int.read(b);
        return new Raw2.messages.GetUnreadReactions({
          peer,
          topMsgId,
          offsetId,
          addOffset,
          limit,
          maxId,
          minId,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.topMsgId !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.topMsgId !== void 0) {
          b.write(Primitive.Int.write(this.topMsgId));
        }
        if (this.offsetId !== void 0) {
          b.write(Primitive.Int.write(this.offsetId));
        }
        if (this.addOffset !== void 0) {
          b.write(Primitive.Int.write(this.addOffset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        if (this.maxId !== void 0) {
          b.write(Primitive.Int.write(this.maxId));
        }
        if (this.minId !== void 0) {
          b.write(Primitive.Int.write(this.minId));
        }
        return b.buffer;
      }
    }
    messages2.GetUnreadReactions = GetUnreadReactions;
    class ReadReactions extends TLObject {
      __response__;
      peer;
      topMsgId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ReadReactions';
        this.constructorId = 1420459918;
        this.subclassOfId = 743031062;
        this._slots = ['peer', 'topMsgId'];
        this.peer = params.peer;
        this.topMsgId = params.topMsgId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = await TLObject.read(b);
        let topMsgId = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.messages.ReadReactions({ peer, topMsgId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.topMsgId !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.topMsgId !== void 0) {
          b.write(Primitive.Int.write(this.topMsgId));
        }
        return b.buffer;
      }
    }
    messages2.ReadReactions = ReadReactions;
    class SearchSentMedia extends TLObject {
      __response__;
      q;
      filter;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SearchSentMedia';
        this.constructorId = 276705696;
        this.subclassOfId = 3568569182;
        this._slots = ['q', 'filter', 'limit'];
        this.q = params.q;
        this.filter = params.filter;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let q = await Primitive.String.read(b);
        let filter = await TLObject.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.messages.SearchSentMedia({ q, filter, limit });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.q !== void 0) {
          b.write(Primitive.String.write(this.q));
        }
        if (this.filter !== void 0) {
          b.write(this.filter.write());
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    messages2.SearchSentMedia = SearchSentMedia;
    class GetAttachMenuBots extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetAttachMenuBots';
        this.constructorId = 385663691;
        this.subclassOfId = 2217616346;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetAttachMenuBots({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetAttachMenuBots = GetAttachMenuBots;
    class GetAttachMenuBot extends TLObject {
      __response__;
      bot;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetAttachMenuBot';
        this.constructorId = 1998676370;
        this.subclassOfId = 3677587517;
        this._slots = ['bot'];
        this.bot = params.bot;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let bot = await TLObject.read(b);
        return new Raw2.messages.GetAttachMenuBot({ bot });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.bot !== void 0) {
          b.write(this.bot.write());
        }
        return b.buffer;
      }
    }
    messages2.GetAttachMenuBot = GetAttachMenuBot;
    class ToggleBotInAttachMenu extends TLObject {
      __response__;
      writeAllowed;
      bot;
      enabled;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ToggleBotInAttachMenu';
        this.constructorId = 1777704297;
        this.subclassOfId = 4122188204;
        this._slots = ['writeAllowed', 'bot', 'enabled'];
        this.writeAllowed = params.writeAllowed;
        this.bot = params.bot;
        this.enabled = params.enabled;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let writeAllowed = flags & (1 << 0) ? true : false;
        let bot = await TLObject.read(b);
        let enabled = await Primitive.Bool.read(b);
        return new Raw2.messages.ToggleBotInAttachMenu({
          writeAllowed,
          bot,
          enabled,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.writeAllowed ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.bot !== void 0) {
          b.write(this.bot.write());
        }
        if (this.enabled !== void 0) {
          b.write(Primitive.Bool.write(this.enabled));
        }
        return b.buffer;
      }
    }
    messages2.ToggleBotInAttachMenu = ToggleBotInAttachMenu;
    class RequestWebView extends TLObject {
      __response__;
      fromBotMenu;
      silent;
      peer;
      bot;
      url;
      startParam;
      themeParams;
      platform;
      replyTo;
      sendAs;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.RequestWebView';
        this.constructorId = 647873217;
        this.subclassOfId = 2479793990;
        this._slots = [
          'fromBotMenu',
          'silent',
          'peer',
          'bot',
          'url',
          'startParam',
          'themeParams',
          'platform',
          'replyTo',
          'sendAs',
        ];
        this.fromBotMenu = params.fromBotMenu;
        this.silent = params.silent;
        this.peer = params.peer;
        this.bot = params.bot;
        this.url = params.url;
        this.startParam = params.startParam;
        this.themeParams = params.themeParams;
        this.platform = params.platform;
        this.replyTo = params.replyTo;
        this.sendAs = params.sendAs;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let fromBotMenu = flags & (1 << 4) ? true : false;
        let silent = flags & (1 << 5) ? true : false;
        let peer = await TLObject.read(b);
        let bot = await TLObject.read(b);
        let url = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let startParam = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
        let themeParams = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let platform = await Primitive.String.read(b);
        let replyTo = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let sendAs = flags & (1 << 13) ? await TLObject.read(b) : void 0;
        return new Raw2.messages.RequestWebView({
          fromBotMenu,
          silent,
          peer,
          bot,
          url,
          startParam,
          themeParams,
          platform,
          replyTo,
          sendAs,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.fromBotMenu ? 1 << 4 : 0;
        flags |= this.silent ? 1 << 5 : 0;
        flags |= this.url !== void 0 ? 1 << 1 : 0;
        flags |= this.startParam !== void 0 ? 1 << 3 : 0;
        flags |= this.themeParams !== void 0 ? 1 << 2 : 0;
        flags |= this.replyTo !== void 0 ? 1 << 0 : 0;
        flags |= this.sendAs !== void 0 ? 1 << 13 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.bot !== void 0) {
          b.write(this.bot.write());
        }
        if (this.url !== void 0) {
          b.write(Primitive.String.write(this.url));
        }
        if (this.startParam !== void 0) {
          b.write(Primitive.String.write(this.startParam));
        }
        if (this.themeParams !== void 0) {
          b.write(this.themeParams.write());
        }
        if (this.platform !== void 0) {
          b.write(Primitive.String.write(this.platform));
        }
        if (this.replyTo !== void 0) {
          b.write(this.replyTo.write());
        }
        if (this.sendAs !== void 0) {
          b.write(this.sendAs.write());
        }
        return b.buffer;
      }
    }
    messages2.RequestWebView = RequestWebView;
    class ProlongWebView extends TLObject {
      __response__;
      silent;
      peer;
      bot;
      queryId;
      replyTo;
      sendAs;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ProlongWebView';
        this.constructorId = 2966952579;
        this.subclassOfId = 4122188204;
        this._slots = ['silent', 'peer', 'bot', 'queryId', 'replyTo', 'sendAs'];
        this.silent = params.silent;
        this.peer = params.peer;
        this.bot = params.bot;
        this.queryId = params.queryId;
        this.replyTo = params.replyTo;
        this.sendAs = params.sendAs;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let silent = flags & (1 << 5) ? true : false;
        let peer = await TLObject.read(b);
        let bot = await TLObject.read(b);
        let queryId = await Primitive.Long.read(b);
        let replyTo = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let sendAs = flags & (1 << 13) ? await TLObject.read(b) : void 0;
        return new Raw2.messages.ProlongWebView({
          silent,
          peer,
          bot,
          queryId,
          replyTo,
          sendAs,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.silent ? 1 << 5 : 0;
        flags |= this.replyTo !== void 0 ? 1 << 0 : 0;
        flags |= this.sendAs !== void 0 ? 1 << 13 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.bot !== void 0) {
          b.write(this.bot.write());
        }
        if (this.queryId !== void 0) {
          b.write(Primitive.Long.write(this.queryId));
        }
        if (this.replyTo !== void 0) {
          b.write(this.replyTo.write());
        }
        if (this.sendAs !== void 0) {
          b.write(this.sendAs.write());
        }
        return b.buffer;
      }
    }
    messages2.ProlongWebView = ProlongWebView;
    class RequestSimpleWebView extends TLObject {
      __response__;
      fromSwitchWebview;
      fromSideMenu;
      bot;
      url;
      startParam;
      themeParams;
      platform;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.RequestSimpleWebView';
        this.constructorId = 440815626;
        this.subclassOfId = 367977435;
        this._slots = [
          'fromSwitchWebview',
          'fromSideMenu',
          'bot',
          'url',
          'startParam',
          'themeParams',
          'platform',
        ];
        this.fromSwitchWebview = params.fromSwitchWebview;
        this.fromSideMenu = params.fromSideMenu;
        this.bot = params.bot;
        this.url = params.url;
        this.startParam = params.startParam;
        this.themeParams = params.themeParams;
        this.platform = params.platform;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let fromSwitchWebview = flags & (1 << 1) ? true : false;
        let fromSideMenu = flags & (1 << 2) ? true : false;
        let bot = await TLObject.read(b);
        let url = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
        let startParam = flags & (1 << 4) ? await Primitive.String.read(b) : void 0;
        let themeParams = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let platform = await Primitive.String.read(b);
        return new Raw2.messages.RequestSimpleWebView({
          fromSwitchWebview,
          fromSideMenu,
          bot,
          url,
          startParam,
          themeParams,
          platform,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.fromSwitchWebview ? 1 << 1 : 0;
        flags |= this.fromSideMenu ? 1 << 2 : 0;
        flags |= this.url !== void 0 ? 1 << 3 : 0;
        flags |= this.startParam !== void 0 ? 1 << 4 : 0;
        flags |= this.themeParams !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.bot !== void 0) {
          b.write(this.bot.write());
        }
        if (this.url !== void 0) {
          b.write(Primitive.String.write(this.url));
        }
        if (this.startParam !== void 0) {
          b.write(Primitive.String.write(this.startParam));
        }
        if (this.themeParams !== void 0) {
          b.write(this.themeParams.write());
        }
        if (this.platform !== void 0) {
          b.write(Primitive.String.write(this.platform));
        }
        return b.buffer;
      }
    }
    messages2.RequestSimpleWebView = RequestSimpleWebView;
    class SendWebViewResultMessage extends TLObject {
      __response__;
      botQueryId;
      result;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SendWebViewResultMessage';
        this.constructorId = 172168437;
        this.subclassOfId = 1977914130;
        this._slots = ['botQueryId', 'result'];
        this.botQueryId = params.botQueryId;
        this.result = params.result;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let botQueryId = await Primitive.String.read(b);
        let result = await TLObject.read(b);
        return new Raw2.messages.SendWebViewResultMessage({
          botQueryId,
          result,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.botQueryId !== void 0) {
          b.write(Primitive.String.write(this.botQueryId));
        }
        if (this.result !== void 0) {
          b.write(this.result.write());
        }
        return b.buffer;
      }
    }
    messages2.SendWebViewResultMessage = SendWebViewResultMessage;
    class SendWebViewData extends TLObject {
      __response__;
      bot;
      randomId;
      buttonText;
      data;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SendWebViewData';
        this.constructorId = 3691135688;
        this.subclassOfId = 2331323052;
        this._slots = ['bot', 'randomId', 'buttonText', 'data'];
        this.bot = params.bot;
        this.randomId = params.randomId;
        this.buttonText = params.buttonText;
        this.data = params.data;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let bot = await TLObject.read(b);
        let randomId = await Primitive.Long.read(b);
        let buttonText = await Primitive.String.read(b);
        let data = await Primitive.String.read(b);
        return new Raw2.messages.SendWebViewData({
          bot,
          randomId,
          buttonText,
          data,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.bot !== void 0) {
          b.write(this.bot.write());
        }
        if (this.randomId !== void 0) {
          b.write(Primitive.Long.write(this.randomId));
        }
        if (this.buttonText !== void 0) {
          b.write(Primitive.String.write(this.buttonText));
        }
        if (this.data !== void 0) {
          b.write(Primitive.String.write(this.data));
        }
        return b.buffer;
      }
    }
    messages2.SendWebViewData = SendWebViewData;
    class TranscribeAudio extends TLObject {
      __response__;
      peer;
      msgId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.TranscribeAudio';
        this.constructorId = 647928393;
        this.subclassOfId = 565332278;
        this._slots = ['peer', 'msgId'];
        this.peer = params.peer;
        this.msgId = params.msgId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let msgId = await Primitive.Int.read(b);
        return new Raw2.messages.TranscribeAudio({ peer, msgId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        return b.buffer;
      }
    }
    messages2.TranscribeAudio = TranscribeAudio;
    class RateTranscribedAudio extends TLObject {
      __response__;
      peer;
      msgId;
      transcriptionId;
      good;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.RateTranscribedAudio';
        this.constructorId = 2132608815;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'msgId', 'transcriptionId', 'good'];
        this.peer = params.peer;
        this.msgId = params.msgId;
        this.transcriptionId = params.transcriptionId;
        this.good = params.good;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let msgId = await Primitive.Int.read(b);
        let transcriptionId = await Primitive.Long.read(b);
        let good = await Primitive.Bool.read(b);
        return new Raw2.messages.RateTranscribedAudio({
          peer,
          msgId,
          transcriptionId,
          good,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        if (this.transcriptionId !== void 0) {
          b.write(Primitive.Long.write(this.transcriptionId));
        }
        if (this.good !== void 0) {
          b.write(Primitive.Bool.write(this.good));
        }
        return b.buffer;
      }
    }
    messages2.RateTranscribedAudio = RateTranscribedAudio;
    class GetCustomEmojiDocuments extends TLObject {
      __response__;
      documentId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetCustomEmojiDocuments';
        this.constructorId = 3651866452;
        this.subclassOfId = 3428388360;
        this._slots = ['documentId'];
        this.documentId = params.documentId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let documentId = await TLObject.read(b, Primitive.Long);
        return new Raw2.messages.GetCustomEmojiDocuments({ documentId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.documentId) {
          b.write(Primitive.Vector.write(this.documentId, Primitive.Long));
        }
        return b.buffer;
      }
    }
    messages2.GetCustomEmojiDocuments = GetCustomEmojiDocuments;
    class GetEmojiStickers extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetEmojiStickers';
        this.constructorId = 4227637647;
        this.subclassOfId = 1166231593;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetEmojiStickers({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetEmojiStickers = GetEmojiStickers;
    class GetFeaturedEmojiStickers extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetFeaturedEmojiStickers';
        this.constructorId = 248473398;
        this.subclassOfId = 638891810;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetFeaturedEmojiStickers({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetFeaturedEmojiStickers = GetFeaturedEmojiStickers;
    class ReportReaction extends TLObject {
      __response__;
      peer;
      id;
      reactionPeer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ReportReaction';
        this.constructorId = 1063567478;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'id', 'reactionPeer'];
        this.peer = params.peer;
        this.id = params.id;
        this.reactionPeer = params.reactionPeer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await Primitive.Int.read(b);
        let reactionPeer = await TLObject.read(b);
        return new Raw2.messages.ReportReaction({ peer, id, reactionPeer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id !== void 0) {
          b.write(Primitive.Int.write(this.id));
        }
        if (this.reactionPeer !== void 0) {
          b.write(this.reactionPeer.write());
        }
        return b.buffer;
      }
    }
    messages2.ReportReaction = ReportReaction;
    class GetTopReactions extends TLObject {
      __response__;
      limit;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetTopReactions';
        this.constructorId = 3145803194;
        this.subclassOfId = 2915271460;
        this._slots = ['limit', 'hash'];
        this.limit = params.limit;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let limit = await Primitive.Int.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetTopReactions({ limit, hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetTopReactions = GetTopReactions;
    class GetRecentReactions extends TLObject {
      __response__;
      limit;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetRecentReactions';
        this.constructorId = 960896434;
        this.subclassOfId = 2915271460;
        this._slots = ['limit', 'hash'];
        this.limit = params.limit;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let limit = await Primitive.Int.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetRecentReactions({ limit, hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetRecentReactions = GetRecentReactions;
    class ClearRecentReactions extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'messages.ClearRecentReactions';
        this.constructorId = 2650730420;
        this.subclassOfId = 4122188204;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.ClearRecentReactions();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.ClearRecentReactions = ClearRecentReactions;
    class GetExtendedMedia extends TLObject {
      __response__;
      peer;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetExtendedMedia';
        this.constructorId = 2230847508;
        this.subclassOfId = 2331323052;
        this._slots = ['peer', 'id'];
        this.peer = params.peer;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        return new Raw2.messages.GetExtendedMedia({ peer, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        return b.buffer;
      }
    }
    messages2.GetExtendedMedia = GetExtendedMedia;
    class SetDefaultHistoryTTL extends TLObject {
      __response__;
      period;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SetDefaultHistoryTTL';
        this.constructorId = 2662667333;
        this.subclassOfId = 4122188204;
        this._slots = ['period'];
        this.period = params.period;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let period = await Primitive.Int.read(b);
        return new Raw2.messages.SetDefaultHistoryTTL({ period });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.period !== void 0) {
          b.write(Primitive.Int.write(this.period));
        }
        return b.buffer;
      }
    }
    messages2.SetDefaultHistoryTTL = SetDefaultHistoryTTL;
    class GetDefaultHistoryTTL extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetDefaultHistoryTTL';
        this.constructorId = 1703637384;
        this.subclassOfId = 4027396967;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.GetDefaultHistoryTTL();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.GetDefaultHistoryTTL = GetDefaultHistoryTTL;
    class SendBotRequestedPeer extends TLObject {
      __response__;
      peer;
      msgId;
      buttonId;
      requestedPeers;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SendBotRequestedPeer';
        this.constructorId = 2444415072;
        this.subclassOfId = 2331323052;
        this._slots = ['peer', 'msgId', 'buttonId', 'requestedPeers'];
        this.peer = params.peer;
        this.msgId = params.msgId;
        this.buttonId = params.buttonId;
        this.requestedPeers = params.requestedPeers;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let msgId = await Primitive.Int.read(b);
        let buttonId = await Primitive.Int.read(b);
        let requestedPeers = await TLObject.read(b);
        return new Raw2.messages.SendBotRequestedPeer({
          peer,
          msgId,
          buttonId,
          requestedPeers,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        if (this.buttonId !== void 0) {
          b.write(Primitive.Int.write(this.buttonId));
        }
        if (this.requestedPeers) {
          b.write(Primitive.Vector.write(this.requestedPeers));
        }
        return b.buffer;
      }
    }
    messages2.SendBotRequestedPeer = SendBotRequestedPeer;
    class GetEmojiGroups extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetEmojiGroups';
        this.constructorId = 1955122779;
        this.subclassOfId = 2127189465;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Int.read(b);
        return new Raw2.messages.GetEmojiGroups({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetEmojiGroups = GetEmojiGroups;
    class GetEmojiStatusGroups extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetEmojiStatusGroups';
        this.constructorId = 785209037;
        this.subclassOfId = 2127189465;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Int.read(b);
        return new Raw2.messages.GetEmojiStatusGroups({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetEmojiStatusGroups = GetEmojiStatusGroups;
    class GetEmojiProfilePhotoGroups extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetEmojiProfilePhotoGroups';
        this.constructorId = 564480243;
        this.subclassOfId = 2127189465;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Int.read(b);
        return new Raw2.messages.GetEmojiProfilePhotoGroups({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Int.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetEmojiProfilePhotoGroups = GetEmojiProfilePhotoGroups;
    class SearchCustomEmoji extends TLObject {
      __response__;
      emoticon;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SearchCustomEmoji';
        this.constructorId = 739360983;
        this.subclassOfId = 3169807034;
        this._slots = ['emoticon', 'hash'];
        this.emoticon = params.emoticon;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let emoticon = await Primitive.String.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.SearchCustomEmoji({ emoticon, hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.emoticon !== void 0) {
          b.write(Primitive.String.write(this.emoticon));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.SearchCustomEmoji = SearchCustomEmoji;
    class TogglePeerTranslations extends TLObject {
      __response__;
      disabled;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.TogglePeerTranslations';
        this.constructorId = 3833378169;
        this.subclassOfId = 4122188204;
        this._slots = ['disabled', 'peer'];
        this.disabled = params.disabled;
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let disabled = flags & (1 << 0) ? true : false;
        let peer = await TLObject.read(b);
        return new Raw2.messages.TogglePeerTranslations({ disabled, peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.disabled ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    messages2.TogglePeerTranslations = TogglePeerTranslations;
    class GetBotApp extends TLObject {
      __response__;
      app;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetBotApp';
        this.constructorId = 889046467;
        this.subclassOfId = 2406630311;
        this._slots = ['app', 'hash'];
        this.app = params.app;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let app = await TLObject.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetBotApp({ app, hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.app !== void 0) {
          b.write(this.app.write());
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetBotApp = GetBotApp;
    class RequestAppWebView extends TLObject {
      __response__;
      writeAllowed;
      peer;
      app;
      startParam;
      themeParams;
      platform;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.RequestAppWebView';
        this.constructorId = 2354723644;
        this.subclassOfId = 472163347;
        this._slots = ['writeAllowed', 'peer', 'app', 'startParam', 'themeParams', 'platform'];
        this.writeAllowed = params.writeAllowed;
        this.peer = params.peer;
        this.app = params.app;
        this.startParam = params.startParam;
        this.themeParams = params.themeParams;
        this.platform = params.platform;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let writeAllowed = flags & (1 << 0) ? true : false;
        let peer = await TLObject.read(b);
        let app = await TLObject.read(b);
        let startParam = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let themeParams = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let platform = await Primitive.String.read(b);
        return new Raw2.messages.RequestAppWebView({
          writeAllowed,
          peer,
          app,
          startParam,
          themeParams,
          platform,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.writeAllowed ? 1 << 0 : 0;
        flags |= this.startParam !== void 0 ? 1 << 1 : 0;
        flags |= this.themeParams !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.app !== void 0) {
          b.write(this.app.write());
        }
        if (this.startParam !== void 0) {
          b.write(Primitive.String.write(this.startParam));
        }
        if (this.themeParams !== void 0) {
          b.write(this.themeParams.write());
        }
        if (this.platform !== void 0) {
          b.write(Primitive.String.write(this.platform));
        }
        return b.buffer;
      }
    }
    messages2.RequestAppWebView = RequestAppWebView;
    class SetChatWallPaper extends TLObject {
      __response__;
      forBoth;
      revert;
      peer;
      wallpaper;
      settings;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SetChatWallPaper';
        this.constructorId = 2415577825;
        this.subclassOfId = 2331323052;
        this._slots = ['forBoth', 'revert', 'peer', 'wallpaper', 'settings', 'id'];
        this.forBoth = params.forBoth;
        this.revert = params.revert;
        this.peer = params.peer;
        this.wallpaper = params.wallpaper;
        this.settings = params.settings;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let forBoth = flags & (1 << 3) ? true : false;
        let revert = flags & (1 << 4) ? true : false;
        let peer = await TLObject.read(b);
        let wallpaper = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let settings = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let id = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.messages.SetChatWallPaper({
          forBoth,
          revert,
          peer,
          wallpaper,
          settings,
          id,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.forBoth ? 1 << 3 : 0;
        flags |= this.revert ? 1 << 4 : 0;
        flags |= this.wallpaper !== void 0 ? 1 << 0 : 0;
        flags |= this.settings !== void 0 ? 1 << 2 : 0;
        flags |= this.id !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.wallpaper !== void 0) {
          b.write(this.wallpaper.write());
        }
        if (this.settings !== void 0) {
          b.write(this.settings.write());
        }
        if (this.id !== void 0) {
          b.write(Primitive.Int.write(this.id));
        }
        return b.buffer;
      }
    }
    messages2.SetChatWallPaper = SetChatWallPaper;
    class SearchEmojiStickerSets extends TLObject {
      __response__;
      excludeFeatured;
      q;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SearchEmojiStickerSets';
        this.constructorId = 2461288780;
        this.subclassOfId = 68023137;
        this._slots = ['excludeFeatured', 'q', 'hash'];
        this.excludeFeatured = params.excludeFeatured;
        this.q = params.q;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let excludeFeatured = flags & (1 << 0) ? true : false;
        let q = await Primitive.String.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.SearchEmojiStickerSets({
          excludeFeatured,
          q,
          hash,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.excludeFeatured ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.q !== void 0) {
          b.write(Primitive.String.write(this.q));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.SearchEmojiStickerSets = SearchEmojiStickerSets;
    class GetSavedDialogs extends TLObject {
      __response__;
      excludePinned;
      offsetDate;
      offsetId;
      offsetPeer;
      limit;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetSavedDialogs';
        this.constructorId = 1401016858;
        this.subclassOfId = 1632352382;
        this._slots = ['excludePinned', 'offsetDate', 'offsetId', 'offsetPeer', 'limit', 'hash'];
        this.excludePinned = params.excludePinned;
        this.offsetDate = params.offsetDate;
        this.offsetId = params.offsetId;
        this.offsetPeer = params.offsetPeer;
        this.limit = params.limit;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let excludePinned = flags & (1 << 0) ? true : false;
        let offsetDate = await Primitive.Int.read(b);
        let offsetId = await Primitive.Int.read(b);
        let offsetPeer = await TLObject.read(b);
        let limit = await Primitive.Int.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetSavedDialogs({
          excludePinned,
          offsetDate,
          offsetId,
          offsetPeer,
          limit,
          hash,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.excludePinned ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.offsetDate !== void 0) {
          b.write(Primitive.Int.write(this.offsetDate));
        }
        if (this.offsetId !== void 0) {
          b.write(Primitive.Int.write(this.offsetId));
        }
        if (this.offsetPeer !== void 0) {
          b.write(this.offsetPeer.write());
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetSavedDialogs = GetSavedDialogs;
    class GetSavedHistory extends TLObject {
      __response__;
      peer;
      offsetId;
      offsetDate;
      addOffset;
      limit;
      maxId;
      minId;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetSavedHistory';
        this.constructorId = 1033519437;
        this.subclassOfId = 3568569182;
        this._slots = [
          'peer',
          'offsetId',
          'offsetDate',
          'addOffset',
          'limit',
          'maxId',
          'minId',
          'hash',
        ];
        this.peer = params.peer;
        this.offsetId = params.offsetId;
        this.offsetDate = params.offsetDate;
        this.addOffset = params.addOffset;
        this.limit = params.limit;
        this.maxId = params.maxId;
        this.minId = params.minId;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let offsetId = await Primitive.Int.read(b);
        let offsetDate = await Primitive.Int.read(b);
        let addOffset = await Primitive.Int.read(b);
        let limit = await Primitive.Int.read(b);
        let maxId = await Primitive.Int.read(b);
        let minId = await Primitive.Int.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetSavedHistory({
          peer,
          offsetId,
          offsetDate,
          addOffset,
          limit,
          maxId,
          minId,
          hash,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.offsetId !== void 0) {
          b.write(Primitive.Int.write(this.offsetId));
        }
        if (this.offsetDate !== void 0) {
          b.write(Primitive.Int.write(this.offsetDate));
        }
        if (this.addOffset !== void 0) {
          b.write(Primitive.Int.write(this.addOffset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        if (this.maxId !== void 0) {
          b.write(Primitive.Int.write(this.maxId));
        }
        if (this.minId !== void 0) {
          b.write(Primitive.Int.write(this.minId));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetSavedHistory = GetSavedHistory;
    class DeleteSavedHistory extends TLObject {
      __response__;
      peer;
      maxId;
      minDate;
      maxDate;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.DeleteSavedHistory';
        this.constructorId = 1855459371;
        this.subclassOfId = 743031062;
        this._slots = ['peer', 'maxId', 'minDate', 'maxDate'];
        this.peer = params.peer;
        this.maxId = params.maxId;
        this.minDate = params.minDate;
        this.maxDate = params.maxDate;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = await TLObject.read(b);
        let maxId = await Primitive.Int.read(b);
        let minDate = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
        let maxDate = flags & (1 << 3) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.messages.DeleteSavedHistory({
          peer,
          maxId,
          minDate,
          maxDate,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.minDate !== void 0 ? 1 << 2 : 0;
        flags |= this.maxDate !== void 0 ? 1 << 3 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.maxId !== void 0) {
          b.write(Primitive.Int.write(this.maxId));
        }
        if (this.minDate !== void 0) {
          b.write(Primitive.Int.write(this.minDate));
        }
        if (this.maxDate !== void 0) {
          b.write(Primitive.Int.write(this.maxDate));
        }
        return b.buffer;
      }
    }
    messages2.DeleteSavedHistory = DeleteSavedHistory;
    class GetPinnedSavedDialogs extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetPinnedSavedDialogs';
        this.constructorId = 3594360032;
        this.subclassOfId = 1632352382;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.messages.GetPinnedSavedDialogs();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    messages2.GetPinnedSavedDialogs = GetPinnedSavedDialogs;
    class ToggleSavedDialogPin extends TLObject {
      __response__;
      pinned;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ToggleSavedDialogPin';
        this.constructorId = 2894183390;
        this.subclassOfId = 4122188204;
        this._slots = ['pinned', 'peer'];
        this.pinned = params.pinned;
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let pinned = flags & (1 << 0) ? true : false;
        let peer = await TLObject.read(b);
        return new Raw2.messages.ToggleSavedDialogPin({ pinned, peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.pinned ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    messages2.ToggleSavedDialogPin = ToggleSavedDialogPin;
    class ReorderPinnedSavedDialogs extends TLObject {
      __response__;
      force;
      order;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ReorderPinnedSavedDialogs';
        this.constructorId = 2339464583;
        this.subclassOfId = 4122188204;
        this._slots = ['force', 'order'];
        this.force = params.force;
        this.order = params.order;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let force = flags & (1 << 0) ? true : false;
        let order = await TLObject.read(b);
        return new Raw2.messages.ReorderPinnedSavedDialogs({ force, order });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.force ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.order) {
          b.write(Primitive.Vector.write(this.order));
        }
        return b.buffer;
      }
    }
    messages2.ReorderPinnedSavedDialogs = ReorderPinnedSavedDialogs;
    class GetSavedReactionTags extends TLObject {
      __response__;
      peer;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetSavedReactionTags';
        this.constructorId = 909631579;
        this.subclassOfId = 2744867811;
        this._slots = ['peer', 'hash'];
        this.peer = params.peer;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetSavedReactionTags({ peer, hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.peer !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetSavedReactionTags = GetSavedReactionTags;
    class UpdateSavedReactionTag extends TLObject {
      __response__;
      reaction;
      title;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.UpdateSavedReactionTag';
        this.constructorId = 1613331948;
        this.subclassOfId = 4122188204;
        this._slots = ['reaction', 'title'];
        this.reaction = params.reaction;
        this.title = params.title;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let reaction = await TLObject.read(b);
        let title = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        return new Raw2.messages.UpdateSavedReactionTag({ reaction, title });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.title !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.reaction !== void 0) {
          b.write(this.reaction.write());
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        return b.buffer;
      }
    }
    messages2.UpdateSavedReactionTag = UpdateSavedReactionTag;
    class GetDefaultTagReactions extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetDefaultTagReactions';
        this.constructorId = 3187225640;
        this.subclassOfId = 2915271460;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetDefaultTagReactions({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetDefaultTagReactions = GetDefaultTagReactions;
    class GetOutboxReadDate extends TLObject {
      __response__;
      peer;
      msgId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetOutboxReadDate';
        this.constructorId = 2353790557;
        this.subclassOfId = 1867613126;
        this._slots = ['peer', 'msgId'];
        this.peer = params.peer;
        this.msgId = params.msgId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let msgId = await Primitive.Int.read(b);
        return new Raw2.messages.GetOutboxReadDate({ peer, msgId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        return b.buffer;
      }
    }
    messages2.GetOutboxReadDate = GetOutboxReadDate;
    class GetQuickReplies extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetQuickReplies';
        this.constructorId = 3565417128;
        this.subclassOfId = 4147636582;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetQuickReplies({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetQuickReplies = GetQuickReplies;
    class ReorderQuickReplies extends TLObject {
      __response__;
      order;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ReorderQuickReplies';
        this.constructorId = 1613961479;
        this.subclassOfId = 4122188204;
        this._slots = ['order'];
        this.order = params.order;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let order = await TLObject.read(b, Primitive.Int);
        return new Raw2.messages.ReorderQuickReplies({ order });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.order) {
          b.write(Primitive.Vector.write(this.order, Primitive.Int));
        }
        return b.buffer;
      }
    }
    messages2.ReorderQuickReplies = ReorderQuickReplies;
    class CheckQuickReplyShortcut extends TLObject {
      __response__;
      shortcut;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.CheckQuickReplyShortcut';
        this.constructorId = 4057005011;
        this.subclassOfId = 4122188204;
        this._slots = ['shortcut'];
        this.shortcut = params.shortcut;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let shortcut = await Primitive.String.read(b);
        return new Raw2.messages.CheckQuickReplyShortcut({ shortcut });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.shortcut !== void 0) {
          b.write(Primitive.String.write(this.shortcut));
        }
        return b.buffer;
      }
    }
    messages2.CheckQuickReplyShortcut = CheckQuickReplyShortcut;
    class EditQuickReplyShortcut extends TLObject {
      __response__;
      shortcutId;
      shortcut;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.EditQuickReplyShortcut';
        this.constructorId = 1543519471;
        this.subclassOfId = 4122188204;
        this._slots = ['shortcutId', 'shortcut'];
        this.shortcutId = params.shortcutId;
        this.shortcut = params.shortcut;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let shortcutId = await Primitive.Int.read(b);
        let shortcut = await Primitive.String.read(b);
        return new Raw2.messages.EditQuickReplyShortcut({
          shortcutId,
          shortcut,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.shortcutId !== void 0) {
          b.write(Primitive.Int.write(this.shortcutId));
        }
        if (this.shortcut !== void 0) {
          b.write(Primitive.String.write(this.shortcut));
        }
        return b.buffer;
      }
    }
    messages2.EditQuickReplyShortcut = EditQuickReplyShortcut;
    class DeleteQuickReplyShortcut extends TLObject {
      __response__;
      shortcutId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.DeleteQuickReplyShortcut';
        this.constructorId = 1019234112;
        this.subclassOfId = 4122188204;
        this._slots = ['shortcutId'];
        this.shortcutId = params.shortcutId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let shortcutId = await Primitive.Int.read(b);
        return new Raw2.messages.DeleteQuickReplyShortcut({ shortcutId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.shortcutId !== void 0) {
          b.write(Primitive.Int.write(this.shortcutId));
        }
        return b.buffer;
      }
    }
    messages2.DeleteQuickReplyShortcut = DeleteQuickReplyShortcut;
    class GetQuickReplyMessages extends TLObject {
      __response__;
      shortcutId;
      id;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetQuickReplyMessages';
        this.constructorId = 2493814211;
        this.subclassOfId = 3568569182;
        this._slots = ['shortcutId', 'id', 'hash'];
        this.shortcutId = params.shortcutId;
        this.id = params.id;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let shortcutId = await Primitive.Int.read(b);
        let id = flags & (1 << 0) ? await TLObject.read(b, Primitive.Int) : [];
        let hash = await Primitive.Long.read(b);
        return new Raw2.messages.GetQuickReplyMessages({
          shortcutId,
          id,
          hash,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.id ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.shortcutId !== void 0) {
          b.write(Primitive.Int.write(this.shortcutId));
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    messages2.GetQuickReplyMessages = GetQuickReplyMessages;
    class SendQuickReplyMessages extends TLObject {
      __response__;
      peer;
      shortcutId;
      id;
      randomId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.SendQuickReplyMessages';
        this.constructorId = 1819610593;
        this.subclassOfId = 2331323052;
        this._slots = ['peer', 'shortcutId', 'id', 'randomId'];
        this.peer = params.peer;
        this.shortcutId = params.shortcutId;
        this.id = params.id;
        this.randomId = params.randomId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let shortcutId = await Primitive.Int.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        let randomId = await TLObject.read(b, Primitive.Long);
        return new Raw2.messages.SendQuickReplyMessages({
          peer,
          shortcutId,
          id,
          randomId,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.shortcutId !== void 0) {
          b.write(Primitive.Int.write(this.shortcutId));
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        if (this.randomId) {
          b.write(Primitive.Vector.write(this.randomId, Primitive.Long));
        }
        return b.buffer;
      }
    }
    messages2.SendQuickReplyMessages = SendQuickReplyMessages;
    class DeleteQuickReplyMessages extends TLObject {
      __response__;
      shortcutId;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.DeleteQuickReplyMessages';
        this.constructorId = 3775260944;
        this.subclassOfId = 2331323052;
        this._slots = ['shortcutId', 'id'];
        this.shortcutId = params.shortcutId;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let shortcutId = await Primitive.Int.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        return new Raw2.messages.DeleteQuickReplyMessages({ shortcutId, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.shortcutId !== void 0) {
          b.write(Primitive.Int.write(this.shortcutId));
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        return b.buffer;
      }
    }
    messages2.DeleteQuickReplyMessages = DeleteQuickReplyMessages;
    class ToggleDialogFilterTags extends TLObject {
      __response__;
      enabled;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.ToggleDialogFilterTags';
        this.constructorId = 4247640649;
        this.subclassOfId = 4122188204;
        this._slots = ['enabled'];
        this.enabled = params.enabled;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let enabled = await Primitive.Bool.read(b);
        return new Raw2.messages.ToggleDialogFilterTags({ enabled });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.enabled !== void 0) {
          b.write(Primitive.Bool.write(this.enabled));
        }
        return b.buffer;
      }
    }
    messages2.ToggleDialogFilterTags = ToggleDialogFilterTags;
    class GetMyStickers extends TLObject {
      __response__;
      offsetId;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'messages.GetMyStickers';
        this.constructorId = 3501580796;
        this.subclassOfId = 2981377290;
        this._slots = ['offsetId', 'limit'];
        this.offsetId = params.offsetId;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let offsetId = await Primitive.Long.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.messages.GetMyStickers({ offsetId, limit });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.offsetId !== void 0) {
          b.write(Primitive.Long.write(this.offsetId));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    messages2.GetMyStickers = GetMyStickers;
  })((messages = Raw2.messages || (Raw2.messages = {})));
  let updates;
  ((updates2) => {
    class State extends TLObject {
      pts;
      qts;
      date;
      seq;
      unreadCount;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'updates.State';
        this.constructorId = 2775329342;
        this.subclassOfId = 601823745;
        this._slots = ['pts', 'qts', 'date', 'seq', 'unreadCount'];
        this.pts = params.pts;
        this.qts = params.qts;
        this.date = params.date;
        this.seq = params.seq;
        this.unreadCount = params.unreadCount;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let pts = await Primitive.Int.read(b);
        let qts = await Primitive.Int.read(b);
        let date = await Primitive.Int.read(b);
        let seq = await Primitive.Int.read(b);
        let unreadCount = await Primitive.Int.read(b);
        return new Raw2.updates.State({
          pts,
          qts,
          date,
          seq,
          unreadCount,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.pts !== void 0) {
          b.write(Primitive.Int.write(this.pts));
        }
        if (this.qts !== void 0) {
          b.write(Primitive.Int.write(this.qts));
        }
        if (this.date !== void 0) {
          b.write(Primitive.Int.write(this.date));
        }
        if (this.seq !== void 0) {
          b.write(Primitive.Int.write(this.seq));
        }
        if (this.unreadCount !== void 0) {
          b.write(Primitive.Int.write(this.unreadCount));
        }
        return b.buffer;
      }
    }
    updates2.State = State;
    class DifferenceEmpty extends TLObject {
      date;
      seq;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'updates.DifferenceEmpty';
        this.constructorId = 1567990072;
        this.subclassOfId = 541599860;
        this._slots = ['date', 'seq'];
        this.date = params.date;
        this.seq = params.seq;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let date = await Primitive.Int.read(b);
        let seq = await Primitive.Int.read(b);
        return new Raw2.updates.DifferenceEmpty({ date, seq });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.date !== void 0) {
          b.write(Primitive.Int.write(this.date));
        }
        if (this.seq !== void 0) {
          b.write(Primitive.Int.write(this.seq));
        }
        return b.buffer;
      }
    }
    updates2.DifferenceEmpty = DifferenceEmpty;
    class Difference extends TLObject {
      newMessages;
      newEncryptedMessages;
      otherUpdates;
      chats;
      users;
      state;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'updates.Difference';
        this.constructorId = 16030880;
        this.subclassOfId = 541599860;
        this._slots = [
          'newMessages',
          'newEncryptedMessages',
          'otherUpdates',
          'chats',
          'users',
          'state',
        ];
        this.newMessages = params.newMessages;
        this.newEncryptedMessages = params.newEncryptedMessages;
        this.otherUpdates = params.otherUpdates;
        this.chats = params.chats;
        this.users = params.users;
        this.state = params.state;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let newMessages = await TLObject.read(b);
        let newEncryptedMessages = await TLObject.read(b);
        let otherUpdates = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        let state = await TLObject.read(b);
        return new Raw2.updates.Difference({
          newMessages,
          newEncryptedMessages,
          otherUpdates,
          chats,
          users: users2,
          state,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.newMessages) {
          b.write(Primitive.Vector.write(this.newMessages));
        }
        if (this.newEncryptedMessages) {
          b.write(Primitive.Vector.write(this.newEncryptedMessages));
        }
        if (this.otherUpdates) {
          b.write(Primitive.Vector.write(this.otherUpdates));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        if (this.state !== void 0) {
          b.write(this.state.write());
        }
        return b.buffer;
      }
    }
    updates2.Difference = Difference;
    class DifferenceSlice extends TLObject {
      newMessages;
      newEncryptedMessages;
      otherUpdates;
      chats;
      users;
      intermediateState;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'updates.DifferenceSlice';
        this.constructorId = 2835028353;
        this.subclassOfId = 541599860;
        this._slots = [
          'newMessages',
          'newEncryptedMessages',
          'otherUpdates',
          'chats',
          'users',
          'intermediateState',
        ];
        this.newMessages = params.newMessages;
        this.newEncryptedMessages = params.newEncryptedMessages;
        this.otherUpdates = params.otherUpdates;
        this.chats = params.chats;
        this.users = params.users;
        this.intermediateState = params.intermediateState;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let newMessages = await TLObject.read(b);
        let newEncryptedMessages = await TLObject.read(b);
        let otherUpdates = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        let intermediateState = await TLObject.read(b);
        return new Raw2.updates.DifferenceSlice({
          newMessages,
          newEncryptedMessages,
          otherUpdates,
          chats,
          users: users2,
          intermediateState,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.newMessages) {
          b.write(Primitive.Vector.write(this.newMessages));
        }
        if (this.newEncryptedMessages) {
          b.write(Primitive.Vector.write(this.newEncryptedMessages));
        }
        if (this.otherUpdates) {
          b.write(Primitive.Vector.write(this.otherUpdates));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        if (this.intermediateState !== void 0) {
          b.write(this.intermediateState.write());
        }
        return b.buffer;
      }
    }
    updates2.DifferenceSlice = DifferenceSlice;
    class DifferenceTooLong extends TLObject {
      pts;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'updates.DifferenceTooLong';
        this.constructorId = 1258196845;
        this.subclassOfId = 541599860;
        this._slots = ['pts'];
        this.pts = params.pts;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let pts = await Primitive.Int.read(b);
        return new Raw2.updates.DifferenceTooLong({ pts });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.pts !== void 0) {
          b.write(Primitive.Int.write(this.pts));
        }
        return b.buffer;
      }
    }
    updates2.DifferenceTooLong = DifferenceTooLong;
    class ChannelDifferenceEmpty extends TLObject {
      final;
      pts;
      timeout;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'updates.ChannelDifferenceEmpty';
        this.constructorId = 1041346555;
        this.subclassOfId = 696872797;
        this._slots = ['final', 'pts', 'timeout'];
        this.final = params.final;
        this.pts = params.pts;
        this.timeout = params.timeout;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let final = flags & (1 << 0) ? true : false;
        let pts = await Primitive.Int.read(b);
        let timeout = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.updates.ChannelDifferenceEmpty({ final, pts, timeout });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.final ? 1 << 0 : 0;
        flags |= this.timeout !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.pts !== void 0) {
          b.write(Primitive.Int.write(this.pts));
        }
        if (this.timeout !== void 0) {
          b.write(Primitive.Int.write(this.timeout));
        }
        return b.buffer;
      }
    }
    updates2.ChannelDifferenceEmpty = ChannelDifferenceEmpty;
    class ChannelDifferenceTooLong extends TLObject {
      final;
      timeout;
      dialog;
      messages;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'updates.ChannelDifferenceTooLong';
        this.constructorId = 2763835134;
        this.subclassOfId = 696872797;
        this._slots = ['final', 'timeout', 'dialog', 'messages', 'chats', 'users'];
        this.final = params.final;
        this.timeout = params.timeout;
        this.dialog = params.dialog;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let final = flags & (1 << 0) ? true : false;
        let timeout = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let dialog = await TLObject.read(b);
        let messages2 = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.updates.ChannelDifferenceTooLong({
          final,
          timeout,
          dialog,
          messages: messages2,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.final ? 1 << 0 : 0;
        flags |= this.timeout !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.timeout !== void 0) {
          b.write(Primitive.Int.write(this.timeout));
        }
        if (this.dialog !== void 0) {
          b.write(this.dialog.write());
        }
        if (this.messages) {
          b.write(Primitive.Vector.write(this.messages));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    updates2.ChannelDifferenceTooLong = ChannelDifferenceTooLong;
    class ChannelDifference extends TLObject {
      final;
      pts;
      timeout;
      newMessages;
      otherUpdates;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'updates.ChannelDifference';
        this.constructorId = 543450958;
        this.subclassOfId = 696872797;
        this._slots = ['final', 'pts', 'timeout', 'newMessages', 'otherUpdates', 'chats', 'users'];
        this.final = params.final;
        this.pts = params.pts;
        this.timeout = params.timeout;
        this.newMessages = params.newMessages;
        this.otherUpdates = params.otherUpdates;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let final = flags & (1 << 0) ? true : false;
        let pts = await Primitive.Int.read(b);
        let timeout = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let newMessages = await TLObject.read(b);
        let otherUpdates = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.updates.ChannelDifference({
          final,
          pts,
          timeout,
          newMessages,
          otherUpdates,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.final ? 1 << 0 : 0;
        flags |= this.timeout !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.pts !== void 0) {
          b.write(Primitive.Int.write(this.pts));
        }
        if (this.timeout !== void 0) {
          b.write(Primitive.Int.write(this.timeout));
        }
        if (this.newMessages) {
          b.write(Primitive.Vector.write(this.newMessages));
        }
        if (this.otherUpdates) {
          b.write(Primitive.Vector.write(this.otherUpdates));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    updates2.ChannelDifference = ChannelDifference;
    class GetState extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'updates.GetState';
        this.constructorId = 3990128682;
        this.subclassOfId = 601823745;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.updates.GetState();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    updates2.GetState = GetState;
    class GetDifference extends TLObject {
      __response__;
      pts;
      ptsLimit;
      ptsTotalLimit;
      date;
      qts;
      qtsLimit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'updates.GetDifference';
        this.constructorId = 432207715;
        this.subclassOfId = 541599860;
        this._slots = ['pts', 'ptsLimit', 'ptsTotalLimit', 'date', 'qts', 'qtsLimit'];
        this.pts = params.pts;
        this.ptsLimit = params.ptsLimit;
        this.ptsTotalLimit = params.ptsTotalLimit;
        this.date = params.date;
        this.qts = params.qts;
        this.qtsLimit = params.qtsLimit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let pts = await Primitive.Int.read(b);
        let ptsLimit = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let ptsTotalLimit = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        let date = await Primitive.Int.read(b);
        let qts = await Primitive.Int.read(b);
        let qtsLimit = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.updates.GetDifference({
          pts,
          ptsLimit,
          ptsTotalLimit,
          date,
          qts,
          qtsLimit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.ptsLimit !== void 0 ? 1 << 1 : 0;
        flags |= this.ptsTotalLimit !== void 0 ? 1 << 0 : 0;
        flags |= this.qtsLimit !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.pts !== void 0) {
          b.write(Primitive.Int.write(this.pts));
        }
        if (this.ptsLimit !== void 0) {
          b.write(Primitive.Int.write(this.ptsLimit));
        }
        if (this.ptsTotalLimit !== void 0) {
          b.write(Primitive.Int.write(this.ptsTotalLimit));
        }
        if (this.date !== void 0) {
          b.write(Primitive.Int.write(this.date));
        }
        if (this.qts !== void 0) {
          b.write(Primitive.Int.write(this.qts));
        }
        if (this.qtsLimit !== void 0) {
          b.write(Primitive.Int.write(this.qtsLimit));
        }
        return b.buffer;
      }
    }
    updates2.GetDifference = GetDifference;
    class GetChannelDifference extends TLObject {
      __response__;
      force;
      channel;
      filter;
      pts;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'updates.GetChannelDifference';
        this.constructorId = 51854712;
        this.subclassOfId = 696872797;
        this._slots = ['force', 'channel', 'filter', 'pts', 'limit'];
        this.force = params.force;
        this.channel = params.channel;
        this.filter = params.filter;
        this.pts = params.pts;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let force = flags & (1 << 0) ? true : false;
        let channel = await TLObject.read(b);
        let filter = await TLObject.read(b);
        let pts = await Primitive.Int.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.updates.GetChannelDifference({
          force,
          channel,
          filter,
          pts,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.force ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.filter !== void 0) {
          b.write(this.filter.write());
        }
        if (this.pts !== void 0) {
          b.write(Primitive.Int.write(this.pts));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    updates2.GetChannelDifference = GetChannelDifference;
  })((updates = Raw2.updates || (Raw2.updates = {})));
  let photos;
  ((photos2) => {
    class Photos extends TLObject {
      photos;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'photos.Photos';
        this.constructorId = 2378853029;
        this.subclassOfId = 667924839;
        this._slots = ['photos', 'users'];
        this.photos = params.photos;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let photos3 = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.photos.Photos({ photos: photos3, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.photos) {
          b.write(Primitive.Vector.write(this.photos));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    photos2.Photos = Photos;
    class PhotosSlice extends TLObject {
      count;
      photos;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'photos.PhotosSlice';
        this.constructorId = 352657236;
        this.subclassOfId = 667924839;
        this._slots = ['count', 'photos', 'users'];
        this.count = params.count;
        this.photos = params.photos;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let count = await Primitive.Int.read(b);
        let photos3 = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.photos.PhotosSlice({ count, photos: photos3, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.photos) {
          b.write(Primitive.Vector.write(this.photos));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    photos2.PhotosSlice = PhotosSlice;
    class Photo2 extends TLObject {
      photo;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'photos.Photo';
        this.constructorId = 539045032;
        this.subclassOfId = 3264396580;
        this._slots = ['photo', 'users'];
        this.photo = params.photo;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let photo = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.photos.Photo({ photo, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.photo !== void 0) {
          b.write(this.photo.write());
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    photos2.Photo = Photo2;
    class UpdateProfilePhoto extends TLObject {
      __response__;
      fallback;
      bot;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'photos.UpdateProfilePhoto';
        this.constructorId = 166207545;
        this.subclassOfId = 3264396580;
        this._slots = ['fallback', 'bot', 'id'];
        this.fallback = params.fallback;
        this.bot = params.bot;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let fallback = flags & (1 << 0) ? true : false;
        let bot = flags & (1 << 1) ? await TLObject.read(b) : void 0;
        let id = await TLObject.read(b);
        return new Raw2.photos.UpdateProfilePhoto({ fallback, bot, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.fallback ? 1 << 0 : 0;
        flags |= this.bot !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.bot !== void 0) {
          b.write(this.bot.write());
        }
        if (this.id !== void 0) {
          b.write(this.id.write());
        }
        return b.buffer;
      }
    }
    photos2.UpdateProfilePhoto = UpdateProfilePhoto;
    class UploadProfilePhoto extends TLObject {
      __response__;
      fallback;
      bot;
      file;
      video;
      videoStartTs;
      videoEmojiMarkup;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'photos.UploadProfilePhoto';
        this.constructorId = 59286453;
        this.subclassOfId = 3264396580;
        this._slots = ['fallback', 'bot', 'file', 'video', 'videoStartTs', 'videoEmojiMarkup'];
        this.fallback = params.fallback;
        this.bot = params.bot;
        this.file = params.file;
        this.video = params.video;
        this.videoStartTs = params.videoStartTs;
        this.videoEmojiMarkup = params.videoEmojiMarkup;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let fallback = flags & (1 << 3) ? true : false;
        let bot = flags & (1 << 5) ? await TLObject.read(b) : void 0;
        let file = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let video = flags & (1 << 1) ? await TLObject.read(b) : void 0;
        let videoStartTs = flags & (1 << 2) ? await Primitive.Double.read(b) : void 0;
        let videoEmojiMarkup = flags & (1 << 4) ? await TLObject.read(b) : void 0;
        return new Raw2.photos.UploadProfilePhoto({
          fallback,
          bot,
          file,
          video,
          videoStartTs,
          videoEmojiMarkup,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.fallback ? 1 << 3 : 0;
        flags |= this.bot !== void 0 ? 1 << 5 : 0;
        flags |= this.file !== void 0 ? 1 << 0 : 0;
        flags |= this.video !== void 0 ? 1 << 1 : 0;
        flags |= this.videoStartTs !== void 0 ? 1 << 2 : 0;
        flags |= this.videoEmojiMarkup !== void 0 ? 1 << 4 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.bot !== void 0) {
          b.write(this.bot.write());
        }
        if (this.file !== void 0) {
          b.write(this.file.write());
        }
        if (this.video !== void 0) {
          b.write(this.video.write());
        }
        if (this.videoStartTs !== void 0) {
          b.write(Primitive.Double.write(this.videoStartTs));
        }
        if (this.videoEmojiMarkup !== void 0) {
          b.write(this.videoEmojiMarkup.write());
        }
        return b.buffer;
      }
    }
    photos2.UploadProfilePhoto = UploadProfilePhoto;
    class DeletePhotos extends TLObject {
      __response__;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'photos.DeletePhotos';
        this.constructorId = 2278522671;
        this.subclassOfId = 2300109160;
        this._slots = ['id'];
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b);
        return new Raw2.photos.DeletePhotos({ id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id) {
          b.write(Primitive.Vector.write(this.id));
        }
        return b.buffer;
      }
    }
    photos2.DeletePhotos = DeletePhotos;
    class GetUserPhotos extends TLObject {
      __response__;
      userId;
      offset;
      maxId;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'photos.GetUserPhotos';
        this.constructorId = 2446144168;
        this.subclassOfId = 667924839;
        this._slots = ['userId', 'offset', 'maxId', 'limit'];
        this.userId = params.userId;
        this.offset = params.offset;
        this.maxId = params.maxId;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let userId = await TLObject.read(b);
        let offset = await Primitive.Int.read(b);
        let maxId = await Primitive.Long.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.photos.GetUserPhotos({
          userId,
          offset,
          maxId,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        if (this.offset !== void 0) {
          b.write(Primitive.Int.write(this.offset));
        }
        if (this.maxId !== void 0) {
          b.write(Primitive.Long.write(this.maxId));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    photos2.GetUserPhotos = GetUserPhotos;
    class UploadContactProfilePhoto extends TLObject {
      __response__;
      suggest;
      save;
      userId;
      file;
      video;
      videoStartTs;
      videoEmojiMarkup;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'photos.UploadContactProfilePhoto';
        this.constructorId = 3779873393;
        this.subclassOfId = 3264396580;
        this._slots = [
          'suggest',
          'save',
          'userId',
          'file',
          'video',
          'videoStartTs',
          'videoEmojiMarkup',
        ];
        this.suggest = params.suggest;
        this.save = params.save;
        this.userId = params.userId;
        this.file = params.file;
        this.video = params.video;
        this.videoStartTs = params.videoStartTs;
        this.videoEmojiMarkup = params.videoEmojiMarkup;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let suggest = flags & (1 << 3) ? true : false;
        let save = flags & (1 << 4) ? true : false;
        let userId = await TLObject.read(b);
        let file = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let video = flags & (1 << 1) ? await TLObject.read(b) : void 0;
        let videoStartTs = flags & (1 << 2) ? await Primitive.Double.read(b) : void 0;
        let videoEmojiMarkup = flags & (1 << 5) ? await TLObject.read(b) : void 0;
        return new Raw2.photos.UploadContactProfilePhoto({
          suggest,
          save,
          userId,
          file,
          video,
          videoStartTs,
          videoEmojiMarkup,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.suggest ? 1 << 3 : 0;
        flags |= this.save ? 1 << 4 : 0;
        flags |= this.file !== void 0 ? 1 << 0 : 0;
        flags |= this.video !== void 0 ? 1 << 1 : 0;
        flags |= this.videoStartTs !== void 0 ? 1 << 2 : 0;
        flags |= this.videoEmojiMarkup !== void 0 ? 1 << 5 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        if (this.file !== void 0) {
          b.write(this.file.write());
        }
        if (this.video !== void 0) {
          b.write(this.video.write());
        }
        if (this.videoStartTs !== void 0) {
          b.write(Primitive.Double.write(this.videoStartTs));
        }
        if (this.videoEmojiMarkup !== void 0) {
          b.write(this.videoEmojiMarkup.write());
        }
        return b.buffer;
      }
    }
    photos2.UploadContactProfilePhoto = UploadContactProfilePhoto;
  })((photos = Raw2.photos || (Raw2.photos = {})));
  let upload;
  ((upload2) => {
    class File extends TLObject {
      type;
      mtime;
      bytes;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'upload.File';
        this.constructorId = 157948117;
        this.subclassOfId = 1822152488;
        this._slots = ['type', 'mtime', 'bytes'];
        this.type = params.type;
        this.mtime = params.mtime;
        this.bytes = params.bytes;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let type = await TLObject.read(b);
        let mtime = await Primitive.Int.read(b);
        let bytes = await Primitive.Bytes.read(b);
        return new Raw2.upload.File({ type, mtime, bytes });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.type !== void 0) {
          b.write(this.type.write());
        }
        if (this.mtime !== void 0) {
          b.write(Primitive.Int.write(this.mtime));
        }
        if (this.bytes !== void 0) {
          b.write(Primitive.Bytes.write(this.bytes));
        }
        return b.buffer;
      }
    }
    upload2.File = File;
    class FileCdnRedirect extends TLObject {
      dcId;
      fileToken;
      encryptionKey;
      encryptionIv;
      fileHashes;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'upload.FileCdnRedirect';
        this.constructorId = 4052539972;
        this.subclassOfId = 1822152488;
        this._slots = ['dcId', 'fileToken', 'encryptionKey', 'encryptionIv', 'fileHashes'];
        this.dcId = params.dcId;
        this.fileToken = params.fileToken;
        this.encryptionKey = params.encryptionKey;
        this.encryptionIv = params.encryptionIv;
        this.fileHashes = params.fileHashes;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let dcId = await Primitive.Int.read(b);
        let fileToken = await Primitive.Bytes.read(b);
        let encryptionKey = await Primitive.Bytes.read(b);
        let encryptionIv = await Primitive.Bytes.read(b);
        let fileHashes = await TLObject.read(b);
        return new Raw2.upload.FileCdnRedirect({
          dcId,
          fileToken,
          encryptionKey,
          encryptionIv,
          fileHashes,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.dcId !== void 0) {
          b.write(Primitive.Int.write(this.dcId));
        }
        if (this.fileToken !== void 0) {
          b.write(Primitive.Bytes.write(this.fileToken));
        }
        if (this.encryptionKey !== void 0) {
          b.write(Primitive.Bytes.write(this.encryptionKey));
        }
        if (this.encryptionIv !== void 0) {
          b.write(Primitive.Bytes.write(this.encryptionIv));
        }
        if (this.fileHashes) {
          b.write(Primitive.Vector.write(this.fileHashes));
        }
        return b.buffer;
      }
    }
    upload2.FileCdnRedirect = FileCdnRedirect;
    class WebFile extends TLObject {
      size;
      mimeType;
      fileType;
      mtime;
      bytes;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'upload.WebFile';
        this.constructorId = 568808380;
        this.subclassOfId = 1760657233;
        this._slots = ['size', 'mimeType', 'fileType', 'mtime', 'bytes'];
        this.size = params.size;
        this.mimeType = params.mimeType;
        this.fileType = params.fileType;
        this.mtime = params.mtime;
        this.bytes = params.bytes;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let size = await Primitive.Int.read(b);
        let mimeType = await Primitive.String.read(b);
        let fileType = await TLObject.read(b);
        let mtime = await Primitive.Int.read(b);
        let bytes = await Primitive.Bytes.read(b);
        return new Raw2.upload.WebFile({
          size,
          mimeType,
          fileType,
          mtime,
          bytes,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.size !== void 0) {
          b.write(Primitive.Int.write(this.size));
        }
        if (this.mimeType !== void 0) {
          b.write(Primitive.String.write(this.mimeType));
        }
        if (this.fileType !== void 0) {
          b.write(this.fileType.write());
        }
        if (this.mtime !== void 0) {
          b.write(Primitive.Int.write(this.mtime));
        }
        if (this.bytes !== void 0) {
          b.write(Primitive.Bytes.write(this.bytes));
        }
        return b.buffer;
      }
    }
    upload2.WebFile = WebFile;
    class CdnFileReuploadNeeded extends TLObject {
      requestToken;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'upload.CdnFileReuploadNeeded';
        this.constructorId = 4004045934;
        this.subclassOfId = 4123851048;
        this._slots = ['requestToken'];
        this.requestToken = params.requestToken;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let requestToken = await Primitive.Bytes.read(b);
        return new Raw2.upload.CdnFileReuploadNeeded({ requestToken });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.requestToken !== void 0) {
          b.write(Primitive.Bytes.write(this.requestToken));
        }
        return b.buffer;
      }
    }
    upload2.CdnFileReuploadNeeded = CdnFileReuploadNeeded;
    class CdnFile extends TLObject {
      bytes;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'upload.CdnFile';
        this.constructorId = 2845821519;
        this.subclassOfId = 4123851048;
        this._slots = ['bytes'];
        this.bytes = params.bytes;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let bytes = await Primitive.Bytes.read(b);
        return new Raw2.upload.CdnFile({ bytes });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.bytes !== void 0) {
          b.write(Primitive.Bytes.write(this.bytes));
        }
        return b.buffer;
      }
    }
    upload2.CdnFile = CdnFile;
    class SaveFilePart extends TLObject {
      __response__;
      fileId;
      filePart;
      bytes;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'upload.SaveFilePart';
        this.constructorId = 3003426337;
        this.subclassOfId = 4122188204;
        this._slots = ['fileId', 'filePart', 'bytes'];
        this.fileId = params.fileId;
        this.filePart = params.filePart;
        this.bytes = params.bytes;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let fileId = await Primitive.Long.read(b);
        let filePart = await Primitive.Int.read(b);
        let bytes = await Primitive.Bytes.read(b);
        return new Raw2.upload.SaveFilePart({ fileId, filePart, bytes });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.fileId !== void 0) {
          b.write(Primitive.Long.write(this.fileId));
        }
        if (this.filePart !== void 0) {
          b.write(Primitive.Int.write(this.filePart));
        }
        if (this.bytes !== void 0) {
          b.write(Primitive.Bytes.write(this.bytes));
        }
        return b.buffer;
      }
    }
    upload2.SaveFilePart = SaveFilePart;
    class GetFile extends TLObject {
      __response__;
      precise;
      cdnSupported;
      location;
      offset;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'upload.GetFile';
        this.constructorId = 3193124286;
        this.subclassOfId = 1822152488;
        this._slots = ['precise', 'cdnSupported', 'location', 'offset', 'limit'];
        this.precise = params.precise;
        this.cdnSupported = params.cdnSupported;
        this.location = params.location;
        this.offset = params.offset;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let precise = flags & (1 << 0) ? true : false;
        let cdnSupported = flags & (1 << 1) ? true : false;
        let location = await TLObject.read(b);
        let offset = await Primitive.Long.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.upload.GetFile({
          precise,
          cdnSupported,
          location,
          offset,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.precise ? 1 << 0 : 0;
        flags |= this.cdnSupported ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.location !== void 0) {
          b.write(this.location.write());
        }
        if (this.offset !== void 0) {
          b.write(Primitive.Long.write(this.offset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    upload2.GetFile = GetFile;
    class SaveBigFilePart extends TLObject {
      __response__;
      fileId;
      filePart;
      fileTotalParts;
      bytes;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'upload.SaveBigFilePart';
        this.constructorId = 3732629309;
        this.subclassOfId = 4122188204;
        this._slots = ['fileId', 'filePart', 'fileTotalParts', 'bytes'];
        this.fileId = params.fileId;
        this.filePart = params.filePart;
        this.fileTotalParts = params.fileTotalParts;
        this.bytes = params.bytes;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let fileId = await Primitive.Long.read(b);
        let filePart = await Primitive.Int.read(b);
        let fileTotalParts = await Primitive.Int.read(b);
        let bytes = await Primitive.Bytes.read(b);
        return new Raw2.upload.SaveBigFilePart({
          fileId,
          filePart,
          fileTotalParts,
          bytes,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.fileId !== void 0) {
          b.write(Primitive.Long.write(this.fileId));
        }
        if (this.filePart !== void 0) {
          b.write(Primitive.Int.write(this.filePart));
        }
        if (this.fileTotalParts !== void 0) {
          b.write(Primitive.Int.write(this.fileTotalParts));
        }
        if (this.bytes !== void 0) {
          b.write(Primitive.Bytes.write(this.bytes));
        }
        return b.buffer;
      }
    }
    upload2.SaveBigFilePart = SaveBigFilePart;
    class GetWebFile extends TLObject {
      __response__;
      location;
      offset;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'upload.GetWebFile';
        this.constructorId = 619086221;
        this.subclassOfId = 1760657233;
        this._slots = ['location', 'offset', 'limit'];
        this.location = params.location;
        this.offset = params.offset;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let location = await TLObject.read(b);
        let offset = await Primitive.Int.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.upload.GetWebFile({ location, offset, limit });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.location !== void 0) {
          b.write(this.location.write());
        }
        if (this.offset !== void 0) {
          b.write(Primitive.Int.write(this.offset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    upload2.GetWebFile = GetWebFile;
    class GetCdnFile extends TLObject {
      __response__;
      fileToken;
      offset;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'upload.GetCdnFile';
        this.constructorId = 962554330;
        this.subclassOfId = 4123851048;
        this._slots = ['fileToken', 'offset', 'limit'];
        this.fileToken = params.fileToken;
        this.offset = params.offset;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let fileToken = await Primitive.Bytes.read(b);
        let offset = await Primitive.Long.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.upload.GetCdnFile({ fileToken, offset, limit });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.fileToken !== void 0) {
          b.write(Primitive.Bytes.write(this.fileToken));
        }
        if (this.offset !== void 0) {
          b.write(Primitive.Long.write(this.offset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    upload2.GetCdnFile = GetCdnFile;
    class ReuploadCdnFile extends TLObject {
      __response__;
      fileToken;
      requestToken;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'upload.ReuploadCdnFile';
        this.constructorId = 2603046056;
        this.subclassOfId = 2777941798;
        this._slots = ['fileToken', 'requestToken'];
        this.fileToken = params.fileToken;
        this.requestToken = params.requestToken;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let fileToken = await Primitive.Bytes.read(b);
        let requestToken = await Primitive.Bytes.read(b);
        return new Raw2.upload.ReuploadCdnFile({ fileToken, requestToken });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.fileToken !== void 0) {
          b.write(Primitive.Bytes.write(this.fileToken));
        }
        if (this.requestToken !== void 0) {
          b.write(Primitive.Bytes.write(this.requestToken));
        }
        return b.buffer;
      }
    }
    upload2.ReuploadCdnFile = ReuploadCdnFile;
    class GetCdnFileHashes extends TLObject {
      __response__;
      fileToken;
      offset;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'upload.GetCdnFileHashes';
        this.constructorId = 2447130417;
        this.subclassOfId = 2777941798;
        this._slots = ['fileToken', 'offset'];
        this.fileToken = params.fileToken;
        this.offset = params.offset;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let fileToken = await Primitive.Bytes.read(b);
        let offset = await Primitive.Long.read(b);
        return new Raw2.upload.GetCdnFileHashes({ fileToken, offset });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.fileToken !== void 0) {
          b.write(Primitive.Bytes.write(this.fileToken));
        }
        if (this.offset !== void 0) {
          b.write(Primitive.Long.write(this.offset));
        }
        return b.buffer;
      }
    }
    upload2.GetCdnFileHashes = GetCdnFileHashes;
    class GetFileHashes extends TLObject {
      __response__;
      location;
      offset;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'upload.GetFileHashes';
        this.constructorId = 2438371370;
        this.subclassOfId = 2777941798;
        this._slots = ['location', 'offset'];
        this.location = params.location;
        this.offset = params.offset;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let location = await TLObject.read(b);
        let offset = await Primitive.Long.read(b);
        return new Raw2.upload.GetFileHashes({ location, offset });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.location !== void 0) {
          b.write(this.location.write());
        }
        if (this.offset !== void 0) {
          b.write(Primitive.Long.write(this.offset));
        }
        return b.buffer;
      }
    }
    upload2.GetFileHashes = GetFileHashes;
  })((upload = Raw2.upload || (Raw2.upload = {})));
  let account;
  ((account2) => {
    class PrivacyRules extends TLObject {
      rules;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.PrivacyRules';
        this.constructorId = 1352683077;
        this.subclassOfId = 3042622082;
        this._slots = ['rules', 'chats', 'users'];
        this.rules = params.rules;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let rules = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.account.PrivacyRules({ rules, chats, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.rules) {
          b.write(Primitive.Vector.write(this.rules));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    account2.PrivacyRules = PrivacyRules;
    class Authorizations extends TLObject {
      authorizationTtlDays;
      authorizations;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.Authorizations';
        this.constructorId = 1275039392;
        this.subclassOfId = 200663295;
        this._slots = ['authorizationTtlDays', 'authorizations'];
        this.authorizationTtlDays = params.authorizationTtlDays;
        this.authorizations = params.authorizations;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let authorizationTtlDays = await Primitive.Int.read(b);
        let authorizations = await TLObject.read(b);
        return new Raw2.account.Authorizations({
          authorizationTtlDays,
          authorizations,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.authorizationTtlDays !== void 0) {
          b.write(Primitive.Int.write(this.authorizationTtlDays));
        }
        if (this.authorizations) {
          b.write(Primitive.Vector.write(this.authorizations));
        }
        return b.buffer;
      }
    }
    account2.Authorizations = Authorizations;
    class Password extends TLObject {
      hasRecovery;
      hasSecureValues;
      hasPassword;
      currentAlgo;
      srpB;
      srpId;
      hint;
      emailUnconfirmedPattern;
      newAlgo;
      newSecureAlgo;
      secureRandom;
      pendingResetDate;
      loginEmailPattern;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.Password';
        this.constructorId = 2507886843;
        this.subclassOfId = 1403130275;
        this._slots = [
          'hasRecovery',
          'hasSecureValues',
          'hasPassword',
          'currentAlgo',
          'srpB',
          'srpId',
          'hint',
          'emailUnconfirmedPattern',
          'newAlgo',
          'newSecureAlgo',
          'secureRandom',
          'pendingResetDate',
          'loginEmailPattern',
        ];
        this.hasRecovery = params.hasRecovery;
        this.hasSecureValues = params.hasSecureValues;
        this.hasPassword = params.hasPassword;
        this.currentAlgo = params.currentAlgo;
        this.srpB = params.srpB;
        this.srpId = params.srpId;
        this.hint = params.hint;
        this.emailUnconfirmedPattern = params.emailUnconfirmedPattern;
        this.newAlgo = params.newAlgo;
        this.newSecureAlgo = params.newSecureAlgo;
        this.secureRandom = params.secureRandom;
        this.pendingResetDate = params.pendingResetDate;
        this.loginEmailPattern = params.loginEmailPattern;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let hasRecovery = flags & (1 << 0) ? true : false;
        let hasSecureValues = flags & (1 << 1) ? true : false;
        let hasPassword = flags & (1 << 2) ? true : false;
        let currentAlgo = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let srpB = flags & (1 << 2) ? await Primitive.Bytes.read(b) : void 0;
        let srpId = flags & (1 << 2) ? await Primitive.Long.read(b) : void 0;
        let hint = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
        let emailUnconfirmedPattern = flags & (1 << 4) ? await Primitive.String.read(b) : void 0;
        let newAlgo = await TLObject.read(b);
        let newSecureAlgo = await TLObject.read(b);
        let secureRandom = await Primitive.Bytes.read(b);
        let pendingResetDate = flags & (1 << 5) ? await Primitive.Int.read(b) : void 0;
        let loginEmailPattern = flags & (1 << 6) ? await Primitive.String.read(b) : void 0;
        return new Raw2.account.Password({
          hasRecovery,
          hasSecureValues,
          hasPassword,
          currentAlgo,
          srpB,
          srpId,
          hint,
          emailUnconfirmedPattern,
          newAlgo,
          newSecureAlgo,
          secureRandom,
          pendingResetDate,
          loginEmailPattern,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.hasRecovery ? 1 << 0 : 0;
        flags |= this.hasSecureValues ? 1 << 1 : 0;
        flags |= this.hasPassword ? 1 << 2 : 0;
        flags |= this.currentAlgo !== void 0 ? 1 << 2 : 0;
        flags |= this.srpB !== void 0 ? 1 << 2 : 0;
        flags |= this.srpId !== void 0 ? 1 << 2 : 0;
        flags |= this.hint !== void 0 ? 1 << 3 : 0;
        flags |= this.emailUnconfirmedPattern !== void 0 ? 1 << 4 : 0;
        flags |= this.pendingResetDate !== void 0 ? 1 << 5 : 0;
        flags |= this.loginEmailPattern !== void 0 ? 1 << 6 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.currentAlgo !== void 0) {
          b.write(this.currentAlgo.write());
        }
        if (this.srpB !== void 0) {
          b.write(Primitive.Bytes.write(this.srpB));
        }
        if (this.srpId !== void 0) {
          b.write(Primitive.Long.write(this.srpId));
        }
        if (this.hint !== void 0) {
          b.write(Primitive.String.write(this.hint));
        }
        if (this.emailUnconfirmedPattern !== void 0) {
          b.write(Primitive.String.write(this.emailUnconfirmedPattern));
        }
        if (this.newAlgo !== void 0) {
          b.write(this.newAlgo.write());
        }
        if (this.newSecureAlgo !== void 0) {
          b.write(this.newSecureAlgo.write());
        }
        if (this.secureRandom !== void 0) {
          b.write(Primitive.Bytes.write(this.secureRandom));
        }
        if (this.pendingResetDate !== void 0) {
          b.write(Primitive.Int.write(this.pendingResetDate));
        }
        if (this.loginEmailPattern !== void 0) {
          b.write(Primitive.String.write(this.loginEmailPattern));
        }
        return b.buffer;
      }
    }
    account2.Password = Password;
    class PasswordSettings extends TLObject {
      email;
      secureSettings;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.PasswordSettings';
        this.constructorId = 2589733861;
        this.subclassOfId = 3527389304;
        this._slots = ['email', 'secureSettings'];
        this.email = params.email;
        this.secureSettings = params.secureSettings;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let email = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let secureSettings = flags & (1 << 1) ? await TLObject.read(b) : void 0;
        return new Raw2.account.PasswordSettings({ email, secureSettings });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.email !== void 0 ? 1 << 0 : 0;
        flags |= this.secureSettings !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.email !== void 0) {
          b.write(Primitive.String.write(this.email));
        }
        if (this.secureSettings !== void 0) {
          b.write(this.secureSettings.write());
        }
        return b.buffer;
      }
    }
    account2.PasswordSettings = PasswordSettings;
    class PasswordInputSettings extends TLObject {
      newAlgo;
      newPasswordHash;
      hint;
      email;
      newSecureSettings;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.PasswordInputSettings';
        this.constructorId = 3258394569;
        this.subclassOfId = 205679782;
        this._slots = ['newAlgo', 'newPasswordHash', 'hint', 'email', 'newSecureSettings'];
        this.newAlgo = params.newAlgo;
        this.newPasswordHash = params.newPasswordHash;
        this.hint = params.hint;
        this.email = params.email;
        this.newSecureSettings = params.newSecureSettings;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let newAlgo = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let newPasswordHash = flags & (1 << 0) ? await Primitive.Bytes.read(b) : void 0;
        let hint = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let email = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let newSecureSettings = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        return new Raw2.account.PasswordInputSettings({
          newAlgo,
          newPasswordHash,
          hint,
          email,
          newSecureSettings,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.newAlgo !== void 0 ? 1 << 0 : 0;
        flags |= this.newPasswordHash !== void 0 ? 1 << 0 : 0;
        flags |= this.hint !== void 0 ? 1 << 0 : 0;
        flags |= this.email !== void 0 ? 1 << 1 : 0;
        flags |= this.newSecureSettings !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.newAlgo !== void 0) {
          b.write(this.newAlgo.write());
        }
        if (this.newPasswordHash !== void 0) {
          b.write(Primitive.Bytes.write(this.newPasswordHash));
        }
        if (this.hint !== void 0) {
          b.write(Primitive.String.write(this.hint));
        }
        if (this.email !== void 0) {
          b.write(Primitive.String.write(this.email));
        }
        if (this.newSecureSettings !== void 0) {
          b.write(this.newSecureSettings.write());
        }
        return b.buffer;
      }
    }
    account2.PasswordInputSettings = PasswordInputSettings;
    class TmpPassword extends TLObject {
      tmpPassword;
      validUntil;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.TmpPassword';
        this.constructorId = 3680828724;
        this.subclassOfId = 2959382829;
        this._slots = ['tmpPassword', 'validUntil'];
        this.tmpPassword = params.tmpPassword;
        this.validUntil = params.validUntil;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let tmpPassword = await Primitive.Bytes.read(b);
        let validUntil = await Primitive.Int.read(b);
        return new Raw2.account.TmpPassword({ tmpPassword, validUntil });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.tmpPassword !== void 0) {
          b.write(Primitive.Bytes.write(this.tmpPassword));
        }
        if (this.validUntil !== void 0) {
          b.write(Primitive.Int.write(this.validUntil));
        }
        return b.buffer;
      }
    }
    account2.TmpPassword = TmpPassword;
    class WebAuthorizations extends TLObject {
      authorizations;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.WebAuthorizations';
        this.constructorId = 3981887996;
        this.subclassOfId = 2587253554;
        this._slots = ['authorizations', 'users'];
        this.authorizations = params.authorizations;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let authorizations = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.account.WebAuthorizations({ authorizations, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.authorizations) {
          b.write(Primitive.Vector.write(this.authorizations));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    account2.WebAuthorizations = WebAuthorizations;
    class AuthorizationForm extends TLObject {
      requiredTypes;
      values;
      errors;
      users;
      privacyPolicyUrl;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.AuthorizationForm';
        this.constructorId = 2905480408;
        this.subclassOfId = 2013567636;
        this._slots = ['requiredTypes', 'values', 'errors', 'users', 'privacyPolicyUrl'];
        this.requiredTypes = params.requiredTypes;
        this.values = params.values;
        this.errors = params.errors;
        this.users = params.users;
        this.privacyPolicyUrl = params.privacyPolicyUrl;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let requiredTypes = await TLObject.read(b);
        let values = await TLObject.read(b);
        let errors = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        let privacyPolicyUrl = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        return new Raw2.account.AuthorizationForm({
          requiredTypes,
          values,
          errors,
          users: users2,
          privacyPolicyUrl,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.privacyPolicyUrl !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.requiredTypes) {
          b.write(Primitive.Vector.write(this.requiredTypes));
        }
        if (this.values) {
          b.write(Primitive.Vector.write(this.values));
        }
        if (this.errors) {
          b.write(Primitive.Vector.write(this.errors));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        if (this.privacyPolicyUrl !== void 0) {
          b.write(Primitive.String.write(this.privacyPolicyUrl));
        }
        return b.buffer;
      }
    }
    account2.AuthorizationForm = AuthorizationForm;
    class SentEmailCode extends TLObject {
      emailPattern;
      length;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.SentEmailCode';
        this.constructorId = 2166326607;
        this.subclassOfId = 1777582190;
        this._slots = ['emailPattern', 'length'];
        this.emailPattern = params.emailPattern;
        this.length = params.length;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let emailPattern = await Primitive.String.read(b);
        let length = await Primitive.Int.read(b);
        return new Raw2.account.SentEmailCode({ emailPattern, length });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.emailPattern !== void 0) {
          b.write(Primitive.String.write(this.emailPattern));
        }
        if (this.length !== void 0) {
          b.write(Primitive.Int.write(this.length));
        }
        return b.buffer;
      }
    }
    account2.SentEmailCode = SentEmailCode;
    class Takeout extends TLObject {
      id;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.Takeout';
        this.constructorId = 1304052993;
        this.subclassOfId = 2218704517;
        this._slots = ['id'];
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await Primitive.Long.read(b);
        return new Raw2.account.Takeout({ id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id !== void 0) {
          b.write(Primitive.Long.write(this.id));
        }
        return b.buffer;
      }
    }
    account2.Takeout = Takeout;
    class WallPapersNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'account.WallPapersNotModified';
        this.constructorId = 471437699;
        this.subclassOfId = 2730838269;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.WallPapersNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.WallPapersNotModified = WallPapersNotModified;
    class WallPapers extends TLObject {
      hash;
      wallpapers;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.WallPapers';
        this.constructorId = 3452142988;
        this.subclassOfId = 2730838269;
        this._slots = ['hash', 'wallpapers'];
        this.hash = params.hash;
        this.wallpapers = params.wallpapers;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        let wallpapers = await TLObject.read(b);
        return new Raw2.account.WallPapers({ hash, wallpapers });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        if (this.wallpapers) {
          b.write(Primitive.Vector.write(this.wallpapers));
        }
        return b.buffer;
      }
    }
    account2.WallPapers = WallPapers;
    class AutoDownloadSettings2 extends TLObject {
      low;
      medium;
      high;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.AutoDownloadSettings';
        this.constructorId = 1674235686;
        this.subclassOfId = 800610593;
        this._slots = ['low', 'medium', 'high'];
        this.low = params.low;
        this.medium = params.medium;
        this.high = params.high;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let low = await TLObject.read(b);
        let medium = await TLObject.read(b);
        let high = await TLObject.read(b);
        return new Raw2.account.AutoDownloadSettings({ low, medium, high });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.low !== void 0) {
          b.write(this.low.write());
        }
        if (this.medium !== void 0) {
          b.write(this.medium.write());
        }
        if (this.high !== void 0) {
          b.write(this.high.write());
        }
        return b.buffer;
      }
    }
    account2.AutoDownloadSettings = AutoDownloadSettings2;
    class ThemesNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'account.ThemesNotModified';
        this.constructorId = 4095653410;
        this.subclassOfId = 2143625732;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.ThemesNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.ThemesNotModified = ThemesNotModified;
    class Themes extends TLObject {
      hash;
      themes;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.Themes';
        this.constructorId = 2587724909;
        this.subclassOfId = 2143625732;
        this._slots = ['hash', 'themes'];
        this.hash = params.hash;
        this.themes = params.themes;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        let themes = await TLObject.read(b);
        return new Raw2.account.Themes({ hash, themes });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        if (this.themes) {
          b.write(Primitive.Vector.write(this.themes));
        }
        return b.buffer;
      }
    }
    account2.Themes = Themes;
    class ContentSettings extends TLObject {
      sensitiveEnabled;
      sensitiveCanChange;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.ContentSettings';
        this.constructorId = 1474462241;
        this.subclassOfId = 2923427985;
        this._slots = ['sensitiveEnabled', 'sensitiveCanChange'];
        this.sensitiveEnabled = params.sensitiveEnabled;
        this.sensitiveCanChange = params.sensitiveCanChange;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let sensitiveEnabled = flags & (1 << 0) ? true : false;
        let sensitiveCanChange = flags & (1 << 1) ? true : false;
        return new Raw2.account.ContentSettings({
          sensitiveEnabled,
          sensitiveCanChange,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.sensitiveEnabled ? 1 << 0 : 0;
        flags |= this.sensitiveCanChange ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        return b.buffer;
      }
    }
    account2.ContentSettings = ContentSettings;
    class ResetPasswordFailedWait extends TLObject {
      retryDate;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.ResetPasswordFailedWait';
        this.constructorId = 3816265825;
        this.subclassOfId = 1230009366;
        this._slots = ['retryDate'];
        this.retryDate = params.retryDate;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let retryDate = await Primitive.Int.read(b);
        return new Raw2.account.ResetPasswordFailedWait({ retryDate });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.retryDate !== void 0) {
          b.write(Primitive.Int.write(this.retryDate));
        }
        return b.buffer;
      }
    }
    account2.ResetPasswordFailedWait = ResetPasswordFailedWait;
    class ResetPasswordRequestedWait extends TLObject {
      untilDate;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.ResetPasswordRequestedWait';
        this.constructorId = 3924819069;
        this.subclassOfId = 1230009366;
        this._slots = ['untilDate'];
        this.untilDate = params.untilDate;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let untilDate = await Primitive.Int.read(b);
        return new Raw2.account.ResetPasswordRequestedWait({ untilDate });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.untilDate !== void 0) {
          b.write(Primitive.Int.write(this.untilDate));
        }
        return b.buffer;
      }
    }
    account2.ResetPasswordRequestedWait = ResetPasswordRequestedWait;
    class ResetPasswordOk extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'account.ResetPasswordOk';
        this.constructorId = 3911636542;
        this.subclassOfId = 1230009366;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.ResetPasswordOk();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.ResetPasswordOk = ResetPasswordOk;
    class SavedRingtonesNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'account.SavedRingtonesNotModified';
        this.constructorId = 4227262641;
        this.subclassOfId = 666683742;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.SavedRingtonesNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.SavedRingtonesNotModified = SavedRingtonesNotModified;
    class SavedRingtones extends TLObject {
      hash;
      ringtones;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.SavedRingtones';
        this.constructorId = 3253284037;
        this.subclassOfId = 666683742;
        this._slots = ['hash', 'ringtones'];
        this.hash = params.hash;
        this.ringtones = params.ringtones;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        let ringtones = await TLObject.read(b);
        return new Raw2.account.SavedRingtones({ hash, ringtones });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        if (this.ringtones) {
          b.write(Primitive.Vector.write(this.ringtones));
        }
        return b.buffer;
      }
    }
    account2.SavedRingtones = SavedRingtones;
    class SavedRingtone extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'account.SavedRingtone';
        this.constructorId = 3072737133;
        this.subclassOfId = 2984412196;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.SavedRingtone();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.SavedRingtone = SavedRingtone;
    class SavedRingtoneConverted extends TLObject {
      document;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.SavedRingtoneConverted';
        this.constructorId = 523271863;
        this.subclassOfId = 2984412196;
        this._slots = ['document'];
        this.document = params.document;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let document = await TLObject.read(b);
        return new Raw2.account.SavedRingtoneConverted({ document });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.document !== void 0) {
          b.write(this.document.write());
        }
        return b.buffer;
      }
    }
    account2.SavedRingtoneConverted = SavedRingtoneConverted;
    class EmojiStatusesNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'account.EmojiStatusesNotModified';
        this.constructorId = 3498894917;
        this.subclassOfId = 3554674122;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.EmojiStatusesNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.EmojiStatusesNotModified = EmojiStatusesNotModified;
    class EmojiStatuses extends TLObject {
      hash;
      statuses;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.EmojiStatuses';
        this.constructorId = 2428790737;
        this.subclassOfId = 3554674122;
        this._slots = ['hash', 'statuses'];
        this.hash = params.hash;
        this.statuses = params.statuses;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        let statuses = await TLObject.read(b);
        return new Raw2.account.EmojiStatuses({ hash, statuses });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        if (this.statuses) {
          b.write(Primitive.Vector.write(this.statuses));
        }
        return b.buffer;
      }
    }
    account2.EmojiStatuses = EmojiStatuses;
    class EmailVerified extends TLObject {
      email;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.EmailVerified';
        this.constructorId = 731303195;
        this.subclassOfId = 1686319496;
        this._slots = ['email'];
        this.email = params.email;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let email = await Primitive.String.read(b);
        return new Raw2.account.EmailVerified({ email });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.email !== void 0) {
          b.write(Primitive.String.write(this.email));
        }
        return b.buffer;
      }
    }
    account2.EmailVerified = EmailVerified;
    class EmailVerifiedLogin extends TLObject {
      email;
      sentCode;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.EmailVerifiedLogin';
        this.constructorId = 3787132257;
        this.subclassOfId = 1686319496;
        this._slots = ['email', 'sentCode'];
        this.email = params.email;
        this.sentCode = params.sentCode;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let email = await Primitive.String.read(b);
        let sentCode = await TLObject.read(b);
        return new Raw2.account.EmailVerifiedLogin({ email, sentCode });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.email !== void 0) {
          b.write(Primitive.String.write(this.email));
        }
        if (this.sentCode !== void 0) {
          b.write(this.sentCode.write());
        }
        return b.buffer;
      }
    }
    account2.EmailVerifiedLogin = EmailVerifiedLogin;
    class AutoSaveSettings2 extends TLObject {
      usersSettings;
      chatsSettings;
      broadcastsSettings;
      exceptions;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.AutoSaveSettings';
        this.constructorId = 1279133341;
        this.subclassOfId = 1221537538;
        this._slots = [
          'usersSettings',
          'chatsSettings',
          'broadcastsSettings',
          'exceptions',
          'chats',
          'users',
        ];
        this.usersSettings = params.usersSettings;
        this.chatsSettings = params.chatsSettings;
        this.broadcastsSettings = params.broadcastsSettings;
        this.exceptions = params.exceptions;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let usersSettings = await TLObject.read(b);
        let chatsSettings = await TLObject.read(b);
        let broadcastsSettings = await TLObject.read(b);
        let exceptions = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.account.AutoSaveSettings({
          usersSettings,
          chatsSettings,
          broadcastsSettings,
          exceptions,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.usersSettings !== void 0) {
          b.write(this.usersSettings.write());
        }
        if (this.chatsSettings !== void 0) {
          b.write(this.chatsSettings.write());
        }
        if (this.broadcastsSettings !== void 0) {
          b.write(this.broadcastsSettings.write());
        }
        if (this.exceptions) {
          b.write(Primitive.Vector.write(this.exceptions));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    account2.AutoSaveSettings = AutoSaveSettings2;
    class ConnectedBots extends TLObject {
      connectedBots;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.ConnectedBots';
        this.constructorId = 400029819;
        this.subclassOfId = 3838506963;
        this._slots = ['connectedBots', 'users'];
        this.connectedBots = params.connectedBots;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let connectedBots = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.account.ConnectedBots({ connectedBots, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.connectedBots) {
          b.write(Primitive.Vector.write(this.connectedBots));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    account2.ConnectedBots = ConnectedBots;
    class BusinessChatLinks extends TLObject {
      links;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.BusinessChatLinks';
        this.constructorId = 3963855569;
        this.subclassOfId = 3334097457;
        this._slots = ['links', 'chats', 'users'];
        this.links = params.links;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let links = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.account.BusinessChatLinks({ links, chats, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.links) {
          b.write(Primitive.Vector.write(this.links));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    account2.BusinessChatLinks = BusinessChatLinks;
    class ResolvedBusinessChatLinks extends TLObject {
      peer;
      message;
      entities;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'account.ResolvedBusinessChatLinks';
        this.constructorId = 2586029857;
        this.subclassOfId = 980888616;
        this._slots = ['peer', 'message', 'entities', 'chats', 'users'];
        this.peer = params.peer;
        this.message = params.message;
        this.entities = params.entities;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = await TLObject.read(b);
        let message = await Primitive.String.read(b);
        let entities = flags & (1 << 0) ? await TLObject.read(b) : [];
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.account.ResolvedBusinessChatLinks({
          peer,
          message,
          entities,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.entities ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.message !== void 0) {
          b.write(Primitive.String.write(this.message));
        }
        if (this.entities) {
          b.write(Primitive.Vector.write(this.entities));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    account2.ResolvedBusinessChatLinks = ResolvedBusinessChatLinks;
    class RegisterDevice extends TLObject {
      __response__;
      noMuted;
      tokenType;
      token;
      appSandbox;
      secret;
      otherUids;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.RegisterDevice';
        this.constructorId = 3968205178;
        this.subclassOfId = 4122188204;
        this._slots = ['noMuted', 'tokenType', 'token', 'appSandbox', 'secret', 'otherUids'];
        this.noMuted = params.noMuted;
        this.tokenType = params.tokenType;
        this.token = params.token;
        this.appSandbox = params.appSandbox;
        this.secret = params.secret;
        this.otherUids = params.otherUids;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let noMuted = flags & (1 << 0) ? true : false;
        let tokenType = await Primitive.Int.read(b);
        let token = await Primitive.String.read(b);
        let appSandbox = await Primitive.Bool.read(b);
        let secret = await Primitive.Bytes.read(b);
        let otherUids = await TLObject.read(b, Primitive.Long);
        return new Raw2.account.RegisterDevice({
          noMuted,
          tokenType,
          token,
          appSandbox,
          secret,
          otherUids,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.noMuted ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.tokenType !== void 0) {
          b.write(Primitive.Int.write(this.tokenType));
        }
        if (this.token !== void 0) {
          b.write(Primitive.String.write(this.token));
        }
        if (this.appSandbox !== void 0) {
          b.write(Primitive.Bool.write(this.appSandbox));
        }
        if (this.secret !== void 0) {
          b.write(Primitive.Bytes.write(this.secret));
        }
        if (this.otherUids) {
          b.write(Primitive.Vector.write(this.otherUids, Primitive.Long));
        }
        return b.buffer;
      }
    }
    account2.RegisterDevice = RegisterDevice;
    class UnregisterDevice extends TLObject {
      __response__;
      tokenType;
      token;
      otherUids;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UnregisterDevice';
        this.constructorId = 1779249670;
        this.subclassOfId = 4122188204;
        this._slots = ['tokenType', 'token', 'otherUids'];
        this.tokenType = params.tokenType;
        this.token = params.token;
        this.otherUids = params.otherUids;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let tokenType = await Primitive.Int.read(b);
        let token = await Primitive.String.read(b);
        let otherUids = await TLObject.read(b, Primitive.Long);
        return new Raw2.account.UnregisterDevice({
          tokenType,
          token,
          otherUids,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.tokenType !== void 0) {
          b.write(Primitive.Int.write(this.tokenType));
        }
        if (this.token !== void 0) {
          b.write(Primitive.String.write(this.token));
        }
        if (this.otherUids) {
          b.write(Primitive.Vector.write(this.otherUids, Primitive.Long));
        }
        return b.buffer;
      }
    }
    account2.UnregisterDevice = UnregisterDevice;
    class UpdateNotifySettings2 extends TLObject {
      __response__;
      peer;
      settings;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UpdateNotifySettings';
        this.constructorId = 2227067795;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'settings'];
        this.peer = params.peer;
        this.settings = params.settings;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let settings = await TLObject.read(b);
        return new Raw2.account.UpdateNotifySettings({ peer, settings });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.settings !== void 0) {
          b.write(this.settings.write());
        }
        return b.buffer;
      }
    }
    account2.UpdateNotifySettings = UpdateNotifySettings2;
    class GetNotifySettings extends TLObject {
      __response__;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetNotifySettings';
        this.constructorId = 313765169;
        this.subclassOfId = 3475030132;
        this._slots = ['peer'];
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        return new Raw2.account.GetNotifySettings({ peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    account2.GetNotifySettings = GetNotifySettings;
    class ResetNotifySettings extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.ResetNotifySettings';
        this.constructorId = 3682473799;
        this.subclassOfId = 4122188204;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.ResetNotifySettings();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.ResetNotifySettings = ResetNotifySettings;
    class UpdateProfile extends TLObject {
      __response__;
      firstName;
      lastName;
      about;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UpdateProfile';
        this.constructorId = 2018596725;
        this.subclassOfId = 765557111;
        this._slots = ['firstName', 'lastName', 'about'];
        this.firstName = params.firstName;
        this.lastName = params.lastName;
        this.about = params.about;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let firstName = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let lastName = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let about = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
        return new Raw2.account.UpdateProfile({
          firstName,
          lastName,
          about,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.firstName !== void 0 ? 1 << 0 : 0;
        flags |= this.lastName !== void 0 ? 1 << 1 : 0;
        flags |= this.about !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.firstName !== void 0) {
          b.write(Primitive.String.write(this.firstName));
        }
        if (this.lastName !== void 0) {
          b.write(Primitive.String.write(this.lastName));
        }
        if (this.about !== void 0) {
          b.write(Primitive.String.write(this.about));
        }
        return b.buffer;
      }
    }
    account2.UpdateProfile = UpdateProfile;
    class UpdateStatus extends TLObject {
      __response__;
      offline;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UpdateStatus';
        this.constructorId = 1713919532;
        this.subclassOfId = 4122188204;
        this._slots = ['offline'];
        this.offline = params.offline;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let offline = await Primitive.Bool.read(b);
        return new Raw2.account.UpdateStatus({ offline });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.offline !== void 0) {
          b.write(Primitive.Bool.write(this.offline));
        }
        return b.buffer;
      }
    }
    account2.UpdateStatus = UpdateStatus;
    class GetWallPapers extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetWallPapers';
        this.constructorId = 127302966;
        this.subclassOfId = 2730838269;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.account.GetWallPapers({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    account2.GetWallPapers = GetWallPapers;
    class ReportPeer extends TLObject {
      __response__;
      peer;
      reason;
      message;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.ReportPeer';
        this.constructorId = 3317316998;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'reason', 'message'];
        this.peer = params.peer;
        this.reason = params.reason;
        this.message = params.message;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let reason = await TLObject.read(b);
        let message = await Primitive.String.read(b);
        return new Raw2.account.ReportPeer({ peer, reason, message });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.reason !== void 0) {
          b.write(this.reason.write());
        }
        if (this.message !== void 0) {
          b.write(Primitive.String.write(this.message));
        }
        return b.buffer;
      }
    }
    account2.ReportPeer = ReportPeer;
    class CheckUsername extends TLObject {
      __response__;
      username;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.CheckUsername';
        this.constructorId = 655677548;
        this.subclassOfId = 4122188204;
        this._slots = ['username'];
        this.username = params.username;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let username = await Primitive.String.read(b);
        return new Raw2.account.CheckUsername({ username });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.username !== void 0) {
          b.write(Primitive.String.write(this.username));
        }
        return b.buffer;
      }
    }
    account2.CheckUsername = CheckUsername;
    class UpdateUsername extends TLObject {
      __response__;
      username;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UpdateUsername';
        this.constructorId = 1040964988;
        this.subclassOfId = 765557111;
        this._slots = ['username'];
        this.username = params.username;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let username = await Primitive.String.read(b);
        return new Raw2.account.UpdateUsername({ username });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.username !== void 0) {
          b.write(Primitive.String.write(this.username));
        }
        return b.buffer;
      }
    }
    account2.UpdateUsername = UpdateUsername;
    class GetPrivacy extends TLObject {
      __response__;
      key;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetPrivacy';
        this.constructorId = 3671837008;
        this.subclassOfId = 3042622082;
        this._slots = ['key'];
        this.key = params.key;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let key = await TLObject.read(b);
        return new Raw2.account.GetPrivacy({ key });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.key !== void 0) {
          b.write(this.key.write());
        }
        return b.buffer;
      }
    }
    account2.GetPrivacy = GetPrivacy;
    class SetPrivacy extends TLObject {
      __response__;
      key;
      rules;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.SetPrivacy';
        this.constructorId = 3388480744;
        this.subclassOfId = 3042622082;
        this._slots = ['key', 'rules'];
        this.key = params.key;
        this.rules = params.rules;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let key = await TLObject.read(b);
        let rules = await TLObject.read(b);
        return new Raw2.account.SetPrivacy({ key, rules });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.key !== void 0) {
          b.write(this.key.write());
        }
        if (this.rules) {
          b.write(Primitive.Vector.write(this.rules));
        }
        return b.buffer;
      }
    }
    account2.SetPrivacy = SetPrivacy;
    class DeleteAccount extends TLObject {
      __response__;
      reason;
      password;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.DeleteAccount';
        this.constructorId = 2730545012;
        this.subclassOfId = 4122188204;
        this._slots = ['reason', 'password'];
        this.reason = params.reason;
        this.password = params.password;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let reason = await Primitive.String.read(b);
        let password = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        return new Raw2.account.DeleteAccount({ reason, password });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.password !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.reason !== void 0) {
          b.write(Primitive.String.write(this.reason));
        }
        if (this.password !== void 0) {
          b.write(this.password.write());
        }
        return b.buffer;
      }
    }
    account2.DeleteAccount = DeleteAccount;
    class GetAccountTTL extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.GetAccountTTL';
        this.constructorId = 150761757;
        this.subclassOfId = 3131284872;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.GetAccountTTL();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.GetAccountTTL = GetAccountTTL;
    class SetAccountTTL extends TLObject {
      __response__;
      ttl;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.SetAccountTTL';
        this.constructorId = 608323678;
        this.subclassOfId = 4122188204;
        this._slots = ['ttl'];
        this.ttl = params.ttl;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let ttl = await TLObject.read(b);
        return new Raw2.account.SetAccountTTL({ ttl });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.ttl !== void 0) {
          b.write(this.ttl.write());
        }
        return b.buffer;
      }
    }
    account2.SetAccountTTL = SetAccountTTL;
    class SendChangePhoneCode extends TLObject {
      __response__;
      phoneNumber;
      settings;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.SendChangePhoneCode';
        this.constructorId = 2186758885;
        this.subclassOfId = 1827172481;
        this._slots = ['phoneNumber', 'settings'];
        this.phoneNumber = params.phoneNumber;
        this.settings = params.settings;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let phoneNumber = await Primitive.String.read(b);
        let settings = await TLObject.read(b);
        return new Raw2.account.SendChangePhoneCode({
          phoneNumber,
          settings,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.phoneNumber !== void 0) {
          b.write(Primitive.String.write(this.phoneNumber));
        }
        if (this.settings !== void 0) {
          b.write(this.settings.write());
        }
        return b.buffer;
      }
    }
    account2.SendChangePhoneCode = SendChangePhoneCode;
    class ChangePhone extends TLObject {
      __response__;
      phoneNumber;
      phoneCodeHash;
      phoneCode;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.ChangePhone';
        this.constructorId = 1891839707;
        this.subclassOfId = 765557111;
        this._slots = ['phoneNumber', 'phoneCodeHash', 'phoneCode'];
        this.phoneNumber = params.phoneNumber;
        this.phoneCodeHash = params.phoneCodeHash;
        this.phoneCode = params.phoneCode;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let phoneNumber = await Primitive.String.read(b);
        let phoneCodeHash = await Primitive.String.read(b);
        let phoneCode = await Primitive.String.read(b);
        return new Raw2.account.ChangePhone({
          phoneNumber,
          phoneCodeHash,
          phoneCode,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.phoneNumber !== void 0) {
          b.write(Primitive.String.write(this.phoneNumber));
        }
        if (this.phoneCodeHash !== void 0) {
          b.write(Primitive.String.write(this.phoneCodeHash));
        }
        if (this.phoneCode !== void 0) {
          b.write(Primitive.String.write(this.phoneCode));
        }
        return b.buffer;
      }
    }
    account2.ChangePhone = ChangePhone;
    class UpdateDeviceLocked extends TLObject {
      __response__;
      period;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UpdateDeviceLocked';
        this.constructorId = 954152242;
        this.subclassOfId = 4122188204;
        this._slots = ['period'];
        this.period = params.period;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let period = await Primitive.Int.read(b);
        return new Raw2.account.UpdateDeviceLocked({ period });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.period !== void 0) {
          b.write(Primitive.Int.write(this.period));
        }
        return b.buffer;
      }
    }
    account2.UpdateDeviceLocked = UpdateDeviceLocked;
    class GetAuthorizations extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.GetAuthorizations';
        this.constructorId = 3810574680;
        this.subclassOfId = 200663295;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.GetAuthorizations();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.GetAuthorizations = GetAuthorizations;
    class ResetAuthorization extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.ResetAuthorization';
        this.constructorId = 3749180348;
        this.subclassOfId = 4122188204;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.account.ResetAuthorization({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    account2.ResetAuthorization = ResetAuthorization;
    class GetPassword extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.GetPassword';
        this.constructorId = 1418342645;
        this.subclassOfId = 1403130275;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.GetPassword();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.GetPassword = GetPassword;
    class GetPasswordSettings extends TLObject {
      __response__;
      password;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetPasswordSettings';
        this.constructorId = 2631199481;
        this.subclassOfId = 3527389304;
        this._slots = ['password'];
        this.password = params.password;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let password = await TLObject.read(b);
        return new Raw2.account.GetPasswordSettings({ password });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.password !== void 0) {
          b.write(this.password.write());
        }
        return b.buffer;
      }
    }
    account2.GetPasswordSettings = GetPasswordSettings;
    class UpdatePasswordSettings extends TLObject {
      __response__;
      password;
      newSettings;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UpdatePasswordSettings';
        this.constructorId = 2778402863;
        this.subclassOfId = 4122188204;
        this._slots = ['password', 'newSettings'];
        this.password = params.password;
        this.newSettings = params.newSettings;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let password = await TLObject.read(b);
        let newSettings = await TLObject.read(b);
        return new Raw2.account.UpdatePasswordSettings({
          password,
          newSettings,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.password !== void 0) {
          b.write(this.password.write());
        }
        if (this.newSettings !== void 0) {
          b.write(this.newSettings.write());
        }
        return b.buffer;
      }
    }
    account2.UpdatePasswordSettings = UpdatePasswordSettings;
    class SendConfirmPhoneCode extends TLObject {
      __response__;
      hash;
      settings;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.SendConfirmPhoneCode';
        this.constructorId = 457157256;
        this.subclassOfId = 1827172481;
        this._slots = ['hash', 'settings'];
        this.hash = params.hash;
        this.settings = params.settings;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.String.read(b);
        let settings = await TLObject.read(b);
        return new Raw2.account.SendConfirmPhoneCode({ hash, settings });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.String.write(this.hash));
        }
        if (this.settings !== void 0) {
          b.write(this.settings.write());
        }
        return b.buffer;
      }
    }
    account2.SendConfirmPhoneCode = SendConfirmPhoneCode;
    class ConfirmPhone extends TLObject {
      __response__;
      phoneCodeHash;
      phoneCode;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.ConfirmPhone';
        this.constructorId = 1596029123;
        this.subclassOfId = 4122188204;
        this._slots = ['phoneCodeHash', 'phoneCode'];
        this.phoneCodeHash = params.phoneCodeHash;
        this.phoneCode = params.phoneCode;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let phoneCodeHash = await Primitive.String.read(b);
        let phoneCode = await Primitive.String.read(b);
        return new Raw2.account.ConfirmPhone({ phoneCodeHash, phoneCode });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.phoneCodeHash !== void 0) {
          b.write(Primitive.String.write(this.phoneCodeHash));
        }
        if (this.phoneCode !== void 0) {
          b.write(Primitive.String.write(this.phoneCode));
        }
        return b.buffer;
      }
    }
    account2.ConfirmPhone = ConfirmPhone;
    class GetTmpPassword extends TLObject {
      __response__;
      password;
      period;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetTmpPassword';
        this.constructorId = 1151208273;
        this.subclassOfId = 2959382829;
        this._slots = ['password', 'period'];
        this.password = params.password;
        this.period = params.period;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let password = await TLObject.read(b);
        let period = await Primitive.Int.read(b);
        return new Raw2.account.GetTmpPassword({ password, period });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.password !== void 0) {
          b.write(this.password.write());
        }
        if (this.period !== void 0) {
          b.write(Primitive.Int.write(this.period));
        }
        return b.buffer;
      }
    }
    account2.GetTmpPassword = GetTmpPassword;
    class GetWebAuthorizations extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.GetWebAuthorizations';
        this.constructorId = 405695855;
        this.subclassOfId = 2587253554;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.GetWebAuthorizations();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.GetWebAuthorizations = GetWebAuthorizations;
    class ResetWebAuthorization extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.ResetWebAuthorization';
        this.constructorId = 755087855;
        this.subclassOfId = 4122188204;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.account.ResetWebAuthorization({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    account2.ResetWebAuthorization = ResetWebAuthorization;
    class ResetWebAuthorizations extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.ResetWebAuthorizations';
        this.constructorId = 1747789204;
        this.subclassOfId = 4122188204;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.ResetWebAuthorizations();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.ResetWebAuthorizations = ResetWebAuthorizations;
    class GetAllSecureValues extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.GetAllSecureValues';
        this.constructorId = 2995305597;
        this.subclassOfId = 3895345441;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.GetAllSecureValues();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.GetAllSecureValues = GetAllSecureValues;
    class GetSecureValue extends TLObject {
      __response__;
      types;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetSecureValue';
        this.constructorId = 1936088002;
        this.subclassOfId = 3895345441;
        this._slots = ['types'];
        this.types = params.types;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let types = await TLObject.read(b);
        return new Raw2.account.GetSecureValue({ types });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.types) {
          b.write(Primitive.Vector.write(this.types));
        }
        return b.buffer;
      }
    }
    account2.GetSecureValue = GetSecureValue;
    class SaveSecureValue extends TLObject {
      __response__;
      value;
      secureSecretId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.SaveSecureValue';
        this.constructorId = 2308956957;
        this.subclassOfId = 85014702;
        this._slots = ['value', 'secureSecretId'];
        this.value = params.value;
        this.secureSecretId = params.secureSecretId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let value = await TLObject.read(b);
        let secureSecretId = await Primitive.Long.read(b);
        return new Raw2.account.SaveSecureValue({ value, secureSecretId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.value !== void 0) {
          b.write(this.value.write());
        }
        if (this.secureSecretId !== void 0) {
          b.write(Primitive.Long.write(this.secureSecretId));
        }
        return b.buffer;
      }
    }
    account2.SaveSecureValue = SaveSecureValue;
    class DeleteSecureValue extends TLObject {
      __response__;
      types;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.DeleteSecureValue';
        this.constructorId = 3095444555;
        this.subclassOfId = 4122188204;
        this._slots = ['types'];
        this.types = params.types;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let types = await TLObject.read(b);
        return new Raw2.account.DeleteSecureValue({ types });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.types) {
          b.write(Primitive.Vector.write(this.types));
        }
        return b.buffer;
      }
    }
    account2.DeleteSecureValue = DeleteSecureValue;
    class GetAuthorizationForm extends TLObject {
      __response__;
      botId;
      scope;
      publicKey;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetAuthorizationForm';
        this.constructorId = 2838059386;
        this.subclassOfId = 2013567636;
        this._slots = ['botId', 'scope', 'publicKey'];
        this.botId = params.botId;
        this.scope = params.scope;
        this.publicKey = params.publicKey;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let botId = await Primitive.Long.read(b);
        let scope = await Primitive.String.read(b);
        let publicKey = await Primitive.String.read(b);
        return new Raw2.account.GetAuthorizationForm({
          botId,
          scope,
          publicKey,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.botId !== void 0) {
          b.write(Primitive.Long.write(this.botId));
        }
        if (this.scope !== void 0) {
          b.write(Primitive.String.write(this.scope));
        }
        if (this.publicKey !== void 0) {
          b.write(Primitive.String.write(this.publicKey));
        }
        return b.buffer;
      }
    }
    account2.GetAuthorizationForm = GetAuthorizationForm;
    class AcceptAuthorization extends TLObject {
      __response__;
      botId;
      scope;
      publicKey;
      valueHashes;
      credentials;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.AcceptAuthorization';
        this.constructorId = 4092415091;
        this.subclassOfId = 4122188204;
        this._slots = ['botId', 'scope', 'publicKey', 'valueHashes', 'credentials'];
        this.botId = params.botId;
        this.scope = params.scope;
        this.publicKey = params.publicKey;
        this.valueHashes = params.valueHashes;
        this.credentials = params.credentials;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let botId = await Primitive.Long.read(b);
        let scope = await Primitive.String.read(b);
        let publicKey = await Primitive.String.read(b);
        let valueHashes = await TLObject.read(b);
        let credentials = await TLObject.read(b);
        return new Raw2.account.AcceptAuthorization({
          botId,
          scope,
          publicKey,
          valueHashes,
          credentials,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.botId !== void 0) {
          b.write(Primitive.Long.write(this.botId));
        }
        if (this.scope !== void 0) {
          b.write(Primitive.String.write(this.scope));
        }
        if (this.publicKey !== void 0) {
          b.write(Primitive.String.write(this.publicKey));
        }
        if (this.valueHashes) {
          b.write(Primitive.Vector.write(this.valueHashes));
        }
        if (this.credentials !== void 0) {
          b.write(this.credentials.write());
        }
        return b.buffer;
      }
    }
    account2.AcceptAuthorization = AcceptAuthorization;
    class SendVerifyPhoneCode extends TLObject {
      __response__;
      phoneNumber;
      settings;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.SendVerifyPhoneCode';
        this.constructorId = 2778945273;
        this.subclassOfId = 1827172481;
        this._slots = ['phoneNumber', 'settings'];
        this.phoneNumber = params.phoneNumber;
        this.settings = params.settings;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let phoneNumber = await Primitive.String.read(b);
        let settings = await TLObject.read(b);
        return new Raw2.account.SendVerifyPhoneCode({
          phoneNumber,
          settings,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.phoneNumber !== void 0) {
          b.write(Primitive.String.write(this.phoneNumber));
        }
        if (this.settings !== void 0) {
          b.write(this.settings.write());
        }
        return b.buffer;
      }
    }
    account2.SendVerifyPhoneCode = SendVerifyPhoneCode;
    class VerifyPhone extends TLObject {
      __response__;
      phoneNumber;
      phoneCodeHash;
      phoneCode;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.VerifyPhone';
        this.constructorId = 1305716726;
        this.subclassOfId = 4122188204;
        this._slots = ['phoneNumber', 'phoneCodeHash', 'phoneCode'];
        this.phoneNumber = params.phoneNumber;
        this.phoneCodeHash = params.phoneCodeHash;
        this.phoneCode = params.phoneCode;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let phoneNumber = await Primitive.String.read(b);
        let phoneCodeHash = await Primitive.String.read(b);
        let phoneCode = await Primitive.String.read(b);
        return new Raw2.account.VerifyPhone({
          phoneNumber,
          phoneCodeHash,
          phoneCode,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.phoneNumber !== void 0) {
          b.write(Primitive.String.write(this.phoneNumber));
        }
        if (this.phoneCodeHash !== void 0) {
          b.write(Primitive.String.write(this.phoneCodeHash));
        }
        if (this.phoneCode !== void 0) {
          b.write(Primitive.String.write(this.phoneCode));
        }
        return b.buffer;
      }
    }
    account2.VerifyPhone = VerifyPhone;
    class SendVerifyEmailCode extends TLObject {
      __response__;
      purpose;
      email;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.SendVerifyEmailCode';
        this.constructorId = 2564831163;
        this.subclassOfId = 1777582190;
        this._slots = ['purpose', 'email'];
        this.purpose = params.purpose;
        this.email = params.email;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let purpose = await TLObject.read(b);
        let email = await Primitive.String.read(b);
        return new Raw2.account.SendVerifyEmailCode({ purpose, email });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.purpose !== void 0) {
          b.write(this.purpose.write());
        }
        if (this.email !== void 0) {
          b.write(Primitive.String.write(this.email));
        }
        return b.buffer;
      }
    }
    account2.SendVerifyEmailCode = SendVerifyEmailCode;
    class VerifyEmail extends TLObject {
      __response__;
      purpose;
      verification;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.VerifyEmail';
        this.constructorId = 53322959;
        this.subclassOfId = 1686319496;
        this._slots = ['purpose', 'verification'];
        this.purpose = params.purpose;
        this.verification = params.verification;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let purpose = await TLObject.read(b);
        let verification = await TLObject.read(b);
        return new Raw2.account.VerifyEmail({ purpose, verification });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.purpose !== void 0) {
          b.write(this.purpose.write());
        }
        if (this.verification !== void 0) {
          b.write(this.verification.write());
        }
        return b.buffer;
      }
    }
    account2.VerifyEmail = VerifyEmail;
    class InitTakeoutSession extends TLObject {
      __response__;
      contacts;
      messageUsers;
      messageChats;
      messageMegagroups;
      messageChannels;
      files;
      fileMaxSize;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.InitTakeoutSession';
        this.constructorId = 239835e4;
        this.subclassOfId = 2218704517;
        this._slots = [
          'contacts',
          'messageUsers',
          'messageChats',
          'messageMegagroups',
          'messageChannels',
          'files',
          'fileMaxSize',
        ];
        this.contacts = params.contacts;
        this.messageUsers = params.messageUsers;
        this.messageChats = params.messageChats;
        this.messageMegagroups = params.messageMegagroups;
        this.messageChannels = params.messageChannels;
        this.files = params.files;
        this.fileMaxSize = params.fileMaxSize;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let contacts2 = flags & (1 << 0) ? true : false;
        let messageUsers = flags & (1 << 1) ? true : false;
        let messageChats = flags & (1 << 2) ? true : false;
        let messageMegagroups = flags & (1 << 3) ? true : false;
        let messageChannels = flags & (1 << 4) ? true : false;
        let files = flags & (1 << 5) ? true : false;
        let fileMaxSize = flags & (1 << 5) ? await Primitive.Long.read(b) : void 0;
        return new Raw2.account.InitTakeoutSession({
          contacts: contacts2,
          messageUsers,
          messageChats,
          messageMegagroups,
          messageChannels,
          files,
          fileMaxSize,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.contacts ? 1 << 0 : 0;
        flags |= this.messageUsers ? 1 << 1 : 0;
        flags |= this.messageChats ? 1 << 2 : 0;
        flags |= this.messageMegagroups ? 1 << 3 : 0;
        flags |= this.messageChannels ? 1 << 4 : 0;
        flags |= this.files ? 1 << 5 : 0;
        flags |= this.fileMaxSize !== void 0 ? 1 << 5 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.fileMaxSize !== void 0) {
          b.write(Primitive.Long.write(this.fileMaxSize));
        }
        return b.buffer;
      }
    }
    account2.InitTakeoutSession = InitTakeoutSession;
    class FinishTakeoutSession extends TLObject {
      __response__;
      success;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.FinishTakeoutSession';
        this.constructorId = 489050862;
        this.subclassOfId = 4122188204;
        this._slots = ['success'];
        this.success = params.success;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let success = flags & (1 << 0) ? true : false;
        return new Raw2.account.FinishTakeoutSession({ success });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.success ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        return b.buffer;
      }
    }
    account2.FinishTakeoutSession = FinishTakeoutSession;
    class ConfirmPasswordEmail extends TLObject {
      __response__;
      code;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.ConfirmPasswordEmail';
        this.constructorId = 2413762848;
        this.subclassOfId = 4122188204;
        this._slots = ['code'];
        this.code = params.code;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let code = await Primitive.String.read(b);
        return new Raw2.account.ConfirmPasswordEmail({ code });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.code !== void 0) {
          b.write(Primitive.String.write(this.code));
        }
        return b.buffer;
      }
    }
    account2.ConfirmPasswordEmail = ConfirmPasswordEmail;
    class ResendPasswordEmail extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.ResendPasswordEmail';
        this.constructorId = 2055154197;
        this.subclassOfId = 4122188204;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.ResendPasswordEmail();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.ResendPasswordEmail = ResendPasswordEmail;
    class CancelPasswordEmail extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.CancelPasswordEmail';
        this.constructorId = 3251361206;
        this.subclassOfId = 4122188204;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.CancelPasswordEmail();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.CancelPasswordEmail = CancelPasswordEmail;
    class GetContactSignUpNotification extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.GetContactSignUpNotification';
        this.constructorId = 2668087080;
        this.subclassOfId = 4122188204;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.GetContactSignUpNotification();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.GetContactSignUpNotification = GetContactSignUpNotification;
    class SetContactSignUpNotification extends TLObject {
      __response__;
      silent;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.SetContactSignUpNotification';
        this.constructorId = 3488890721;
        this.subclassOfId = 4122188204;
        this._slots = ['silent'];
        this.silent = params.silent;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let silent = await Primitive.Bool.read(b);
        return new Raw2.account.SetContactSignUpNotification({ silent });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.silent !== void 0) {
          b.write(Primitive.Bool.write(this.silent));
        }
        return b.buffer;
      }
    }
    account2.SetContactSignUpNotification = SetContactSignUpNotification;
    class GetNotifyExceptions extends TLObject {
      __response__;
      compareSound;
      compareStories;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetNotifyExceptions';
        this.constructorId = 1398240377;
        this.subclassOfId = 2331323052;
        this._slots = ['compareSound', 'compareStories', 'peer'];
        this.compareSound = params.compareSound;
        this.compareStories = params.compareStories;
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let compareSound = flags & (1 << 1) ? true : false;
        let compareStories = flags & (1 << 2) ? true : false;
        let peer = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        return new Raw2.account.GetNotifyExceptions({
          compareSound,
          compareStories,
          peer,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.compareSound ? 1 << 1 : 0;
        flags |= this.compareStories ? 1 << 2 : 0;
        flags |= this.peer !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    account2.GetNotifyExceptions = GetNotifyExceptions;
    class GetWallPaper extends TLObject {
      __response__;
      wallpaper;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetWallPaper';
        this.constructorId = 4237155306;
        this.subclassOfId = 2527250827;
        this._slots = ['wallpaper'];
        this.wallpaper = params.wallpaper;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let wallpaper = await TLObject.read(b);
        return new Raw2.account.GetWallPaper({ wallpaper });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.wallpaper !== void 0) {
          b.write(this.wallpaper.write());
        }
        return b.buffer;
      }
    }
    account2.GetWallPaper = GetWallPaper;
    class UploadWallPaper extends TLObject {
      __response__;
      forChat;
      file;
      mimeType;
      settings;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UploadWallPaper';
        this.constructorId = 3818557187;
        this.subclassOfId = 2527250827;
        this._slots = ['forChat', 'file', 'mimeType', 'settings'];
        this.forChat = params.forChat;
        this.file = params.file;
        this.mimeType = params.mimeType;
        this.settings = params.settings;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let forChat = flags & (1 << 0) ? true : false;
        let file = await TLObject.read(b);
        let mimeType = await Primitive.String.read(b);
        let settings = await TLObject.read(b);
        return new Raw2.account.UploadWallPaper({
          forChat,
          file,
          mimeType,
          settings,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.forChat ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.file !== void 0) {
          b.write(this.file.write());
        }
        if (this.mimeType !== void 0) {
          b.write(Primitive.String.write(this.mimeType));
        }
        if (this.settings !== void 0) {
          b.write(this.settings.write());
        }
        return b.buffer;
      }
    }
    account2.UploadWallPaper = UploadWallPaper;
    class SaveWallPaper extends TLObject {
      __response__;
      wallpaper;
      unsave;
      settings;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.SaveWallPaper';
        this.constructorId = 1817860919;
        this.subclassOfId = 4122188204;
        this._slots = ['wallpaper', 'unsave', 'settings'];
        this.wallpaper = params.wallpaper;
        this.unsave = params.unsave;
        this.settings = params.settings;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let wallpaper = await TLObject.read(b);
        let unsave = await Primitive.Bool.read(b);
        let settings = await TLObject.read(b);
        return new Raw2.account.SaveWallPaper({
          wallpaper,
          unsave,
          settings,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.wallpaper !== void 0) {
          b.write(this.wallpaper.write());
        }
        if (this.unsave !== void 0) {
          b.write(Primitive.Bool.write(this.unsave));
        }
        if (this.settings !== void 0) {
          b.write(this.settings.write());
        }
        return b.buffer;
      }
    }
    account2.SaveWallPaper = SaveWallPaper;
    class InstallWallPaper extends TLObject {
      __response__;
      wallpaper;
      settings;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.InstallWallPaper';
        this.constructorId = 4276967273;
        this.subclassOfId = 4122188204;
        this._slots = ['wallpaper', 'settings'];
        this.wallpaper = params.wallpaper;
        this.settings = params.settings;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let wallpaper = await TLObject.read(b);
        let settings = await TLObject.read(b);
        return new Raw2.account.InstallWallPaper({ wallpaper, settings });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.wallpaper !== void 0) {
          b.write(this.wallpaper.write());
        }
        if (this.settings !== void 0) {
          b.write(this.settings.write());
        }
        return b.buffer;
      }
    }
    account2.InstallWallPaper = InstallWallPaper;
    class ResetWallPapers extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.ResetWallPapers';
        this.constructorId = 3141244932;
        this.subclassOfId = 4122188204;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.ResetWallPapers();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.ResetWallPapers = ResetWallPapers;
    class GetAutoDownloadSettings extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.GetAutoDownloadSettings';
        this.constructorId = 1457130303;
        this.subclassOfId = 800610593;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.GetAutoDownloadSettings();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.GetAutoDownloadSettings = GetAutoDownloadSettings;
    class SaveAutoDownloadSettings extends TLObject {
      __response__;
      low;
      high;
      settings;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.SaveAutoDownloadSettings';
        this.constructorId = 1995661875;
        this.subclassOfId = 4122188204;
        this._slots = ['low', 'high', 'settings'];
        this.low = params.low;
        this.high = params.high;
        this.settings = params.settings;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let low = flags & (1 << 0) ? true : false;
        let high = flags & (1 << 1) ? true : false;
        let settings = await TLObject.read(b);
        return new Raw2.account.SaveAutoDownloadSettings({
          low,
          high,
          settings,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.low ? 1 << 0 : 0;
        flags |= this.high ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.settings !== void 0) {
          b.write(this.settings.write());
        }
        return b.buffer;
      }
    }
    account2.SaveAutoDownloadSettings = SaveAutoDownloadSettings;
    class UploadTheme extends TLObject {
      __response__;
      file;
      thumb;
      fileName;
      mimeType;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UploadTheme';
        this.constructorId = 473805619;
        this.subclassOfId = 555739168;
        this._slots = ['file', 'thumb', 'fileName', 'mimeType'];
        this.file = params.file;
        this.thumb = params.thumb;
        this.fileName = params.fileName;
        this.mimeType = params.mimeType;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let file = await TLObject.read(b);
        let thumb = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let fileName = await Primitive.String.read(b);
        let mimeType = await Primitive.String.read(b);
        return new Raw2.account.UploadTheme({
          file,
          thumb,
          fileName,
          mimeType,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.thumb !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.file !== void 0) {
          b.write(this.file.write());
        }
        if (this.thumb !== void 0) {
          b.write(this.thumb.write());
        }
        if (this.fileName !== void 0) {
          b.write(Primitive.String.write(this.fileName));
        }
        if (this.mimeType !== void 0) {
          b.write(Primitive.String.write(this.mimeType));
        }
        return b.buffer;
      }
    }
    account2.UploadTheme = UploadTheme;
    class CreateTheme extends TLObject {
      __response__;
      slug;
      title;
      document;
      settings;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.CreateTheme';
        this.constructorId = 1697530880;
        this.subclassOfId = 1454688268;
        this._slots = ['slug', 'title', 'document', 'settings'];
        this.slug = params.slug;
        this.title = params.title;
        this.document = params.document;
        this.settings = params.settings;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let slug = await Primitive.String.read(b);
        let title = await Primitive.String.read(b);
        let document = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let settings = flags & (1 << 3) ? await TLObject.read(b) : [];
        return new Raw2.account.CreateTheme({
          slug,
          title,
          document,
          settings,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.document !== void 0 ? 1 << 2 : 0;
        flags |= this.settings ? 1 << 3 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.slug !== void 0) {
          b.write(Primitive.String.write(this.slug));
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        if (this.document !== void 0) {
          b.write(this.document.write());
        }
        if (this.settings) {
          b.write(Primitive.Vector.write(this.settings));
        }
        return b.buffer;
      }
    }
    account2.CreateTheme = CreateTheme;
    class UpdateTheme2 extends TLObject {
      __response__;
      format;
      theme;
      slug;
      title;
      document;
      settings;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UpdateTheme';
        this.constructorId = 737414348;
        this.subclassOfId = 1454688268;
        this._slots = ['format', 'theme', 'slug', 'title', 'document', 'settings'];
        this.format = params.format;
        this.theme = params.theme;
        this.slug = params.slug;
        this.title = params.title;
        this.document = params.document;
        this.settings = params.settings;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let format = await Primitive.String.read(b);
        let theme = await TLObject.read(b);
        let slug = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let title = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let document = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let settings = flags & (1 << 3) ? await TLObject.read(b) : [];
        return new Raw2.account.UpdateTheme({
          format,
          theme,
          slug,
          title,
          document,
          settings,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.slug !== void 0 ? 1 << 0 : 0;
        flags |= this.title !== void 0 ? 1 << 1 : 0;
        flags |= this.document !== void 0 ? 1 << 2 : 0;
        flags |= this.settings ? 1 << 3 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.format !== void 0) {
          b.write(Primitive.String.write(this.format));
        }
        if (this.theme !== void 0) {
          b.write(this.theme.write());
        }
        if (this.slug !== void 0) {
          b.write(Primitive.String.write(this.slug));
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        if (this.document !== void 0) {
          b.write(this.document.write());
        }
        if (this.settings) {
          b.write(Primitive.Vector.write(this.settings));
        }
        return b.buffer;
      }
    }
    account2.UpdateTheme = UpdateTheme2;
    class SaveTheme extends TLObject {
      __response__;
      theme;
      unsave;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.SaveTheme';
        this.constructorId = 4065792108;
        this.subclassOfId = 4122188204;
        this._slots = ['theme', 'unsave'];
        this.theme = params.theme;
        this.unsave = params.unsave;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let theme = await TLObject.read(b);
        let unsave = await Primitive.Bool.read(b);
        return new Raw2.account.SaveTheme({ theme, unsave });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.theme !== void 0) {
          b.write(this.theme.write());
        }
        if (this.unsave !== void 0) {
          b.write(Primitive.Bool.write(this.unsave));
        }
        return b.buffer;
      }
    }
    account2.SaveTheme = SaveTheme;
    class InstallTheme extends TLObject {
      __response__;
      dark;
      theme;
      format;
      baseTheme;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.InstallTheme';
        this.constructorId = 3341269819;
        this.subclassOfId = 4122188204;
        this._slots = ['dark', 'theme', 'format', 'baseTheme'];
        this.dark = params.dark;
        this.theme = params.theme;
        this.format = params.format;
        this.baseTheme = params.baseTheme;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let dark = flags & (1 << 0) ? true : false;
        let theme = flags & (1 << 1) ? await TLObject.read(b) : void 0;
        let format = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
        let baseTheme = flags & (1 << 3) ? await TLObject.read(b) : void 0;
        return new Raw2.account.InstallTheme({
          dark,
          theme,
          format,
          baseTheme,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.dark ? 1 << 0 : 0;
        flags |= this.theme !== void 0 ? 1 << 1 : 0;
        flags |= this.format !== void 0 ? 1 << 2 : 0;
        flags |= this.baseTheme !== void 0 ? 1 << 3 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.theme !== void 0) {
          b.write(this.theme.write());
        }
        if (this.format !== void 0) {
          b.write(Primitive.String.write(this.format));
        }
        if (this.baseTheme !== void 0) {
          b.write(this.baseTheme.write());
        }
        return b.buffer;
      }
    }
    account2.InstallTheme = InstallTheme;
    class GetTheme extends TLObject {
      __response__;
      format;
      theme;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetTheme';
        this.constructorId = 978872812;
        this.subclassOfId = 1454688268;
        this._slots = ['format', 'theme'];
        this.format = params.format;
        this.theme = params.theme;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let format = await Primitive.String.read(b);
        let theme = await TLObject.read(b);
        return new Raw2.account.GetTheme({ format, theme });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.format !== void 0) {
          b.write(Primitive.String.write(this.format));
        }
        if (this.theme !== void 0) {
          b.write(this.theme.write());
        }
        return b.buffer;
      }
    }
    account2.GetTheme = GetTheme;
    class GetThemes extends TLObject {
      __response__;
      format;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetThemes';
        this.constructorId = 1913054296;
        this.subclassOfId = 2143625732;
        this._slots = ['format', 'hash'];
        this.format = params.format;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let format = await Primitive.String.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.account.GetThemes({ format, hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.format !== void 0) {
          b.write(Primitive.String.write(this.format));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    account2.GetThemes = GetThemes;
    class SetContentSettings extends TLObject {
      __response__;
      sensitiveEnabled;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.SetContentSettings';
        this.constructorId = 3044323691;
        this.subclassOfId = 4122188204;
        this._slots = ['sensitiveEnabled'];
        this.sensitiveEnabled = params.sensitiveEnabled;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let sensitiveEnabled = flags & (1 << 0) ? true : false;
        return new Raw2.account.SetContentSettings({ sensitiveEnabled });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.sensitiveEnabled ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        return b.buffer;
      }
    }
    account2.SetContentSettings = SetContentSettings;
    class GetContentSettings extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.GetContentSettings';
        this.constructorId = 2342210990;
        this.subclassOfId = 2923427985;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.GetContentSettings();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.GetContentSettings = GetContentSettings;
    class GetMultiWallPapers extends TLObject {
      __response__;
      wallpapers;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetMultiWallPapers';
        this.constructorId = 1705865692;
        this.subclassOfId = 2395165315;
        this._slots = ['wallpapers'];
        this.wallpapers = params.wallpapers;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let wallpapers = await TLObject.read(b);
        return new Raw2.account.GetMultiWallPapers({ wallpapers });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.wallpapers) {
          b.write(Primitive.Vector.write(this.wallpapers));
        }
        return b.buffer;
      }
    }
    account2.GetMultiWallPapers = GetMultiWallPapers;
    class GetGlobalPrivacySettings extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.GetGlobalPrivacySettings';
        this.constructorId = 3945483510;
        this.subclassOfId = 3373160304;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.GetGlobalPrivacySettings();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.GetGlobalPrivacySettings = GetGlobalPrivacySettings;
    class SetGlobalPrivacySettings extends TLObject {
      __response__;
      settings;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.SetGlobalPrivacySettings';
        this.constructorId = 517647042;
        this.subclassOfId = 3373160304;
        this._slots = ['settings'];
        this.settings = params.settings;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let settings = await TLObject.read(b);
        return new Raw2.account.SetGlobalPrivacySettings({ settings });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.settings !== void 0) {
          b.write(this.settings.write());
        }
        return b.buffer;
      }
    }
    account2.SetGlobalPrivacySettings = SetGlobalPrivacySettings;
    class ReportProfilePhoto extends TLObject {
      __response__;
      peer;
      photoId;
      reason;
      message;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.ReportProfilePhoto';
        this.constructorId = 4203529973;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'photoId', 'reason', 'message'];
        this.peer = params.peer;
        this.photoId = params.photoId;
        this.reason = params.reason;
        this.message = params.message;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let photoId = await TLObject.read(b);
        let reason = await TLObject.read(b);
        let message = await Primitive.String.read(b);
        return new Raw2.account.ReportProfilePhoto({
          peer,
          photoId,
          reason,
          message,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.photoId !== void 0) {
          b.write(this.photoId.write());
        }
        if (this.reason !== void 0) {
          b.write(this.reason.write());
        }
        if (this.message !== void 0) {
          b.write(Primitive.String.write(this.message));
        }
        return b.buffer;
      }
    }
    account2.ReportProfilePhoto = ReportProfilePhoto;
    class ResetPassword extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.ResetPassword';
        this.constructorId = 2466827803;
        this.subclassOfId = 1230009366;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.ResetPassword();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.ResetPassword = ResetPassword;
    class DeclinePasswordReset extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.DeclinePasswordReset';
        this.constructorId = 1284770294;
        this.subclassOfId = 4122188204;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.DeclinePasswordReset();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.DeclinePasswordReset = DeclinePasswordReset;
    class GetChatThemes extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetChatThemes';
        this.constructorId = 3594051209;
        this.subclassOfId = 2143625732;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.account.GetChatThemes({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    account2.GetChatThemes = GetChatThemes;
    class SetAuthorizationTTL extends TLObject {
      __response__;
      authorizationTtlDays;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.SetAuthorizationTTL';
        this.constructorId = 3213466272;
        this.subclassOfId = 4122188204;
        this._slots = ['authorizationTtlDays'];
        this.authorizationTtlDays = params.authorizationTtlDays;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let authorizationTtlDays = await Primitive.Int.read(b);
        return new Raw2.account.SetAuthorizationTTL({ authorizationTtlDays });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.authorizationTtlDays !== void 0) {
          b.write(Primitive.Int.write(this.authorizationTtlDays));
        }
        return b.buffer;
      }
    }
    account2.SetAuthorizationTTL = SetAuthorizationTTL;
    class ChangeAuthorizationSettings extends TLObject {
      __response__;
      confirmed;
      hash;
      encryptedRequestsDisabled;
      callRequestsDisabled;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.ChangeAuthorizationSettings';
        this.constructorId = 1089766498;
        this.subclassOfId = 4122188204;
        this._slots = ['confirmed', 'hash', 'encryptedRequestsDisabled', 'callRequestsDisabled'];
        this.confirmed = params.confirmed;
        this.hash = params.hash;
        this.encryptedRequestsDisabled = params.encryptedRequestsDisabled;
        this.callRequestsDisabled = params.callRequestsDisabled;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let confirmed = flags & (1 << 3) ? true : false;
        let hash = await Primitive.Long.read(b);
        let encryptedRequestsDisabled = flags & (1 << 0) ? await Primitive.Bool.read(b) : void 0;
        let callRequestsDisabled = flags & (1 << 1) ? await Primitive.Bool.read(b) : void 0;
        return new Raw2.account.ChangeAuthorizationSettings({
          confirmed,
          hash,
          encryptedRequestsDisabled,
          callRequestsDisabled,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.confirmed ? 1 << 3 : 0;
        flags |= this.encryptedRequestsDisabled !== void 0 ? 1 << 0 : 0;
        flags |= this.callRequestsDisabled !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        if (this.encryptedRequestsDisabled !== void 0) {
          b.write(Primitive.Bool.write(this.encryptedRequestsDisabled));
        }
        if (this.callRequestsDisabled !== void 0) {
          b.write(Primitive.Bool.write(this.callRequestsDisabled));
        }
        return b.buffer;
      }
    }
    account2.ChangeAuthorizationSettings = ChangeAuthorizationSettings;
    class GetSavedRingtones extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetSavedRingtones';
        this.constructorId = 3784319624;
        this.subclassOfId = 666683742;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.account.GetSavedRingtones({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    account2.GetSavedRingtones = GetSavedRingtones;
    class SaveRingtone extends TLObject {
      __response__;
      id;
      unsave;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.SaveRingtone';
        this.constructorId = 1038768899;
        this.subclassOfId = 2984412196;
        this._slots = ['id', 'unsave'];
        this.id = params.id;
        this.unsave = params.unsave;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b);
        let unsave = await Primitive.Bool.read(b);
        return new Raw2.account.SaveRingtone({ id, unsave });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id !== void 0) {
          b.write(this.id.write());
        }
        if (this.unsave !== void 0) {
          b.write(Primitive.Bool.write(this.unsave));
        }
        return b.buffer;
      }
    }
    account2.SaveRingtone = SaveRingtone;
    class UploadRingtone extends TLObject {
      __response__;
      file;
      fileName;
      mimeType;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UploadRingtone';
        this.constructorId = 2199552930;
        this.subclassOfId = 555739168;
        this._slots = ['file', 'fileName', 'mimeType'];
        this.file = params.file;
        this.fileName = params.fileName;
        this.mimeType = params.mimeType;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let file = await TLObject.read(b);
        let fileName = await Primitive.String.read(b);
        let mimeType = await Primitive.String.read(b);
        return new Raw2.account.UploadRingtone({
          file,
          fileName,
          mimeType,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.file !== void 0) {
          b.write(this.file.write());
        }
        if (this.fileName !== void 0) {
          b.write(Primitive.String.write(this.fileName));
        }
        if (this.mimeType !== void 0) {
          b.write(Primitive.String.write(this.mimeType));
        }
        return b.buffer;
      }
    }
    account2.UploadRingtone = UploadRingtone;
    class UpdateEmojiStatus extends TLObject {
      __response__;
      emojiStatus;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UpdateEmojiStatus';
        this.constructorId = 4224966251;
        this.subclassOfId = 4122188204;
        this._slots = ['emojiStatus'];
        this.emojiStatus = params.emojiStatus;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let emojiStatus = await TLObject.read(b);
        return new Raw2.account.UpdateEmojiStatus({ emojiStatus });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.emojiStatus !== void 0) {
          b.write(this.emojiStatus.write());
        }
        return b.buffer;
      }
    }
    account2.UpdateEmojiStatus = UpdateEmojiStatus;
    class GetDefaultEmojiStatuses extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetDefaultEmojiStatuses';
        this.constructorId = 3598005126;
        this.subclassOfId = 3554674122;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.account.GetDefaultEmojiStatuses({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    account2.GetDefaultEmojiStatuses = GetDefaultEmojiStatuses;
    class GetRecentEmojiStatuses extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetRecentEmojiStatuses';
        this.constructorId = 257392901;
        this.subclassOfId = 3554674122;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.account.GetRecentEmojiStatuses({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    account2.GetRecentEmojiStatuses = GetRecentEmojiStatuses;
    class ClearRecentEmojiStatuses extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.ClearRecentEmojiStatuses';
        this.constructorId = 404757166;
        this.subclassOfId = 4122188204;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.ClearRecentEmojiStatuses();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.ClearRecentEmojiStatuses = ClearRecentEmojiStatuses;
    class ReorderUsernames extends TLObject {
      __response__;
      order;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.ReorderUsernames';
        this.constructorId = 4015001259;
        this.subclassOfId = 4122188204;
        this._slots = ['order'];
        this.order = params.order;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let order = await TLObject.read(b, Primitive.String);
        return new Raw2.account.ReorderUsernames({ order });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.order) {
          b.write(Primitive.Vector.write(this.order, Primitive.String));
        }
        return b.buffer;
      }
    }
    account2.ReorderUsernames = ReorderUsernames;
    class ToggleUsername extends TLObject {
      __response__;
      username;
      active;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.ToggleUsername';
        this.constructorId = 1490465654;
        this.subclassOfId = 4122188204;
        this._slots = ['username', 'active'];
        this.username = params.username;
        this.active = params.active;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let username = await Primitive.String.read(b);
        let active = await Primitive.Bool.read(b);
        return new Raw2.account.ToggleUsername({ username, active });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.username !== void 0) {
          b.write(Primitive.String.write(this.username));
        }
        if (this.active !== void 0) {
          b.write(Primitive.Bool.write(this.active));
        }
        return b.buffer;
      }
    }
    account2.ToggleUsername = ToggleUsername;
    class GetDefaultProfilePhotoEmojis extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetDefaultProfilePhotoEmojis';
        this.constructorId = 3799319336;
        this.subclassOfId = 3169807034;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.account.GetDefaultProfilePhotoEmojis({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    account2.GetDefaultProfilePhotoEmojis = GetDefaultProfilePhotoEmojis;
    class GetDefaultGroupPhotoEmojis extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetDefaultGroupPhotoEmojis';
        this.constructorId = 2438488238;
        this.subclassOfId = 3169807034;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.account.GetDefaultGroupPhotoEmojis({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    account2.GetDefaultGroupPhotoEmojis = GetDefaultGroupPhotoEmojis;
    class GetAutoSaveSettings extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.GetAutoSaveSettings';
        this.constructorId = 2915810522;
        this.subclassOfId = 1221537538;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.GetAutoSaveSettings();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.GetAutoSaveSettings = GetAutoSaveSettings;
    class SaveAutoSaveSettings extends TLObject {
      __response__;
      users;
      chats;
      broadcasts;
      peer;
      settings;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.SaveAutoSaveSettings';
        this.constructorId = 3600515937;
        this.subclassOfId = 4122188204;
        this._slots = ['users', 'chats', 'broadcasts', 'peer', 'settings'];
        this.users = params.users;
        this.chats = params.chats;
        this.broadcasts = params.broadcasts;
        this.peer = params.peer;
        this.settings = params.settings;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let users2 = flags & (1 << 0) ? true : false;
        let chats = flags & (1 << 1) ? true : false;
        let broadcasts = flags & (1 << 2) ? true : false;
        let peer = flags & (1 << 3) ? await TLObject.read(b) : void 0;
        let settings = await TLObject.read(b);
        return new Raw2.account.SaveAutoSaveSettings({
          users: users2,
          chats,
          broadcasts,
          peer,
          settings,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.users ? 1 << 0 : 0;
        flags |= this.chats ? 1 << 1 : 0;
        flags |= this.broadcasts ? 1 << 2 : 0;
        flags |= this.peer !== void 0 ? 1 << 3 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.settings !== void 0) {
          b.write(this.settings.write());
        }
        return b.buffer;
      }
    }
    account2.SaveAutoSaveSettings = SaveAutoSaveSettings;
    class DeleteAutoSaveExceptions extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.DeleteAutoSaveExceptions';
        this.constructorId = 1404829728;
        this.subclassOfId = 4122188204;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.DeleteAutoSaveExceptions();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.DeleteAutoSaveExceptions = DeleteAutoSaveExceptions;
    class InvalidateSignInCodes extends TLObject {
      __response__;
      codes;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.InvalidateSignInCodes';
        this.constructorId = 3398101178;
        this.subclassOfId = 4122188204;
        this._slots = ['codes'];
        this.codes = params.codes;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let codes = await TLObject.read(b, Primitive.String);
        return new Raw2.account.InvalidateSignInCodes({ codes });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.codes) {
          b.write(Primitive.Vector.write(this.codes, Primitive.String));
        }
        return b.buffer;
      }
    }
    account2.InvalidateSignInCodes = InvalidateSignInCodes;
    class UpdateColor extends TLObject {
      __response__;
      forProfile;
      color;
      backgroundEmojiId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UpdateColor';
        this.constructorId = 2096079197;
        this.subclassOfId = 4122188204;
        this._slots = ['forProfile', 'color', 'backgroundEmojiId'];
        this.forProfile = params.forProfile;
        this.color = params.color;
        this.backgroundEmojiId = params.backgroundEmojiId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let forProfile = flags & (1 << 1) ? true : false;
        let color = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
        let backgroundEmojiId = flags & (1 << 0) ? await Primitive.Long.read(b) : void 0;
        return new Raw2.account.UpdateColor({
          forProfile,
          color,
          backgroundEmojiId,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.forProfile ? 1 << 1 : 0;
        flags |= this.color !== void 0 ? 1 << 2 : 0;
        flags |= this.backgroundEmojiId !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.color !== void 0) {
          b.write(Primitive.Int.write(this.color));
        }
        if (this.backgroundEmojiId !== void 0) {
          b.write(Primitive.Long.write(this.backgroundEmojiId));
        }
        return b.buffer;
      }
    }
    account2.UpdateColor = UpdateColor;
    class GetDefaultBackgroundEmojis extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetDefaultBackgroundEmojis';
        this.constructorId = 2785720782;
        this.subclassOfId = 3169807034;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.account.GetDefaultBackgroundEmojis({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    account2.GetDefaultBackgroundEmojis = GetDefaultBackgroundEmojis;
    class GetChannelDefaultEmojiStatuses extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetChannelDefaultEmojiStatuses';
        this.constructorId = 1999087573;
        this.subclassOfId = 3554674122;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.account.GetChannelDefaultEmojiStatuses({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    account2.GetChannelDefaultEmojiStatuses = GetChannelDefaultEmojiStatuses;
    class GetChannelRestrictedStatusEmojis extends TLObject {
      __response__;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetChannelRestrictedStatusEmojis';
        this.constructorId = 900325589;
        this.subclassOfId = 3169807034;
        this._slots = ['hash'];
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hash = await Primitive.Long.read(b);
        return new Raw2.account.GetChannelRestrictedStatusEmojis({ hash });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    account2.GetChannelRestrictedStatusEmojis = GetChannelRestrictedStatusEmojis;
    class UpdateBusinessWorkHours extends TLObject {
      __response__;
      businessWorkHours;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UpdateBusinessWorkHours';
        this.constructorId = 1258348646;
        this.subclassOfId = 4122188204;
        this._slots = ['businessWorkHours'];
        this.businessWorkHours = params.businessWorkHours;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let businessWorkHours = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        return new Raw2.account.UpdateBusinessWorkHours({ businessWorkHours });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.businessWorkHours !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.businessWorkHours !== void 0) {
          b.write(this.businessWorkHours.write());
        }
        return b.buffer;
      }
    }
    account2.UpdateBusinessWorkHours = UpdateBusinessWorkHours;
    class UpdateBusinessLocation extends TLObject {
      __response__;
      geoPoint;
      address;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UpdateBusinessLocation';
        this.constructorId = 2657817370;
        this.subclassOfId = 4122188204;
        this._slots = ['geoPoint', 'address'];
        this.geoPoint = params.geoPoint;
        this.address = params.address;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let geoPoint = flags & (1 << 1) ? await TLObject.read(b) : void 0;
        let address = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        return new Raw2.account.UpdateBusinessLocation({ geoPoint, address });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.geoPoint !== void 0 ? 1 << 1 : 0;
        flags |= this.address !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.geoPoint !== void 0) {
          b.write(this.geoPoint.write());
        }
        if (this.address !== void 0) {
          b.write(Primitive.String.write(this.address));
        }
        return b.buffer;
      }
    }
    account2.UpdateBusinessLocation = UpdateBusinessLocation;
    class UpdateBusinessGreetingMessage extends TLObject {
      __response__;
      message;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UpdateBusinessGreetingMessage';
        this.constructorId = 1724755908;
        this.subclassOfId = 4122188204;
        this._slots = ['message'];
        this.message = params.message;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let message = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        return new Raw2.account.UpdateBusinessGreetingMessage({ message });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.message !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.message !== void 0) {
          b.write(this.message.write());
        }
        return b.buffer;
      }
    }
    account2.UpdateBusinessGreetingMessage = UpdateBusinessGreetingMessage;
    class UpdateBusinessAwayMessage extends TLObject {
      __response__;
      message;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UpdateBusinessAwayMessage';
        this.constructorId = 2724888485;
        this.subclassOfId = 4122188204;
        this._slots = ['message'];
        this.message = params.message;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let message = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        return new Raw2.account.UpdateBusinessAwayMessage({ message });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.message !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.message !== void 0) {
          b.write(this.message.write());
        }
        return b.buffer;
      }
    }
    account2.UpdateBusinessAwayMessage = UpdateBusinessAwayMessage;
    class UpdateConnectedBot extends TLObject {
      __response__;
      canReply;
      deleted;
      bot;
      recipients;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UpdateConnectedBot';
        this.constructorId = 1138250269;
        this.subclassOfId = 2331323052;
        this._slots = ['canReply', 'deleted', 'bot', 'recipients'];
        this.canReply = params.canReply;
        this.deleted = params.deleted;
        this.bot = params.bot;
        this.recipients = params.recipients;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let canReply = flags & (1 << 0) ? true : false;
        let deleted = flags & (1 << 1) ? true : false;
        let bot = await TLObject.read(b);
        let recipients = await TLObject.read(b);
        return new Raw2.account.UpdateConnectedBot({
          canReply,
          deleted,
          bot,
          recipients,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.canReply ? 1 << 0 : 0;
        flags |= this.deleted ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.bot !== void 0) {
          b.write(this.bot.write());
        }
        if (this.recipients !== void 0) {
          b.write(this.recipients.write());
        }
        return b.buffer;
      }
    }
    account2.UpdateConnectedBot = UpdateConnectedBot;
    class GetConnectedBots extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.GetConnectedBots';
        this.constructorId = 1319421967;
        this.subclassOfId = 3838506963;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.GetConnectedBots();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.GetConnectedBots = GetConnectedBots;
    class GetBotBusinessConnection extends TLObject {
      __response__;
      connectionId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.GetBotBusinessConnection';
        this.constructorId = 1990746736;
        this.subclassOfId = 2331323052;
        this._slots = ['connectionId'];
        this.connectionId = params.connectionId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let connectionId = await Primitive.String.read(b);
        return new Raw2.account.GetBotBusinessConnection({ connectionId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.connectionId !== void 0) {
          b.write(Primitive.String.write(this.connectionId));
        }
        return b.buffer;
      }
    }
    account2.GetBotBusinessConnection = GetBotBusinessConnection;
    class UpdateBusinessIntro extends TLObject {
      __response__;
      intro;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UpdateBusinessIntro';
        this.constructorId = 2786381876;
        this.subclassOfId = 4122188204;
        this._slots = ['intro'];
        this.intro = params.intro;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let intro = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        return new Raw2.account.UpdateBusinessIntro({ intro });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.intro !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.intro !== void 0) {
          b.write(this.intro.write());
        }
        return b.buffer;
      }
    }
    account2.UpdateBusinessIntro = UpdateBusinessIntro;
    class ToggleConnectedBotPaused extends TLObject {
      __response__;
      peer;
      paused;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.ToggleConnectedBotPaused';
        this.constructorId = 1684934807;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'paused'];
        this.peer = params.peer;
        this.paused = params.paused;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let paused = await Primitive.Bool.read(b);
        return new Raw2.account.ToggleConnectedBotPaused({ peer, paused });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.paused !== void 0) {
          b.write(Primitive.Bool.write(this.paused));
        }
        return b.buffer;
      }
    }
    account2.ToggleConnectedBotPaused = ToggleConnectedBotPaused;
    class DisablePeerConnectedBot extends TLObject {
      __response__;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.DisablePeerConnectedBot';
        this.constructorId = 1581481689;
        this.subclassOfId = 4122188204;
        this._slots = ['peer'];
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        return new Raw2.account.DisablePeerConnectedBot({ peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    account2.DisablePeerConnectedBot = DisablePeerConnectedBot;
    class UpdateBirthday extends TLObject {
      __response__;
      birthday;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UpdateBirthday';
        this.constructorId = 3429764113;
        this.subclassOfId = 4122188204;
        this._slots = ['birthday'];
        this.birthday = params.birthday;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let birthday = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        return new Raw2.account.UpdateBirthday({ birthday });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.birthday !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.birthday !== void 0) {
          b.write(this.birthday.write());
        }
        return b.buffer;
      }
    }
    account2.UpdateBirthday = UpdateBirthday;
    class CreateBusinessChatLink extends TLObject {
      __response__;
      link;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.CreateBusinessChatLink';
        this.constructorId = 2287068814;
        this.subclassOfId = 1007504011;
        this._slots = ['link'];
        this.link = params.link;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let link = await TLObject.read(b);
        return new Raw2.account.CreateBusinessChatLink({ link });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.link !== void 0) {
          b.write(this.link.write());
        }
        return b.buffer;
      }
    }
    account2.CreateBusinessChatLink = CreateBusinessChatLink;
    class EditBusinessChatLink extends TLObject {
      __response__;
      slug;
      link;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.EditBusinessChatLink';
        this.constructorId = 2352222383;
        this.subclassOfId = 1007504011;
        this._slots = ['slug', 'link'];
        this.slug = params.slug;
        this.link = params.link;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let slug = await Primitive.String.read(b);
        let link = await TLObject.read(b);
        return new Raw2.account.EditBusinessChatLink({ slug, link });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.slug !== void 0) {
          b.write(Primitive.String.write(this.slug));
        }
        if (this.link !== void 0) {
          b.write(this.link.write());
        }
        return b.buffer;
      }
    }
    account2.EditBusinessChatLink = EditBusinessChatLink;
    class DeleteBusinessChatLink extends TLObject {
      __response__;
      slug;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.DeleteBusinessChatLink';
        this.constructorId = 1611085428;
        this.subclassOfId = 4122188204;
        this._slots = ['slug'];
        this.slug = params.slug;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let slug = await Primitive.String.read(b);
        return new Raw2.account.DeleteBusinessChatLink({ slug });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.slug !== void 0) {
          b.write(Primitive.String.write(this.slug));
        }
        return b.buffer;
      }
    }
    account2.DeleteBusinessChatLink = DeleteBusinessChatLink;
    class GetBusinessChatLinks extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.GetBusinessChatLinks';
        this.constructorId = 1869667809;
        this.subclassOfId = 3334097457;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.GetBusinessChatLinks();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.GetBusinessChatLinks = GetBusinessChatLinks;
    class ResolveBusinessChatLink extends TLObject {
      __response__;
      slug;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.ResolveBusinessChatLink';
        this.constructorId = 1418913262;
        this.subclassOfId = 980888616;
        this._slots = ['slug'];
        this.slug = params.slug;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let slug = await Primitive.String.read(b);
        return new Raw2.account.ResolveBusinessChatLink({ slug });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.slug !== void 0) {
          b.write(Primitive.String.write(this.slug));
        }
        return b.buffer;
      }
    }
    account2.ResolveBusinessChatLink = ResolveBusinessChatLink;
    class UpdatePersonalChannel extends TLObject {
      __response__;
      channel;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.UpdatePersonalChannel';
        this.constructorId = 3645048288;
        this.subclassOfId = 4122188204;
        this._slots = ['channel'];
        this.channel = params.channel;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        return new Raw2.account.UpdatePersonalChannel({ channel });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        return b.buffer;
      }
    }
    account2.UpdatePersonalChannel = UpdatePersonalChannel;
    class ToggleSponsoredMessages extends TLObject {
      __response__;
      enabled;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.ToggleSponsoredMessages';
        this.constructorId = 3118048141;
        this.subclassOfId = 4122188204;
        this._slots = ['enabled'];
        this.enabled = params.enabled;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let enabled = await Primitive.Bool.read(b);
        return new Raw2.account.ToggleSponsoredMessages({ enabled });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.enabled !== void 0) {
          b.write(Primitive.Bool.write(this.enabled));
        }
        return b.buffer;
      }
    }
    account2.ToggleSponsoredMessages = ToggleSponsoredMessages;
    class GetReactionsNotifySettings extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'account.GetReactionsNotifySettings';
        this.constructorId = 115172684;
        this.subclassOfId = 2382301265;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.account.GetReactionsNotifySettings();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    account2.GetReactionsNotifySettings = GetReactionsNotifySettings;
    class SetReactionsNotifySettings extends TLObject {
      __response__;
      settings;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'account.SetReactionsNotifySettings';
        this.constructorId = 829220168;
        this.subclassOfId = 2382301265;
        this._slots = ['settings'];
        this.settings = params.settings;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let settings = await TLObject.read(b);
        return new Raw2.account.SetReactionsNotifySettings({ settings });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.settings !== void 0) {
          b.write(this.settings.write());
        }
        return b.buffer;
      }
    }
    account2.SetReactionsNotifySettings = SetReactionsNotifySettings;
  })((account = Raw2.account || (Raw2.account = {})));
  let channels;
  ((channels2) => {
    class ChannelParticipants extends TLObject {
      count;
      participants;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'channels.ChannelParticipants';
        this.constructorId = 2595290799;
        this.subclassOfId = 3859443300;
        this._slots = ['count', 'participants', 'chats', 'users'];
        this.count = params.count;
        this.participants = params.participants;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let count = await Primitive.Int.read(b);
        let participants = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.channels.ChannelParticipants({
          count,
          participants,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.participants) {
          b.write(Primitive.Vector.write(this.participants));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    channels2.ChannelParticipants = ChannelParticipants;
    class ChannelParticipantsNotModified extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'channels.ChannelParticipantsNotModified';
        this.constructorId = 4028055529;
        this.subclassOfId = 3859443300;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.channels.ChannelParticipantsNotModified();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    channels2.ChannelParticipantsNotModified = ChannelParticipantsNotModified;
    class ChannelParticipant2 extends TLObject {
      participant;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'channels.ChannelParticipant';
        this.constructorId = 3753378583;
        this.subclassOfId = 1717048602;
        this._slots = ['participant', 'chats', 'users'];
        this.participant = params.participant;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let participant = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.channels.ChannelParticipant({
          participant,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.participant !== void 0) {
          b.write(this.participant.write());
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    channels2.ChannelParticipant = ChannelParticipant2;
    class AdminLogResults extends TLObject {
      events;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'channels.AdminLogResults';
        this.constructorId = 3985307469;
        this.subclassOfId = 1374713532;
        this._slots = ['events', 'chats', 'users'];
        this.events = params.events;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let events = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.channels.AdminLogResults({ events, chats, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.events) {
          b.write(Primitive.Vector.write(this.events));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    channels2.AdminLogResults = AdminLogResults;
    class SendAsPeers extends TLObject {
      peers;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'channels.SendAsPeers';
        this.constructorId = 4103516358;
        this.subclassOfId = 952864033;
        this._slots = ['peers', 'chats', 'users'];
        this.peers = params.peers;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peers = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.channels.SendAsPeers({ peers, chats, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peers) {
          b.write(Primitive.Vector.write(this.peers));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    channels2.SendAsPeers = SendAsPeers;
    class SponsoredMessageReportResultChooseOption extends TLObject {
      title;
      options;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'channels.SponsoredMessageReportResultChooseOption';
        this.constructorId = 2221907522;
        this.subclassOfId = 639834146;
        this._slots = ['title', 'options'];
        this.title = params.title;
        this.options = params.options;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let title = await Primitive.String.read(b);
        let options = await TLObject.read(b);
        return new Raw2.channels.SponsoredMessageReportResultChooseOption({
          title,
          options,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        if (this.options) {
          b.write(Primitive.Vector.write(this.options));
        }
        return b.buffer;
      }
    }
    channels2.SponsoredMessageReportResultChooseOption = SponsoredMessageReportResultChooseOption;
    class SponsoredMessageReportResultAdsHidden extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'channels.SponsoredMessageReportResultAdsHidden';
        this.constructorId = 1044107055;
        this.subclassOfId = 639834146;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.channels.SponsoredMessageReportResultAdsHidden();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    channels2.SponsoredMessageReportResultAdsHidden = SponsoredMessageReportResultAdsHidden;
    class SponsoredMessageReportResultReported extends TLObject {
      constructor() {
        super();
        this.classType = 'types';
        this.className = 'channels.SponsoredMessageReportResultReported';
        this.constructorId = 2910423113;
        this.subclassOfId = 639834146;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.channels.SponsoredMessageReportResultReported();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    channels2.SponsoredMessageReportResultReported = SponsoredMessageReportResultReported;
    class ReadHistory extends TLObject {
      __response__;
      channel;
      maxId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ReadHistory';
        this.constructorId = 3423619383;
        this.subclassOfId = 4122188204;
        this._slots = ['channel', 'maxId'];
        this.channel = params.channel;
        this.maxId = params.maxId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let maxId = await Primitive.Int.read(b);
        return new Raw2.channels.ReadHistory({ channel, maxId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.maxId !== void 0) {
          b.write(Primitive.Int.write(this.maxId));
        }
        return b.buffer;
      }
    }
    channels2.ReadHistory = ReadHistory;
    class DeleteMessages extends TLObject {
      __response__;
      channel;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.DeleteMessages';
        this.constructorId = 2227305806;
        this.subclassOfId = 3469983854;
        this._slots = ['channel', 'id'];
        this.channel = params.channel;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        return new Raw2.channels.DeleteMessages({ channel, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        return b.buffer;
      }
    }
    channels2.DeleteMessages = DeleteMessages;
    class ReportSpam extends TLObject {
      __response__;
      channel;
      participant;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ReportSpam';
        this.constructorId = 4098523925;
        this.subclassOfId = 4122188204;
        this._slots = ['channel', 'participant', 'id'];
        this.channel = params.channel;
        this.participant = params.participant;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let participant = await TLObject.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        return new Raw2.channels.ReportSpam({ channel, participant, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.participant !== void 0) {
          b.write(this.participant.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        return b.buffer;
      }
    }
    channels2.ReportSpam = ReportSpam;
    class GetMessages extends TLObject {
      __response__;
      channel;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.GetMessages';
        this.constructorId = 2911672867;
        this.subclassOfId = 3568569182;
        this._slots = ['channel', 'id'];
        this.channel = params.channel;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let id = await TLObject.read(b);
        return new Raw2.channels.GetMessages({ channel, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id));
        }
        return b.buffer;
      }
    }
    channels2.GetMessages = GetMessages;
    class GetParticipants extends TLObject {
      __response__;
      channel;
      filter;
      offset;
      limit;
      hash;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.GetParticipants';
        this.constructorId = 2010044880;
        this.subclassOfId = 3859443300;
        this._slots = ['channel', 'filter', 'offset', 'limit', 'hash'];
        this.channel = params.channel;
        this.filter = params.filter;
        this.offset = params.offset;
        this.limit = params.limit;
        this.hash = params.hash;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let filter = await TLObject.read(b);
        let offset = await Primitive.Int.read(b);
        let limit = await Primitive.Int.read(b);
        let hash = await Primitive.Long.read(b);
        return new Raw2.channels.GetParticipants({
          channel,
          filter,
          offset,
          limit,
          hash,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.filter !== void 0) {
          b.write(this.filter.write());
        }
        if (this.offset !== void 0) {
          b.write(Primitive.Int.write(this.offset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        if (this.hash !== void 0) {
          b.write(Primitive.Long.write(this.hash));
        }
        return b.buffer;
      }
    }
    channels2.GetParticipants = GetParticipants;
    class GetParticipant extends TLObject {
      __response__;
      channel;
      participant;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.GetParticipant';
        this.constructorId = 2695589062;
        this.subclassOfId = 1717048602;
        this._slots = ['channel', 'participant'];
        this.channel = params.channel;
        this.participant = params.participant;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let participant = await TLObject.read(b);
        return new Raw2.channels.GetParticipant({ channel, participant });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.participant !== void 0) {
          b.write(this.participant.write());
        }
        return b.buffer;
      }
    }
    channels2.GetParticipant = GetParticipant;
    class GetChannels extends TLObject {
      __response__;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.GetChannels';
        this.constructorId = 176122811;
        this.subclassOfId = 2580925204;
        this._slots = ['id'];
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b);
        return new Raw2.channels.GetChannels({ id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id) {
          b.write(Primitive.Vector.write(this.id));
        }
        return b.buffer;
      }
    }
    channels2.GetChannels = GetChannels;
    class GetFullChannel extends TLObject {
      __response__;
      channel;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.GetFullChannel';
        this.constructorId = 141781513;
        this.subclassOfId = 576344329;
        this._slots = ['channel'];
        this.channel = params.channel;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        return new Raw2.channels.GetFullChannel({ channel });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        return b.buffer;
      }
    }
    channels2.GetFullChannel = GetFullChannel;
    class CreateChannel extends TLObject {
      __response__;
      broadcast;
      megagroup;
      forImport;
      forum;
      title;
      about;
      geoPoint;
      address;
      ttlPeriod;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.CreateChannel';
        this.constructorId = 2432722695;
        this.subclassOfId = 2331323052;
        this._slots = [
          'broadcast',
          'megagroup',
          'forImport',
          'forum',
          'title',
          'about',
          'geoPoint',
          'address',
          'ttlPeriod',
        ];
        this.broadcast = params.broadcast;
        this.megagroup = params.megagroup;
        this.forImport = params.forImport;
        this.forum = params.forum;
        this.title = params.title;
        this.about = params.about;
        this.geoPoint = params.geoPoint;
        this.address = params.address;
        this.ttlPeriod = params.ttlPeriod;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let broadcast = flags & (1 << 0) ? true : false;
        let megagroup = flags & (1 << 1) ? true : false;
        let forImport = flags & (1 << 3) ? true : false;
        let forum = flags & (1 << 5) ? true : false;
        let title = await Primitive.String.read(b);
        let about = await Primitive.String.read(b);
        let geoPoint = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let address = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
        let ttlPeriod = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.channels.CreateChannel({
          broadcast,
          megagroup,
          forImport,
          forum,
          title,
          about,
          geoPoint,
          address,
          ttlPeriod,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.broadcast ? 1 << 0 : 0;
        flags |= this.megagroup ? 1 << 1 : 0;
        flags |= this.forImport ? 1 << 3 : 0;
        flags |= this.forum ? 1 << 5 : 0;
        flags |= this.geoPoint !== void 0 ? 1 << 2 : 0;
        flags |= this.address !== void 0 ? 1 << 2 : 0;
        flags |= this.ttlPeriod !== void 0 ? 1 << 4 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        if (this.about !== void 0) {
          b.write(Primitive.String.write(this.about));
        }
        if (this.geoPoint !== void 0) {
          b.write(this.geoPoint.write());
        }
        if (this.address !== void 0) {
          b.write(Primitive.String.write(this.address));
        }
        if (this.ttlPeriod !== void 0) {
          b.write(Primitive.Int.write(this.ttlPeriod));
        }
        return b.buffer;
      }
    }
    channels2.CreateChannel = CreateChannel;
    class EditAdmin extends TLObject {
      __response__;
      channel;
      userId;
      adminRights;
      rank;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.EditAdmin';
        this.constructorId = 3543959810;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'userId', 'adminRights', 'rank'];
        this.channel = params.channel;
        this.userId = params.userId;
        this.adminRights = params.adminRights;
        this.rank = params.rank;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let userId = await TLObject.read(b);
        let adminRights = await TLObject.read(b);
        let rank = await Primitive.String.read(b);
        return new Raw2.channels.EditAdmin({
          channel,
          userId,
          adminRights,
          rank,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        if (this.adminRights !== void 0) {
          b.write(this.adminRights.write());
        }
        if (this.rank !== void 0) {
          b.write(Primitive.String.write(this.rank));
        }
        return b.buffer;
      }
    }
    channels2.EditAdmin = EditAdmin;
    class EditTitle extends TLObject {
      __response__;
      channel;
      title;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.EditTitle';
        this.constructorId = 1450044624;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'title'];
        this.channel = params.channel;
        this.title = params.title;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let title = await Primitive.String.read(b);
        return new Raw2.channels.EditTitle({ channel, title });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        return b.buffer;
      }
    }
    channels2.EditTitle = EditTitle;
    class EditPhoto extends TLObject {
      __response__;
      channel;
      photo;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.EditPhoto';
        this.constructorId = 4046346185;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'photo'];
        this.channel = params.channel;
        this.photo = params.photo;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let photo = await TLObject.read(b);
        return new Raw2.channels.EditPhoto({ channel, photo });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.photo !== void 0) {
          b.write(this.photo.write());
        }
        return b.buffer;
      }
    }
    channels2.EditPhoto = EditPhoto;
    class CheckUsername extends TLObject {
      __response__;
      channel;
      username;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.CheckUsername';
        this.constructorId = 283557164;
        this.subclassOfId = 4122188204;
        this._slots = ['channel', 'username'];
        this.channel = params.channel;
        this.username = params.username;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let username = await Primitive.String.read(b);
        return new Raw2.channels.CheckUsername({ channel, username });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.username !== void 0) {
          b.write(Primitive.String.write(this.username));
        }
        return b.buffer;
      }
    }
    channels2.CheckUsername = CheckUsername;
    class UpdateUsername extends TLObject {
      __response__;
      channel;
      username;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.UpdateUsername';
        this.constructorId = 890549214;
        this.subclassOfId = 4122188204;
        this._slots = ['channel', 'username'];
        this.channel = params.channel;
        this.username = params.username;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let username = await Primitive.String.read(b);
        return new Raw2.channels.UpdateUsername({ channel, username });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.username !== void 0) {
          b.write(Primitive.String.write(this.username));
        }
        return b.buffer;
      }
    }
    channels2.UpdateUsername = UpdateUsername;
    class JoinChannel extends TLObject {
      __response__;
      channel;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.JoinChannel';
        this.constructorId = 615851205;
        this.subclassOfId = 2331323052;
        this._slots = ['channel'];
        this.channel = params.channel;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        return new Raw2.channels.JoinChannel({ channel });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        return b.buffer;
      }
    }
    channels2.JoinChannel = JoinChannel;
    class LeaveChannel extends TLObject {
      __response__;
      channel;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.LeaveChannel';
        this.constructorId = 4164332181;
        this.subclassOfId = 2331323052;
        this._slots = ['channel'];
        this.channel = params.channel;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        return new Raw2.channels.LeaveChannel({ channel });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        return b.buffer;
      }
    }
    channels2.LeaveChannel = LeaveChannel;
    class InviteToChannel extends TLObject {
      __response__;
      channel;
      users;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.InviteToChannel';
        this.constructorId = 3387112788;
        this.subclassOfId = 1035899041;
        this._slots = ['channel', 'users'];
        this.channel = params.channel;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.channels.InviteToChannel({ channel, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    channels2.InviteToChannel = InviteToChannel;
    class DeleteChannel extends TLObject {
      __response__;
      channel;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.DeleteChannel';
        this.constructorId = 3222347747;
        this.subclassOfId = 2331323052;
        this._slots = ['channel'];
        this.channel = params.channel;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        return new Raw2.channels.DeleteChannel({ channel });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        return b.buffer;
      }
    }
    channels2.DeleteChannel = DeleteChannel;
    class ExportMessageLink extends TLObject {
      __response__;
      grouped;
      thread;
      channel;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ExportMessageLink';
        this.constructorId = 3862932971;
        this.subclassOfId = 3739632844;
        this._slots = ['grouped', 'thread', 'channel', 'id'];
        this.grouped = params.grouped;
        this.thread = params.thread;
        this.channel = params.channel;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let grouped = flags & (1 << 0) ? true : false;
        let thread = flags & (1 << 1) ? true : false;
        let channel = await TLObject.read(b);
        let id = await Primitive.Int.read(b);
        return new Raw2.channels.ExportMessageLink({
          grouped,
          thread,
          channel,
          id,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.grouped ? 1 << 0 : 0;
        flags |= this.thread ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.id !== void 0) {
          b.write(Primitive.Int.write(this.id));
        }
        return b.buffer;
      }
    }
    channels2.ExportMessageLink = ExportMessageLink;
    class ToggleSignatures extends TLObject {
      __response__;
      channel;
      enabled;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ToggleSignatures';
        this.constructorId = 527021574;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'enabled'];
        this.channel = params.channel;
        this.enabled = params.enabled;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let enabled = await Primitive.Bool.read(b);
        return new Raw2.channels.ToggleSignatures({ channel, enabled });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.enabled !== void 0) {
          b.write(Primitive.Bool.write(this.enabled));
        }
        return b.buffer;
      }
    }
    channels2.ToggleSignatures = ToggleSignatures;
    class GetAdminedPublicChannels extends TLObject {
      __response__;
      byLocation;
      checkLimit;
      forPersonal;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.GetAdminedPublicChannels';
        this.constructorId = 4172297903;
        this.subclassOfId = 2580925204;
        this._slots = ['byLocation', 'checkLimit', 'forPersonal'];
        this.byLocation = params.byLocation;
        this.checkLimit = params.checkLimit;
        this.forPersonal = params.forPersonal;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let byLocation = flags & (1 << 0) ? true : false;
        let checkLimit = flags & (1 << 1) ? true : false;
        let forPersonal = flags & (1 << 2) ? true : false;
        return new Raw2.channels.GetAdminedPublicChannels({
          byLocation,
          checkLimit,
          forPersonal,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.byLocation ? 1 << 0 : 0;
        flags |= this.checkLimit ? 1 << 1 : 0;
        flags |= this.forPersonal ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        return b.buffer;
      }
    }
    channels2.GetAdminedPublicChannels = GetAdminedPublicChannels;
    class EditBanned extends TLObject {
      __response__;
      channel;
      participant;
      bannedRights;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.EditBanned';
        this.constructorId = 2531708289;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'participant', 'bannedRights'];
        this.channel = params.channel;
        this.participant = params.participant;
        this.bannedRights = params.bannedRights;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let participant = await TLObject.read(b);
        let bannedRights = await TLObject.read(b);
        return new Raw2.channels.EditBanned({
          channel,
          participant,
          bannedRights,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.participant !== void 0) {
          b.write(this.participant.write());
        }
        if (this.bannedRights !== void 0) {
          b.write(this.bannedRights.write());
        }
        return b.buffer;
      }
    }
    channels2.EditBanned = EditBanned;
    class GetAdminLog extends TLObject {
      __response__;
      channel;
      q;
      eventsFilter;
      admins;
      maxId;
      minId;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.GetAdminLog';
        this.constructorId = 870184064;
        this.subclassOfId = 1374713532;
        this._slots = ['channel', 'q', 'eventsFilter', 'admins', 'maxId', 'minId', 'limit'];
        this.channel = params.channel;
        this.q = params.q;
        this.eventsFilter = params.eventsFilter;
        this.admins = params.admins;
        this.maxId = params.maxId;
        this.minId = params.minId;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let channel = await TLObject.read(b);
        let q = await Primitive.String.read(b);
        let eventsFilter = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let admins = flags & (1 << 1) ? await TLObject.read(b) : [];
        let maxId = await Primitive.Long.read(b);
        let minId = await Primitive.Long.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.channels.GetAdminLog({
          channel,
          q,
          eventsFilter,
          admins,
          maxId,
          minId,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.eventsFilter !== void 0 ? 1 << 0 : 0;
        flags |= this.admins ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.q !== void 0) {
          b.write(Primitive.String.write(this.q));
        }
        if (this.eventsFilter !== void 0) {
          b.write(this.eventsFilter.write());
        }
        if (this.admins) {
          b.write(Primitive.Vector.write(this.admins));
        }
        if (this.maxId !== void 0) {
          b.write(Primitive.Long.write(this.maxId));
        }
        if (this.minId !== void 0) {
          b.write(Primitive.Long.write(this.minId));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    channels2.GetAdminLog = GetAdminLog;
    class SetStickers extends TLObject {
      __response__;
      channel;
      stickerset;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.SetStickers';
        this.constructorId = 3935085817;
        this.subclassOfId = 4122188204;
        this._slots = ['channel', 'stickerset'];
        this.channel = params.channel;
        this.stickerset = params.stickerset;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let stickerset = await TLObject.read(b);
        return new Raw2.channels.SetStickers({ channel, stickerset });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.stickerset !== void 0) {
          b.write(this.stickerset.write());
        }
        return b.buffer;
      }
    }
    channels2.SetStickers = SetStickers;
    class ReadMessageContents extends TLObject {
      __response__;
      channel;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ReadMessageContents';
        this.constructorId = 3937786936;
        this.subclassOfId = 4122188204;
        this._slots = ['channel', 'id'];
        this.channel = params.channel;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        return new Raw2.channels.ReadMessageContents({ channel, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        return b.buffer;
      }
    }
    channels2.ReadMessageContents = ReadMessageContents;
    class DeleteHistory extends TLObject {
      __response__;
      forEveryone;
      channel;
      maxId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.DeleteHistory';
        this.constructorId = 2611648071;
        this.subclassOfId = 2331323052;
        this._slots = ['forEveryone', 'channel', 'maxId'];
        this.forEveryone = params.forEveryone;
        this.channel = params.channel;
        this.maxId = params.maxId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let forEveryone = flags & (1 << 0) ? true : false;
        let channel = await TLObject.read(b);
        let maxId = await Primitive.Int.read(b);
        return new Raw2.channels.DeleteHistory({
          forEveryone,
          channel,
          maxId,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.forEveryone ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.maxId !== void 0) {
          b.write(Primitive.Int.write(this.maxId));
        }
        return b.buffer;
      }
    }
    channels2.DeleteHistory = DeleteHistory;
    class TogglePreHistoryHidden extends TLObject {
      __response__;
      channel;
      enabled;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.TogglePreHistoryHidden';
        this.constructorId = 3938171212;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'enabled'];
        this.channel = params.channel;
        this.enabled = params.enabled;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let enabled = await Primitive.Bool.read(b);
        return new Raw2.channels.TogglePreHistoryHidden({ channel, enabled });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.enabled !== void 0) {
          b.write(Primitive.Bool.write(this.enabled));
        }
        return b.buffer;
      }
    }
    channels2.TogglePreHistoryHidden = TogglePreHistoryHidden;
    class GetLeftChannels extends TLObject {
      __response__;
      offset;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.GetLeftChannels';
        this.constructorId = 2202135744;
        this.subclassOfId = 2580925204;
        this._slots = ['offset'];
        this.offset = params.offset;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let offset = await Primitive.Int.read(b);
        return new Raw2.channels.GetLeftChannels({ offset });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.offset !== void 0) {
          b.write(Primitive.Int.write(this.offset));
        }
        return b.buffer;
      }
    }
    channels2.GetLeftChannels = GetLeftChannels;
    class GetGroupsForDiscussion extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'channels.GetGroupsForDiscussion';
        this.constructorId = 4124758904;
        this.subclassOfId = 2580925204;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.channels.GetGroupsForDiscussion();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    channels2.GetGroupsForDiscussion = GetGroupsForDiscussion;
    class SetDiscussionGroup extends TLObject {
      __response__;
      broadcast;
      group;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.SetDiscussionGroup';
        this.constructorId = 1079520178;
        this.subclassOfId = 4122188204;
        this._slots = ['broadcast', 'group'];
        this.broadcast = params.broadcast;
        this.group = params.group;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let broadcast = await TLObject.read(b);
        let group = await TLObject.read(b);
        return new Raw2.channels.SetDiscussionGroup({ broadcast, group });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.broadcast !== void 0) {
          b.write(this.broadcast.write());
        }
        if (this.group !== void 0) {
          b.write(this.group.write());
        }
        return b.buffer;
      }
    }
    channels2.SetDiscussionGroup = SetDiscussionGroup;
    class EditCreator extends TLObject {
      __response__;
      channel;
      userId;
      password;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.EditCreator';
        this.constructorId = 2402864415;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'userId', 'password'];
        this.channel = params.channel;
        this.userId = params.userId;
        this.password = params.password;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let userId = await TLObject.read(b);
        let password = await TLObject.read(b);
        return new Raw2.channels.EditCreator({
          channel,
          userId,
          password,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        if (this.password !== void 0) {
          b.write(this.password.write());
        }
        return b.buffer;
      }
    }
    channels2.EditCreator = EditCreator;
    class EditLocation extends TLObject {
      __response__;
      channel;
      geoPoint;
      address;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.EditLocation';
        this.constructorId = 1491484525;
        this.subclassOfId = 4122188204;
        this._slots = ['channel', 'geoPoint', 'address'];
        this.channel = params.channel;
        this.geoPoint = params.geoPoint;
        this.address = params.address;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let geoPoint = await TLObject.read(b);
        let address = await Primitive.String.read(b);
        return new Raw2.channels.EditLocation({
          channel,
          geoPoint,
          address,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.geoPoint !== void 0) {
          b.write(this.geoPoint.write());
        }
        if (this.address !== void 0) {
          b.write(Primitive.String.write(this.address));
        }
        return b.buffer;
      }
    }
    channels2.EditLocation = EditLocation;
    class ToggleSlowMode extends TLObject {
      __response__;
      channel;
      seconds;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ToggleSlowMode';
        this.constructorId = 3990134512;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'seconds'];
        this.channel = params.channel;
        this.seconds = params.seconds;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let seconds = await Primitive.Int.read(b);
        return new Raw2.channels.ToggleSlowMode({ channel, seconds });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.seconds !== void 0) {
          b.write(Primitive.Int.write(this.seconds));
        }
        return b.buffer;
      }
    }
    channels2.ToggleSlowMode = ToggleSlowMode;
    class GetInactiveChannels extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'channels.GetInactiveChannels';
        this.constructorId = 300429806;
        this.subclassOfId = 2348013524;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.channels.GetInactiveChannels();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    channels2.GetInactiveChannels = GetInactiveChannels;
    class ConvertToGigagroup extends TLObject {
      __response__;
      channel;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ConvertToGigagroup';
        this.constructorId = 187239529;
        this.subclassOfId = 2331323052;
        this._slots = ['channel'];
        this.channel = params.channel;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        return new Raw2.channels.ConvertToGigagroup({ channel });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        return b.buffer;
      }
    }
    channels2.ConvertToGigagroup = ConvertToGigagroup;
    class ViewSponsoredMessage extends TLObject {
      __response__;
      channel;
      randomId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ViewSponsoredMessage';
        this.constructorId = 3199130516;
        this.subclassOfId = 4122188204;
        this._slots = ['channel', 'randomId'];
        this.channel = params.channel;
        this.randomId = params.randomId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let randomId = await Primitive.Bytes.read(b);
        return new Raw2.channels.ViewSponsoredMessage({ channel, randomId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.randomId !== void 0) {
          b.write(Primitive.Bytes.write(this.randomId));
        }
        return b.buffer;
      }
    }
    channels2.ViewSponsoredMessage = ViewSponsoredMessage;
    class GetSponsoredMessages extends TLObject {
      __response__;
      channel;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.GetSponsoredMessages';
        this.constructorId = 3961589695;
        this.subclassOfId = 2134993376;
        this._slots = ['channel'];
        this.channel = params.channel;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        return new Raw2.channels.GetSponsoredMessages({ channel });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        return b.buffer;
      }
    }
    channels2.GetSponsoredMessages = GetSponsoredMessages;
    class GetSendAs extends TLObject {
      __response__;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.GetSendAs';
        this.constructorId = 231174382;
        this.subclassOfId = 952864033;
        this._slots = ['peer'];
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        return new Raw2.channels.GetSendAs({ peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    channels2.GetSendAs = GetSendAs;
    class DeleteParticipantHistory extends TLObject {
      __response__;
      channel;
      participant;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.DeleteParticipantHistory';
        this.constructorId = 913655003;
        this.subclassOfId = 743031062;
        this._slots = ['channel', 'participant'];
        this.channel = params.channel;
        this.participant = params.participant;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let participant = await TLObject.read(b);
        return new Raw2.channels.DeleteParticipantHistory({
          channel,
          participant,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.participant !== void 0) {
          b.write(this.participant.write());
        }
        return b.buffer;
      }
    }
    channels2.DeleteParticipantHistory = DeleteParticipantHistory;
    class ToggleJoinToSend extends TLObject {
      __response__;
      channel;
      enabled;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ToggleJoinToSend';
        this.constructorId = 3838547328;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'enabled'];
        this.channel = params.channel;
        this.enabled = params.enabled;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let enabled = await Primitive.Bool.read(b);
        return new Raw2.channels.ToggleJoinToSend({ channel, enabled });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.enabled !== void 0) {
          b.write(Primitive.Bool.write(this.enabled));
        }
        return b.buffer;
      }
    }
    channels2.ToggleJoinToSend = ToggleJoinToSend;
    class ToggleJoinRequest extends TLObject {
      __response__;
      channel;
      enabled;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ToggleJoinRequest';
        this.constructorId = 1277789622;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'enabled'];
        this.channel = params.channel;
        this.enabled = params.enabled;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let enabled = await Primitive.Bool.read(b);
        return new Raw2.channels.ToggleJoinRequest({ channel, enabled });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.enabled !== void 0) {
          b.write(Primitive.Bool.write(this.enabled));
        }
        return b.buffer;
      }
    }
    channels2.ToggleJoinRequest = ToggleJoinRequest;
    class ReorderUsernames extends TLObject {
      __response__;
      channel;
      order;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ReorderUsernames';
        this.constructorId = 3025988893;
        this.subclassOfId = 4122188204;
        this._slots = ['channel', 'order'];
        this.channel = params.channel;
        this.order = params.order;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let order = await TLObject.read(b, Primitive.String);
        return new Raw2.channels.ReorderUsernames({ channel, order });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.order) {
          b.write(Primitive.Vector.write(this.order, Primitive.String));
        }
        return b.buffer;
      }
    }
    channels2.ReorderUsernames = ReorderUsernames;
    class ToggleUsername extends TLObject {
      __response__;
      channel;
      username;
      active;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ToggleUsername';
        this.constructorId = 1358053637;
        this.subclassOfId = 4122188204;
        this._slots = ['channel', 'username', 'active'];
        this.channel = params.channel;
        this.username = params.username;
        this.active = params.active;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let username = await Primitive.String.read(b);
        let active = await Primitive.Bool.read(b);
        return new Raw2.channels.ToggleUsername({
          channel,
          username,
          active,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.username !== void 0) {
          b.write(Primitive.String.write(this.username));
        }
        if (this.active !== void 0) {
          b.write(Primitive.Bool.write(this.active));
        }
        return b.buffer;
      }
    }
    channels2.ToggleUsername = ToggleUsername;
    class DeactivateAllUsernames extends TLObject {
      __response__;
      channel;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.DeactivateAllUsernames';
        this.constructorId = 170155475;
        this.subclassOfId = 4122188204;
        this._slots = ['channel'];
        this.channel = params.channel;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        return new Raw2.channels.DeactivateAllUsernames({ channel });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        return b.buffer;
      }
    }
    channels2.DeactivateAllUsernames = DeactivateAllUsernames;
    class ToggleForum extends TLObject {
      __response__;
      channel;
      enabled;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ToggleForum';
        this.constructorId = 2754186025;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'enabled'];
        this.channel = params.channel;
        this.enabled = params.enabled;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let enabled = await Primitive.Bool.read(b);
        return new Raw2.channels.ToggleForum({ channel, enabled });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.enabled !== void 0) {
          b.write(Primitive.Bool.write(this.enabled));
        }
        return b.buffer;
      }
    }
    channels2.ToggleForum = ToggleForum;
    class CreateForumTopic extends TLObject {
      __response__;
      channel;
      title;
      iconColor;
      iconEmojiId;
      randomId;
      sendAs;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.CreateForumTopic';
        this.constructorId = 4094427684;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'title', 'iconColor', 'iconEmojiId', 'randomId', 'sendAs'];
        this.channel = params.channel;
        this.title = params.title;
        this.iconColor = params.iconColor;
        this.iconEmojiId = params.iconEmojiId;
        this.randomId = params.randomId;
        this.sendAs = params.sendAs;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let channel = await TLObject.read(b);
        let title = await Primitive.String.read(b);
        let iconColor = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        let iconEmojiId = flags & (1 << 3) ? await Primitive.Long.read(b) : void 0;
        let randomId = await Primitive.Long.read(b);
        let sendAs = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        return new Raw2.channels.CreateForumTopic({
          channel,
          title,
          iconColor,
          iconEmojiId,
          randomId,
          sendAs,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.iconColor !== void 0 ? 1 << 0 : 0;
        flags |= this.iconEmojiId !== void 0 ? 1 << 3 : 0;
        flags |= this.sendAs !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        if (this.iconColor !== void 0) {
          b.write(Primitive.Int.write(this.iconColor));
        }
        if (this.iconEmojiId !== void 0) {
          b.write(Primitive.Long.write(this.iconEmojiId));
        }
        if (this.randomId !== void 0) {
          b.write(Primitive.Long.write(this.randomId));
        }
        if (this.sendAs !== void 0) {
          b.write(this.sendAs.write());
        }
        return b.buffer;
      }
    }
    channels2.CreateForumTopic = CreateForumTopic;
    class GetForumTopics extends TLObject {
      __response__;
      channel;
      q;
      offsetDate;
      offsetId;
      offsetTopic;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.GetForumTopics';
        this.constructorId = 233136337;
        this.subclassOfId = 2384281118;
        this._slots = ['channel', 'q', 'offsetDate', 'offsetId', 'offsetTopic', 'limit'];
        this.channel = params.channel;
        this.q = params.q;
        this.offsetDate = params.offsetDate;
        this.offsetId = params.offsetId;
        this.offsetTopic = params.offsetTopic;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let channel = await TLObject.read(b);
        let q = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let offsetDate = await Primitive.Int.read(b);
        let offsetId = await Primitive.Int.read(b);
        let offsetTopic = await Primitive.Int.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.channels.GetForumTopics({
          channel,
          q,
          offsetDate,
          offsetId,
          offsetTopic,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.q !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.q !== void 0) {
          b.write(Primitive.String.write(this.q));
        }
        if (this.offsetDate !== void 0) {
          b.write(Primitive.Int.write(this.offsetDate));
        }
        if (this.offsetId !== void 0) {
          b.write(Primitive.Int.write(this.offsetId));
        }
        if (this.offsetTopic !== void 0) {
          b.write(Primitive.Int.write(this.offsetTopic));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    channels2.GetForumTopics = GetForumTopics;
    class GetForumTopicsByID extends TLObject {
      __response__;
      channel;
      topics;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.GetForumTopicsByID';
        this.constructorId = 2961383097;
        this.subclassOfId = 2384281118;
        this._slots = ['channel', 'topics'];
        this.channel = params.channel;
        this.topics = params.topics;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let topics = await TLObject.read(b, Primitive.Int);
        return new Raw2.channels.GetForumTopicsByID({ channel, topics });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.topics) {
          b.write(Primitive.Vector.write(this.topics, Primitive.Int));
        }
        return b.buffer;
      }
    }
    channels2.GetForumTopicsByID = GetForumTopicsByID;
    class EditForumTopic extends TLObject {
      __response__;
      channel;
      topicId;
      title;
      iconEmojiId;
      closed;
      hidden;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.EditForumTopic';
        this.constructorId = 4108296581;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'topicId', 'title', 'iconEmojiId', 'closed', 'hidden'];
        this.channel = params.channel;
        this.topicId = params.topicId;
        this.title = params.title;
        this.iconEmojiId = params.iconEmojiId;
        this.closed = params.closed;
        this.hidden = params.hidden;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let channel = await TLObject.read(b);
        let topicId = await Primitive.Int.read(b);
        let title = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let iconEmojiId = flags & (1 << 1) ? await Primitive.Long.read(b) : void 0;
        let closed = flags & (1 << 2) ? await Primitive.Bool.read(b) : void 0;
        let hidden = flags & (1 << 3) ? await Primitive.Bool.read(b) : void 0;
        return new Raw2.channels.EditForumTopic({
          channel,
          topicId,
          title,
          iconEmojiId,
          closed,
          hidden,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.title !== void 0 ? 1 << 0 : 0;
        flags |= this.iconEmojiId !== void 0 ? 1 << 1 : 0;
        flags |= this.closed !== void 0 ? 1 << 2 : 0;
        flags |= this.hidden !== void 0 ? 1 << 3 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.topicId !== void 0) {
          b.write(Primitive.Int.write(this.topicId));
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        if (this.iconEmojiId !== void 0) {
          b.write(Primitive.Long.write(this.iconEmojiId));
        }
        if (this.closed !== void 0) {
          b.write(Primitive.Bool.write(this.closed));
        }
        if (this.hidden !== void 0) {
          b.write(Primitive.Bool.write(this.hidden));
        }
        return b.buffer;
      }
    }
    channels2.EditForumTopic = EditForumTopic;
    class UpdatePinnedForumTopic extends TLObject {
      __response__;
      channel;
      topicId;
      pinned;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.UpdatePinnedForumTopic';
        this.constructorId = 1814925350;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'topicId', 'pinned'];
        this.channel = params.channel;
        this.topicId = params.topicId;
        this.pinned = params.pinned;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let topicId = await Primitive.Int.read(b);
        let pinned = await Primitive.Bool.read(b);
        return new Raw2.channels.UpdatePinnedForumTopic({
          channel,
          topicId,
          pinned,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.topicId !== void 0) {
          b.write(Primitive.Int.write(this.topicId));
        }
        if (this.pinned !== void 0) {
          b.write(Primitive.Bool.write(this.pinned));
        }
        return b.buffer;
      }
    }
    channels2.UpdatePinnedForumTopic = UpdatePinnedForumTopic;
    class DeleteTopicHistory extends TLObject {
      __response__;
      channel;
      topMsgId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.DeleteTopicHistory';
        this.constructorId = 876830509;
        this.subclassOfId = 743031062;
        this._slots = ['channel', 'topMsgId'];
        this.channel = params.channel;
        this.topMsgId = params.topMsgId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let topMsgId = await Primitive.Int.read(b);
        return new Raw2.channels.DeleteTopicHistory({ channel, topMsgId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.topMsgId !== void 0) {
          b.write(Primitive.Int.write(this.topMsgId));
        }
        return b.buffer;
      }
    }
    channels2.DeleteTopicHistory = DeleteTopicHistory;
    class ReorderPinnedForumTopics extends TLObject {
      __response__;
      force;
      channel;
      order;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ReorderPinnedForumTopics';
        this.constructorId = 693150095;
        this.subclassOfId = 2331323052;
        this._slots = ['force', 'channel', 'order'];
        this.force = params.force;
        this.channel = params.channel;
        this.order = params.order;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let force = flags & (1 << 0) ? true : false;
        let channel = await TLObject.read(b);
        let order = await TLObject.read(b, Primitive.Int);
        return new Raw2.channels.ReorderPinnedForumTopics({
          force,
          channel,
          order,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.force ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.order) {
          b.write(Primitive.Vector.write(this.order, Primitive.Int));
        }
        return b.buffer;
      }
    }
    channels2.ReorderPinnedForumTopics = ReorderPinnedForumTopics;
    class ToggleAntiSpam extends TLObject {
      __response__;
      channel;
      enabled;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ToggleAntiSpam';
        this.constructorId = 1760814315;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'enabled'];
        this.channel = params.channel;
        this.enabled = params.enabled;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let enabled = await Primitive.Bool.read(b);
        return new Raw2.channels.ToggleAntiSpam({ channel, enabled });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.enabled !== void 0) {
          b.write(Primitive.Bool.write(this.enabled));
        }
        return b.buffer;
      }
    }
    channels2.ToggleAntiSpam = ToggleAntiSpam;
    class ReportAntiSpamFalsePositive extends TLObject {
      __response__;
      channel;
      msgId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ReportAntiSpamFalsePositive';
        this.constructorId = 2823857811;
        this.subclassOfId = 4122188204;
        this._slots = ['channel', 'msgId'];
        this.channel = params.channel;
        this.msgId = params.msgId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let msgId = await Primitive.Int.read(b);
        return new Raw2.channels.ReportAntiSpamFalsePositive({ channel, msgId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        return b.buffer;
      }
    }
    channels2.ReportAntiSpamFalsePositive = ReportAntiSpamFalsePositive;
    class ToggleParticipantsHidden extends TLObject {
      __response__;
      channel;
      enabled;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ToggleParticipantsHidden';
        this.constructorId = 1785624660;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'enabled'];
        this.channel = params.channel;
        this.enabled = params.enabled;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let enabled = await Primitive.Bool.read(b);
        return new Raw2.channels.ToggleParticipantsHidden({ channel, enabled });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.enabled !== void 0) {
          b.write(Primitive.Bool.write(this.enabled));
        }
        return b.buffer;
      }
    }
    channels2.ToggleParticipantsHidden = ToggleParticipantsHidden;
    class ClickSponsoredMessage extends TLObject {
      __response__;
      channel;
      randomId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ClickSponsoredMessage';
        this.constructorId = 414170259;
        this.subclassOfId = 4122188204;
        this._slots = ['channel', 'randomId'];
        this.channel = params.channel;
        this.randomId = params.randomId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let randomId = await Primitive.Bytes.read(b);
        return new Raw2.channels.ClickSponsoredMessage({ channel, randomId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.randomId !== void 0) {
          b.write(Primitive.Bytes.write(this.randomId));
        }
        return b.buffer;
      }
    }
    channels2.ClickSponsoredMessage = ClickSponsoredMessage;
    class UpdateColor extends TLObject {
      __response__;
      forProfile;
      channel;
      color;
      backgroundEmojiId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.UpdateColor';
        this.constructorId = 3635033713;
        this.subclassOfId = 2331323052;
        this._slots = ['forProfile', 'channel', 'color', 'backgroundEmojiId'];
        this.forProfile = params.forProfile;
        this.channel = params.channel;
        this.color = params.color;
        this.backgroundEmojiId = params.backgroundEmojiId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let forProfile = flags & (1 << 1) ? true : false;
        let channel = await TLObject.read(b);
        let color = flags & (1 << 2) ? await Primitive.Int.read(b) : void 0;
        let backgroundEmojiId = flags & (1 << 0) ? await Primitive.Long.read(b) : void 0;
        return new Raw2.channels.UpdateColor({
          forProfile,
          channel,
          color,
          backgroundEmojiId,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.forProfile ? 1 << 1 : 0;
        flags |= this.color !== void 0 ? 1 << 2 : 0;
        flags |= this.backgroundEmojiId !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.color !== void 0) {
          b.write(Primitive.Int.write(this.color));
        }
        if (this.backgroundEmojiId !== void 0) {
          b.write(Primitive.Long.write(this.backgroundEmojiId));
        }
        return b.buffer;
      }
    }
    channels2.UpdateColor = UpdateColor;
    class ToggleViewForumAsMessages extends TLObject {
      __response__;
      channel;
      enabled;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ToggleViewForumAsMessages';
        this.constructorId = 2537077525;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'enabled'];
        this.channel = params.channel;
        this.enabled = params.enabled;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let enabled = await Primitive.Bool.read(b);
        return new Raw2.channels.ToggleViewForumAsMessages({ channel, enabled });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.enabled !== void 0) {
          b.write(Primitive.Bool.write(this.enabled));
        }
        return b.buffer;
      }
    }
    channels2.ToggleViewForumAsMessages = ToggleViewForumAsMessages;
    class GetChannelRecommendations extends TLObject {
      __response__;
      channel;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.GetChannelRecommendations';
        this.constructorId = 631707458;
        this.subclassOfId = 2580925204;
        this._slots = ['channel'];
        this.channel = params.channel;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let channel = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        return new Raw2.channels.GetChannelRecommendations({ channel });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.channel !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        return b.buffer;
      }
    }
    channels2.GetChannelRecommendations = GetChannelRecommendations;
    class UpdateEmojiStatus extends TLObject {
      __response__;
      channel;
      emojiStatus;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.UpdateEmojiStatus';
        this.constructorId = 4040418984;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'emojiStatus'];
        this.channel = params.channel;
        this.emojiStatus = params.emojiStatus;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let emojiStatus = await TLObject.read(b);
        return new Raw2.channels.UpdateEmojiStatus({ channel, emojiStatus });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.emojiStatus !== void 0) {
          b.write(this.emojiStatus.write());
        }
        return b.buffer;
      }
    }
    channels2.UpdateEmojiStatus = UpdateEmojiStatus;
    class SetBoostsToUnblockRestrictions extends TLObject {
      __response__;
      channel;
      boosts;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.SetBoostsToUnblockRestrictions';
        this.constructorId = 2906234094;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'boosts'];
        this.channel = params.channel;
        this.boosts = params.boosts;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let boosts = await Primitive.Int.read(b);
        return new Raw2.channels.SetBoostsToUnblockRestrictions({
          channel,
          boosts,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.boosts !== void 0) {
          b.write(Primitive.Int.write(this.boosts));
        }
        return b.buffer;
      }
    }
    channels2.SetBoostsToUnblockRestrictions = SetBoostsToUnblockRestrictions;
    class SetEmojiStickers extends TLObject {
      __response__;
      channel;
      stickerset;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.SetEmojiStickers';
        this.constructorId = 1020866743;
        this.subclassOfId = 4122188204;
        this._slots = ['channel', 'stickerset'];
        this.channel = params.channel;
        this.stickerset = params.stickerset;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let stickerset = await TLObject.read(b);
        return new Raw2.channels.SetEmojiStickers({ channel, stickerset });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.stickerset !== void 0) {
          b.write(this.stickerset.write());
        }
        return b.buffer;
      }
    }
    channels2.SetEmojiStickers = SetEmojiStickers;
    class ReportSponsoredMessage extends TLObject {
      __response__;
      channel;
      randomId;
      option;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.ReportSponsoredMessage';
        this.constructorId = 2945447609;
        this.subclassOfId = 639834146;
        this._slots = ['channel', 'randomId', 'option'];
        this.channel = params.channel;
        this.randomId = params.randomId;
        this.option = params.option;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let randomId = await Primitive.Bytes.read(b);
        let option = await Primitive.Bytes.read(b);
        return new Raw2.channels.ReportSponsoredMessage({
          channel,
          randomId,
          option,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.randomId !== void 0) {
          b.write(Primitive.Bytes.write(this.randomId));
        }
        if (this.option !== void 0) {
          b.write(Primitive.Bytes.write(this.option));
        }
        return b.buffer;
      }
    }
    channels2.ReportSponsoredMessage = ReportSponsoredMessage;
    class RestrictSponsoredMessages extends TLObject {
      __response__;
      channel;
      restricted;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'channels.RestrictSponsoredMessages';
        this.constructorId = 2598966553;
        this.subclassOfId = 2331323052;
        this._slots = ['channel', 'restricted'];
        this.channel = params.channel;
        this.restricted = params.restricted;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let restricted = await Primitive.Bool.read(b);
        return new Raw2.channels.RestrictSponsoredMessages({
          channel,
          restricted,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.restricted !== void 0) {
          b.write(Primitive.Bool.write(this.restricted));
        }
        return b.buffer;
      }
    }
    channels2.RestrictSponsoredMessages = RestrictSponsoredMessages;
  })((channels = Raw2.channels || (Raw2.channels = {})));
  let payments;
  ((payments2) => {
    class PaymentForm extends TLObject {
      canSaveCredentials;
      passwordMissing;
      formId;
      botId;
      title;
      description;
      photo;
      invoice;
      providerId;
      url;
      nativeProvider;
      nativeParams;
      additionalMethods;
      savedInfo;
      savedCredentials;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'payments.PaymentForm';
        this.constructorId = 2684716881;
        this.subclassOfId = 2689089305;
        this._slots = [
          'canSaveCredentials',
          'passwordMissing',
          'formId',
          'botId',
          'title',
          'description',
          'photo',
          'invoice',
          'providerId',
          'url',
          'nativeProvider',
          'nativeParams',
          'additionalMethods',
          'savedInfo',
          'savedCredentials',
          'users',
        ];
        this.canSaveCredentials = params.canSaveCredentials;
        this.passwordMissing = params.passwordMissing;
        this.formId = params.formId;
        this.botId = params.botId;
        this.title = params.title;
        this.description = params.description;
        this.photo = params.photo;
        this.invoice = params.invoice;
        this.providerId = params.providerId;
        this.url = params.url;
        this.nativeProvider = params.nativeProvider;
        this.nativeParams = params.nativeParams;
        this.additionalMethods = params.additionalMethods;
        this.savedInfo = params.savedInfo;
        this.savedCredentials = params.savedCredentials;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let canSaveCredentials = flags & (1 << 2) ? true : false;
        let passwordMissing = flags & (1 << 3) ? true : false;
        let formId = await Primitive.Long.read(b);
        let botId = await Primitive.Long.read(b);
        let title = await Primitive.String.read(b);
        let description = await Primitive.String.read(b);
        let photo = flags & (1 << 5) ? await TLObject.read(b) : void 0;
        let invoice = await TLObject.read(b);
        let providerId = await Primitive.Long.read(b);
        let url = await Primitive.String.read(b);
        let nativeProvider = flags & (1 << 4) ? await Primitive.String.read(b) : void 0;
        let nativeParams = flags & (1 << 4) ? await TLObject.read(b) : void 0;
        let additionalMethods = flags & (1 << 6) ? await TLObject.read(b) : [];
        let savedInfo = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let savedCredentials = flags & (1 << 1) ? await TLObject.read(b) : [];
        let users2 = await TLObject.read(b);
        return new Raw2.payments.PaymentForm({
          canSaveCredentials,
          passwordMissing,
          formId,
          botId,
          title,
          description,
          photo,
          invoice,
          providerId,
          url,
          nativeProvider,
          nativeParams,
          additionalMethods,
          savedInfo,
          savedCredentials,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.canSaveCredentials ? 1 << 2 : 0;
        flags |= this.passwordMissing ? 1 << 3 : 0;
        flags |= this.photo !== void 0 ? 1 << 5 : 0;
        flags |= this.nativeProvider !== void 0 ? 1 << 4 : 0;
        flags |= this.nativeParams !== void 0 ? 1 << 4 : 0;
        flags |= this.additionalMethods ? 1 << 6 : 0;
        flags |= this.savedInfo !== void 0 ? 1 << 0 : 0;
        flags |= this.savedCredentials ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.formId !== void 0) {
          b.write(Primitive.Long.write(this.formId));
        }
        if (this.botId !== void 0) {
          b.write(Primitive.Long.write(this.botId));
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        if (this.description !== void 0) {
          b.write(Primitive.String.write(this.description));
        }
        if (this.photo !== void 0) {
          b.write(this.photo.write());
        }
        if (this.invoice !== void 0) {
          b.write(this.invoice.write());
        }
        if (this.providerId !== void 0) {
          b.write(Primitive.Long.write(this.providerId));
        }
        if (this.url !== void 0) {
          b.write(Primitive.String.write(this.url));
        }
        if (this.nativeProvider !== void 0) {
          b.write(Primitive.String.write(this.nativeProvider));
        }
        if (this.nativeParams !== void 0) {
          b.write(this.nativeParams.write());
        }
        if (this.additionalMethods) {
          b.write(Primitive.Vector.write(this.additionalMethods));
        }
        if (this.savedInfo !== void 0) {
          b.write(this.savedInfo.write());
        }
        if (this.savedCredentials) {
          b.write(Primitive.Vector.write(this.savedCredentials));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    payments2.PaymentForm = PaymentForm;
    class ValidatedRequestedInfo extends TLObject {
      id;
      shippingOptions;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'payments.ValidatedRequestedInfo';
        this.constructorId = 3510966403;
        this.subclassOfId = 2407548087;
        this._slots = ['id', 'shippingOptions'];
        this.id = params.id;
        this.shippingOptions = params.shippingOptions;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let id = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let shippingOptions = flags & (1 << 1) ? await TLObject.read(b) : [];
        return new Raw2.payments.ValidatedRequestedInfo({
          id,
          shippingOptions,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.id !== void 0 ? 1 << 0 : 0;
        flags |= this.shippingOptions ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.id !== void 0) {
          b.write(Primitive.String.write(this.id));
        }
        if (this.shippingOptions) {
          b.write(Primitive.Vector.write(this.shippingOptions));
        }
        return b.buffer;
      }
    }
    payments2.ValidatedRequestedInfo = ValidatedRequestedInfo;
    class PaymentResult extends TLObject {
      updates;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'payments.PaymentResult';
        this.constructorId = 1314881805;
        this.subclassOfId = 2330028701;
        this._slots = ['updates'];
        this.updates = params.updates;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let updates2 = await TLObject.read(b);
        return new Raw2.payments.PaymentResult({ updates: updates2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.updates !== void 0) {
          b.write(this.updates.write());
        }
        return b.buffer;
      }
    }
    payments2.PaymentResult = PaymentResult;
    class PaymentVerificationNeeded extends TLObject {
      url;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'payments.PaymentVerificationNeeded';
        this.constructorId = 3628142905;
        this.subclassOfId = 2330028701;
        this._slots = ['url'];
        this.url = params.url;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let url = await Primitive.String.read(b);
        return new Raw2.payments.PaymentVerificationNeeded({ url });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.url !== void 0) {
          b.write(Primitive.String.write(this.url));
        }
        return b.buffer;
      }
    }
    payments2.PaymentVerificationNeeded = PaymentVerificationNeeded;
    class PaymentReceipt extends TLObject {
      date;
      botId;
      providerId;
      title;
      description;
      photo;
      invoice;
      info;
      shipping;
      tipAmount;
      currency;
      totalAmount;
      credentialsTitle;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'payments.PaymentReceipt';
        this.constructorId = 1891958275;
        this.subclassOfId = 1493210057;
        this._slots = [
          'date',
          'botId',
          'providerId',
          'title',
          'description',
          'photo',
          'invoice',
          'info',
          'shipping',
          'tipAmount',
          'currency',
          'totalAmount',
          'credentialsTitle',
          'users',
        ];
        this.date = params.date;
        this.botId = params.botId;
        this.providerId = params.providerId;
        this.title = params.title;
        this.description = params.description;
        this.photo = params.photo;
        this.invoice = params.invoice;
        this.info = params.info;
        this.shipping = params.shipping;
        this.tipAmount = params.tipAmount;
        this.currency = params.currency;
        this.totalAmount = params.totalAmount;
        this.credentialsTitle = params.credentialsTitle;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let date = await Primitive.Int.read(b);
        let botId = await Primitive.Long.read(b);
        let providerId = await Primitive.Long.read(b);
        let title = await Primitive.String.read(b);
        let description = await Primitive.String.read(b);
        let photo = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let invoice = await TLObject.read(b);
        let info = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let shipping = flags & (1 << 1) ? await TLObject.read(b) : void 0;
        let tipAmount = flags & (1 << 3) ? await Primitive.Long.read(b) : void 0;
        let currency = await Primitive.String.read(b);
        let totalAmount = await Primitive.Long.read(b);
        let credentialsTitle = await Primitive.String.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.payments.PaymentReceipt({
          date,
          botId,
          providerId,
          title,
          description,
          photo,
          invoice,
          info,
          shipping,
          tipAmount,
          currency,
          totalAmount,
          credentialsTitle,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.photo !== void 0 ? 1 << 2 : 0;
        flags |= this.info !== void 0 ? 1 << 0 : 0;
        flags |= this.shipping !== void 0 ? 1 << 1 : 0;
        flags |= this.tipAmount !== void 0 ? 1 << 3 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.date !== void 0) {
          b.write(Primitive.Int.write(this.date));
        }
        if (this.botId !== void 0) {
          b.write(Primitive.Long.write(this.botId));
        }
        if (this.providerId !== void 0) {
          b.write(Primitive.Long.write(this.providerId));
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        if (this.description !== void 0) {
          b.write(Primitive.String.write(this.description));
        }
        if (this.photo !== void 0) {
          b.write(this.photo.write());
        }
        if (this.invoice !== void 0) {
          b.write(this.invoice.write());
        }
        if (this.info !== void 0) {
          b.write(this.info.write());
        }
        if (this.shipping !== void 0) {
          b.write(this.shipping.write());
        }
        if (this.tipAmount !== void 0) {
          b.write(Primitive.Long.write(this.tipAmount));
        }
        if (this.currency !== void 0) {
          b.write(Primitive.String.write(this.currency));
        }
        if (this.totalAmount !== void 0) {
          b.write(Primitive.Long.write(this.totalAmount));
        }
        if (this.credentialsTitle !== void 0) {
          b.write(Primitive.String.write(this.credentialsTitle));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    payments2.PaymentReceipt = PaymentReceipt;
    class SavedInfo extends TLObject {
      hasSavedCredentials;
      savedInfo;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'payments.SavedInfo';
        this.constructorId = 4220511292;
        this.subclassOfId = 2906452294;
        this._slots = ['hasSavedCredentials', 'savedInfo'];
        this.hasSavedCredentials = params.hasSavedCredentials;
        this.savedInfo = params.savedInfo;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let hasSavedCredentials = flags & (1 << 1) ? true : false;
        let savedInfo = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        return new Raw2.payments.SavedInfo({
          hasSavedCredentials,
          savedInfo,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.hasSavedCredentials ? 1 << 1 : 0;
        flags |= this.savedInfo !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.savedInfo !== void 0) {
          b.write(this.savedInfo.write());
        }
        return b.buffer;
      }
    }
    payments2.SavedInfo = SavedInfo;
    class BankCardData extends TLObject {
      title;
      openUrls;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'payments.BankCardData';
        this.constructorId = 1042605427;
        this.subclassOfId = 2356008587;
        this._slots = ['title', 'openUrls'];
        this.title = params.title;
        this.openUrls = params.openUrls;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let title = await Primitive.String.read(b);
        let openUrls = await TLObject.read(b);
        return new Raw2.payments.BankCardData({ title, openUrls });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        if (this.openUrls) {
          b.write(Primitive.Vector.write(this.openUrls));
        }
        return b.buffer;
      }
    }
    payments2.BankCardData = BankCardData;
    class ExportedInvoice extends TLObject {
      url;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'payments.ExportedInvoice';
        this.constructorId = 2932919257;
        this.subclassOfId = 907039794;
        this._slots = ['url'];
        this.url = params.url;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let url = await Primitive.String.read(b);
        return new Raw2.payments.ExportedInvoice({ url });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.url !== void 0) {
          b.write(Primitive.String.write(this.url));
        }
        return b.buffer;
      }
    }
    payments2.ExportedInvoice = ExportedInvoice;
    class CheckedGiftCode extends TLObject {
      viaGiveaway;
      fromId;
      giveawayMsgId;
      toId;
      date;
      months;
      usedDate;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'payments.CheckedGiftCode';
        this.constructorId = 675942550;
        this.subclassOfId = 1529452520;
        this._slots = [
          'viaGiveaway',
          'fromId',
          'giveawayMsgId',
          'toId',
          'date',
          'months',
          'usedDate',
          'chats',
          'users',
        ];
        this.viaGiveaway = params.viaGiveaway;
        this.fromId = params.fromId;
        this.giveawayMsgId = params.giveawayMsgId;
        this.toId = params.toId;
        this.date = params.date;
        this.months = params.months;
        this.usedDate = params.usedDate;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let viaGiveaway = flags & (1 << 2) ? true : false;
        let fromId = flags & (1 << 4) ? await TLObject.read(b) : void 0;
        let giveawayMsgId = flags & (1 << 3) ? await Primitive.Int.read(b) : void 0;
        let toId = flags & (1 << 0) ? await Primitive.Long.read(b) : void 0;
        let date = await Primitive.Int.read(b);
        let months = await Primitive.Int.read(b);
        let usedDate = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.payments.CheckedGiftCode({
          viaGiveaway,
          fromId,
          giveawayMsgId,
          toId,
          date,
          months,
          usedDate,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.viaGiveaway ? 1 << 2 : 0;
        flags |= this.fromId !== void 0 ? 1 << 4 : 0;
        flags |= this.giveawayMsgId !== void 0 ? 1 << 3 : 0;
        flags |= this.toId !== void 0 ? 1 << 0 : 0;
        flags |= this.usedDate !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.fromId !== void 0) {
          b.write(this.fromId.write());
        }
        if (this.giveawayMsgId !== void 0) {
          b.write(Primitive.Int.write(this.giveawayMsgId));
        }
        if (this.toId !== void 0) {
          b.write(Primitive.Long.write(this.toId));
        }
        if (this.date !== void 0) {
          b.write(Primitive.Int.write(this.date));
        }
        if (this.months !== void 0) {
          b.write(Primitive.Int.write(this.months));
        }
        if (this.usedDate !== void 0) {
          b.write(Primitive.Int.write(this.usedDate));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    payments2.CheckedGiftCode = CheckedGiftCode;
    class GiveawayInfo extends TLObject {
      participating;
      preparingResults;
      startDate;
      joinedTooEarlyDate;
      adminDisallowedChatId;
      disallowedCountry;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'payments.GiveawayInfo';
        this.constructorId = 1130879648;
        this.subclassOfId = 2527295421;
        this._slots = [
          'participating',
          'preparingResults',
          'startDate',
          'joinedTooEarlyDate',
          'adminDisallowedChatId',
          'disallowedCountry',
        ];
        this.participating = params.participating;
        this.preparingResults = params.preparingResults;
        this.startDate = params.startDate;
        this.joinedTooEarlyDate = params.joinedTooEarlyDate;
        this.adminDisallowedChatId = params.adminDisallowedChatId;
        this.disallowedCountry = params.disallowedCountry;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let participating = flags & (1 << 0) ? true : false;
        let preparingResults = flags & (1 << 3) ? true : false;
        let startDate = await Primitive.Int.read(b);
        let joinedTooEarlyDate = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let adminDisallowedChatId = flags & (1 << 2) ? await Primitive.Long.read(b) : void 0;
        let disallowedCountry = flags & (1 << 4) ? await Primitive.String.read(b) : void 0;
        return new Raw2.payments.GiveawayInfo({
          participating,
          preparingResults,
          startDate,
          joinedTooEarlyDate,
          adminDisallowedChatId,
          disallowedCountry,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.participating ? 1 << 0 : 0;
        flags |= this.preparingResults ? 1 << 3 : 0;
        flags |= this.joinedTooEarlyDate !== void 0 ? 1 << 1 : 0;
        flags |= this.adminDisallowedChatId !== void 0 ? 1 << 2 : 0;
        flags |= this.disallowedCountry !== void 0 ? 1 << 4 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.startDate !== void 0) {
          b.write(Primitive.Int.write(this.startDate));
        }
        if (this.joinedTooEarlyDate !== void 0) {
          b.write(Primitive.Int.write(this.joinedTooEarlyDate));
        }
        if (this.adminDisallowedChatId !== void 0) {
          b.write(Primitive.Long.write(this.adminDisallowedChatId));
        }
        if (this.disallowedCountry !== void 0) {
          b.write(Primitive.String.write(this.disallowedCountry));
        }
        return b.buffer;
      }
    }
    payments2.GiveawayInfo = GiveawayInfo;
    class GiveawayInfoResults extends TLObject {
      winner;
      refunded;
      startDate;
      giftCodeSlug;
      finishDate;
      winnersCount;
      activatedCount;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'payments.GiveawayInfoResults';
        this.constructorId = 13456752;
        this.subclassOfId = 2527295421;
        this._slots = [
          'winner',
          'refunded',
          'startDate',
          'giftCodeSlug',
          'finishDate',
          'winnersCount',
          'activatedCount',
        ];
        this.winner = params.winner;
        this.refunded = params.refunded;
        this.startDate = params.startDate;
        this.giftCodeSlug = params.giftCodeSlug;
        this.finishDate = params.finishDate;
        this.winnersCount = params.winnersCount;
        this.activatedCount = params.activatedCount;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let winner = flags & (1 << 0) ? true : false;
        let refunded = flags & (1 << 1) ? true : false;
        let startDate = await Primitive.Int.read(b);
        let giftCodeSlug = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let finishDate = await Primitive.Int.read(b);
        let winnersCount = await Primitive.Int.read(b);
        let activatedCount = await Primitive.Int.read(b);
        return new Raw2.payments.GiveawayInfoResults({
          winner,
          refunded,
          startDate,
          giftCodeSlug,
          finishDate,
          winnersCount,
          activatedCount,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.winner ? 1 << 0 : 0;
        flags |= this.refunded ? 1 << 1 : 0;
        flags |= this.giftCodeSlug !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.startDate !== void 0) {
          b.write(Primitive.Int.write(this.startDate));
        }
        if (this.giftCodeSlug !== void 0) {
          b.write(Primitive.String.write(this.giftCodeSlug));
        }
        if (this.finishDate !== void 0) {
          b.write(Primitive.Int.write(this.finishDate));
        }
        if (this.winnersCount !== void 0) {
          b.write(Primitive.Int.write(this.winnersCount));
        }
        if (this.activatedCount !== void 0) {
          b.write(Primitive.Int.write(this.activatedCount));
        }
        return b.buffer;
      }
    }
    payments2.GiveawayInfoResults = GiveawayInfoResults;
    class GetPaymentForm extends TLObject {
      __response__;
      invoice;
      themeParams;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'payments.GetPaymentForm';
        this.constructorId = 924093883;
        this.subclassOfId = 2689089305;
        this._slots = ['invoice', 'themeParams'];
        this.invoice = params.invoice;
        this.themeParams = params.themeParams;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let invoice = await TLObject.read(b);
        let themeParams = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        return new Raw2.payments.GetPaymentForm({ invoice, themeParams });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.themeParams !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.invoice !== void 0) {
          b.write(this.invoice.write());
        }
        if (this.themeParams !== void 0) {
          b.write(this.themeParams.write());
        }
        return b.buffer;
      }
    }
    payments2.GetPaymentForm = GetPaymentForm;
    class GetPaymentReceipt extends TLObject {
      __response__;
      peer;
      msgId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'payments.GetPaymentReceipt';
        this.constructorId = 611897804;
        this.subclassOfId = 1493210057;
        this._slots = ['peer', 'msgId'];
        this.peer = params.peer;
        this.msgId = params.msgId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let msgId = await Primitive.Int.read(b);
        return new Raw2.payments.GetPaymentReceipt({ peer, msgId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        return b.buffer;
      }
    }
    payments2.GetPaymentReceipt = GetPaymentReceipt;
    class ValidateRequestedInfo extends TLObject {
      __response__;
      save;
      invoice;
      info;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'payments.ValidateRequestedInfo';
        this.constructorId = 3066622251;
        this.subclassOfId = 2407548087;
        this._slots = ['save', 'invoice', 'info'];
        this.save = params.save;
        this.invoice = params.invoice;
        this.info = params.info;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let save = flags & (1 << 0) ? true : false;
        let invoice = await TLObject.read(b);
        let info = await TLObject.read(b);
        return new Raw2.payments.ValidateRequestedInfo({ save, invoice, info });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.save ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.invoice !== void 0) {
          b.write(this.invoice.write());
        }
        if (this.info !== void 0) {
          b.write(this.info.write());
        }
        return b.buffer;
      }
    }
    payments2.ValidateRequestedInfo = ValidateRequestedInfo;
    class SendPaymentForm extends TLObject {
      __response__;
      formId;
      invoice;
      requestedInfoId;
      shippingOptionId;
      credentials;
      tipAmount;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'payments.SendPaymentForm';
        this.constructorId = 755192367;
        this.subclassOfId = 2330028701;
        this._slots = [
          'formId',
          'invoice',
          'requestedInfoId',
          'shippingOptionId',
          'credentials',
          'tipAmount',
        ];
        this.formId = params.formId;
        this.invoice = params.invoice;
        this.requestedInfoId = params.requestedInfoId;
        this.shippingOptionId = params.shippingOptionId;
        this.credentials = params.credentials;
        this.tipAmount = params.tipAmount;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let formId = await Primitive.Long.read(b);
        let invoice = await TLObject.read(b);
        let requestedInfoId = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let shippingOptionId = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let credentials = await TLObject.read(b);
        let tipAmount = flags & (1 << 2) ? await Primitive.Long.read(b) : void 0;
        return new Raw2.payments.SendPaymentForm({
          formId,
          invoice,
          requestedInfoId,
          shippingOptionId,
          credentials,
          tipAmount,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.requestedInfoId !== void 0 ? 1 << 0 : 0;
        flags |= this.shippingOptionId !== void 0 ? 1 << 1 : 0;
        flags |= this.tipAmount !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.formId !== void 0) {
          b.write(Primitive.Long.write(this.formId));
        }
        if (this.invoice !== void 0) {
          b.write(this.invoice.write());
        }
        if (this.requestedInfoId !== void 0) {
          b.write(Primitive.String.write(this.requestedInfoId));
        }
        if (this.shippingOptionId !== void 0) {
          b.write(Primitive.String.write(this.shippingOptionId));
        }
        if (this.credentials !== void 0) {
          b.write(this.credentials.write());
        }
        if (this.tipAmount !== void 0) {
          b.write(Primitive.Long.write(this.tipAmount));
        }
        return b.buffer;
      }
    }
    payments2.SendPaymentForm = SendPaymentForm;
    class GetSavedInfo extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'payments.GetSavedInfo';
        this.constructorId = 578650699;
        this.subclassOfId = 2906452294;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.payments.GetSavedInfo();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    payments2.GetSavedInfo = GetSavedInfo;
    class ClearSavedInfo extends TLObject {
      __response__;
      credentials;
      info;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'payments.ClearSavedInfo';
        this.constructorId = 3627905217;
        this.subclassOfId = 4122188204;
        this._slots = ['credentials', 'info'];
        this.credentials = params.credentials;
        this.info = params.info;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let credentials = flags & (1 << 0) ? true : false;
        let info = flags & (1 << 1) ? true : false;
        return new Raw2.payments.ClearSavedInfo({ credentials, info });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.credentials ? 1 << 0 : 0;
        flags |= this.info ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        return b.buffer;
      }
    }
    payments2.ClearSavedInfo = ClearSavedInfo;
    class GetBankCardData extends TLObject {
      __response__;
      number;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'payments.GetBankCardData';
        this.constructorId = 779736953;
        this.subclassOfId = 2356008587;
        this._slots = ['number'];
        this.number = params.number;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let number = await Primitive.String.read(b);
        return new Raw2.payments.GetBankCardData({ number });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.number !== void 0) {
          b.write(Primitive.String.write(this.number));
        }
        return b.buffer;
      }
    }
    payments2.GetBankCardData = GetBankCardData;
    class ExportInvoice extends TLObject {
      __response__;
      invoiceMedia;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'payments.ExportInvoice';
        this.constructorId = 261206117;
        this.subclassOfId = 907039794;
        this._slots = ['invoiceMedia'];
        this.invoiceMedia = params.invoiceMedia;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let invoiceMedia = await TLObject.read(b);
        return new Raw2.payments.ExportInvoice({ invoiceMedia });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.invoiceMedia !== void 0) {
          b.write(this.invoiceMedia.write());
        }
        return b.buffer;
      }
    }
    payments2.ExportInvoice = ExportInvoice;
    class AssignAppStoreTransaction extends TLObject {
      __response__;
      receipt;
      purpose;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'payments.AssignAppStoreTransaction';
        this.constructorId = 2163045501;
        this.subclassOfId = 2331323052;
        this._slots = ['receipt', 'purpose'];
        this.receipt = params.receipt;
        this.purpose = params.purpose;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let receipt = await Primitive.Bytes.read(b);
        let purpose = await TLObject.read(b);
        return new Raw2.payments.AssignAppStoreTransaction({ receipt, purpose });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.receipt !== void 0) {
          b.write(Primitive.Bytes.write(this.receipt));
        }
        if (this.purpose !== void 0) {
          b.write(this.purpose.write());
        }
        return b.buffer;
      }
    }
    payments2.AssignAppStoreTransaction = AssignAppStoreTransaction;
    class AssignPlayMarketTransaction extends TLObject {
      __response__;
      receipt;
      purpose;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'payments.AssignPlayMarketTransaction';
        this.constructorId = 3757920467;
        this.subclassOfId = 2331323052;
        this._slots = ['receipt', 'purpose'];
        this.receipt = params.receipt;
        this.purpose = params.purpose;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let receipt = await TLObject.read(b);
        let purpose = await TLObject.read(b);
        return new Raw2.payments.AssignPlayMarketTransaction({ receipt, purpose });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.receipt !== void 0) {
          b.write(this.receipt.write());
        }
        if (this.purpose !== void 0) {
          b.write(this.purpose.write());
        }
        return b.buffer;
      }
    }
    payments2.AssignPlayMarketTransaction = AssignPlayMarketTransaction;
    class CanPurchasePremium extends TLObject {
      __response__;
      purpose;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'payments.CanPurchasePremium';
        this.constructorId = 2680266422;
        this.subclassOfId = 4122188204;
        this._slots = ['purpose'];
        this.purpose = params.purpose;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let purpose = await TLObject.read(b);
        return new Raw2.payments.CanPurchasePremium({ purpose });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.purpose !== void 0) {
          b.write(this.purpose.write());
        }
        return b.buffer;
      }
    }
    payments2.CanPurchasePremium = CanPurchasePremium;
    class GetPremiumGiftCodeOptions extends TLObject {
      __response__;
      boostPeer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'payments.GetPremiumGiftCodeOptions';
        this.constructorId = 660060756;
        this.subclassOfId = 178857347;
        this._slots = ['boostPeer'];
        this.boostPeer = params.boostPeer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let boostPeer = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        return new Raw2.payments.GetPremiumGiftCodeOptions({ boostPeer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.boostPeer !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.boostPeer !== void 0) {
          b.write(this.boostPeer.write());
        }
        return b.buffer;
      }
    }
    payments2.GetPremiumGiftCodeOptions = GetPremiumGiftCodeOptions;
    class CheckGiftCode extends TLObject {
      __response__;
      slug;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'payments.CheckGiftCode';
        this.constructorId = 2387719361;
        this.subclassOfId = 1529452520;
        this._slots = ['slug'];
        this.slug = params.slug;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let slug = await Primitive.String.read(b);
        return new Raw2.payments.CheckGiftCode({ slug });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.slug !== void 0) {
          b.write(Primitive.String.write(this.slug));
        }
        return b.buffer;
      }
    }
    payments2.CheckGiftCode = CheckGiftCode;
    class ApplyGiftCode extends TLObject {
      __response__;
      slug;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'payments.ApplyGiftCode';
        this.constructorId = 4142032980;
        this.subclassOfId = 2331323052;
        this._slots = ['slug'];
        this.slug = params.slug;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let slug = await Primitive.String.read(b);
        return new Raw2.payments.ApplyGiftCode({ slug });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.slug !== void 0) {
          b.write(Primitive.String.write(this.slug));
        }
        return b.buffer;
      }
    }
    payments2.ApplyGiftCode = ApplyGiftCode;
    class GetGiveawayInfo extends TLObject {
      __response__;
      peer;
      msgId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'payments.GetGiveawayInfo';
        this.constructorId = 4095972389;
        this.subclassOfId = 2527295421;
        this._slots = ['peer', 'msgId'];
        this.peer = params.peer;
        this.msgId = params.msgId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let msgId = await Primitive.Int.read(b);
        return new Raw2.payments.GetGiveawayInfo({ peer, msgId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        return b.buffer;
      }
    }
    payments2.GetGiveawayInfo = GetGiveawayInfo;
    class LaunchPrepaidGiveaway extends TLObject {
      __response__;
      peer;
      giveawayId;
      purpose;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'payments.LaunchPrepaidGiveaway';
        this.constructorId = 1609928480;
        this.subclassOfId = 2331323052;
        this._slots = ['peer', 'giveawayId', 'purpose'];
        this.peer = params.peer;
        this.giveawayId = params.giveawayId;
        this.purpose = params.purpose;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let giveawayId = await Primitive.Long.read(b);
        let purpose = await TLObject.read(b);
        return new Raw2.payments.LaunchPrepaidGiveaway({
          peer,
          giveawayId,
          purpose,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.giveawayId !== void 0) {
          b.write(Primitive.Long.write(this.giveawayId));
        }
        if (this.purpose !== void 0) {
          b.write(this.purpose.write());
        }
        return b.buffer;
      }
    }
    payments2.LaunchPrepaidGiveaway = LaunchPrepaidGiveaway;
  })((payments = Raw2.payments || (Raw2.payments = {})));
  let phone;
  ((phone2) => {
    class PhoneCall2 extends TLObject {
      phoneCall;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'phone.PhoneCall';
        this.constructorId = 3968000320;
        this.subclassOfId = 3565878863;
        this._slots = ['phoneCall', 'users'];
        this.phoneCall = params.phoneCall;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let phoneCall = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.phone.PhoneCall({ phoneCall, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.phoneCall !== void 0) {
          b.write(this.phoneCall.write());
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    phone2.PhoneCall = PhoneCall2;
    class GroupCall2 extends TLObject {
      call;
      participants;
      participantsNextOffset;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'phone.GroupCall';
        this.constructorId = 2658302637;
        this.subclassOfId = 809572030;
        this._slots = ['call', 'participants', 'participantsNextOffset', 'chats', 'users'];
        this.call = params.call;
        this.participants = params.participants;
        this.participantsNextOffset = params.participantsNextOffset;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let call = await TLObject.read(b);
        let participants = await TLObject.read(b);
        let participantsNextOffset = await Primitive.String.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.phone.GroupCall({
          call,
          participants,
          participantsNextOffset,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.call !== void 0) {
          b.write(this.call.write());
        }
        if (this.participants) {
          b.write(Primitive.Vector.write(this.participants));
        }
        if (this.participantsNextOffset !== void 0) {
          b.write(Primitive.String.write(this.participantsNextOffset));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    phone2.GroupCall = GroupCall2;
    class GroupParticipants extends TLObject {
      count;
      participants;
      nextOffset;
      chats;
      users;
      version;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'phone.GroupParticipants';
        this.constructorId = 4101460406;
        this.subclassOfId = 1926431988;
        this._slots = ['count', 'participants', 'nextOffset', 'chats', 'users', 'version'];
        this.count = params.count;
        this.participants = params.participants;
        this.nextOffset = params.nextOffset;
        this.chats = params.chats;
        this.users = params.users;
        this.version = params.version;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let count = await Primitive.Int.read(b);
        let participants = await TLObject.read(b);
        let nextOffset = await Primitive.String.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        let version = await Primitive.Int.read(b);
        return new Raw2.phone.GroupParticipants({
          count,
          participants,
          nextOffset,
          chats,
          users: users2,
          version,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.participants) {
          b.write(Primitive.Vector.write(this.participants));
        }
        if (this.nextOffset !== void 0) {
          b.write(Primitive.String.write(this.nextOffset));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        if (this.version !== void 0) {
          b.write(Primitive.Int.write(this.version));
        }
        return b.buffer;
      }
    }
    phone2.GroupParticipants = GroupParticipants;
    class JoinAsPeers extends TLObject {
      peers;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'phone.JoinAsPeers';
        this.constructorId = 2951045695;
        this.subclassOfId = 3031920891;
        this._slots = ['peers', 'chats', 'users'];
        this.peers = params.peers;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peers = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.phone.JoinAsPeers({ peers, chats, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peers) {
          b.write(Primitive.Vector.write(this.peers));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    phone2.JoinAsPeers = JoinAsPeers;
    class ExportedGroupCallInvite extends TLObject {
      link;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'phone.ExportedGroupCallInvite';
        this.constructorId = 541839704;
        this.subclassOfId = 993787535;
        this._slots = ['link'];
        this.link = params.link;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let link = await Primitive.String.read(b);
        return new Raw2.phone.ExportedGroupCallInvite({ link });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.link !== void 0) {
          b.write(Primitive.String.write(this.link));
        }
        return b.buffer;
      }
    }
    phone2.ExportedGroupCallInvite = ExportedGroupCallInvite;
    class GroupCallStreamChannels extends TLObject {
      channels;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'phone.GroupCallStreamChannels';
        this.constructorId = 3504636594;
        this.subclassOfId = 2438448612;
        this._slots = ['channels'];
        this.channels = params.channels;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channels2 = await TLObject.read(b);
        return new Raw2.phone.GroupCallStreamChannels({ channels: channels2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channels) {
          b.write(Primitive.Vector.write(this.channels));
        }
        return b.buffer;
      }
    }
    phone2.GroupCallStreamChannels = GroupCallStreamChannels;
    class GroupCallStreamRtmpUrl extends TLObject {
      url;
      key;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'phone.GroupCallStreamRtmpUrl';
        this.constructorId = 767505458;
        this.subclassOfId = 3522500043;
        this._slots = ['url', 'key'];
        this.url = params.url;
        this.key = params.key;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let url = await Primitive.String.read(b);
        let key = await Primitive.String.read(b);
        return new Raw2.phone.GroupCallStreamRtmpUrl({ url, key });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.url !== void 0) {
          b.write(Primitive.String.write(this.url));
        }
        if (this.key !== void 0) {
          b.write(Primitive.String.write(this.key));
        }
        return b.buffer;
      }
    }
    phone2.GroupCallStreamRtmpUrl = GroupCallStreamRtmpUrl;
    class GetCallConfig extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'phone.GetCallConfig';
        this.constructorId = 1430593449;
        this.subclassOfId = 2902676200;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.phone.GetCallConfig();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    phone2.GetCallConfig = GetCallConfig;
    class RequestCall extends TLObject {
      __response__;
      video;
      userId;
      randomId;
      gAHash;
      protocol;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.RequestCall';
        this.constructorId = 1124046573;
        this.subclassOfId = 3565878863;
        this._slots = ['video', 'userId', 'randomId', 'gAHash', 'protocol'];
        this.video = params.video;
        this.userId = params.userId;
        this.randomId = params.randomId;
        this.gAHash = params.gAHash;
        this.protocol = params.protocol;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let video = flags & (1 << 0) ? true : false;
        let userId = await TLObject.read(b);
        let randomId = await Primitive.Int.read(b);
        let gAHash = await Primitive.Bytes.read(b);
        let protocol = await TLObject.read(b);
        return new Raw2.phone.RequestCall({
          video,
          userId,
          randomId,
          gAHash,
          protocol,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.video ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        if (this.randomId !== void 0) {
          b.write(Primitive.Int.write(this.randomId));
        }
        if (this.gAHash !== void 0) {
          b.write(Primitive.Bytes.write(this.gAHash));
        }
        if (this.protocol !== void 0) {
          b.write(this.protocol.write());
        }
        return b.buffer;
      }
    }
    phone2.RequestCall = RequestCall;
    class AcceptCall extends TLObject {
      __response__;
      peer;
      gB;
      protocol;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.AcceptCall';
        this.constructorId = 1003664544;
        this.subclassOfId = 3565878863;
        this._slots = ['peer', 'gB', 'protocol'];
        this.peer = params.peer;
        this.gB = params.gB;
        this.protocol = params.protocol;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let gB = await Primitive.Bytes.read(b);
        let protocol = await TLObject.read(b);
        return new Raw2.phone.AcceptCall({ peer, gB, protocol });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.gB !== void 0) {
          b.write(Primitive.Bytes.write(this.gB));
        }
        if (this.protocol !== void 0) {
          b.write(this.protocol.write());
        }
        return b.buffer;
      }
    }
    phone2.AcceptCall = AcceptCall;
    class ConfirmCall extends TLObject {
      __response__;
      peer;
      gA;
      keyFingerprint;
      protocol;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.ConfirmCall';
        this.constructorId = 788404002;
        this.subclassOfId = 3565878863;
        this._slots = ['peer', 'gA', 'keyFingerprint', 'protocol'];
        this.peer = params.peer;
        this.gA = params.gA;
        this.keyFingerprint = params.keyFingerprint;
        this.protocol = params.protocol;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let gA = await Primitive.Bytes.read(b);
        let keyFingerprint = await Primitive.Long.read(b);
        let protocol = await TLObject.read(b);
        return new Raw2.phone.ConfirmCall({
          peer,
          gA,
          keyFingerprint,
          protocol,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.gA !== void 0) {
          b.write(Primitive.Bytes.write(this.gA));
        }
        if (this.keyFingerprint !== void 0) {
          b.write(Primitive.Long.write(this.keyFingerprint));
        }
        if (this.protocol !== void 0) {
          b.write(this.protocol.write());
        }
        return b.buffer;
      }
    }
    phone2.ConfirmCall = ConfirmCall;
    class ReceivedCall extends TLObject {
      __response__;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.ReceivedCall';
        this.constructorId = 399855457;
        this.subclassOfId = 4122188204;
        this._slots = ['peer'];
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        return new Raw2.phone.ReceivedCall({ peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    phone2.ReceivedCall = ReceivedCall;
    class DiscardCall extends TLObject {
      __response__;
      video;
      peer;
      duration;
      reason;
      connectionId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.DiscardCall';
        this.constructorId = 2999697856;
        this.subclassOfId = 2331323052;
        this._slots = ['video', 'peer', 'duration', 'reason', 'connectionId'];
        this.video = params.video;
        this.peer = params.peer;
        this.duration = params.duration;
        this.reason = params.reason;
        this.connectionId = params.connectionId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let video = flags & (1 << 0) ? true : false;
        let peer = await TLObject.read(b);
        let duration = await Primitive.Int.read(b);
        let reason = await TLObject.read(b);
        let connectionId = await Primitive.Long.read(b);
        return new Raw2.phone.DiscardCall({
          video,
          peer,
          duration,
          reason,
          connectionId,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.video ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.duration !== void 0) {
          b.write(Primitive.Int.write(this.duration));
        }
        if (this.reason !== void 0) {
          b.write(this.reason.write());
        }
        if (this.connectionId !== void 0) {
          b.write(Primitive.Long.write(this.connectionId));
        }
        return b.buffer;
      }
    }
    phone2.DiscardCall = DiscardCall;
    class SetCallRating extends TLObject {
      __response__;
      userInitiative;
      peer;
      rating;
      comment;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.SetCallRating';
        this.constructorId = 1508562471;
        this.subclassOfId = 2331323052;
        this._slots = ['userInitiative', 'peer', 'rating', 'comment'];
        this.userInitiative = params.userInitiative;
        this.peer = params.peer;
        this.rating = params.rating;
        this.comment = params.comment;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let userInitiative = flags & (1 << 0) ? true : false;
        let peer = await TLObject.read(b);
        let rating = await Primitive.Int.read(b);
        let comment = await Primitive.String.read(b);
        return new Raw2.phone.SetCallRating({
          userInitiative,
          peer,
          rating,
          comment,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.userInitiative ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.rating !== void 0) {
          b.write(Primitive.Int.write(this.rating));
        }
        if (this.comment !== void 0) {
          b.write(Primitive.String.write(this.comment));
        }
        return b.buffer;
      }
    }
    phone2.SetCallRating = SetCallRating;
    class SaveCallDebug extends TLObject {
      __response__;
      peer;
      debug;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.SaveCallDebug';
        this.constructorId = 662363518;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'debug'];
        this.peer = params.peer;
        this.debug = params.debug;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let debug = await TLObject.read(b);
        return new Raw2.phone.SaveCallDebug({ peer, debug });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.debug !== void 0) {
          b.write(this.debug.write());
        }
        return b.buffer;
      }
    }
    phone2.SaveCallDebug = SaveCallDebug;
    class SendSignalingData extends TLObject {
      __response__;
      peer;
      data;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.SendSignalingData';
        this.constructorId = 4286223235;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'data'];
        this.peer = params.peer;
        this.data = params.data;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let data = await Primitive.Bytes.read(b);
        return new Raw2.phone.SendSignalingData({ peer, data });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.data !== void 0) {
          b.write(Primitive.Bytes.write(this.data));
        }
        return b.buffer;
      }
    }
    phone2.SendSignalingData = SendSignalingData;
    class CreateGroupCall extends TLObject {
      __response__;
      rtmpStream;
      peer;
      randomId;
      title;
      scheduleDate;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.CreateGroupCall';
        this.constructorId = 1221445336;
        this.subclassOfId = 2331323052;
        this._slots = ['rtmpStream', 'peer', 'randomId', 'title', 'scheduleDate'];
        this.rtmpStream = params.rtmpStream;
        this.peer = params.peer;
        this.randomId = params.randomId;
        this.title = params.title;
        this.scheduleDate = params.scheduleDate;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let rtmpStream = flags & (1 << 2) ? true : false;
        let peer = await TLObject.read(b);
        let randomId = await Primitive.Int.read(b);
        let title = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let scheduleDate = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.phone.CreateGroupCall({
          rtmpStream,
          peer,
          randomId,
          title,
          scheduleDate,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.rtmpStream ? 1 << 2 : 0;
        flags |= this.title !== void 0 ? 1 << 0 : 0;
        flags |= this.scheduleDate !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.randomId !== void 0) {
          b.write(Primitive.Int.write(this.randomId));
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        if (this.scheduleDate !== void 0) {
          b.write(Primitive.Int.write(this.scheduleDate));
        }
        return b.buffer;
      }
    }
    phone2.CreateGroupCall = CreateGroupCall;
    class JoinGroupCall extends TLObject {
      __response__;
      muted;
      videoStopped;
      call;
      joinAs;
      inviteHash;
      params;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.JoinGroupCall';
        this.constructorId = 2972909435;
        this.subclassOfId = 2331323052;
        this._slots = ['muted', 'videoStopped', 'call', 'joinAs', 'inviteHash', 'params'];
        this.muted = params.muted;
        this.videoStopped = params.videoStopped;
        this.call = params.call;
        this.joinAs = params.joinAs;
        this.inviteHash = params.inviteHash;
        this.params = params.params;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let muted = flags & (1 << 0) ? true : false;
        let videoStopped = flags & (1 << 2) ? true : false;
        let call = await TLObject.read(b);
        let joinAs = await TLObject.read(b);
        let inviteHash = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let params = await TLObject.read(b);
        return new Raw2.phone.JoinGroupCall({
          muted,
          videoStopped,
          call,
          joinAs,
          inviteHash,
          params,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.muted ? 1 << 0 : 0;
        flags |= this.videoStopped ? 1 << 2 : 0;
        flags |= this.inviteHash !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.call !== void 0) {
          b.write(this.call.write());
        }
        if (this.joinAs !== void 0) {
          b.write(this.joinAs.write());
        }
        if (this.inviteHash !== void 0) {
          b.write(Primitive.String.write(this.inviteHash));
        }
        if (this.params !== void 0) {
          b.write(this.params.write());
        }
        return b.buffer;
      }
    }
    phone2.JoinGroupCall = JoinGroupCall;
    class LeaveGroupCall extends TLObject {
      __response__;
      call;
      source;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.LeaveGroupCall';
        this.constructorId = 1342404601;
        this.subclassOfId = 2331323052;
        this._slots = ['call', 'source'];
        this.call = params.call;
        this.source = params.source;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let call = await TLObject.read(b);
        let source = await Primitive.Int.read(b);
        return new Raw2.phone.LeaveGroupCall({ call, source });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.call !== void 0) {
          b.write(this.call.write());
        }
        if (this.source !== void 0) {
          b.write(Primitive.Int.write(this.source));
        }
        return b.buffer;
      }
    }
    phone2.LeaveGroupCall = LeaveGroupCall;
    class InviteToGroupCall extends TLObject {
      __response__;
      call;
      users;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.InviteToGroupCall';
        this.constructorId = 2067345760;
        this.subclassOfId = 2331323052;
        this._slots = ['call', 'users'];
        this.call = params.call;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let call = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.phone.InviteToGroupCall({ call, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.call !== void 0) {
          b.write(this.call.write());
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    phone2.InviteToGroupCall = InviteToGroupCall;
    class DiscardGroupCall extends TLObject {
      __response__;
      call;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.DiscardGroupCall';
        this.constructorId = 2054648117;
        this.subclassOfId = 2331323052;
        this._slots = ['call'];
        this.call = params.call;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let call = await TLObject.read(b);
        return new Raw2.phone.DiscardGroupCall({ call });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.call !== void 0) {
          b.write(this.call.write());
        }
        return b.buffer;
      }
    }
    phone2.DiscardGroupCall = DiscardGroupCall;
    class ToggleGroupCallSettings extends TLObject {
      __response__;
      resetInviteHash;
      call;
      joinMuted;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.ToggleGroupCallSettings';
        this.constructorId = 1958458429;
        this.subclassOfId = 2331323052;
        this._slots = ['resetInviteHash', 'call', 'joinMuted'];
        this.resetInviteHash = params.resetInviteHash;
        this.call = params.call;
        this.joinMuted = params.joinMuted;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let resetInviteHash = flags & (1 << 1) ? true : false;
        let call = await TLObject.read(b);
        let joinMuted = flags & (1 << 0) ? await Primitive.Bool.read(b) : void 0;
        return new Raw2.phone.ToggleGroupCallSettings({
          resetInviteHash,
          call,
          joinMuted,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.resetInviteHash ? 1 << 1 : 0;
        flags |= this.joinMuted !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.call !== void 0) {
          b.write(this.call.write());
        }
        if (this.joinMuted !== void 0) {
          b.write(Primitive.Bool.write(this.joinMuted));
        }
        return b.buffer;
      }
    }
    phone2.ToggleGroupCallSettings = ToggleGroupCallSettings;
    class GetGroupCall extends TLObject {
      __response__;
      call;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.GetGroupCall';
        this.constructorId = 68699611;
        this.subclassOfId = 809572030;
        this._slots = ['call', 'limit'];
        this.call = params.call;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let call = await TLObject.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.phone.GetGroupCall({ call, limit });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.call !== void 0) {
          b.write(this.call.write());
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    phone2.GetGroupCall = GetGroupCall;
    class GetGroupParticipants extends TLObject {
      __response__;
      call;
      ids;
      sources;
      offset;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.GetGroupParticipants';
        this.constructorId = 3310934187;
        this.subclassOfId = 1926431988;
        this._slots = ['call', 'ids', 'sources', 'offset', 'limit'];
        this.call = params.call;
        this.ids = params.ids;
        this.sources = params.sources;
        this.offset = params.offset;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let call = await TLObject.read(b);
        let ids = await TLObject.read(b);
        let sources = await TLObject.read(b, Primitive.Int);
        let offset = await Primitive.String.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.phone.GetGroupParticipants({
          call,
          ids,
          sources,
          offset,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.call !== void 0) {
          b.write(this.call.write());
        }
        if (this.ids) {
          b.write(Primitive.Vector.write(this.ids));
        }
        if (this.sources) {
          b.write(Primitive.Vector.write(this.sources, Primitive.Int));
        }
        if (this.offset !== void 0) {
          b.write(Primitive.String.write(this.offset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    phone2.GetGroupParticipants = GetGroupParticipants;
    class CheckGroupCall extends TLObject {
      __response__;
      call;
      sources;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.CheckGroupCall';
        this.constructorId = 3046963575;
        this.subclassOfId = 1344696591;
        this._slots = ['call', 'sources'];
        this.call = params.call;
        this.sources = params.sources;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let call = await TLObject.read(b);
        let sources = await TLObject.read(b, Primitive.Int);
        return new Raw2.phone.CheckGroupCall({ call, sources });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.call !== void 0) {
          b.write(this.call.write());
        }
        if (this.sources) {
          b.write(Primitive.Vector.write(this.sources, Primitive.Int));
        }
        return b.buffer;
      }
    }
    phone2.CheckGroupCall = CheckGroupCall;
    class ToggleGroupCallRecord extends TLObject {
      __response__;
      start;
      video;
      call;
      title;
      videoPortrait;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.ToggleGroupCallRecord';
        this.constructorId = 4045981448;
        this.subclassOfId = 2331323052;
        this._slots = ['start', 'video', 'call', 'title', 'videoPortrait'];
        this.start = params.start;
        this.video = params.video;
        this.call = params.call;
        this.title = params.title;
        this.videoPortrait = params.videoPortrait;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let start = flags & (1 << 0) ? true : false;
        let video = flags & (1 << 2) ? true : false;
        let call = await TLObject.read(b);
        let title = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let videoPortrait = flags & (1 << 2) ? await Primitive.Bool.read(b) : void 0;
        return new Raw2.phone.ToggleGroupCallRecord({
          start,
          video,
          call,
          title,
          videoPortrait,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.start ? 1 << 0 : 0;
        flags |= this.video ? 1 << 2 : 0;
        flags |= this.title !== void 0 ? 1 << 1 : 0;
        flags |= this.videoPortrait !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.call !== void 0) {
          b.write(this.call.write());
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        if (this.videoPortrait !== void 0) {
          b.write(Primitive.Bool.write(this.videoPortrait));
        }
        return b.buffer;
      }
    }
    phone2.ToggleGroupCallRecord = ToggleGroupCallRecord;
    class EditGroupCallParticipant extends TLObject {
      __response__;
      call;
      participant;
      muted;
      volume;
      raiseHand;
      videoStopped;
      videoPaused;
      presentationPaused;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.EditGroupCallParticipant';
        this.constructorId = 2770811583;
        this.subclassOfId = 2331323052;
        this._slots = [
          'call',
          'participant',
          'muted',
          'volume',
          'raiseHand',
          'videoStopped',
          'videoPaused',
          'presentationPaused',
        ];
        this.call = params.call;
        this.participant = params.participant;
        this.muted = params.muted;
        this.volume = params.volume;
        this.raiseHand = params.raiseHand;
        this.videoStopped = params.videoStopped;
        this.videoPaused = params.videoPaused;
        this.presentationPaused = params.presentationPaused;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let call = await TLObject.read(b);
        let participant = await TLObject.read(b);
        let muted = flags & (1 << 0) ? await Primitive.Bool.read(b) : void 0;
        let volume = flags & (1 << 1) ? await Primitive.Int.read(b) : void 0;
        let raiseHand = flags & (1 << 2) ? await Primitive.Bool.read(b) : void 0;
        let videoStopped = flags & (1 << 3) ? await Primitive.Bool.read(b) : void 0;
        let videoPaused = flags & (1 << 4) ? await Primitive.Bool.read(b) : void 0;
        let presentationPaused = flags & (1 << 5) ? await Primitive.Bool.read(b) : void 0;
        return new Raw2.phone.EditGroupCallParticipant({
          call,
          participant,
          muted,
          volume,
          raiseHand,
          videoStopped,
          videoPaused,
          presentationPaused,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.muted !== void 0 ? 1 << 0 : 0;
        flags |= this.volume !== void 0 ? 1 << 1 : 0;
        flags |= this.raiseHand !== void 0 ? 1 << 2 : 0;
        flags |= this.videoStopped !== void 0 ? 1 << 3 : 0;
        flags |= this.videoPaused !== void 0 ? 1 << 4 : 0;
        flags |= this.presentationPaused !== void 0 ? 1 << 5 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.call !== void 0) {
          b.write(this.call.write());
        }
        if (this.participant !== void 0) {
          b.write(this.participant.write());
        }
        if (this.muted !== void 0) {
          b.write(Primitive.Bool.write(this.muted));
        }
        if (this.volume !== void 0) {
          b.write(Primitive.Int.write(this.volume));
        }
        if (this.raiseHand !== void 0) {
          b.write(Primitive.Bool.write(this.raiseHand));
        }
        if (this.videoStopped !== void 0) {
          b.write(Primitive.Bool.write(this.videoStopped));
        }
        if (this.videoPaused !== void 0) {
          b.write(Primitive.Bool.write(this.videoPaused));
        }
        if (this.presentationPaused !== void 0) {
          b.write(Primitive.Bool.write(this.presentationPaused));
        }
        return b.buffer;
      }
    }
    phone2.EditGroupCallParticipant = EditGroupCallParticipant;
    class EditGroupCallTitle extends TLObject {
      __response__;
      call;
      title;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.EditGroupCallTitle';
        this.constructorId = 480685066;
        this.subclassOfId = 2331323052;
        this._slots = ['call', 'title'];
        this.call = params.call;
        this.title = params.title;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let call = await TLObject.read(b);
        let title = await Primitive.String.read(b);
        return new Raw2.phone.EditGroupCallTitle({ call, title });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.call !== void 0) {
          b.write(this.call.write());
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        return b.buffer;
      }
    }
    phone2.EditGroupCallTitle = EditGroupCallTitle;
    class GetGroupCallJoinAs extends TLObject {
      __response__;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.GetGroupCallJoinAs';
        this.constructorId = 4017889594;
        this.subclassOfId = 3031920891;
        this._slots = ['peer'];
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        return new Raw2.phone.GetGroupCallJoinAs({ peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    phone2.GetGroupCallJoinAs = GetGroupCallJoinAs;
    class ExportGroupCallInvite extends TLObject {
      __response__;
      canSelfUnmute;
      call;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.ExportGroupCallInvite';
        this.constructorId = 3869926527;
        this.subclassOfId = 993787535;
        this._slots = ['canSelfUnmute', 'call'];
        this.canSelfUnmute = params.canSelfUnmute;
        this.call = params.call;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let canSelfUnmute = flags & (1 << 0) ? true : false;
        let call = await TLObject.read(b);
        return new Raw2.phone.ExportGroupCallInvite({ canSelfUnmute, call });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.canSelfUnmute ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.call !== void 0) {
          b.write(this.call.write());
        }
        return b.buffer;
      }
    }
    phone2.ExportGroupCallInvite = ExportGroupCallInvite;
    class ToggleGroupCallStartSubscription extends TLObject {
      __response__;
      call;
      subscribed;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.ToggleGroupCallStartSubscription';
        this.constructorId = 563885286;
        this.subclassOfId = 2331323052;
        this._slots = ['call', 'subscribed'];
        this.call = params.call;
        this.subscribed = params.subscribed;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let call = await TLObject.read(b);
        let subscribed = await Primitive.Bool.read(b);
        return new Raw2.phone.ToggleGroupCallStartSubscription({
          call,
          subscribed,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.call !== void 0) {
          b.write(this.call.write());
        }
        if (this.subscribed !== void 0) {
          b.write(Primitive.Bool.write(this.subscribed));
        }
        return b.buffer;
      }
    }
    phone2.ToggleGroupCallStartSubscription = ToggleGroupCallStartSubscription;
    class StartScheduledGroupCall extends TLObject {
      __response__;
      call;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.StartScheduledGroupCall';
        this.constructorId = 1451287362;
        this.subclassOfId = 2331323052;
        this._slots = ['call'];
        this.call = params.call;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let call = await TLObject.read(b);
        return new Raw2.phone.StartScheduledGroupCall({ call });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.call !== void 0) {
          b.write(this.call.write());
        }
        return b.buffer;
      }
    }
    phone2.StartScheduledGroupCall = StartScheduledGroupCall;
    class SaveDefaultGroupCallJoinAs extends TLObject {
      __response__;
      peer;
      joinAs;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.SaveDefaultGroupCallJoinAs';
        this.constructorId = 1465786252;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'joinAs'];
        this.peer = params.peer;
        this.joinAs = params.joinAs;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let joinAs = await TLObject.read(b);
        return new Raw2.phone.SaveDefaultGroupCallJoinAs({ peer, joinAs });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.joinAs !== void 0) {
          b.write(this.joinAs.write());
        }
        return b.buffer;
      }
    }
    phone2.SaveDefaultGroupCallJoinAs = SaveDefaultGroupCallJoinAs;
    class JoinGroupCallPresentation extends TLObject {
      __response__;
      call;
      params;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.JoinGroupCallPresentation';
        this.constructorId = 3421137860;
        this.subclassOfId = 2331323052;
        this._slots = ['call', 'params'];
        this.call = params.call;
        this.params = params.params;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let call = await TLObject.read(b);
        let params = await TLObject.read(b);
        return new Raw2.phone.JoinGroupCallPresentation({ call, params });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.call !== void 0) {
          b.write(this.call.write());
        }
        if (this.params !== void 0) {
          b.write(this.params.write());
        }
        return b.buffer;
      }
    }
    phone2.JoinGroupCallPresentation = JoinGroupCallPresentation;
    class LeaveGroupCallPresentation extends TLObject {
      __response__;
      call;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.LeaveGroupCallPresentation';
        this.constructorId = 475058500;
        this.subclassOfId = 2331323052;
        this._slots = ['call'];
        this.call = params.call;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let call = await TLObject.read(b);
        return new Raw2.phone.LeaveGroupCallPresentation({ call });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.call !== void 0) {
          b.write(this.call.write());
        }
        return b.buffer;
      }
    }
    phone2.LeaveGroupCallPresentation = LeaveGroupCallPresentation;
    class GetGroupCallStreamChannels extends TLObject {
      __response__;
      call;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.GetGroupCallStreamChannels';
        this.constructorId = 447879488;
        this.subclassOfId = 2438448612;
        this._slots = ['call'];
        this.call = params.call;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let call = await TLObject.read(b);
        return new Raw2.phone.GetGroupCallStreamChannels({ call });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.call !== void 0) {
          b.write(this.call.write());
        }
        return b.buffer;
      }
    }
    phone2.GetGroupCallStreamChannels = GetGroupCallStreamChannels;
    class GetGroupCallStreamRtmpUrl extends TLObject {
      __response__;
      peer;
      revoke;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.GetGroupCallStreamRtmpUrl';
        this.constructorId = 3736316863;
        this.subclassOfId = 3522500043;
        this._slots = ['peer', 'revoke'];
        this.peer = params.peer;
        this.revoke = params.revoke;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let revoke = await Primitive.Bool.read(b);
        return new Raw2.phone.GetGroupCallStreamRtmpUrl({ peer, revoke });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.revoke !== void 0) {
          b.write(Primitive.Bool.write(this.revoke));
        }
        return b.buffer;
      }
    }
    phone2.GetGroupCallStreamRtmpUrl = GetGroupCallStreamRtmpUrl;
    class SaveCallLog extends TLObject {
      __response__;
      peer;
      file;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'phone.SaveCallLog';
        this.constructorId = 1092913030;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'file'];
        this.peer = params.peer;
        this.file = params.file;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let file = await TLObject.read(b);
        return new Raw2.phone.SaveCallLog({ peer, file });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.file !== void 0) {
          b.write(this.file.write());
        }
        return b.buffer;
      }
    }
    phone2.SaveCallLog = SaveCallLog;
  })((phone = Raw2.phone || (Raw2.phone = {})));
  let stats;
  ((stats2) => {
    class BroadcastStats extends TLObject {
      period;
      followers;
      viewsPerPost;
      sharesPerPost;
      reactionsPerPost;
      viewsPerStory;
      sharesPerStory;
      reactionsPerStory;
      enabledNotifications;
      growthGraph;
      followersGraph;
      muteGraph;
      topHoursGraph;
      interactionsGraph;
      ivInteractionsGraph;
      viewsBySourceGraph;
      newFollowersBySourceGraph;
      languagesGraph;
      reactionsByEmotionGraph;
      storyInteractionsGraph;
      storyReactionsByEmotionGraph;
      recentPostsInteractions;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'stats.BroadcastStats';
        this.constructorId = 963421692;
        this.subclassOfId = 2146587688;
        this._slots = [
          'period',
          'followers',
          'viewsPerPost',
          'sharesPerPost',
          'reactionsPerPost',
          'viewsPerStory',
          'sharesPerStory',
          'reactionsPerStory',
          'enabledNotifications',
          'growthGraph',
          'followersGraph',
          'muteGraph',
          'topHoursGraph',
          'interactionsGraph',
          'ivInteractionsGraph',
          'viewsBySourceGraph',
          'newFollowersBySourceGraph',
          'languagesGraph',
          'reactionsByEmotionGraph',
          'storyInteractionsGraph',
          'storyReactionsByEmotionGraph',
          'recentPostsInteractions',
        ];
        this.period = params.period;
        this.followers = params.followers;
        this.viewsPerPost = params.viewsPerPost;
        this.sharesPerPost = params.sharesPerPost;
        this.reactionsPerPost = params.reactionsPerPost;
        this.viewsPerStory = params.viewsPerStory;
        this.sharesPerStory = params.sharesPerStory;
        this.reactionsPerStory = params.reactionsPerStory;
        this.enabledNotifications = params.enabledNotifications;
        this.growthGraph = params.growthGraph;
        this.followersGraph = params.followersGraph;
        this.muteGraph = params.muteGraph;
        this.topHoursGraph = params.topHoursGraph;
        this.interactionsGraph = params.interactionsGraph;
        this.ivInteractionsGraph = params.ivInteractionsGraph;
        this.viewsBySourceGraph = params.viewsBySourceGraph;
        this.newFollowersBySourceGraph = params.newFollowersBySourceGraph;
        this.languagesGraph = params.languagesGraph;
        this.reactionsByEmotionGraph = params.reactionsByEmotionGraph;
        this.storyInteractionsGraph = params.storyInteractionsGraph;
        this.storyReactionsByEmotionGraph = params.storyReactionsByEmotionGraph;
        this.recentPostsInteractions = params.recentPostsInteractions;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let period = await TLObject.read(b);
        let followers = await TLObject.read(b);
        let viewsPerPost = await TLObject.read(b);
        let sharesPerPost = await TLObject.read(b);
        let reactionsPerPost = await TLObject.read(b);
        let viewsPerStory = await TLObject.read(b);
        let sharesPerStory = await TLObject.read(b);
        let reactionsPerStory = await TLObject.read(b);
        let enabledNotifications = await TLObject.read(b);
        let growthGraph = await TLObject.read(b);
        let followersGraph = await TLObject.read(b);
        let muteGraph = await TLObject.read(b);
        let topHoursGraph = await TLObject.read(b);
        let interactionsGraph = await TLObject.read(b);
        let ivInteractionsGraph = await TLObject.read(b);
        let viewsBySourceGraph = await TLObject.read(b);
        let newFollowersBySourceGraph = await TLObject.read(b);
        let languagesGraph = await TLObject.read(b);
        let reactionsByEmotionGraph = await TLObject.read(b);
        let storyInteractionsGraph = await TLObject.read(b);
        let storyReactionsByEmotionGraph = await TLObject.read(b);
        let recentPostsInteractions = await TLObject.read(b);
        return new Raw2.stats.BroadcastStats({
          period,
          followers,
          viewsPerPost,
          sharesPerPost,
          reactionsPerPost,
          viewsPerStory,
          sharesPerStory,
          reactionsPerStory,
          enabledNotifications,
          growthGraph,
          followersGraph,
          muteGraph,
          topHoursGraph,
          interactionsGraph,
          ivInteractionsGraph,
          viewsBySourceGraph,
          newFollowersBySourceGraph,
          languagesGraph,
          reactionsByEmotionGraph,
          storyInteractionsGraph,
          storyReactionsByEmotionGraph,
          recentPostsInteractions,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.period !== void 0) {
          b.write(this.period.write());
        }
        if (this.followers !== void 0) {
          b.write(this.followers.write());
        }
        if (this.viewsPerPost !== void 0) {
          b.write(this.viewsPerPost.write());
        }
        if (this.sharesPerPost !== void 0) {
          b.write(this.sharesPerPost.write());
        }
        if (this.reactionsPerPost !== void 0) {
          b.write(this.reactionsPerPost.write());
        }
        if (this.viewsPerStory !== void 0) {
          b.write(this.viewsPerStory.write());
        }
        if (this.sharesPerStory !== void 0) {
          b.write(this.sharesPerStory.write());
        }
        if (this.reactionsPerStory !== void 0) {
          b.write(this.reactionsPerStory.write());
        }
        if (this.enabledNotifications !== void 0) {
          b.write(this.enabledNotifications.write());
        }
        if (this.growthGraph !== void 0) {
          b.write(this.growthGraph.write());
        }
        if (this.followersGraph !== void 0) {
          b.write(this.followersGraph.write());
        }
        if (this.muteGraph !== void 0) {
          b.write(this.muteGraph.write());
        }
        if (this.topHoursGraph !== void 0) {
          b.write(this.topHoursGraph.write());
        }
        if (this.interactionsGraph !== void 0) {
          b.write(this.interactionsGraph.write());
        }
        if (this.ivInteractionsGraph !== void 0) {
          b.write(this.ivInteractionsGraph.write());
        }
        if (this.viewsBySourceGraph !== void 0) {
          b.write(this.viewsBySourceGraph.write());
        }
        if (this.newFollowersBySourceGraph !== void 0) {
          b.write(this.newFollowersBySourceGraph.write());
        }
        if (this.languagesGraph !== void 0) {
          b.write(this.languagesGraph.write());
        }
        if (this.reactionsByEmotionGraph !== void 0) {
          b.write(this.reactionsByEmotionGraph.write());
        }
        if (this.storyInteractionsGraph !== void 0) {
          b.write(this.storyInteractionsGraph.write());
        }
        if (this.storyReactionsByEmotionGraph !== void 0) {
          b.write(this.storyReactionsByEmotionGraph.write());
        }
        if (this.recentPostsInteractions) {
          b.write(Primitive.Vector.write(this.recentPostsInteractions));
        }
        return b.buffer;
      }
    }
    stats2.BroadcastStats = BroadcastStats;
    class MegagroupStats extends TLObject {
      period;
      members;
      messages;
      viewers;
      posters;
      growthGraph;
      membersGraph;
      newMembersBySourceGraph;
      languagesGraph;
      messagesGraph;
      actionsGraph;
      topHoursGraph;
      weekdaysGraph;
      topPosters;
      topAdmins;
      topInviters;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'stats.MegagroupStats';
        this.constructorId = 4018141462;
        this.subclassOfId = 1532608141;
        this._slots = [
          'period',
          'members',
          'messages',
          'viewers',
          'posters',
          'growthGraph',
          'membersGraph',
          'newMembersBySourceGraph',
          'languagesGraph',
          'messagesGraph',
          'actionsGraph',
          'topHoursGraph',
          'weekdaysGraph',
          'topPosters',
          'topAdmins',
          'topInviters',
          'users',
        ];
        this.period = params.period;
        this.members = params.members;
        this.messages = params.messages;
        this.viewers = params.viewers;
        this.posters = params.posters;
        this.growthGraph = params.growthGraph;
        this.membersGraph = params.membersGraph;
        this.newMembersBySourceGraph = params.newMembersBySourceGraph;
        this.languagesGraph = params.languagesGraph;
        this.messagesGraph = params.messagesGraph;
        this.actionsGraph = params.actionsGraph;
        this.topHoursGraph = params.topHoursGraph;
        this.weekdaysGraph = params.weekdaysGraph;
        this.topPosters = params.topPosters;
        this.topAdmins = params.topAdmins;
        this.topInviters = params.topInviters;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let period = await TLObject.read(b);
        let members = await TLObject.read(b);
        let messages2 = await TLObject.read(b);
        let viewers = await TLObject.read(b);
        let posters = await TLObject.read(b);
        let growthGraph = await TLObject.read(b);
        let membersGraph = await TLObject.read(b);
        let newMembersBySourceGraph = await TLObject.read(b);
        let languagesGraph = await TLObject.read(b);
        let messagesGraph = await TLObject.read(b);
        let actionsGraph = await TLObject.read(b);
        let topHoursGraph = await TLObject.read(b);
        let weekdaysGraph = await TLObject.read(b);
        let topPosters = await TLObject.read(b);
        let topAdmins = await TLObject.read(b);
        let topInviters = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.stats.MegagroupStats({
          period,
          members,
          messages: messages2,
          viewers,
          posters,
          growthGraph,
          membersGraph,
          newMembersBySourceGraph,
          languagesGraph,
          messagesGraph,
          actionsGraph,
          topHoursGraph,
          weekdaysGraph,
          topPosters,
          topAdmins,
          topInviters,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.period !== void 0) {
          b.write(this.period.write());
        }
        if (this.members !== void 0) {
          b.write(this.members.write());
        }
        if (this.messages !== void 0) {
          b.write(this.messages.write());
        }
        if (this.viewers !== void 0) {
          b.write(this.viewers.write());
        }
        if (this.posters !== void 0) {
          b.write(this.posters.write());
        }
        if (this.growthGraph !== void 0) {
          b.write(this.growthGraph.write());
        }
        if (this.membersGraph !== void 0) {
          b.write(this.membersGraph.write());
        }
        if (this.newMembersBySourceGraph !== void 0) {
          b.write(this.newMembersBySourceGraph.write());
        }
        if (this.languagesGraph !== void 0) {
          b.write(this.languagesGraph.write());
        }
        if (this.messagesGraph !== void 0) {
          b.write(this.messagesGraph.write());
        }
        if (this.actionsGraph !== void 0) {
          b.write(this.actionsGraph.write());
        }
        if (this.topHoursGraph !== void 0) {
          b.write(this.topHoursGraph.write());
        }
        if (this.weekdaysGraph !== void 0) {
          b.write(this.weekdaysGraph.write());
        }
        if (this.topPosters) {
          b.write(Primitive.Vector.write(this.topPosters));
        }
        if (this.topAdmins) {
          b.write(Primitive.Vector.write(this.topAdmins));
        }
        if (this.topInviters) {
          b.write(Primitive.Vector.write(this.topInviters));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    stats2.MegagroupStats = MegagroupStats;
    class MessageStats extends TLObject {
      viewsGraph;
      reactionsByEmotionGraph;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'stats.MessageStats';
        this.constructorId = 2145983508;
        this.subclassOfId = 2516886306;
        this._slots = ['viewsGraph', 'reactionsByEmotionGraph'];
        this.viewsGraph = params.viewsGraph;
        this.reactionsByEmotionGraph = params.reactionsByEmotionGraph;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let viewsGraph = await TLObject.read(b);
        let reactionsByEmotionGraph = await TLObject.read(b);
        return new Raw2.stats.MessageStats({
          viewsGraph,
          reactionsByEmotionGraph,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.viewsGraph !== void 0) {
          b.write(this.viewsGraph.write());
        }
        if (this.reactionsByEmotionGraph !== void 0) {
          b.write(this.reactionsByEmotionGraph.write());
        }
        return b.buffer;
      }
    }
    stats2.MessageStats = MessageStats;
    class StoryStats extends TLObject {
      viewsGraph;
      reactionsByEmotionGraph;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'stats.StoryStats';
        this.constructorId = 1355613820;
        this.subclassOfId = 2337096660;
        this._slots = ['viewsGraph', 'reactionsByEmotionGraph'];
        this.viewsGraph = params.viewsGraph;
        this.reactionsByEmotionGraph = params.reactionsByEmotionGraph;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let viewsGraph = await TLObject.read(b);
        let reactionsByEmotionGraph = await TLObject.read(b);
        return new Raw2.stats.StoryStats({
          viewsGraph,
          reactionsByEmotionGraph,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.viewsGraph !== void 0) {
          b.write(this.viewsGraph.write());
        }
        if (this.reactionsByEmotionGraph !== void 0) {
          b.write(this.reactionsByEmotionGraph.write());
        }
        return b.buffer;
      }
    }
    stats2.StoryStats = StoryStats;
    class PublicForwards extends TLObject {
      count;
      forwards;
      nextOffset;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'stats.PublicForwards';
        this.constructorId = 2466479648;
        this.subclassOfId = 2804429329;
        this._slots = ['count', 'forwards', 'nextOffset', 'chats', 'users'];
        this.count = params.count;
        this.forwards = params.forwards;
        this.nextOffset = params.nextOffset;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let count = await Primitive.Int.read(b);
        let forwards = await TLObject.read(b);
        let nextOffset = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.stats.PublicForwards({
          count,
          forwards,
          nextOffset,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.nextOffset !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.forwards) {
          b.write(Primitive.Vector.write(this.forwards));
        }
        if (this.nextOffset !== void 0) {
          b.write(Primitive.String.write(this.nextOffset));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    stats2.PublicForwards = PublicForwards;
    class BroadcastRevenueStats extends TLObject {
      topHoursGraph;
      revenueGraph;
      currentBalance;
      availableBalance;
      overallRevenue;
      usdRate;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'stats.BroadcastRevenueStats';
        this.constructorId = 3497741229;
        this.subclassOfId = 753807480;
        this._slots = [
          'topHoursGraph',
          'revenueGraph',
          'currentBalance',
          'availableBalance',
          'overallRevenue',
          'usdRate',
        ];
        this.topHoursGraph = params.topHoursGraph;
        this.revenueGraph = params.revenueGraph;
        this.currentBalance = params.currentBalance;
        this.availableBalance = params.availableBalance;
        this.overallRevenue = params.overallRevenue;
        this.usdRate = params.usdRate;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let topHoursGraph = await TLObject.read(b);
        let revenueGraph = await TLObject.read(b);
        let currentBalance = await Primitive.Long.read(b);
        let availableBalance = await Primitive.Long.read(b);
        let overallRevenue = await Primitive.Long.read(b);
        let usdRate = await Primitive.Double.read(b);
        return new Raw2.stats.BroadcastRevenueStats({
          topHoursGraph,
          revenueGraph,
          currentBalance,
          availableBalance,
          overallRevenue,
          usdRate,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.topHoursGraph !== void 0) {
          b.write(this.topHoursGraph.write());
        }
        if (this.revenueGraph !== void 0) {
          b.write(this.revenueGraph.write());
        }
        if (this.currentBalance !== void 0) {
          b.write(Primitive.Long.write(this.currentBalance));
        }
        if (this.availableBalance !== void 0) {
          b.write(Primitive.Long.write(this.availableBalance));
        }
        if (this.overallRevenue !== void 0) {
          b.write(Primitive.Long.write(this.overallRevenue));
        }
        if (this.usdRate !== void 0) {
          b.write(Primitive.Double.write(this.usdRate));
        }
        return b.buffer;
      }
    }
    stats2.BroadcastRevenueStats = BroadcastRevenueStats;
    class BroadcastRevenueWithdrawalUrl extends TLObject {
      url;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'stats.BroadcastRevenueWithdrawalUrl';
        this.constructorId = 3966080823;
        this.subclassOfId = 3512518885;
        this._slots = ['url'];
        this.url = params.url;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let url = await Primitive.String.read(b);
        return new Raw2.stats.BroadcastRevenueWithdrawalUrl({ url });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.url !== void 0) {
          b.write(Primitive.String.write(this.url));
        }
        return b.buffer;
      }
    }
    stats2.BroadcastRevenueWithdrawalUrl = BroadcastRevenueWithdrawalUrl;
    class BroadcastRevenueTransactions extends TLObject {
      count;
      transactions;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'stats.BroadcastRevenueTransactions';
        this.constructorId = 2266334310;
        this.subclassOfId = 108456469;
        this._slots = ['count', 'transactions'];
        this.count = params.count;
        this.transactions = params.transactions;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let count = await Primitive.Int.read(b);
        let transactions = await TLObject.read(b);
        return new Raw2.stats.BroadcastRevenueTransactions({
          count,
          transactions,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.transactions) {
          b.write(Primitive.Vector.write(this.transactions));
        }
        return b.buffer;
      }
    }
    stats2.BroadcastRevenueTransactions = BroadcastRevenueTransactions;
    class GetBroadcastStats extends TLObject {
      __response__;
      dark;
      channel;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stats.GetBroadcastStats';
        this.constructorId = 2873246746;
        this.subclassOfId = 2146587688;
        this._slots = ['dark', 'channel'];
        this.dark = params.dark;
        this.channel = params.channel;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let dark = flags & (1 << 0) ? true : false;
        let channel = await TLObject.read(b);
        return new Raw2.stats.GetBroadcastStats({ dark, channel });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.dark ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        return b.buffer;
      }
    }
    stats2.GetBroadcastStats = GetBroadcastStats;
    class LoadAsyncGraph extends TLObject {
      __response__;
      token;
      x;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stats.LoadAsyncGraph';
        this.constructorId = 1646092192;
        this.subclassOfId = 2609918291;
        this._slots = ['token', 'x'];
        this.token = params.token;
        this.x = params.x;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let token = await Primitive.String.read(b);
        let x = flags & (1 << 0) ? await Primitive.Long.read(b) : void 0;
        return new Raw2.stats.LoadAsyncGraph({ token, x });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.x !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.token !== void 0) {
          b.write(Primitive.String.write(this.token));
        }
        if (this.x !== void 0) {
          b.write(Primitive.Long.write(this.x));
        }
        return b.buffer;
      }
    }
    stats2.LoadAsyncGraph = LoadAsyncGraph;
    class GetMegagroupStats extends TLObject {
      __response__;
      dark;
      channel;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stats.GetMegagroupStats';
        this.constructorId = 3705636359;
        this.subclassOfId = 1532608141;
        this._slots = ['dark', 'channel'];
        this.dark = params.dark;
        this.channel = params.channel;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let dark = flags & (1 << 0) ? true : false;
        let channel = await TLObject.read(b);
        return new Raw2.stats.GetMegagroupStats({ dark, channel });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.dark ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        return b.buffer;
      }
    }
    stats2.GetMegagroupStats = GetMegagroupStats;
    class GetMessagePublicForwards extends TLObject {
      __response__;
      channel;
      msgId;
      offset;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stats.GetMessagePublicForwards';
        this.constructorId = 1595212100;
        this.subclassOfId = 2804429329;
        this._slots = ['channel', 'msgId', 'offset', 'limit'];
        this.channel = params.channel;
        this.msgId = params.msgId;
        this.offset = params.offset;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let msgId = await Primitive.Int.read(b);
        let offset = await Primitive.String.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.stats.GetMessagePublicForwards({
          channel,
          msgId,
          offset,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        if (this.offset !== void 0) {
          b.write(Primitive.String.write(this.offset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    stats2.GetMessagePublicForwards = GetMessagePublicForwards;
    class GetMessageStats extends TLObject {
      __response__;
      dark;
      channel;
      msgId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stats.GetMessageStats';
        this.constructorId = 3068175349;
        this.subclassOfId = 2516886306;
        this._slots = ['dark', 'channel', 'msgId'];
        this.dark = params.dark;
        this.channel = params.channel;
        this.msgId = params.msgId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let dark = flags & (1 << 0) ? true : false;
        let channel = await TLObject.read(b);
        let msgId = await Primitive.Int.read(b);
        return new Raw2.stats.GetMessageStats({ dark, channel, msgId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.dark ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.msgId !== void 0) {
          b.write(Primitive.Int.write(this.msgId));
        }
        return b.buffer;
      }
    }
    stats2.GetMessageStats = GetMessageStats;
    class GetStoryStats extends TLObject {
      __response__;
      dark;
      peer;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stats.GetStoryStats';
        this.constructorId = 927985472;
        this.subclassOfId = 2337096660;
        this._slots = ['dark', 'peer', 'id'];
        this.dark = params.dark;
        this.peer = params.peer;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let dark = flags & (1 << 0) ? true : false;
        let peer = await TLObject.read(b);
        let id = await Primitive.Int.read(b);
        return new Raw2.stats.GetStoryStats({ dark, peer, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.dark ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id !== void 0) {
          b.write(Primitive.Int.write(this.id));
        }
        return b.buffer;
      }
    }
    stats2.GetStoryStats = GetStoryStats;
    class GetStoryPublicForwards extends TLObject {
      __response__;
      peer;
      id;
      offset;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stats.GetStoryPublicForwards';
        this.constructorId = 2789441270;
        this.subclassOfId = 2804429329;
        this._slots = ['peer', 'id', 'offset', 'limit'];
        this.peer = params.peer;
        this.id = params.id;
        this.offset = params.offset;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await Primitive.Int.read(b);
        let offset = await Primitive.String.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.stats.GetStoryPublicForwards({
          peer,
          id,
          offset,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id !== void 0) {
          b.write(Primitive.Int.write(this.id));
        }
        if (this.offset !== void 0) {
          b.write(Primitive.String.write(this.offset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    stats2.GetStoryPublicForwards = GetStoryPublicForwards;
    class GetBroadcastRevenueStats extends TLObject {
      __response__;
      dark;
      channel;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stats.GetBroadcastRevenueStats';
        this.constructorId = 1977595505;
        this.subclassOfId = 753807480;
        this._slots = ['dark', 'channel'];
        this.dark = params.dark;
        this.channel = params.channel;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let dark = flags & (1 << 0) ? true : false;
        let channel = await TLObject.read(b);
        return new Raw2.stats.GetBroadcastRevenueStats({ dark, channel });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.dark ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        return b.buffer;
      }
    }
    stats2.GetBroadcastRevenueStats = GetBroadcastRevenueStats;
    class GetBroadcastRevenueWithdrawalUrl extends TLObject {
      __response__;
      channel;
      password;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stats.GetBroadcastRevenueWithdrawalUrl';
        this.constructorId = 711323507;
        this.subclassOfId = 3512518885;
        this._slots = ['channel', 'password'];
        this.channel = params.channel;
        this.password = params.password;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let password = await TLObject.read(b);
        return new Raw2.stats.GetBroadcastRevenueWithdrawalUrl({
          channel,
          password,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.password !== void 0) {
          b.write(this.password.write());
        }
        return b.buffer;
      }
    }
    stats2.GetBroadcastRevenueWithdrawalUrl = GetBroadcastRevenueWithdrawalUrl;
    class GetBroadcastRevenueTransactions extends TLObject {
      __response__;
      channel;
      offset;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stats.GetBroadcastRevenueTransactions';
        this.constructorId = 6891535;
        this.subclassOfId = 108456469;
        this._slots = ['channel', 'offset', 'limit'];
        this.channel = params.channel;
        this.offset = params.offset;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let channel = await TLObject.read(b);
        let offset = await Primitive.Int.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.stats.GetBroadcastRevenueTransactions({
          channel,
          offset,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.channel !== void 0) {
          b.write(this.channel.write());
        }
        if (this.offset !== void 0) {
          b.write(Primitive.Int.write(this.offset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    stats2.GetBroadcastRevenueTransactions = GetBroadcastRevenueTransactions;
  })((stats = Raw2.stats || (Raw2.stats = {})));
  let stickers;
  ((stickers2) => {
    class SuggestedShortName extends TLObject {
      shortName;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'stickers.SuggestedShortName';
        this.constructorId = 2248056895;
        this.subclassOfId = 3293203233;
        this._slots = ['shortName'];
        this.shortName = params.shortName;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let shortName = await Primitive.String.read(b);
        return new Raw2.stickers.SuggestedShortName({ shortName });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.shortName !== void 0) {
          b.write(Primitive.String.write(this.shortName));
        }
        return b.buffer;
      }
    }
    stickers2.SuggestedShortName = SuggestedShortName;
    class CreateStickerSet extends TLObject {
      __response__;
      masks;
      emojis;
      textColor;
      userId;
      title;
      shortName;
      thumb;
      stickers;
      software;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stickers.CreateStickerSet';
        this.constructorId = 2418125671;
        this.subclassOfId = 2607827546;
        this._slots = [
          'masks',
          'emojis',
          'textColor',
          'userId',
          'title',
          'shortName',
          'thumb',
          'stickers',
          'software',
        ];
        this.masks = params.masks;
        this.emojis = params.emojis;
        this.textColor = params.textColor;
        this.userId = params.userId;
        this.title = params.title;
        this.shortName = params.shortName;
        this.thumb = params.thumb;
        this.stickers = params.stickers;
        this.software = params.software;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let masks = flags & (1 << 0) ? true : false;
        let emojis = flags & (1 << 5) ? true : false;
        let textColor = flags & (1 << 6) ? true : false;
        let userId = await TLObject.read(b);
        let title = await Primitive.String.read(b);
        let shortName = await Primitive.String.read(b);
        let thumb = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let stickers3 = await TLObject.read(b);
        let software = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
        return new Raw2.stickers.CreateStickerSet({
          masks,
          emojis,
          textColor,
          userId,
          title,
          shortName,
          thumb,
          stickers: stickers3,
          software,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.masks ? 1 << 0 : 0;
        flags |= this.emojis ? 1 << 5 : 0;
        flags |= this.textColor ? 1 << 6 : 0;
        flags |= this.thumb !== void 0 ? 1 << 2 : 0;
        flags |= this.software !== void 0 ? 1 << 3 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        if (this.shortName !== void 0) {
          b.write(Primitive.String.write(this.shortName));
        }
        if (this.thumb !== void 0) {
          b.write(this.thumb.write());
        }
        if (this.stickers) {
          b.write(Primitive.Vector.write(this.stickers));
        }
        if (this.software !== void 0) {
          b.write(Primitive.String.write(this.software));
        }
        return b.buffer;
      }
    }
    stickers2.CreateStickerSet = CreateStickerSet;
    class RemoveStickerFromSet extends TLObject {
      __response__;
      sticker;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stickers.RemoveStickerFromSet';
        this.constructorId = 4151709521;
        this.subclassOfId = 2607827546;
        this._slots = ['sticker'];
        this.sticker = params.sticker;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let sticker = await TLObject.read(b);
        return new Raw2.stickers.RemoveStickerFromSet({ sticker });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.sticker !== void 0) {
          b.write(this.sticker.write());
        }
        return b.buffer;
      }
    }
    stickers2.RemoveStickerFromSet = RemoveStickerFromSet;
    class ChangeStickerPosition extends TLObject {
      __response__;
      sticker;
      position;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stickers.ChangeStickerPosition';
        this.constructorId = 4290172106;
        this.subclassOfId = 2607827546;
        this._slots = ['sticker', 'position'];
        this.sticker = params.sticker;
        this.position = params.position;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let sticker = await TLObject.read(b);
        let position = await Primitive.Int.read(b);
        return new Raw2.stickers.ChangeStickerPosition({ sticker, position });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.sticker !== void 0) {
          b.write(this.sticker.write());
        }
        if (this.position !== void 0) {
          b.write(Primitive.Int.write(this.position));
        }
        return b.buffer;
      }
    }
    stickers2.ChangeStickerPosition = ChangeStickerPosition;
    class AddStickerToSet extends TLObject {
      __response__;
      stickerset;
      sticker;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stickers.AddStickerToSet';
        this.constructorId = 2253651646;
        this.subclassOfId = 2607827546;
        this._slots = ['stickerset', 'sticker'];
        this.stickerset = params.stickerset;
        this.sticker = params.sticker;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let stickerset = await TLObject.read(b);
        let sticker = await TLObject.read(b);
        return new Raw2.stickers.AddStickerToSet({ stickerset, sticker });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.stickerset !== void 0) {
          b.write(this.stickerset.write());
        }
        if (this.sticker !== void 0) {
          b.write(this.sticker.write());
        }
        return b.buffer;
      }
    }
    stickers2.AddStickerToSet = AddStickerToSet;
    class SetStickerSetThumb extends TLObject {
      __response__;
      stickerset;
      thumb;
      thumbDocumentId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stickers.SetStickerSetThumb';
        this.constructorId = 2808763282;
        this.subclassOfId = 2607827546;
        this._slots = ['stickerset', 'thumb', 'thumbDocumentId'];
        this.stickerset = params.stickerset;
        this.thumb = params.thumb;
        this.thumbDocumentId = params.thumbDocumentId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let stickerset = await TLObject.read(b);
        let thumb = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let thumbDocumentId = flags & (1 << 1) ? await Primitive.Long.read(b) : void 0;
        return new Raw2.stickers.SetStickerSetThumb({
          stickerset,
          thumb,
          thumbDocumentId,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.thumb !== void 0 ? 1 << 0 : 0;
        flags |= this.thumbDocumentId !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.stickerset !== void 0) {
          b.write(this.stickerset.write());
        }
        if (this.thumb !== void 0) {
          b.write(this.thumb.write());
        }
        if (this.thumbDocumentId !== void 0) {
          b.write(Primitive.Long.write(this.thumbDocumentId));
        }
        return b.buffer;
      }
    }
    stickers2.SetStickerSetThumb = SetStickerSetThumb;
    class CheckShortName extends TLObject {
      __response__;
      shortName;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stickers.CheckShortName';
        this.constructorId = 676017721;
        this.subclassOfId = 4122188204;
        this._slots = ['shortName'];
        this.shortName = params.shortName;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let shortName = await Primitive.String.read(b);
        return new Raw2.stickers.CheckShortName({ shortName });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.shortName !== void 0) {
          b.write(Primitive.String.write(this.shortName));
        }
        return b.buffer;
      }
    }
    stickers2.CheckShortName = CheckShortName;
    class SuggestShortName extends TLObject {
      __response__;
      title;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stickers.SuggestShortName';
        this.constructorId = 1303364867;
        this.subclassOfId = 3293203233;
        this._slots = ['title'];
        this.title = params.title;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let title = await Primitive.String.read(b);
        return new Raw2.stickers.SuggestShortName({ title });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        return b.buffer;
      }
    }
    stickers2.SuggestShortName = SuggestShortName;
    class ChangeSticker extends TLObject {
      __response__;
      sticker;
      emoji;
      maskCoords;
      keywords;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stickers.ChangeSticker';
        this.constructorId = 4115889852;
        this.subclassOfId = 2607827546;
        this._slots = ['sticker', 'emoji', 'maskCoords', 'keywords'];
        this.sticker = params.sticker;
        this.emoji = params.emoji;
        this.maskCoords = params.maskCoords;
        this.keywords = params.keywords;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let sticker = await TLObject.read(b);
        let emoji = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let maskCoords = flags & (1 << 1) ? await TLObject.read(b) : void 0;
        let keywords = flags & (1 << 2) ? await Primitive.String.read(b) : void 0;
        return new Raw2.stickers.ChangeSticker({
          sticker,
          emoji,
          maskCoords,
          keywords,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.emoji !== void 0 ? 1 << 0 : 0;
        flags |= this.maskCoords !== void 0 ? 1 << 1 : 0;
        flags |= this.keywords !== void 0 ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.sticker !== void 0) {
          b.write(this.sticker.write());
        }
        if (this.emoji !== void 0) {
          b.write(Primitive.String.write(this.emoji));
        }
        if (this.maskCoords !== void 0) {
          b.write(this.maskCoords.write());
        }
        if (this.keywords !== void 0) {
          b.write(Primitive.String.write(this.keywords));
        }
        return b.buffer;
      }
    }
    stickers2.ChangeSticker = ChangeSticker;
    class RenameStickerSet extends TLObject {
      __response__;
      stickerset;
      title;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stickers.RenameStickerSet';
        this.constructorId = 306912256;
        this.subclassOfId = 2607827546;
        this._slots = ['stickerset', 'title'];
        this.stickerset = params.stickerset;
        this.title = params.title;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let stickerset = await TLObject.read(b);
        let title = await Primitive.String.read(b);
        return new Raw2.stickers.RenameStickerSet({ stickerset, title });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.stickerset !== void 0) {
          b.write(this.stickerset.write());
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        return b.buffer;
      }
    }
    stickers2.RenameStickerSet = RenameStickerSet;
    class DeleteStickerSet extends TLObject {
      __response__;
      stickerset;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stickers.DeleteStickerSet';
        this.constructorId = 2272281492;
        this.subclassOfId = 4122188204;
        this._slots = ['stickerset'];
        this.stickerset = params.stickerset;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let stickerset = await TLObject.read(b);
        return new Raw2.stickers.DeleteStickerSet({ stickerset });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.stickerset !== void 0) {
          b.write(this.stickerset.write());
        }
        return b.buffer;
      }
    }
    stickers2.DeleteStickerSet = DeleteStickerSet;
    class ReplaceSticker extends TLObject {
      __response__;
      sticker;
      newSticker;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stickers.ReplaceSticker';
        this.constructorId = 1184253338;
        this.subclassOfId = 2607827546;
        this._slots = ['sticker', 'newSticker'];
        this.sticker = params.sticker;
        this.newSticker = params.newSticker;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let sticker = await TLObject.read(b);
        let newSticker = await TLObject.read(b);
        return new Raw2.stickers.ReplaceSticker({ sticker, newSticker });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.sticker !== void 0) {
          b.write(this.sticker.write());
        }
        if (this.newSticker !== void 0) {
          b.write(this.newSticker.write());
        }
        return b.buffer;
      }
    }
    stickers2.ReplaceSticker = ReplaceSticker;
  })((stickers = Raw2.stickers || (Raw2.stickers = {})));
  let users;
  ((users2) => {
    class UserFull2 extends TLObject {
      fullUser;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'users.UserFull';
        this.constructorId = 997004590;
        this.subclassOfId = 2212470261;
        this._slots = ['fullUser', 'chats', 'users'];
        this.fullUser = params.fullUser;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let fullUser = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users3 = await TLObject.read(b);
        return new Raw2.users.UserFull({ fullUser, chats, users: users3 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.fullUser !== void 0) {
          b.write(this.fullUser.write());
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    users2.UserFull = UserFull2;
    class GetUsers extends TLObject {
      __response__;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'users.GetUsers';
        this.constructorId = 227648840;
        this.subclassOfId = 67557965;
        this._slots = ['id'];
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b);
        return new Raw2.users.GetUsers({ id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id) {
          b.write(Primitive.Vector.write(this.id));
        }
        return b.buffer;
      }
    }
    users2.GetUsers = GetUsers;
    class GetFullUser extends TLObject {
      __response__;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'users.GetFullUser';
        this.constructorId = 3054459160;
        this.subclassOfId = 2212470261;
        this._slots = ['id'];
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b);
        return new Raw2.users.GetFullUser({ id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id !== void 0) {
          b.write(this.id.write());
        }
        return b.buffer;
      }
    }
    users2.GetFullUser = GetFullUser;
    class SetSecureValueErrors extends TLObject {
      __response__;
      id;
      errors;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'users.SetSecureValueErrors';
        this.constructorId = 2429064373;
        this.subclassOfId = 4122188204;
        this._slots = ['id', 'errors'];
        this.id = params.id;
        this.errors = params.errors;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b);
        let errors = await TLObject.read(b);
        return new Raw2.users.SetSecureValueErrors({ id, errors });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id !== void 0) {
          b.write(this.id.write());
        }
        if (this.errors) {
          b.write(Primitive.Vector.write(this.errors));
        }
        return b.buffer;
      }
    }
    users2.SetSecureValueErrors = SetSecureValueErrors;
    class GetIsPremiumRequiredToContact extends TLObject {
      __response__;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'users.GetIsPremiumRequiredToContact';
        this.constructorId = 2787289616;
        this.subclassOfId = 366986225;
        this._slots = ['id'];
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b);
        return new Raw2.users.GetIsPremiumRequiredToContact({ id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id) {
          b.write(Primitive.Vector.write(this.id));
        }
        return b.buffer;
      }
    }
    users2.GetIsPremiumRequiredToContact = GetIsPremiumRequiredToContact;
  })((users = Raw2.users || (Raw2.users = {})));
  let chatlists;
  ((chatlists2) => {
    class ExportedChatlistInvite2 extends TLObject {
      filter;
      invite;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'chatlists.ExportedChatlistInvite';
        this.constructorId = 283567014;
        this.subclassOfId = 3261681385;
        this._slots = ['filter', 'invite'];
        this.filter = params.filter;
        this.invite = params.invite;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let filter = await TLObject.read(b);
        let invite = await TLObject.read(b);
        return new Raw2.chatlists.ExportedChatlistInvite({ filter, invite });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.filter !== void 0) {
          b.write(this.filter.write());
        }
        if (this.invite !== void 0) {
          b.write(this.invite.write());
        }
        return b.buffer;
      }
    }
    chatlists2.ExportedChatlistInvite = ExportedChatlistInvite2;
    class ExportedInvites extends TLObject {
      invites;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'chatlists.ExportedInvites';
        this.constructorId = 279670215;
        this.subclassOfId = 3871476160;
        this._slots = ['invites', 'chats', 'users'];
        this.invites = params.invites;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let invites = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.chatlists.ExportedInvites({ invites, chats, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.invites) {
          b.write(Primitive.Vector.write(this.invites));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    chatlists2.ExportedInvites = ExportedInvites;
    class ChatlistInviteAlready extends TLObject {
      filterId;
      missingPeers;
      alreadyPeers;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'chatlists.ChatlistInviteAlready';
        this.constructorId = 4203214425;
        this.subclassOfId = 1097993845;
        this._slots = ['filterId', 'missingPeers', 'alreadyPeers', 'chats', 'users'];
        this.filterId = params.filterId;
        this.missingPeers = params.missingPeers;
        this.alreadyPeers = params.alreadyPeers;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let filterId = await Primitive.Int.read(b);
        let missingPeers = await TLObject.read(b);
        let alreadyPeers = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.chatlists.ChatlistInviteAlready({
          filterId,
          missingPeers,
          alreadyPeers,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.filterId !== void 0) {
          b.write(Primitive.Int.write(this.filterId));
        }
        if (this.missingPeers) {
          b.write(Primitive.Vector.write(this.missingPeers));
        }
        if (this.alreadyPeers) {
          b.write(Primitive.Vector.write(this.alreadyPeers));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    chatlists2.ChatlistInviteAlready = ChatlistInviteAlready;
    class ChatlistInvite extends TLObject {
      title;
      emoticon;
      peers;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'chatlists.ChatlistInvite';
        this.constructorId = 500007837;
        this.subclassOfId = 1097993845;
        this._slots = ['title', 'emoticon', 'peers', 'chats', 'users'];
        this.title = params.title;
        this.emoticon = params.emoticon;
        this.peers = params.peers;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let title = await Primitive.String.read(b);
        let emoticon = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let peers = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.chatlists.ChatlistInvite({
          title,
          emoticon,
          peers,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.emoticon !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        if (this.emoticon !== void 0) {
          b.write(Primitive.String.write(this.emoticon));
        }
        if (this.peers) {
          b.write(Primitive.Vector.write(this.peers));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    chatlists2.ChatlistInvite = ChatlistInvite;
    class ChatlistUpdates extends TLObject {
      missingPeers;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'chatlists.ChatlistUpdates';
        this.constructorId = 2478671757;
        this.subclassOfId = 2098610666;
        this._slots = ['missingPeers', 'chats', 'users'];
        this.missingPeers = params.missingPeers;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let missingPeers = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.chatlists.ChatlistUpdates({
          missingPeers,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.missingPeers) {
          b.write(Primitive.Vector.write(this.missingPeers));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    chatlists2.ChatlistUpdates = ChatlistUpdates;
    class ExportChatlistInvite extends TLObject {
      __response__;
      chatlist;
      title;
      peers;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'chatlists.ExportChatlistInvite';
        this.constructorId = 2222081934;
        this.subclassOfId = 3261681385;
        this._slots = ['chatlist', 'title', 'peers'];
        this.chatlist = params.chatlist;
        this.title = params.title;
        this.peers = params.peers;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let chatlist = await TLObject.read(b);
        let title = await Primitive.String.read(b);
        let peers = await TLObject.read(b);
        return new Raw2.chatlists.ExportChatlistInvite({
          chatlist,
          title,
          peers,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.chatlist !== void 0) {
          b.write(this.chatlist.write());
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        if (this.peers) {
          b.write(Primitive.Vector.write(this.peers));
        }
        return b.buffer;
      }
    }
    chatlists2.ExportChatlistInvite = ExportChatlistInvite;
    class DeleteExportedInvite extends TLObject {
      __response__;
      chatlist;
      slug;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'chatlists.DeleteExportedInvite';
        this.constructorId = 1906072670;
        this.subclassOfId = 4122188204;
        this._slots = ['chatlist', 'slug'];
        this.chatlist = params.chatlist;
        this.slug = params.slug;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let chatlist = await TLObject.read(b);
        let slug = await Primitive.String.read(b);
        return new Raw2.chatlists.DeleteExportedInvite({ chatlist, slug });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.chatlist !== void 0) {
          b.write(this.chatlist.write());
        }
        if (this.slug !== void 0) {
          b.write(Primitive.String.write(this.slug));
        }
        return b.buffer;
      }
    }
    chatlists2.DeleteExportedInvite = DeleteExportedInvite;
    class EditExportedInvite extends TLObject {
      __response__;
      chatlist;
      slug;
      title;
      peers;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'chatlists.EditExportedInvite';
        this.constructorId = 1698543165;
        this.subclassOfId = 1997666559;
        this._slots = ['chatlist', 'slug', 'title', 'peers'];
        this.chatlist = params.chatlist;
        this.slug = params.slug;
        this.title = params.title;
        this.peers = params.peers;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let chatlist = await TLObject.read(b);
        let slug = await Primitive.String.read(b);
        let title = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let peers = flags & (1 << 2) ? await TLObject.read(b) : [];
        return new Raw2.chatlists.EditExportedInvite({
          chatlist,
          slug,
          title,
          peers,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.title !== void 0 ? 1 << 1 : 0;
        flags |= this.peers ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.chatlist !== void 0) {
          b.write(this.chatlist.write());
        }
        if (this.slug !== void 0) {
          b.write(Primitive.String.write(this.slug));
        }
        if (this.title !== void 0) {
          b.write(Primitive.String.write(this.title));
        }
        if (this.peers) {
          b.write(Primitive.Vector.write(this.peers));
        }
        return b.buffer;
      }
    }
    chatlists2.EditExportedInvite = EditExportedInvite;
    class GetExportedInvites extends TLObject {
      __response__;
      chatlist;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'chatlists.GetExportedInvites';
        this.constructorId = 3456359043;
        this.subclassOfId = 3871476160;
        this._slots = ['chatlist'];
        this.chatlist = params.chatlist;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let chatlist = await TLObject.read(b);
        return new Raw2.chatlists.GetExportedInvites({ chatlist });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.chatlist !== void 0) {
          b.write(this.chatlist.write());
        }
        return b.buffer;
      }
    }
    chatlists2.GetExportedInvites = GetExportedInvites;
    class CheckChatlistInvite extends TLObject {
      __response__;
      slug;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'chatlists.CheckChatlistInvite';
        this.constructorId = 1103171583;
        this.subclassOfId = 1097993845;
        this._slots = ['slug'];
        this.slug = params.slug;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let slug = await Primitive.String.read(b);
        return new Raw2.chatlists.CheckChatlistInvite({ slug });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.slug !== void 0) {
          b.write(Primitive.String.write(this.slug));
        }
        return b.buffer;
      }
    }
    chatlists2.CheckChatlistInvite = CheckChatlistInvite;
    class JoinChatlistInvite extends TLObject {
      __response__;
      slug;
      peers;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'chatlists.JoinChatlistInvite';
        this.constructorId = 2796675994;
        this.subclassOfId = 2331323052;
        this._slots = ['slug', 'peers'];
        this.slug = params.slug;
        this.peers = params.peers;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let slug = await Primitive.String.read(b);
        let peers = await TLObject.read(b);
        return new Raw2.chatlists.JoinChatlistInvite({ slug, peers });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.slug !== void 0) {
          b.write(Primitive.String.write(this.slug));
        }
        if (this.peers) {
          b.write(Primitive.Vector.write(this.peers));
        }
        return b.buffer;
      }
    }
    chatlists2.JoinChatlistInvite = JoinChatlistInvite;
    class GetChatlistUpdates extends TLObject {
      __response__;
      chatlist;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'chatlists.GetChatlistUpdates';
        this.constructorId = 2302776609;
        this.subclassOfId = 2098610666;
        this._slots = ['chatlist'];
        this.chatlist = params.chatlist;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let chatlist = await TLObject.read(b);
        return new Raw2.chatlists.GetChatlistUpdates({ chatlist });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.chatlist !== void 0) {
          b.write(this.chatlist.write());
        }
        return b.buffer;
      }
    }
    chatlists2.GetChatlistUpdates = GetChatlistUpdates;
    class JoinChatlistUpdates extends TLObject {
      __response__;
      chatlist;
      peers;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'chatlists.JoinChatlistUpdates';
        this.constructorId = 3767138549;
        this.subclassOfId = 2331323052;
        this._slots = ['chatlist', 'peers'];
        this.chatlist = params.chatlist;
        this.peers = params.peers;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let chatlist = await TLObject.read(b);
        let peers = await TLObject.read(b);
        return new Raw2.chatlists.JoinChatlistUpdates({ chatlist, peers });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.chatlist !== void 0) {
          b.write(this.chatlist.write());
        }
        if (this.peers) {
          b.write(Primitive.Vector.write(this.peers));
        }
        return b.buffer;
      }
    }
    chatlists2.JoinChatlistUpdates = JoinChatlistUpdates;
    class HideChatlistUpdates extends TLObject {
      __response__;
      chatlist;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'chatlists.HideChatlistUpdates';
        this.constructorId = 1726252795;
        this.subclassOfId = 4122188204;
        this._slots = ['chatlist'];
        this.chatlist = params.chatlist;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let chatlist = await TLObject.read(b);
        return new Raw2.chatlists.HideChatlistUpdates({ chatlist });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.chatlist !== void 0) {
          b.write(this.chatlist.write());
        }
        return b.buffer;
      }
    }
    chatlists2.HideChatlistUpdates = HideChatlistUpdates;
    class GetLeaveChatlistSuggestions extends TLObject {
      __response__;
      chatlist;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'chatlists.GetLeaveChatlistSuggestions';
        this.constructorId = 4257011476;
        this.subclassOfId = 3113508222;
        this._slots = ['chatlist'];
        this.chatlist = params.chatlist;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let chatlist = await TLObject.read(b);
        return new Raw2.chatlists.GetLeaveChatlistSuggestions({ chatlist });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.chatlist !== void 0) {
          b.write(this.chatlist.write());
        }
        return b.buffer;
      }
    }
    chatlists2.GetLeaveChatlistSuggestions = GetLeaveChatlistSuggestions;
    class LeaveChatlist extends TLObject {
      __response__;
      chatlist;
      peers;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'chatlists.LeaveChatlist';
        this.constructorId = 1962598714;
        this.subclassOfId = 2331323052;
        this._slots = ['chatlist', 'peers'];
        this.chatlist = params.chatlist;
        this.peers = params.peers;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let chatlist = await TLObject.read(b);
        let peers = await TLObject.read(b);
        return new Raw2.chatlists.LeaveChatlist({ chatlist, peers });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.chatlist !== void 0) {
          b.write(this.chatlist.write());
        }
        if (this.peers) {
          b.write(Primitive.Vector.write(this.peers));
        }
        return b.buffer;
      }
    }
    chatlists2.LeaveChatlist = LeaveChatlist;
  })((chatlists = Raw2.chatlists || (Raw2.chatlists = {})));
  let bots;
  ((bots2) => {
    class BotInfo2 extends TLObject {
      name;
      about;
      description;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'bots.BotInfo';
        this.constructorId = 3903288752;
        this.subclassOfId = 3397067317;
        this._slots = ['name', 'about', 'description'];
        this.name = params.name;
        this.about = params.about;
        this.description = params.description;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let name = await Primitive.String.read(b);
        let about = await Primitive.String.read(b);
        let description = await Primitive.String.read(b);
        return new Raw2.bots.BotInfo({ name, about, description });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.name !== void 0) {
          b.write(Primitive.String.write(this.name));
        }
        if (this.about !== void 0) {
          b.write(Primitive.String.write(this.about));
        }
        if (this.description !== void 0) {
          b.write(Primitive.String.write(this.description));
        }
        return b.buffer;
      }
    }
    bots2.BotInfo = BotInfo2;
    class SendCustomRequest extends TLObject {
      __response__;
      customMethod;
      params;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'bots.SendCustomRequest';
        this.constructorId = 2854709741;
        this.subclassOfId = 2902676200;
        this._slots = ['customMethod', 'params'];
        this.customMethod = params.customMethod;
        this.params = params.params;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let customMethod = await Primitive.String.read(b);
        let params = await TLObject.read(b);
        return new Raw2.bots.SendCustomRequest({ customMethod, params });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.customMethod !== void 0) {
          b.write(Primitive.String.write(this.customMethod));
        }
        if (this.params !== void 0) {
          b.write(this.params.write());
        }
        return b.buffer;
      }
    }
    bots2.SendCustomRequest = SendCustomRequest;
    class AnswerWebhookJSONQuery extends TLObject {
      __response__;
      queryId;
      data;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'bots.AnswerWebhookJSONQuery';
        this.constructorId = 3860938573;
        this.subclassOfId = 4122188204;
        this._slots = ['queryId', 'data'];
        this.queryId = params.queryId;
        this.data = params.data;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let queryId = await Primitive.Long.read(b);
        let data = await TLObject.read(b);
        return new Raw2.bots.AnswerWebhookJSONQuery({ queryId, data });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.queryId !== void 0) {
          b.write(Primitive.Long.write(this.queryId));
        }
        if (this.data !== void 0) {
          b.write(this.data.write());
        }
        return b.buffer;
      }
    }
    bots2.AnswerWebhookJSONQuery = AnswerWebhookJSONQuery;
    class SetBotCommands extends TLObject {
      __response__;
      scope;
      langCode;
      commands;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'bots.SetBotCommands';
        this.constructorId = 85399130;
        this.subclassOfId = 4122188204;
        this._slots = ['scope', 'langCode', 'commands'];
        this.scope = params.scope;
        this.langCode = params.langCode;
        this.commands = params.commands;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let scope = await TLObject.read(b);
        let langCode = await Primitive.String.read(b);
        let commands = await TLObject.read(b);
        return new Raw2.bots.SetBotCommands({
          scope,
          langCode,
          commands,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.scope !== void 0) {
          b.write(this.scope.write());
        }
        if (this.langCode !== void 0) {
          b.write(Primitive.String.write(this.langCode));
        }
        if (this.commands) {
          b.write(Primitive.Vector.write(this.commands));
        }
        return b.buffer;
      }
    }
    bots2.SetBotCommands = SetBotCommands;
    class ResetBotCommands extends TLObject {
      __response__;
      scope;
      langCode;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'bots.ResetBotCommands';
        this.constructorId = 1032708345;
        this.subclassOfId = 4122188204;
        this._slots = ['scope', 'langCode'];
        this.scope = params.scope;
        this.langCode = params.langCode;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let scope = await TLObject.read(b);
        let langCode = await Primitive.String.read(b);
        return new Raw2.bots.ResetBotCommands({ scope, langCode });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.scope !== void 0) {
          b.write(this.scope.write());
        }
        if (this.langCode !== void 0) {
          b.write(Primitive.String.write(this.langCode));
        }
        return b.buffer;
      }
    }
    bots2.ResetBotCommands = ResetBotCommands;
    class GetBotCommands extends TLObject {
      __response__;
      scope;
      langCode;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'bots.GetBotCommands';
        this.constructorId = 3813412310;
        this.subclassOfId = 4209579305;
        this._slots = ['scope', 'langCode'];
        this.scope = params.scope;
        this.langCode = params.langCode;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let scope = await TLObject.read(b);
        let langCode = await Primitive.String.read(b);
        return new Raw2.bots.GetBotCommands({ scope, langCode });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.scope !== void 0) {
          b.write(this.scope.write());
        }
        if (this.langCode !== void 0) {
          b.write(Primitive.String.write(this.langCode));
        }
        return b.buffer;
      }
    }
    bots2.GetBotCommands = GetBotCommands;
    class SetBotMenuButton extends TLObject {
      __response__;
      userId;
      button;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'bots.SetBotMenuButton';
        this.constructorId = 1157944655;
        this.subclassOfId = 4122188204;
        this._slots = ['userId', 'button'];
        this.userId = params.userId;
        this.button = params.button;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let userId = await TLObject.read(b);
        let button = await TLObject.read(b);
        return new Raw2.bots.SetBotMenuButton({ userId, button });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        if (this.button !== void 0) {
          b.write(this.button.write());
        }
        return b.buffer;
      }
    }
    bots2.SetBotMenuButton = SetBotMenuButton;
    class GetBotMenuButton extends TLObject {
      __response__;
      userId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'bots.GetBotMenuButton';
        this.constructorId = 2623597352;
        this.subclassOfId = 1282522428;
        this._slots = ['userId'];
        this.userId = params.userId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let userId = await TLObject.read(b);
        return new Raw2.bots.GetBotMenuButton({ userId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        return b.buffer;
      }
    }
    bots2.GetBotMenuButton = GetBotMenuButton;
    class SetBotBroadcastDefaultAdminRights extends TLObject {
      __response__;
      adminRights;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'bots.SetBotBroadcastDefaultAdminRights';
        this.constructorId = 2021942497;
        this.subclassOfId = 4122188204;
        this._slots = ['adminRights'];
        this.adminRights = params.adminRights;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let adminRights = await TLObject.read(b);
        return new Raw2.bots.SetBotBroadcastDefaultAdminRights({ adminRights });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.adminRights !== void 0) {
          b.write(this.adminRights.write());
        }
        return b.buffer;
      }
    }
    bots2.SetBotBroadcastDefaultAdminRights = SetBotBroadcastDefaultAdminRights;
    class SetBotGroupDefaultAdminRights extends TLObject {
      __response__;
      adminRights;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'bots.SetBotGroupDefaultAdminRights';
        this.constructorId = 2455685610;
        this.subclassOfId = 4122188204;
        this._slots = ['adminRights'];
        this.adminRights = params.adminRights;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let adminRights = await TLObject.read(b);
        return new Raw2.bots.SetBotGroupDefaultAdminRights({ adminRights });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.adminRights !== void 0) {
          b.write(this.adminRights.write());
        }
        return b.buffer;
      }
    }
    bots2.SetBotGroupDefaultAdminRights = SetBotGroupDefaultAdminRights;
    class SetBotInfo extends TLObject {
      __response__;
      bot;
      langCode;
      name;
      about;
      description;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'bots.SetBotInfo';
        this.constructorId = 282013987;
        this.subclassOfId = 4122188204;
        this._slots = ['bot', 'langCode', 'name', 'about', 'description'];
        this.bot = params.bot;
        this.langCode = params.langCode;
        this.name = params.name;
        this.about = params.about;
        this.description = params.description;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let bot = flags & (1 << 2) ? await TLObject.read(b) : void 0;
        let langCode = await Primitive.String.read(b);
        let name = flags & (1 << 3) ? await Primitive.String.read(b) : void 0;
        let about = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let description = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        return new Raw2.bots.SetBotInfo({
          bot,
          langCode,
          name,
          about,
          description,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.bot !== void 0 ? 1 << 2 : 0;
        flags |= this.name !== void 0 ? 1 << 3 : 0;
        flags |= this.about !== void 0 ? 1 << 0 : 0;
        flags |= this.description !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.bot !== void 0) {
          b.write(this.bot.write());
        }
        if (this.langCode !== void 0) {
          b.write(Primitive.String.write(this.langCode));
        }
        if (this.name !== void 0) {
          b.write(Primitive.String.write(this.name));
        }
        if (this.about !== void 0) {
          b.write(Primitive.String.write(this.about));
        }
        if (this.description !== void 0) {
          b.write(Primitive.String.write(this.description));
        }
        return b.buffer;
      }
    }
    bots2.SetBotInfo = SetBotInfo;
    class GetBotInfo extends TLObject {
      __response__;
      bot;
      langCode;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'bots.GetBotInfo';
        this.constructorId = 3705214205;
        this.subclassOfId = 3397067317;
        this._slots = ['bot', 'langCode'];
        this.bot = params.bot;
        this.langCode = params.langCode;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let bot = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let langCode = await Primitive.String.read(b);
        return new Raw2.bots.GetBotInfo({ bot, langCode });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.bot !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.bot !== void 0) {
          b.write(this.bot.write());
        }
        if (this.langCode !== void 0) {
          b.write(Primitive.String.write(this.langCode));
        }
        return b.buffer;
      }
    }
    bots2.GetBotInfo = GetBotInfo;
    class ReorderUsernames extends TLObject {
      __response__;
      bot;
      order;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'bots.ReorderUsernames';
        this.constructorId = 2533994946;
        this.subclassOfId = 4122188204;
        this._slots = ['bot', 'order'];
        this.bot = params.bot;
        this.order = params.order;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let bot = await TLObject.read(b);
        let order = await TLObject.read(b, Primitive.String);
        return new Raw2.bots.ReorderUsernames({ bot, order });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.bot !== void 0) {
          b.write(this.bot.write());
        }
        if (this.order) {
          b.write(Primitive.Vector.write(this.order, Primitive.String));
        }
        return b.buffer;
      }
    }
    bots2.ReorderUsernames = ReorderUsernames;
    class ToggleUsername extends TLObject {
      __response__;
      bot;
      username;
      active;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'bots.ToggleUsername';
        this.constructorId = 87861619;
        this.subclassOfId = 4122188204;
        this._slots = ['bot', 'username', 'active'];
        this.bot = params.bot;
        this.username = params.username;
        this.active = params.active;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let bot = await TLObject.read(b);
        let username = await Primitive.String.read(b);
        let active = await Primitive.Bool.read(b);
        return new Raw2.bots.ToggleUsername({ bot, username, active });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.bot !== void 0) {
          b.write(this.bot.write());
        }
        if (this.username !== void 0) {
          b.write(Primitive.String.write(this.username));
        }
        if (this.active !== void 0) {
          b.write(Primitive.Bool.write(this.active));
        }
        return b.buffer;
      }
    }
    bots2.ToggleUsername = ToggleUsername;
    class CanSendMessage extends TLObject {
      __response__;
      bot;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'bots.CanSendMessage';
        this.constructorId = 324662502;
        this.subclassOfId = 4122188204;
        this._slots = ['bot'];
        this.bot = params.bot;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let bot = await TLObject.read(b);
        return new Raw2.bots.CanSendMessage({ bot });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.bot !== void 0) {
          b.write(this.bot.write());
        }
        return b.buffer;
      }
    }
    bots2.CanSendMessage = CanSendMessage;
    class AllowSendMessage extends TLObject {
      __response__;
      bot;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'bots.AllowSendMessage';
        this.constructorId = 4046644207;
        this.subclassOfId = 2331323052;
        this._slots = ['bot'];
        this.bot = params.bot;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let bot = await TLObject.read(b);
        return new Raw2.bots.AllowSendMessage({ bot });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.bot !== void 0) {
          b.write(this.bot.write());
        }
        return b.buffer;
      }
    }
    bots2.AllowSendMessage = AllowSendMessage;
    class InvokeWebViewCustomMethod extends TLObject {
      __response__;
      bot;
      customMethod;
      params;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'bots.InvokeWebViewCustomMethod';
        this.constructorId = 142591463;
        this.subclassOfId = 2902676200;
        this._slots = ['bot', 'customMethod', 'params'];
        this.bot = params.bot;
        this.customMethod = params.customMethod;
        this.params = params.params;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let bot = await TLObject.read(b);
        let customMethod = await Primitive.String.read(b);
        let params = await TLObject.read(b);
        return new Raw2.bots.InvokeWebViewCustomMethod({
          bot,
          customMethod,
          params,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.bot !== void 0) {
          b.write(this.bot.write());
        }
        if (this.customMethod !== void 0) {
          b.write(Primitive.String.write(this.customMethod));
        }
        if (this.params !== void 0) {
          b.write(this.params.write());
        }
        return b.buffer;
      }
    }
    bots2.InvokeWebViewCustomMethod = InvokeWebViewCustomMethod;
  })((bots = Raw2.bots || (Raw2.bots = {})));
  let stories;
  ((stories2) => {
    class AllStoriesNotModified extends TLObject {
      state;
      stealthMode;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'stories.AllStoriesNotModified';
        this.constructorId = 291044926;
        this.subclassOfId = 2120274125;
        this._slots = ['state', 'stealthMode'];
        this.state = params.state;
        this.stealthMode = params.stealthMode;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let state = await Primitive.String.read(b);
        let stealthMode = await TLObject.read(b);
        return new Raw2.stories.AllStoriesNotModified({ state, stealthMode });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        b.write(Primitive.Int.write(flags));
        if (this.state !== void 0) {
          b.write(Primitive.String.write(this.state));
        }
        if (this.stealthMode !== void 0) {
          b.write(this.stealthMode.write());
        }
        return b.buffer;
      }
    }
    stories2.AllStoriesNotModified = AllStoriesNotModified;
    class AllStories extends TLObject {
      hasMore;
      count;
      state;
      peerStories;
      chats;
      users;
      stealthMode;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'stories.AllStories';
        this.constructorId = 1862033025;
        this.subclassOfId = 2120274125;
        this._slots = ['hasMore', 'count', 'state', 'peerStories', 'chats', 'users', 'stealthMode'];
        this.hasMore = params.hasMore;
        this.count = params.count;
        this.state = params.state;
        this.peerStories = params.peerStories;
        this.chats = params.chats;
        this.users = params.users;
        this.stealthMode = params.stealthMode;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let hasMore = flags & (1 << 0) ? true : false;
        let count = await Primitive.Int.read(b);
        let state = await Primitive.String.read(b);
        let peerStories = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        let stealthMode = await TLObject.read(b);
        return new Raw2.stories.AllStories({
          hasMore,
          count,
          state,
          peerStories,
          chats,
          users: users2,
          stealthMode,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.hasMore ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.state !== void 0) {
          b.write(Primitive.String.write(this.state));
        }
        if (this.peerStories) {
          b.write(Primitive.Vector.write(this.peerStories));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        if (this.stealthMode !== void 0) {
          b.write(this.stealthMode.write());
        }
        return b.buffer;
      }
    }
    stories2.AllStories = AllStories;
    class Stories extends TLObject {
      count;
      stories;
      pinnedToTop;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'stories.Stories';
        this.constructorId = 1673780490;
        this.subclassOfId = 622595116;
        this._slots = ['count', 'stories', 'pinnedToTop', 'chats', 'users'];
        this.count = params.count;
        this.stories = params.stories;
        this.pinnedToTop = params.pinnedToTop;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let count = await Primitive.Int.read(b);
        let stories3 = await TLObject.read(b);
        let pinnedToTop = flags & (1 << 0) ? await TLObject.read(b, Primitive.Int) : [];
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.stories.Stories({
          count,
          stories: stories3,
          pinnedToTop,
          chats,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.pinnedToTop ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.stories) {
          b.write(Primitive.Vector.write(this.stories));
        }
        if (this.pinnedToTop) {
          b.write(Primitive.Vector.write(this.pinnedToTop, Primitive.Int));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    stories2.Stories = Stories;
    class StoryViewsList extends TLObject {
      count;
      viewsCount;
      forwardsCount;
      reactionsCount;
      views;
      chats;
      users;
      nextOffset;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'stories.StoryViewsList';
        this.constructorId = 1507299269;
        this.subclassOfId = 3108205920;
        this._slots = [
          'count',
          'viewsCount',
          'forwardsCount',
          'reactionsCount',
          'views',
          'chats',
          'users',
          'nextOffset',
        ];
        this.count = params.count;
        this.viewsCount = params.viewsCount;
        this.forwardsCount = params.forwardsCount;
        this.reactionsCount = params.reactionsCount;
        this.views = params.views;
        this.chats = params.chats;
        this.users = params.users;
        this.nextOffset = params.nextOffset;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let count = await Primitive.Int.read(b);
        let viewsCount = await Primitive.Int.read(b);
        let forwardsCount = await Primitive.Int.read(b);
        let reactionsCount = await Primitive.Int.read(b);
        let views = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        let nextOffset = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        return new Raw2.stories.StoryViewsList({
          count,
          viewsCount,
          forwardsCount,
          reactionsCount,
          views,
          chats,
          users: users2,
          nextOffset,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.nextOffset !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.viewsCount !== void 0) {
          b.write(Primitive.Int.write(this.viewsCount));
        }
        if (this.forwardsCount !== void 0) {
          b.write(Primitive.Int.write(this.forwardsCount));
        }
        if (this.reactionsCount !== void 0) {
          b.write(Primitive.Int.write(this.reactionsCount));
        }
        if (this.views) {
          b.write(Primitive.Vector.write(this.views));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        if (this.nextOffset !== void 0) {
          b.write(Primitive.String.write(this.nextOffset));
        }
        return b.buffer;
      }
    }
    stories2.StoryViewsList = StoryViewsList;
    class StoryViews2 extends TLObject {
      views;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'stories.StoryViews';
        this.constructorId = 3734957341;
        this.subclassOfId = 1262470330;
        this._slots = ['views', 'users'];
        this.views = params.views;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let views = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.stories.StoryViews({ views, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.views) {
          b.write(Primitive.Vector.write(this.views));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    stories2.StoryViews = StoryViews2;
    class PeerStories2 extends TLObject {
      stories;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'stories.PeerStories';
        this.constructorId = 3404105576;
        this.subclassOfId = 2639712208;
        this._slots = ['stories', 'chats', 'users'];
        this.stories = params.stories;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let stories3 = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.stories.PeerStories({ stories: stories3, chats, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.stories !== void 0) {
          b.write(this.stories.write());
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    stories2.PeerStories = PeerStories2;
    class StoryReactionsList extends TLObject {
      count;
      reactions;
      chats;
      users;
      nextOffset;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'stories.StoryReactionsList';
        this.constructorId = 2858383516;
        this.subclassOfId = 74420707;
        this._slots = ['count', 'reactions', 'chats', 'users', 'nextOffset'];
        this.count = params.count;
        this.reactions = params.reactions;
        this.chats = params.chats;
        this.users = params.users;
        this.nextOffset = params.nextOffset;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let count = await Primitive.Int.read(b);
        let reactions = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        let nextOffset = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        return new Raw2.stories.StoryReactionsList({
          count,
          reactions,
          chats,
          users: users2,
          nextOffset,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.nextOffset !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.reactions) {
          b.write(Primitive.Vector.write(this.reactions));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        if (this.nextOffset !== void 0) {
          b.write(Primitive.String.write(this.nextOffset));
        }
        return b.buffer;
      }
    }
    stories2.StoryReactionsList = StoryReactionsList;
    class CanSendStory extends TLObject {
      __response__;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.CanSendStory';
        this.constructorId = 3353337821;
        this.subclassOfId = 4122188204;
        this._slots = ['peer'];
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        return new Raw2.stories.CanSendStory({ peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    stories2.CanSendStory = CanSendStory;
    class SendStory extends TLObject {
      __response__;
      pinned;
      noforwards;
      fwdModified;
      peer;
      media;
      mediaAreas;
      caption;
      entities;
      privacyRules;
      randomId;
      period;
      fwdFromId;
      fwdFromStory;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.SendStory';
        this.constructorId = 3840305483;
        this.subclassOfId = 2331323052;
        this._slots = [
          'pinned',
          'noforwards',
          'fwdModified',
          'peer',
          'media',
          'mediaAreas',
          'caption',
          'entities',
          'privacyRules',
          'randomId',
          'period',
          'fwdFromId',
          'fwdFromStory',
        ];
        this.pinned = params.pinned;
        this.noforwards = params.noforwards;
        this.fwdModified = params.fwdModified;
        this.peer = params.peer;
        this.media = params.media;
        this.mediaAreas = params.mediaAreas;
        this.caption = params.caption;
        this.entities = params.entities;
        this.privacyRules = params.privacyRules;
        this.randomId = params.randomId;
        this.period = params.period;
        this.fwdFromId = params.fwdFromId;
        this.fwdFromStory = params.fwdFromStory;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let pinned = flags & (1 << 2) ? true : false;
        let noforwards = flags & (1 << 4) ? true : false;
        let fwdModified = flags & (1 << 7) ? true : false;
        let peer = await TLObject.read(b);
        let media = await TLObject.read(b);
        let mediaAreas = flags & (1 << 5) ? await TLObject.read(b) : [];
        let caption = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let entities = flags & (1 << 1) ? await TLObject.read(b) : [];
        let privacyRules = await TLObject.read(b);
        let randomId = await Primitive.Long.read(b);
        let period = flags & (1 << 3) ? await Primitive.Int.read(b) : void 0;
        let fwdFromId = flags & (1 << 6) ? await TLObject.read(b) : void 0;
        let fwdFromStory = flags & (1 << 6) ? await Primitive.Int.read(b) : void 0;
        return new Raw2.stories.SendStory({
          pinned,
          noforwards,
          fwdModified,
          peer,
          media,
          mediaAreas,
          caption,
          entities,
          privacyRules,
          randomId,
          period,
          fwdFromId,
          fwdFromStory,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.pinned ? 1 << 2 : 0;
        flags |= this.noforwards ? 1 << 4 : 0;
        flags |= this.fwdModified ? 1 << 7 : 0;
        flags |= this.mediaAreas ? 1 << 5 : 0;
        flags |= this.caption !== void 0 ? 1 << 0 : 0;
        flags |= this.entities ? 1 << 1 : 0;
        flags |= this.period !== void 0 ? 1 << 3 : 0;
        flags |= this.fwdFromId !== void 0 ? 1 << 6 : 0;
        flags |= this.fwdFromStory !== void 0 ? 1 << 6 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.media !== void 0) {
          b.write(this.media.write());
        }
        if (this.mediaAreas) {
          b.write(Primitive.Vector.write(this.mediaAreas));
        }
        if (this.caption !== void 0) {
          b.write(Primitive.String.write(this.caption));
        }
        if (this.entities) {
          b.write(Primitive.Vector.write(this.entities));
        }
        if (this.privacyRules) {
          b.write(Primitive.Vector.write(this.privacyRules));
        }
        if (this.randomId !== void 0) {
          b.write(Primitive.Long.write(this.randomId));
        }
        if (this.period !== void 0) {
          b.write(Primitive.Int.write(this.period));
        }
        if (this.fwdFromId !== void 0) {
          b.write(this.fwdFromId.write());
        }
        if (this.fwdFromStory !== void 0) {
          b.write(Primitive.Int.write(this.fwdFromStory));
        }
        return b.buffer;
      }
    }
    stories2.SendStory = SendStory;
    class EditStory extends TLObject {
      __response__;
      peer;
      id;
      media;
      mediaAreas;
      caption;
      entities;
      privacyRules;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.EditStory';
        this.constructorId = 3045308998;
        this.subclassOfId = 2331323052;
        this._slots = ['peer', 'id', 'media', 'mediaAreas', 'caption', 'entities', 'privacyRules'];
        this.peer = params.peer;
        this.id = params.id;
        this.media = params.media;
        this.mediaAreas = params.mediaAreas;
        this.caption = params.caption;
        this.entities = params.entities;
        this.privacyRules = params.privacyRules;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let peer = await TLObject.read(b);
        let id = await Primitive.Int.read(b);
        let media = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let mediaAreas = flags & (1 << 3) ? await TLObject.read(b) : [];
        let caption = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let entities = flags & (1 << 1) ? await TLObject.read(b) : [];
        let privacyRules = flags & (1 << 2) ? await TLObject.read(b) : [];
        return new Raw2.stories.EditStory({
          peer,
          id,
          media,
          mediaAreas,
          caption,
          entities,
          privacyRules,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.media !== void 0 ? 1 << 0 : 0;
        flags |= this.mediaAreas ? 1 << 3 : 0;
        flags |= this.caption !== void 0 ? 1 << 1 : 0;
        flags |= this.entities ? 1 << 1 : 0;
        flags |= this.privacyRules ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id !== void 0) {
          b.write(Primitive.Int.write(this.id));
        }
        if (this.media !== void 0) {
          b.write(this.media.write());
        }
        if (this.mediaAreas) {
          b.write(Primitive.Vector.write(this.mediaAreas));
        }
        if (this.caption !== void 0) {
          b.write(Primitive.String.write(this.caption));
        }
        if (this.entities) {
          b.write(Primitive.Vector.write(this.entities));
        }
        if (this.privacyRules) {
          b.write(Primitive.Vector.write(this.privacyRules));
        }
        return b.buffer;
      }
    }
    stories2.EditStory = EditStory;
    class DeleteStories extends TLObject {
      __response__;
      peer;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.DeleteStories';
        this.constructorId = 2925124447;
        this.subclassOfId = 1344696591;
        this._slots = ['peer', 'id'];
        this.peer = params.peer;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        return new Raw2.stories.DeleteStories({ peer, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        return b.buffer;
      }
    }
    stories2.DeleteStories = DeleteStories;
    class TogglePinned extends TLObject {
      __response__;
      peer;
      id;
      pinned;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.TogglePinned';
        this.constructorId = 2591400431;
        this.subclassOfId = 1344696591;
        this._slots = ['peer', 'id', 'pinned'];
        this.peer = params.peer;
        this.id = params.id;
        this.pinned = params.pinned;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        let pinned = await Primitive.Bool.read(b);
        return new Raw2.stories.TogglePinned({ peer, id, pinned });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        if (this.pinned !== void 0) {
          b.write(Primitive.Bool.write(this.pinned));
        }
        return b.buffer;
      }
    }
    stories2.TogglePinned = TogglePinned;
    class GetAllStories extends TLObject {
      __response__;
      next;
      hidden;
      state;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.GetAllStories';
        this.constructorId = 4004566565;
        this.subclassOfId = 2120274125;
        this._slots = ['next', 'hidden', 'state'];
        this.next = params.next;
        this.hidden = params.hidden;
        this.state = params.state;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let next = flags & (1 << 1) ? true : false;
        let hidden = flags & (1 << 2) ? true : false;
        let state = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        return new Raw2.stories.GetAllStories({ next, hidden, state });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.next ? 1 << 1 : 0;
        flags |= this.hidden ? 1 << 2 : 0;
        flags |= this.state !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.state !== void 0) {
          b.write(Primitive.String.write(this.state));
        }
        return b.buffer;
      }
    }
    stories2.GetAllStories = GetAllStories;
    class GetPinnedStories extends TLObject {
      __response__;
      peer;
      offsetId;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.GetPinnedStories';
        this.constructorId = 1478600156;
        this.subclassOfId = 622595116;
        this._slots = ['peer', 'offsetId', 'limit'];
        this.peer = params.peer;
        this.offsetId = params.offsetId;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let offsetId = await Primitive.Int.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.stories.GetPinnedStories({ peer, offsetId, limit });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.offsetId !== void 0) {
          b.write(Primitive.Int.write(this.offsetId));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    stories2.GetPinnedStories = GetPinnedStories;
    class GetStoriesArchive extends TLObject {
      __response__;
      peer;
      offsetId;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.GetStoriesArchive';
        this.constructorId = 3023380502;
        this.subclassOfId = 622595116;
        this._slots = ['peer', 'offsetId', 'limit'];
        this.peer = params.peer;
        this.offsetId = params.offsetId;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let offsetId = await Primitive.Int.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.stories.GetStoriesArchive({ peer, offsetId, limit });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.offsetId !== void 0) {
          b.write(Primitive.Int.write(this.offsetId));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    stories2.GetStoriesArchive = GetStoriesArchive;
    class GetStoriesByID extends TLObject {
      __response__;
      peer;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.GetStoriesByID';
        this.constructorId = 1467271796;
        this.subclassOfId = 622595116;
        this._slots = ['peer', 'id'];
        this.peer = params.peer;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        return new Raw2.stories.GetStoriesByID({ peer, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        return b.buffer;
      }
    }
    stories2.GetStoriesByID = GetStoriesByID;
    class ToggleAllStoriesHidden extends TLObject {
      __response__;
      hidden;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.ToggleAllStoriesHidden';
        this.constructorId = 2082822084;
        this.subclassOfId = 4122188204;
        this._slots = ['hidden'];
        this.hidden = params.hidden;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let hidden = await Primitive.Bool.read(b);
        return new Raw2.stories.ToggleAllStoriesHidden({ hidden });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.hidden !== void 0) {
          b.write(Primitive.Bool.write(this.hidden));
        }
        return b.buffer;
      }
    }
    stories2.ToggleAllStoriesHidden = ToggleAllStoriesHidden;
    class ReadStories extends TLObject {
      __response__;
      peer;
      maxId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.ReadStories';
        this.constructorId = 2773932744;
        this.subclassOfId = 1344696591;
        this._slots = ['peer', 'maxId'];
        this.peer = params.peer;
        this.maxId = params.maxId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let maxId = await Primitive.Int.read(b);
        return new Raw2.stories.ReadStories({ peer, maxId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.maxId !== void 0) {
          b.write(Primitive.Int.write(this.maxId));
        }
        return b.buffer;
      }
    }
    stories2.ReadStories = ReadStories;
    class IncrementStoryViews extends TLObject {
      __response__;
      peer;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.IncrementStoryViews';
        this.constructorId = 2986511099;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'id'];
        this.peer = params.peer;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        return new Raw2.stories.IncrementStoryViews({ peer, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        return b.buffer;
      }
    }
    stories2.IncrementStoryViews = IncrementStoryViews;
    class GetStoryViewsList extends TLObject {
      __response__;
      justContacts;
      reactionsFirst;
      forwardsFirst;
      peer;
      q;
      id;
      offset;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.GetStoryViewsList';
        this.constructorId = 2127707223;
        this.subclassOfId = 3108205920;
        this._slots = [
          'justContacts',
          'reactionsFirst',
          'forwardsFirst',
          'peer',
          'q',
          'id',
          'offset',
          'limit',
        ];
        this.justContacts = params.justContacts;
        this.reactionsFirst = params.reactionsFirst;
        this.forwardsFirst = params.forwardsFirst;
        this.peer = params.peer;
        this.q = params.q;
        this.id = params.id;
        this.offset = params.offset;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let justContacts = flags & (1 << 0) ? true : false;
        let reactionsFirst = flags & (1 << 2) ? true : false;
        let forwardsFirst = flags & (1 << 3) ? true : false;
        let peer = await TLObject.read(b);
        let q = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let id = await Primitive.Int.read(b);
        let offset = await Primitive.String.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.stories.GetStoryViewsList({
          justContacts,
          reactionsFirst,
          forwardsFirst,
          peer,
          q,
          id,
          offset,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.justContacts ? 1 << 0 : 0;
        flags |= this.reactionsFirst ? 1 << 2 : 0;
        flags |= this.forwardsFirst ? 1 << 3 : 0;
        flags |= this.q !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.q !== void 0) {
          b.write(Primitive.String.write(this.q));
        }
        if (this.id !== void 0) {
          b.write(Primitive.Int.write(this.id));
        }
        if (this.offset !== void 0) {
          b.write(Primitive.String.write(this.offset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    stories2.GetStoryViewsList = GetStoryViewsList;
    class GetStoriesViews extends TLObject {
      __response__;
      peer;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.GetStoriesViews';
        this.constructorId = 685862088;
        this.subclassOfId = 1262470330;
        this._slots = ['peer', 'id'];
        this.peer = params.peer;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        return new Raw2.stories.GetStoriesViews({ peer, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        return b.buffer;
      }
    }
    stories2.GetStoriesViews = GetStoriesViews;
    class ExportStoryLink extends TLObject {
      __response__;
      peer;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.ExportStoryLink';
        this.constructorId = 2072899360;
        this.subclassOfId = 264585638;
        this._slots = ['peer', 'id'];
        this.peer = params.peer;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await Primitive.Int.read(b);
        return new Raw2.stories.ExportStoryLink({ peer, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id !== void 0) {
          b.write(Primitive.Int.write(this.id));
        }
        return b.buffer;
      }
    }
    stories2.ExportStoryLink = ExportStoryLink;
    class Report extends TLObject {
      __response__;
      peer;
      id;
      reason;
      message;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.Report';
        this.constructorId = 421788300;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'id', 'reason', 'message'];
        this.peer = params.peer;
        this.id = params.id;
        this.reason = params.reason;
        this.message = params.message;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        let reason = await TLObject.read(b);
        let message = await Primitive.String.read(b);
        return new Raw2.stories.Report({ peer, id, reason, message });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        if (this.reason !== void 0) {
          b.write(this.reason.write());
        }
        if (this.message !== void 0) {
          b.write(Primitive.String.write(this.message));
        }
        return b.buffer;
      }
    }
    stories2.Report = Report;
    class ActivateStealthMode extends TLObject {
      __response__;
      past;
      future;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.ActivateStealthMode';
        this.constructorId = 1471926630;
        this.subclassOfId = 2331323052;
        this._slots = ['past', 'future'];
        this.past = params.past;
        this.future = params.future;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let past = flags & (1 << 0) ? true : false;
        let future = flags & (1 << 1) ? true : false;
        return new Raw2.stories.ActivateStealthMode({ past, future });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.past ? 1 << 0 : 0;
        flags |= this.future ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        return b.buffer;
      }
    }
    stories2.ActivateStealthMode = ActivateStealthMode;
    class SendReaction extends TLObject {
      __response__;
      addToRecent;
      peer;
      storyId;
      reaction;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.SendReaction';
        this.constructorId = 2144810674;
        this.subclassOfId = 2331323052;
        this._slots = ['addToRecent', 'peer', 'storyId', 'reaction'];
        this.addToRecent = params.addToRecent;
        this.peer = params.peer;
        this.storyId = params.storyId;
        this.reaction = params.reaction;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let addToRecent = flags & (1 << 0) ? true : false;
        let peer = await TLObject.read(b);
        let storyId = await Primitive.Int.read(b);
        let reaction = await TLObject.read(b);
        return new Raw2.stories.SendReaction({
          addToRecent,
          peer,
          storyId,
          reaction,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.addToRecent ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.storyId !== void 0) {
          b.write(Primitive.Int.write(this.storyId));
        }
        if (this.reaction !== void 0) {
          b.write(this.reaction.write());
        }
        return b.buffer;
      }
    }
    stories2.SendReaction = SendReaction;
    class GetPeerStories extends TLObject {
      __response__;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.GetPeerStories';
        this.constructorId = 743103056;
        this.subclassOfId = 2639712208;
        this._slots = ['peer'];
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        return new Raw2.stories.GetPeerStories({ peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    stories2.GetPeerStories = GetPeerStories;
    class GetAllReadPeerStories extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'stories.GetAllReadPeerStories';
        this.constructorId = 2606426105;
        this.subclassOfId = 2331323052;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.stories.GetAllReadPeerStories();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    stories2.GetAllReadPeerStories = GetAllReadPeerStories;
    class GetPeerMaxIDs extends TLObject {
      __response__;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.GetPeerMaxIDs';
        this.constructorId = 1398375363;
        this.subclassOfId = 1344696591;
        this._slots = ['id'];
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let id = await TLObject.read(b);
        return new Raw2.stories.GetPeerMaxIDs({ id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.id) {
          b.write(Primitive.Vector.write(this.id));
        }
        return b.buffer;
      }
    }
    stories2.GetPeerMaxIDs = GetPeerMaxIDs;
    class GetChatsToSend extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'stories.GetChatsToSend';
        this.constructorId = 2775223136;
        this.subclassOfId = 2580925204;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.stories.GetChatsToSend();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    stories2.GetChatsToSend = GetChatsToSend;
    class TogglePeerStoriesHidden extends TLObject {
      __response__;
      peer;
      hidden;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.TogglePeerStoriesHidden';
        this.constructorId = 3171161540;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'hidden'];
        this.peer = params.peer;
        this.hidden = params.hidden;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let hidden = await Primitive.Bool.read(b);
        return new Raw2.stories.TogglePeerStoriesHidden({ peer, hidden });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.hidden !== void 0) {
          b.write(Primitive.Bool.write(this.hidden));
        }
        return b.buffer;
      }
    }
    stories2.TogglePeerStoriesHidden = TogglePeerStoriesHidden;
    class GetStoryReactionsList extends TLObject {
      __response__;
      forwardsFirst;
      peer;
      id;
      reaction;
      offset;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.GetStoryReactionsList';
        this.constructorId = 3115485215;
        this.subclassOfId = 74420707;
        this._slots = ['forwardsFirst', 'peer', 'id', 'reaction', 'offset', 'limit'];
        this.forwardsFirst = params.forwardsFirst;
        this.peer = params.peer;
        this.id = params.id;
        this.reaction = params.reaction;
        this.offset = params.offset;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let forwardsFirst = flags & (1 << 2) ? true : false;
        let peer = await TLObject.read(b);
        let id = await Primitive.Int.read(b);
        let reaction = flags & (1 << 0) ? await TLObject.read(b) : void 0;
        let offset = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let limit = await Primitive.Int.read(b);
        return new Raw2.stories.GetStoryReactionsList({
          forwardsFirst,
          peer,
          id,
          reaction,
          offset,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.forwardsFirst ? 1 << 2 : 0;
        flags |= this.reaction !== void 0 ? 1 << 0 : 0;
        flags |= this.offset !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id !== void 0) {
          b.write(Primitive.Int.write(this.id));
        }
        if (this.reaction !== void 0) {
          b.write(this.reaction.write());
        }
        if (this.offset !== void 0) {
          b.write(Primitive.String.write(this.offset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    stories2.GetStoryReactionsList = GetStoryReactionsList;
    class TogglePinnedToTop extends TLObject {
      __response__;
      peer;
      id;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'stories.TogglePinnedToTop';
        this.constructorId = 187268763;
        this.subclassOfId = 4122188204;
        this._slots = ['peer', 'id'];
        this.peer = params.peer;
        this.id = params.id;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let id = await TLObject.read(b, Primitive.Int);
        return new Raw2.stories.TogglePinnedToTop({ peer, id });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.id) {
          b.write(Primitive.Vector.write(this.id, Primitive.Int));
        }
        return b.buffer;
      }
    }
    stories2.TogglePinnedToTop = TogglePinnedToTop;
  })((stories = Raw2.stories || (Raw2.stories = {})));
  let premium;
  ((premium2) => {
    class BoostsList extends TLObject {
      count;
      boosts;
      nextOffset;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'premium.BoostsList';
        this.constructorId = 2264424764;
        this.subclassOfId = 573941949;
        this._slots = ['count', 'boosts', 'nextOffset', 'users'];
        this.count = params.count;
        this.boosts = params.boosts;
        this.nextOffset = params.nextOffset;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let count = await Primitive.Int.read(b);
        let boosts = await TLObject.read(b);
        let nextOffset = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        let users2 = await TLObject.read(b);
        return new Raw2.premium.BoostsList({
          count,
          boosts,
          nextOffset,
          users: users2,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.nextOffset !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.count !== void 0) {
          b.write(Primitive.Int.write(this.count));
        }
        if (this.boosts) {
          b.write(Primitive.Vector.write(this.boosts));
        }
        if (this.nextOffset !== void 0) {
          b.write(Primitive.String.write(this.nextOffset));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    premium2.BoostsList = BoostsList;
    class MyBoosts extends TLObject {
      myBoosts;
      chats;
      users;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'premium.MyBoosts';
        this.constructorId = 2598512866;
        this.subclassOfId = 2905936603;
        this._slots = ['myBoosts', 'chats', 'users'];
        this.myBoosts = params.myBoosts;
        this.chats = params.chats;
        this.users = params.users;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let myBoosts = await TLObject.read(b);
        let chats = await TLObject.read(b);
        let users2 = await TLObject.read(b);
        return new Raw2.premium.MyBoosts({ myBoosts, chats, users: users2 });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.myBoosts) {
          b.write(Primitive.Vector.write(this.myBoosts));
        }
        if (this.chats) {
          b.write(Primitive.Vector.write(this.chats));
        }
        if (this.users) {
          b.write(Primitive.Vector.write(this.users));
        }
        return b.buffer;
      }
    }
    premium2.MyBoosts = MyBoosts;
    class BoostsStatus extends TLObject {
      myBoost;
      level;
      currentLevelBoosts;
      boosts;
      giftBoosts;
      nextLevelBoosts;
      premiumAudience;
      boostUrl;
      prepaidGiveaways;
      myBoostSlots;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'premium.BoostsStatus';
        this.constructorId = 1230586490;
        this.subclassOfId = 3273333433;
        this._slots = [
          'myBoost',
          'level',
          'currentLevelBoosts',
          'boosts',
          'giftBoosts',
          'nextLevelBoosts',
          'premiumAudience',
          'boostUrl',
          'prepaidGiveaways',
          'myBoostSlots',
        ];
        this.myBoost = params.myBoost;
        this.level = params.level;
        this.currentLevelBoosts = params.currentLevelBoosts;
        this.boosts = params.boosts;
        this.giftBoosts = params.giftBoosts;
        this.nextLevelBoosts = params.nextLevelBoosts;
        this.premiumAudience = params.premiumAudience;
        this.boostUrl = params.boostUrl;
        this.prepaidGiveaways = params.prepaidGiveaways;
        this.myBoostSlots = params.myBoostSlots;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let myBoost = flags & (1 << 2) ? true : false;
        let level = await Primitive.Int.read(b);
        let currentLevelBoosts = await Primitive.Int.read(b);
        let boosts = await Primitive.Int.read(b);
        let giftBoosts = flags & (1 << 4) ? await Primitive.Int.read(b) : void 0;
        let nextLevelBoosts = flags & (1 << 0) ? await Primitive.Int.read(b) : void 0;
        let premiumAudience = flags & (1 << 1) ? await TLObject.read(b) : void 0;
        let boostUrl = await Primitive.String.read(b);
        let prepaidGiveaways = flags & (1 << 3) ? await TLObject.read(b) : [];
        let myBoostSlots = flags & (1 << 2) ? await TLObject.read(b, Primitive.Int) : [];
        return new Raw2.premium.BoostsStatus({
          myBoost,
          level,
          currentLevelBoosts,
          boosts,
          giftBoosts,
          nextLevelBoosts,
          premiumAudience,
          boostUrl,
          prepaidGiveaways,
          myBoostSlots,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.myBoost ? 1 << 2 : 0;
        flags |= this.giftBoosts !== void 0 ? 1 << 4 : 0;
        flags |= this.nextLevelBoosts !== void 0 ? 1 << 0 : 0;
        flags |= this.premiumAudience !== void 0 ? 1 << 1 : 0;
        flags |= this.prepaidGiveaways ? 1 << 3 : 0;
        flags |= this.myBoostSlots ? 1 << 2 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.level !== void 0) {
          b.write(Primitive.Int.write(this.level));
        }
        if (this.currentLevelBoosts !== void 0) {
          b.write(Primitive.Int.write(this.currentLevelBoosts));
        }
        if (this.boosts !== void 0) {
          b.write(Primitive.Int.write(this.boosts));
        }
        if (this.giftBoosts !== void 0) {
          b.write(Primitive.Int.write(this.giftBoosts));
        }
        if (this.nextLevelBoosts !== void 0) {
          b.write(Primitive.Int.write(this.nextLevelBoosts));
        }
        if (this.premiumAudience !== void 0) {
          b.write(this.premiumAudience.write());
        }
        if (this.boostUrl !== void 0) {
          b.write(Primitive.String.write(this.boostUrl));
        }
        if (this.prepaidGiveaways) {
          b.write(Primitive.Vector.write(this.prepaidGiveaways));
        }
        if (this.myBoostSlots) {
          b.write(Primitive.Vector.write(this.myBoostSlots, Primitive.Int));
        }
        return b.buffer;
      }
    }
    premium2.BoostsStatus = BoostsStatus;
    class GetBoostsList extends TLObject {
      __response__;
      gifts;
      peer;
      offset;
      limit;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'premium.GetBoostsList';
        this.constructorId = 1626764896;
        this.subclassOfId = 573941949;
        this._slots = ['gifts', 'peer', 'offset', 'limit'];
        this.gifts = params.gifts;
        this.peer = params.peer;
        this.offset = params.offset;
        this.limit = params.limit;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let gifts = flags & (1 << 0) ? true : false;
        let peer = await TLObject.read(b);
        let offset = await Primitive.String.read(b);
        let limit = await Primitive.Int.read(b);
        return new Raw2.premium.GetBoostsList({
          gifts,
          peer,
          offset,
          limit,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.gifts ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.offset !== void 0) {
          b.write(Primitive.String.write(this.offset));
        }
        if (this.limit !== void 0) {
          b.write(Primitive.Int.write(this.limit));
        }
        return b.buffer;
      }
    }
    premium2.GetBoostsList = GetBoostsList;
    class GetMyBoosts extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'premium.GetMyBoosts';
        this.constructorId = 199719754;
        this.subclassOfId = 2905936603;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.premium.GetMyBoosts();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    premium2.GetMyBoosts = GetMyBoosts;
    class ApplyBoost extends TLObject {
      __response__;
      slots;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'premium.ApplyBoost';
        this.constructorId = 1803396934;
        this.subclassOfId = 2905936603;
        this._slots = ['slots', 'peer'];
        this.slots = params.slots;
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let slots = flags & (1 << 0) ? await TLObject.read(b, Primitive.Int) : [];
        let peer = await TLObject.read(b);
        return new Raw2.premium.ApplyBoost({ slots, peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.slots ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.slots) {
          b.write(Primitive.Vector.write(this.slots, Primitive.Int));
        }
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    premium2.ApplyBoost = ApplyBoost;
    class GetBoostsStatus extends TLObject {
      __response__;
      peer;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'premium.GetBoostsStatus';
        this.constructorId = 70197089;
        this.subclassOfId = 3273333433;
        this._slots = ['peer'];
        this.peer = params.peer;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        return new Raw2.premium.GetBoostsStatus({ peer });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        return b.buffer;
      }
    }
    premium2.GetBoostsStatus = GetBoostsStatus;
    class GetUserBoosts extends TLObject {
      __response__;
      peer;
      userId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'premium.GetUserBoosts';
        this.constructorId = 965037343;
        this.subclassOfId = 573941949;
        this._slots = ['peer', 'userId'];
        this.peer = params.peer;
        this.userId = params.userId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let peer = await TLObject.read(b);
        let userId = await TLObject.read(b);
        return new Raw2.premium.GetUserBoosts({ peer, userId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.peer !== void 0) {
          b.write(this.peer.write());
        }
        if (this.userId !== void 0) {
          b.write(this.userId.write());
        }
        return b.buffer;
      }
    }
    premium2.GetUserBoosts = GetUserBoosts;
  })((premium = Raw2.premium || (Raw2.premium = {})));
  let smsjobs;
  ((smsjobs2) => {
    class EligibleToJoin extends TLObject {
      termsUrl;
      monthlySentSms;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'smsjobs.EligibleToJoin';
        this.constructorId = 3700114639;
        this.subclassOfId = 1589076134;
        this._slots = ['termsUrl', 'monthlySentSms'];
        this.termsUrl = params.termsUrl;
        this.monthlySentSms = params.monthlySentSms;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let termsUrl = await Primitive.String.read(b);
        let monthlySentSms = await Primitive.Int.read(b);
        return new Raw2.smsjobs.EligibleToJoin({
          termsUrl,
          monthlySentSms,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.termsUrl !== void 0) {
          b.write(Primitive.String.write(this.termsUrl));
        }
        if (this.monthlySentSms !== void 0) {
          b.write(Primitive.Int.write(this.monthlySentSms));
        }
        return b.buffer;
      }
    }
    smsjobs2.EligibleToJoin = EligibleToJoin;
    class Status extends TLObject {
      allowInternational;
      recentSent;
      recentSince;
      recentRemains;
      totalSent;
      totalSince;
      lastGiftSlug;
      termsUrl;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'smsjobs.Status';
        this.constructorId = 720277905;
        this.subclassOfId = 3448711973;
        this._slots = [
          'allowInternational',
          'recentSent',
          'recentSince',
          'recentRemains',
          'totalSent',
          'totalSince',
          'lastGiftSlug',
          'termsUrl',
        ];
        this.allowInternational = params.allowInternational;
        this.recentSent = params.recentSent;
        this.recentSince = params.recentSince;
        this.recentRemains = params.recentRemains;
        this.totalSent = params.totalSent;
        this.totalSince = params.totalSince;
        this.lastGiftSlug = params.lastGiftSlug;
        this.termsUrl = params.termsUrl;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let allowInternational = flags & (1 << 0) ? true : false;
        let recentSent = await Primitive.Int.read(b);
        let recentSince = await Primitive.Int.read(b);
        let recentRemains = await Primitive.Int.read(b);
        let totalSent = await Primitive.Int.read(b);
        let totalSince = await Primitive.Int.read(b);
        let lastGiftSlug = flags & (1 << 1) ? await Primitive.String.read(b) : void 0;
        let termsUrl = await Primitive.String.read(b);
        return new Raw2.smsjobs.Status({
          allowInternational,
          recentSent,
          recentSince,
          recentRemains,
          totalSent,
          totalSince,
          lastGiftSlug,
          termsUrl,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.allowInternational ? 1 << 0 : 0;
        flags |= this.lastGiftSlug !== void 0 ? 1 << 1 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.recentSent !== void 0) {
          b.write(Primitive.Int.write(this.recentSent));
        }
        if (this.recentSince !== void 0) {
          b.write(Primitive.Int.write(this.recentSince));
        }
        if (this.recentRemains !== void 0) {
          b.write(Primitive.Int.write(this.recentRemains));
        }
        if (this.totalSent !== void 0) {
          b.write(Primitive.Int.write(this.totalSent));
        }
        if (this.totalSince !== void 0) {
          b.write(Primitive.Int.write(this.totalSince));
        }
        if (this.lastGiftSlug !== void 0) {
          b.write(Primitive.String.write(this.lastGiftSlug));
        }
        if (this.termsUrl !== void 0) {
          b.write(Primitive.String.write(this.termsUrl));
        }
        return b.buffer;
      }
    }
    smsjobs2.Status = Status;
    class IsEligibleToJoin extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'smsjobs.IsEligibleToJoin';
        this.constructorId = 249313744;
        this.subclassOfId = 1589076134;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.smsjobs.IsEligibleToJoin();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    smsjobs2.IsEligibleToJoin = IsEligibleToJoin;
    class Join extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'smsjobs.Join';
        this.constructorId = 2806959661;
        this.subclassOfId = 4122188204;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.smsjobs.Join();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    smsjobs2.Join = Join;
    class Leave extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'smsjobs.Leave';
        this.constructorId = 2560142707;
        this.subclassOfId = 4122188204;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.smsjobs.Leave();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    smsjobs2.Leave = Leave;
    class UpdateSettings extends TLObject {
      __response__;
      allowInternational;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'smsjobs.UpdateSettings';
        this.constructorId = 155164863;
        this.subclassOfId = 4122188204;
        this._slots = ['allowInternational'];
        this.allowInternational = params.allowInternational;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let allowInternational = flags & (1 << 0) ? true : false;
        return new Raw2.smsjobs.UpdateSettings({ allowInternational });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.allowInternational ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        return b.buffer;
      }
    }
    smsjobs2.UpdateSettings = UpdateSettings;
    class GetStatus extends TLObject {
      __response__;
      constructor() {
        super();
        this.classType = 'functions';
        this.className = 'smsjobs.GetStatus';
        this.constructorId = 279353576;
        this.subclassOfId = 3448711973;
        this._slots = [];
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        return new Raw2.smsjobs.GetStatus();
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        return b.buffer;
      }
    }
    smsjobs2.GetStatus = GetStatus;
    class GetSmsJob extends TLObject {
      __response__;
      jobId;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'smsjobs.GetSmsJob';
        this.constructorId = 2005766191;
        this.subclassOfId = 522459262;
        this._slots = ['jobId'];
        this.jobId = params.jobId;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let jobId = await Primitive.String.read(b);
        return new Raw2.smsjobs.GetSmsJob({ jobId });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.jobId !== void 0) {
          b.write(Primitive.String.write(this.jobId));
        }
        return b.buffer;
      }
    }
    smsjobs2.GetSmsJob = GetSmsJob;
    class FinishJob extends TLObject {
      __response__;
      jobId;
      error;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'smsjobs.FinishJob';
        this.constructorId = 1327415076;
        this.subclassOfId = 4122188204;
        this._slots = ['jobId', 'error'];
        this.jobId = params.jobId;
        this.error = params.error;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let flags = await Primitive.Int.read(b);
        let jobId = await Primitive.String.read(b);
        let error = flags & (1 << 0) ? await Primitive.String.read(b) : void 0;
        return new Raw2.smsjobs.FinishJob({ jobId, error });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        let flags = 0;
        flags |= this.error !== void 0 ? 1 << 0 : 0;
        b.write(Primitive.Int.write(flags));
        if (this.jobId !== void 0) {
          b.write(Primitive.String.write(this.jobId));
        }
        if (this.error !== void 0) {
          b.write(Primitive.String.write(this.error));
        }
        return b.buffer;
      }
    }
    smsjobs2.FinishJob = FinishJob;
  })((smsjobs = Raw2.smsjobs || (Raw2.smsjobs = {})));
  let fragment;
  ((fragment2) => {
    class CollectibleInfo extends TLObject {
      purchaseDate;
      currency;
      amount;
      cryptoCurrency;
      cryptoAmount;
      url;
      constructor(params) {
        super();
        this.classType = 'types';
        this.className = 'fragment.CollectibleInfo';
        this.constructorId = 1857945489;
        this.subclassOfId = 3572127632;
        this._slots = [
          'purchaseDate',
          'currency',
          'amount',
          'cryptoCurrency',
          'cryptoAmount',
          'url',
        ];
        this.purchaseDate = params.purchaseDate;
        this.currency = params.currency;
        this.amount = params.amount;
        this.cryptoCurrency = params.cryptoCurrency;
        this.cryptoAmount = params.cryptoAmount;
        this.url = params.url;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let purchaseDate = await Primitive.Int.read(b);
        let currency = await Primitive.String.read(b);
        let amount = await Primitive.Long.read(b);
        let cryptoCurrency = await Primitive.String.read(b);
        let cryptoAmount = await Primitive.Long.read(b);
        let url = await Primitive.String.read(b);
        return new Raw2.fragment.CollectibleInfo({
          purchaseDate,
          currency,
          amount,
          cryptoCurrency,
          cryptoAmount,
          url,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.purchaseDate !== void 0) {
          b.write(Primitive.Int.write(this.purchaseDate));
        }
        if (this.currency !== void 0) {
          b.write(Primitive.String.write(this.currency));
        }
        if (this.amount !== void 0) {
          b.write(Primitive.Long.write(this.amount));
        }
        if (this.cryptoCurrency !== void 0) {
          b.write(Primitive.String.write(this.cryptoCurrency));
        }
        if (this.cryptoAmount !== void 0) {
          b.write(Primitive.Long.write(this.cryptoAmount));
        }
        if (this.url !== void 0) {
          b.write(Primitive.String.write(this.url));
        }
        return b.buffer;
      }
    }
    fragment2.CollectibleInfo = CollectibleInfo;
    class GetCollectibleInfo extends TLObject {
      __response__;
      collectible;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'fragment.GetCollectibleInfo';
        this.constructorId = 3189671354;
        this.subclassOfId = 3572127632;
        this._slots = ['collectible'];
        this.collectible = params.collectible;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let collectible = await TLObject.read(b);
        return new Raw2.fragment.GetCollectibleInfo({ collectible });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.collectible !== void 0) {
          b.write(this.collectible.write());
        }
        return b.buffer;
      }
    }
    fragment2.GetCollectibleInfo = GetCollectibleInfo;
  })((fragment = Raw2.fragment || (Raw2.fragment = {})));
  let langpack;
  ((langpack2) => {
    class GetLangPack extends TLObject {
      __response__;
      langPack;
      langCode;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'langpack.GetLangPack';
        this.constructorId = 4075959050;
        this.subclassOfId = 1382427989;
        this._slots = ['langPack', 'langCode'];
        this.langPack = params.langPack;
        this.langCode = params.langCode;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let langPack = await Primitive.String.read(b);
        let langCode = await Primitive.String.read(b);
        return new Raw2.langpack.GetLangPack({ langPack, langCode });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.langPack !== void 0) {
          b.write(Primitive.String.write(this.langPack));
        }
        if (this.langCode !== void 0) {
          b.write(Primitive.String.write(this.langCode));
        }
        return b.buffer;
      }
    }
    langpack2.GetLangPack = GetLangPack;
    class GetStrings extends TLObject {
      __response__;
      langPack;
      langCode;
      keys;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'langpack.GetStrings';
        this.constructorId = 4025104387;
        this.subclassOfId = 3350672701;
        this._slots = ['langPack', 'langCode', 'keys'];
        this.langPack = params.langPack;
        this.langCode = params.langCode;
        this.keys = params.keys;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let langPack = await Primitive.String.read(b);
        let langCode = await Primitive.String.read(b);
        let keys = await TLObject.read(b, Primitive.String);
        return new Raw2.langpack.GetStrings({ langPack, langCode, keys });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.langPack !== void 0) {
          b.write(Primitive.String.write(this.langPack));
        }
        if (this.langCode !== void 0) {
          b.write(Primitive.String.write(this.langCode));
        }
        if (this.keys) {
          b.write(Primitive.Vector.write(this.keys, Primitive.String));
        }
        return b.buffer;
      }
    }
    langpack2.GetStrings = GetStrings;
    class GetDifference extends TLObject {
      __response__;
      langPack;
      langCode;
      fromVersion;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'langpack.GetDifference';
        this.constructorId = 3449309861;
        this.subclassOfId = 1382427989;
        this._slots = ['langPack', 'langCode', 'fromVersion'];
        this.langPack = params.langPack;
        this.langCode = params.langCode;
        this.fromVersion = params.fromVersion;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let langPack = await Primitive.String.read(b);
        let langCode = await Primitive.String.read(b);
        let fromVersion = await Primitive.Int.read(b);
        return new Raw2.langpack.GetDifference({
          langPack,
          langCode,
          fromVersion,
        });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.langPack !== void 0) {
          b.write(Primitive.String.write(this.langPack));
        }
        if (this.langCode !== void 0) {
          b.write(Primitive.String.write(this.langCode));
        }
        if (this.fromVersion !== void 0) {
          b.write(Primitive.Int.write(this.fromVersion));
        }
        return b.buffer;
      }
    }
    langpack2.GetDifference = GetDifference;
    class GetLanguages extends TLObject {
      __response__;
      langPack;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'langpack.GetLanguages';
        this.constructorId = 1120311183;
        this.subclassOfId = 671683273;
        this._slots = ['langPack'];
        this.langPack = params.langPack;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let langPack = await Primitive.String.read(b);
        return new Raw2.langpack.GetLanguages({ langPack });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.langPack !== void 0) {
          b.write(Primitive.String.write(this.langPack));
        }
        return b.buffer;
      }
    }
    langpack2.GetLanguages = GetLanguages;
    class GetLanguage extends TLObject {
      __response__;
      langPack;
      langCode;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'langpack.GetLanguage';
        this.constructorId = 1784243458;
        this.subclassOfId = 2880211383;
        this._slots = ['langPack', 'langCode'];
        this.langPack = params.langPack;
        this.langCode = params.langCode;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let langPack = await Primitive.String.read(b);
        let langCode = await Primitive.String.read(b);
        return new Raw2.langpack.GetLanguage({ langPack, langCode });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.langPack !== void 0) {
          b.write(Primitive.String.write(this.langPack));
        }
        if (this.langCode !== void 0) {
          b.write(Primitive.String.write(this.langCode));
        }
        return b.buffer;
      }
    }
    langpack2.GetLanguage = GetLanguage;
  })((langpack = Raw2.langpack || (Raw2.langpack = {})));
  let folders;
  ((folders2) => {
    class EditPeerFolders extends TLObject {
      __response__;
      folderPeers;
      constructor(params) {
        super();
        this.classType = 'functions';
        this.className = 'folders.EditPeerFolders';
        this.constructorId = 1749536939;
        this.subclassOfId = 2331323052;
        this._slots = ['folderPeers'];
        this.folderPeers = params.folderPeers;
      }
      /**
       * Generate the TLObject from buffer.
       * @param {Object} data - BytesIO class from TLObject will be convert to TLObject class.
       */
      static async read(b, ...args) {
        let folderPeers = await TLObject.read(b);
        return new Raw2.folders.EditPeerFolders({ folderPeers });
      }
      /**
       * Generate buffer from TLObject.
       */
      write() {
        let b = new BytesIO();
        b.write(Primitive.Int.write(this.constructorId, false));
        if (this.folderPeers) {
          b.write(Primitive.Vector.write(this.folderPeers));
        }
        return b.buffer;
      }
    }
    folders2.EditPeerFolders = EditPeerFolders;
  })((folders = Raw2.folders || (Raw2.folders = {})));
})(Raw || (Raw = {}));
export { Raw };
